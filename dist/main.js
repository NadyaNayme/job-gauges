(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["sharp", "canvas", "electron/common"], factory);
	else if(typeof exports === 'object')
		exports["vos"] = factory((function webpackLoadOptionalExternalModule() { try { return require("sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return require("electron/common"); } catch(e) {} }()));
	else
		root["vos"] = factory(root["sharp"], root["canvas"], root["electron/common"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./a1sauce/DataImages/ErrorHandling/large_buffs.data.png":
/*!***************************************************************!*\
  !*** ./a1sauce/DataImages/ErrorHandling/large_buffs.data.png ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkAQMAAADbzgrbAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAAZQTFRFWpYZAAAAeyVY+wAAAAJ0Uk5T/wDltzBKAAAAFklEQVR4nGNkAAHG+gYGhofDhAT7CADt8j/lmCLDkQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./a1sauce/DataImages/ErrorHandling/medium_buffs.data.png":
/*!****************************************************************!*\
  !*** ./a1sauce/DataImages/ErrorHandling/medium_buffs.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAAZQTFRFWpYZAAAAeyVY+wAAAAJ0Uk5T/wDltzBKAAAAFUlEQVR4nGNkAALG+gaG/4OPADkNAKo+O+U+/WE+AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/magic/blood-tithe.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/buffs/magic/blood-tithe.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABWJJREFUeJzdlntMU1ccxw+FthQFQR6CFlBQKNIK2BYor4I8BUp5XZGXuoA8nBY1LJk6rDrjXjqdj23OmU0Xs4RMN6YC2rLpdDqi21TQ4cTFP8zcdApu0wi99353LmCMiQJLNFl2kpOb3nvO7/P7/h7nlJD/wgAxi0CI3fPmiPSe08eSQZA9GMb+uVAENcLzc+/Q8k7lrB2TZDK5ANypVoufucqHBuvJuLw/AvXo0eV37g3QzKWvnOh0eKYqh2B2CWKPCItkSk+/2gBbDINL4Wmf5LnJlWRIpZmG+lkxRTLZJPkhcVBXx/gQri+G4RBbhB6t8fphRexi+t1VgEKvdxjReWD40IMMhGrMgTFRrd/b+6J7aizLxRaxiC4AdIW4FpbevNwzMIaucagiQi7Nj6kEiB3A2DOjCfnQZofdYxO3nXNU4rijD3tbkws2Op/v0xo56Bjc0xh6vlHErabrvAWVZ4UCehwg2HDbvj41nElRjxsJRjaMSTWddU7AMZE7e8ZLhf64ubBpc9CnyWGhzQUi83F9Rvrpdd7TMoVI0Cml06d+vjzDui9xQ+/P5WcPf5zTolarnQDzk3MMMhjnGufk7DaXLP6E1B9WkSffrUgGaLEIRdOvzuH7ZxooNB9/z8zqOxESvbNpo+adX04aO3ovz+PAm3DBWorEiNCCAZvmp8IGK1IlDla1uJbeOSVT4iuxF9/m5IeeqELwWqMAg00tqMzm+NBswFAI3FgC3F8O3DNxl0+UczUF8V9SO85VNMTD5m2wtJ189o+vPt/unIQ2qTd3ROSB9okRsMUVwxaRDZuGAsOoSq2BZ9trWdufS1ncMbHXf5zPra1OfxCnUqWYzURkfpqqR+oahUTL9niYmtpdS2CV+rJWqQ+a7T3RrcyAUCT9agqkqrj9lbDdXwbcrkNv90J2x4pc1OZm7KX7Hc2jaA8hb4I3os0eSzae9lgKqyyUtUi9cVQyARYXf/TEF4MLygK7eR5YCuJu1uHBr4v43WtzsbJsTo9WodARhvbiaI64IRhZ6V5V87VPA6wuCZxF4oOjxBuHiRvaXTXgVleD6zGBvbUU/B0TPt2Uy66vKEOtMqmdbnUfVZ8NweyExSnSlOT9rq/bLOJiWGTT+ONBcnw3JwhnXg3GzYvlFPYScLcOLbsZrKkuYVdFZSOfBDXJ5UTGkFHCaFKFWIsNsUUVBwu2206Zyvhz70Wi82AEOts0uGgJx5UjkUDvyzh9oATraouxMi2XrXQIQ4Gj8l2618FMRigMYTQOynfQhmQmfLar7lbX8WR0WMP5S0dn4kprOLpbVOj4QoVD7yvx4ZZSbG4woSGvEGWy6WyNLBIGiXLFgMMjwYQyVauJWCLRKfZ90NB19aQBV5sVtqutKq6zScW27NJybzdk8IsqK+ht04Bs40a8UvsGqr1moEQcwtU46ZAqDl4wIkw4ofV6QsOn9mjcu+rYjR8KcaEpHK0fpWLrulLUVddjbtFbMOZshSHtNXa2bhGbEJzMJ07RoG5KCv+CJAwLnWI4nTQwfTDvw1RiYyNjr9frHXduWbLH0rgAb64w/lU578XfDFkNP6VmbPo2M3Nb82xdfVdKCMPNCkiD3i8eCf6xiPSN5AtCZtuWuc/iKqS6u9PEE8PJ0Ck0XBTt0tKixy+vzWECAxOpd1mRhOgUjsTNl35zo1P4X+I32SUwPWJS0pqYyVkWfaDx95Sp+UgKysNiRSkWOyVckxLp5JFA5AnePPwtEtqAYeip8qh3hPfObuIJoWE+8aVR/tnbMoNLz1fJC48ITv2bshcN3rBPvmUHepAaGzL4cI3QKl4BAWo/+pSMRtn/a/wDtJZ3mAHE3z0AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/buffs/magic/critical-strike.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/buffs/magic/critical-strike.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/magic/glacial-embrace.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/buffs/magic/glacial-embrace.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABTBJREFUeJzllntQVFUcxy+P1QWxErNaRakcxQxGinTEVJpgwJEeQ7pqgyaKrqUOmRLkI5ZelBn4gCQg0gUWYVEC5LWo4MAiICCisIBoSipIkCssIOx9fDtnWRqncVz+sH/qzPz2zp7zO+fze557Geb/NCw9PDzsyNOCiJUKsPpXKAAs6fN4+fk1l1pbf5wyxd6BAuPi4kRkzeJxw4wHbjkQ79dB/ujudjUkKZWryJQtEWs8Ti9NMIvXlrzzSlZbt+4+mWBZA7QtLcl+K/ycGZOXcrnc8nExLW1sbBzStLebz/fz/CBn4EG97Ll3K6+wcCtZf4pCyZT1KI1/pAIN1biU2iuFZ/sBbc8Ax4HlYBo32tryt4eELCA61jKZTDSS5wcB9AypVGo+5KbN1tHqqugyEsf8jh6ue4gFyxuEQZ41etk30K8r1WjCiN5z1MuamhqRycgRAD1jQvCuXa5eXl5PmoMxnyeeCCq5JyC3o5cr6+6HQeCMMsgbOMHk5e/t7RXyvXuX0kgQGUtEEizfvUSZdSKivOFiTbwiucDNzc32UTBjnNd9FvFW9vVeQd3Zh6zbPUKTnpYLjyECHOJZgYgxtPqBgSFNVWXcsezMg8W1VZc1DRf55u525Badhvci72XmwmisSCe3xS4qbdfdoi4D8tp7BOIh/jQYCI4zAqmX97khfiSXje1tqL7WgsprTXxecQm/5YOgHHLOeJrXRwJNpS1Jqr5Vf+YuUNDRy+e090JDwskKvBFEgSwNK8cKtVebueKLNVxlayNXWF7Gy4O/HpzvstCLnmO2TUzJtvmpuDm7RGeEcYV39MgmwNa+QQiguWPJrwDtzesgIFS0NKKkrpqL+ioGMunWJLJfTEBm22OkSCwj0kt/KO4msNt6Tt2pp1Co7/RCR8JJx/U/OnC2vhbnmi6jtLFeOPR9LD7d8KXO2XmBOzPci+avuJGK3HEg/cP8mwLybur5IlIoZ7oHoe4ewoVeFp29OpQ21EGjvYSKK42Iif6ZkwdFYtkeRRXZOnFUfWaCWVDlN5Zt9szQ9rFFnQKKOvqFnGvtSK2uQ0zeSWSWlaCiqQGVV5uQmKRCWGAYF3jwFOZG5WbTFEhVo7xHTbEWvT5/bWDCyTb2yJl6ISYrG5GpR7FXEY99yQk4/Gsaan5rhSq3AOGbvsBHYcmct6oR7vLkw2SvtfwfN8tDh1SqohZZz3BYujh097GuQ8oMRCp/EfanKRCTmYrDOWmISlcgJGofNm77BrsDI7BjZwK8jpzjfNMbMC8kdqfRYHMwWqak40VjGMdZ27Yda07IVCOxQMUmFhzno08ouZ37D/CrZKHCwsUbMHvGakyeuBKeb4ZjeUoFPBWVvG9yHeZs/jZgVDDyhqbhezo0OONsSp4G0RlK7ImMhf/GcCzy+BizpgdimiQAkx3Wc5NmrufGu7wvPOHuj7djTwu+qRfgk3COd3pviw89y2wlOnp4iGWyGEXYdylYGRCqnztvw50XHFY0SexXlEvsV+fbO65rHvdSAC+esx5jXddC7LoGVjP9BMel29nl6Zd5n/jynkmzF7gy9JPCHGz2fG/7Jb4yqa2tE7HOZh7D2M0ivTmVLE0gYseImWmM5FUfkaNv+JjpK0+NdVrTaeMcCMvp/pgbpMS7R8/fIPfx88zw94vZ8bcSQK0z/iexl1pJGemDrxA6P54RPfuySOLpbzXVL9rOZVO9+ydJaqNRzCh7bPguG76MH65B1mjDDjftiA7N9TNi8YvTyHPMaD3774y/AIX3RYVTOX2mAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/magic/greater-sunshine.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/buffs/magic/greater-sunshine.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/magic/instability.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/buffs/magic/instability.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACIklEQVR4nMWUXW/SYBiGyzAGVRgbSlgKK0BZS+k3A7oW2PgsGwOQCBiXzRiNzARxfmbxFP01Ro899L8Yf4GHHtwCRpMlnjDaeCXv4XNfvd8nbwliCTxDHcmvY3CfHiL05SmcDQHL5F2gb7ZwNRtG5SSJ0yGH8UiA8USFw3vdOokh6UjLNAb9GB4/YsBIt+EzAiA2iLkkUauikruzvJBXt6Ad8aBe50FcWwGRvgLCICAneGTPNBDrNxaX8BHpwlAlJ+LegMZqjwXR9oKouHByGse7cxX1SQneSQvfPv6kFxbdNQ/+ivJ5Cey0iTM73UPXB1fTgwdDBm/fyKi9L8P9oQ0mxC/ehg4H0SsN5oOyQONwn4N6TMGl+7E/TOLFmTiXmJMinF3l8juJUiQUnoGW4tHvZKbBCsolEvX7HF6epzB6pWJzZMDhu7nc4tNiAvVdDc1aBs+fKRiPZITjQZAhNzaCbhB+z3KCFM+iWkiDi1MoG9toVXMoaKJ174ONUYhRJIKBdagiA01JopCVQZGkdRJ+KwJN5VHcUSBxcejyjnXhf5h99baUQIIOWx8+w8zr4GnOnvDfAgO+tVV7BN8//1BEJgo2FrWvQbtYQ1FP2SeY0SzvISNI9krqu3mw1CV+cv9i2D2eB3WKTRwd9NAo5dA1TQT8PmtbGGkSncMo1rwuOBwr82OpYIZgbOKWGbfv/ht7GlICjVIhYp9ESFp89/+DX5nr3Kxd0jHZAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/magic/sunshine.data.png":
/*!**************************************************!*\
  !*** ./asset/data/buffs/magic/sunshine.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/Necrosis.data.png":
/*!**************************************************!*\
  !*** ./asset/data/buffs/necro/Necrosis.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/darkness.data.png":
/*!**************************************************!*\
  !*** ./asset/data/buffs/necro/darkness.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/living-death.data.png":
/*!******************************************************!*\
  !*** ./asset/data/buffs/necro/living-death.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/phantom-guardian.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/buffs/necro/phantom-guardian.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAYAAABcrsXuAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAQESURBVDhPLZTpU1NnFMbvv9Bpp9YkZCMhJBCyAAkhIBBR0rrBRAsBLPsaI0sNS9gdEeiECrKqaK20TnWKuMwUy3Ta+q1fO+1My/jH/HrupR+e+9733Oec8zznfecquboYLn09efo4bkMLHkMHBUYVLeRnXZW1Fa/svcZefKZ++oY3cMs3j7Ht/3iPBk9WB3mGJkEjLkNcW/P1stc3ojj1n0uxpuMGWe1ags+UwGuSRCniM3XjN/VR0zDA0t4Bawe/MvnNM4n3SPwaheYB/Jbrwu/CndUmaNWginWr0LeguA1fHDcwdkoDKWhOUmQZotAyiM/cL2uCWHKSqSd73PrhDZmXh2wd/k5lrJOA5QYB6wjF1mHNpSpMreETUV7Ze8R9gaENRQ16jF0aodCcoMg8RFASg9YxKZDCX3OZ4fXHjDx4ytTuC2afvsLhC2N3BykNt1GaPaXxi82DkjtAkUlgGT4WqTXqQPFbBqR4UrMekA9q4ZBtgjLbLGF7mtapZZJf3ye1vUtd3xj5wQj+8nO4gxWczMqm3H5LGk1QYh2lxCIQcUHruLgTgSLaa+pEKRbLxaJELR6U95AkhG1znMpZ4mLtNInFDbrn17nUfYPgmcuUnInhL4viLi5Hn2XFaY8K/6YmqtQ2o+WGbNNaPU28uQ8loCrInhTClGa9zC4JjgWqHMtEGnqJ35gXNxnMTj/u9iQFAxN8sriG/mMdOoMZo80lgr6iPGeRChF2StYyaaS6CsjY1BEqqr1S+4yQ5oW0oJEiuRkirhUi4RFi16bJ8Yaw5QXwJEY06OYy6D46gU5nxmYvo9q5QlWu8HNXqXRkRKg6whlC1rSMbhRFnWfYPkelqIk4VqgWYnXuXaKuTc5eGOJ8+xCuokrMDi/+RApvcpSTt1bQn9BjNRZTnbcq3G1qBGedm9LojuaoqW5TG506QiUsj/Kc21SI+mrnGp+6tojmbfNZ/g5n4teINieouNSKKTufov4UnoE0H2a20cuoaj3fc8H9Lefdjzjn3pG8e0zO/cjOq0NmMzs0X1yVizGPUm5f0DqfFgU1or7+9EM2nr/BkR/AYLBSVdsmh32FUHyc5vm/qF3/kw8e7qOTQ4/5nlPnfUadNBsbesn2/lse7b0llc7Q0p1mJH1XG7+i2uvpusfth8+Y29plZuM7xpd3sMiB6vRGbDYv4cE1ri7+TcvCP9RtHNFY9JomQX3hHrP3n/L4p994fvCO8ZlVrqeWCEdq5fZV0TuonvMSSiy6ypdLWwzOr5G8uULf9DIX471UdLwm/OCI6IP3NNw9om3xX9oXjqhff0+y7hfuv/iZ/Xd/8ER+NbOL9xidvkPl2Ss0d6ZpbB+j+nwzV7sm5EJk+A/744X0XACaYAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/buffs/necro/putrid-zombie.data.png":
/*!*******************************************************!*\
  !*** ./asset/data/buffs/necro/putrid-zombie.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAulJREFUeJw1U81rVUcUP+fMzHv3XRNNoFThCSl+oPhJ6aKF0kVcCEp1UylFrF256MqNqy4E40JQ/DNcaRNESEDaRSnNIgQEFUys+IW1pYbYF1/ey71v5pz+5ol3cS93Zs7v/D7O+EPbzzELSxAKxESmahEfYSfkmRvYJVIroztcFie2Ppq/w8/rvWdOPbp9k2uamJxMc+8GD7uUzIsIGcociomZ2NjETIU9DxeZPRZld1l/FZdmf+barEw4x5F2Hj/my1b8LHB06cWGJxSIsKHGoThTIyVORKCDncAU2Jm0i1e/z368a9/4nj1LN27Gbh/9/plfHNh6f9Dd/8Op6pcOmgs6c35QmQkaJ1NAgyHeYUjQeIV2HT3+9Nbs5k92UNLl6Rlphd7rN9SgA6e/q9e6blPDf9Dis2vZoACF5pJZZkXkHRaN9KUGHd18cOLJwl0GV29klJoclKlnNF3Hf5N30sCq4zBk4d1718gp7IdgHloJ3Qk+yH9/vXRvUmwZWiIPGVg0xWFaEX6r4IWkUCwue5wtAxyAoEvEaPgLKAnkRgNv2I5vTj6+PaOxQvboZRq7b18VW8ZpNWMV0KZQREPvcpzAhWeEo5Lhsc9pQLQKXfZs7i5FnGbVhI5WDUJzRBrOTPx7p+CAEUvTudJz4Tiy9CzVubXL4aDG9KECNq33Mz5gXdKNCoqK8TGrqsSSE8yMmuy3edof3L6GttRHz3+qPVD3N0uVp84jjAd0aPdZ+lJ6IyvLd27pan+okXzVHHQ3AIP5Ii45HGzKidbCpSvut4JCsHITjPr8/DmZi+6ecT9bZx21e8RL7NoffXrmx4Xr13ighNhfJ+sjI/AKAi72dWPx8lXMl0VkU3O/p+XIHxcufjH1k7OGLDnqWE4bw4EJeJbsPuT61F2jpqeWeI8ZwfiMeTlSLE5dHd5Fi1UN53xZqHft779dG606259ubR8Iv3ruWL5hMBxj0FFRiqq0Xknb2aizdfsfhQlMvDg+e7cAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/buffs/necro/residual-soul.data.png":
/*!*******************************************************!*\
  !*** ./asset/data/buffs/necro/residual-soul.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/skeleton-warrior.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/buffs/necro/skeleton-warrior.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA1xJREFUeJxFk39oW1UUx8/98X7kpdmabE1WbVPWdVpdNzVqUafunyFChf2zUf1DZQOZhiHdP1a3gGxqB/NHddB/nBMEqZrN2RQn+0Nw3UTmDyiCOCpmNbVbkza0TZuXvJf37j3epMOdy7tcHud87vfccw7f3n6AICOEEqpT4EAAUEj0iTKgMtKcP/Q0fvEhTE+B+oHIXh9evPQ5cG5EtzbXYsZCleVu6DPzKo4T4LQexlQkJQ0WUHX2Q+bCS7vF+McwlIH/DdG5Px548B3N98pvHKSPvJz7anBLd1JEI9r8imKpxZUuJaquDhhqtLD/sdq3I3Dqu9sQw+i49HPUk7/tvA9On6N2jTS3QCxi3tGTXcl0bdhHlmoqXuFoY1fyeLG/177yKZwZv01xnXsv/sLtWul4ZuLFXnNbT9PMKlg8+tzgXGpfJDniDPat7uVUtnJGdYKoKO7mWDERFOkUNPJsGOk5/wMUbTeZxrmSgaJlY3Dh+PCmU5e1VddtCcpImBhW7MTFQqov8PwnnCoWIcU9CfubY5Bjt0CaET+d0Rcrlf2f6WWhEwaUg4Sm7KK4PK2XvEC+QgVuuru/cKSvdWDU6Njxz9WTvPzkPU7Mqpx7GyhDxPW9T9x5+BhbrtaSZ4kndEQgjCqWSpZC+PeCNWdb+SrzfD+oB9s6oLOLSLbx2bduDD3DF91J/H4y/OiubcmjpmnMfvmrM5jhwLhpoiZRFVUS5sq6WgX1pD5bVQVSMs0lt4yEhcI339vT9tqFDXtTPDF0solR+DE7e3RcSsXg0rdL7k2DhtZp7dL1VJ+otqFVn6FEVWgECmoD7vjWvLPlrlf+nv7LL2StrTt56al3y9SQoaCIhq5PfmBXclJ4t55eldc0H9/8PkVAS6cVl9QhjXZWGSMGiq4IW7yrq5A+0vbqWXUpQU6d+PrrV96sucuoQCjrzkDiiYc7e7ZPjB7a9cAZXhWUCrJGAiJQ6Kq3VzzIVzofSuXbLzjxdZwRJgOaszpT95JrFFgbl4Nfj6nhmrn2p9fdql0r8KrfQBGpfNSnhs4HXPaWNAh299m6z4FqMhRYmkqj56J6EeUmRP/A4fRHw0OJHQOjo9mrP/2be2H3gTEyNsV8URdc5zSSFEqb7oV0/48J58TIf8iTdyIW+EFBAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/necro/split-soul.data.png":
/*!****************************************************!*\
  !*** ./asset/data/buffs/necro/split-soul.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/threads-of-date.data.png":
/*!*********************************************************!*\
  !*** ./asset/data/buffs/necro/threads-of-date.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/necro/vengeful-ghost.data.png":
/*!********************************************************!*\
  !*** ./asset/data/buffs/necro/vengeful-ghost.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAANCAIAAADTzFK5AAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAypJREFUeJwlU91rFFcUv+ecO/fO7Gay25jSkCr4RWIbwUawFdKUisU+FEGQiiD9A4ogCLF9LIW8tA8+tQ/tYwuBUgyG9qVNzVNQC1W0sR+RTGyNiRpdEzeb3Z3Z+9Fz03kY7tx7zm9+H+fK4Z4xEAiC+C3ACwACSUIjKgAQwlvfsbbjfM4LIcIOhDofFkBCCOfaxhe8kHy8hcWNhEgSS7GsKFEuBqsPz++Awvd/tmgePGqZJ846RuBiBkIARWVN3asXBuLxK+idF06ikBAIEGMRKI3p4uQbGHMLovUFwsLXg9s/T9VM2znrmRCjeRdhnFLfX7Mje0anN1iJYIIgESPhA1tkwoBcPXQ6u32xP+qSDoEpgveL4wNDo0sd23bCemEZTFL8x/Tr6eQ9xo4wkagK25TAvDDY8L9SxkWHolb4JPD1TeNiorVGbNNcbuR2UwQ5ofilr5Yevl/dSRUN6fLE4cqpydDAvw9YEBIgVC6JmOHWnmhNzbTn5ljuv598+OJ43djcCSeCCFXOWvTCTqdx/vJhqD3r8xUZuLA3ILcES3b01kfdURQME8YWd34PVjtXe6vUT0luJGGkMNVRpVbFuFyZ/+UIzf7tXu0ljGWQFh4kCCFyNORZNDsoGj9Oh+iDVN+ZuELwMpFWWM5uH4OCOE9qehl5+/bA5vez2c+H2PtgmQSlqJTInvor2oogL6rbrvfeWVuY5/nh8/LJI9HEkqYu5UpkMV/4J9m9AyIwzfbmpesHvzTZcc0obE9Jy25N6Y2xGjTWkvu22LvfJZ5ndtuFc81rN+OhfRzwrQ9WD3zbw86zkNfOrFw/O8cFoJODX9i2Xe8bmZKMUpa9v42t6U4hnqMzKiejVjKn9+I2gYTp6CGbyk62XGDr7sn1wUu9/R/fzbXRMRVPiuFvSvViJbd1JwoZy+rVwe9KzaN5HiFHJMB56TfWbdMA51flT9icumpbDZsXzxORjfrdM/7PT63ycf7Y5PZZ7hrW5zx3zJKGs3fvmMvw5gnH3eEOMLmKmv/VHBhxT6H+0w8ijjwz9ODajVq1+fTYUgoDft3supZ07GoY9a2L9R+ee2lPH77d2gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/bik.data.png":
/*!***************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/bik.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAFpQTFRFAAAAMFcQKUoMEScAMVcQKUcQK04PCA8EL1MQJ0YQL1QRLVAQNV4XHTMMMlsQCxUEEB0ABAgACRUAFSIAAAMBAgYBFCIAFiMACA4AFCEACRgAEx8AChEABxMA5a7YgAAAAB50Uk5TAP//////////////////////////////////////9DgaNwAAAFpJREFUeJytjTcOwDAMxC69997+/80EgafAHAyEkBZR0kkGT4jPKmBlI4xQxYnSDG3uEFKgKSvVbNU4hDjRsur+S+nRDG9ZGaeZPy7rd7Lx8i4ddnM+ffGh4QaJHgHSZWJtwAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/blackstone.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/blackstone.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAJxQTFRFAAAAKxMvFgYZBgMMUD4iAAACFgUXEggSJRAoHg0gWUclAAABJRAkGw0bJhEpHRIUEAgTJBEhGQ0cDQsKGRETRUAzDAoHQD44BQQEHhYfBgUHBQQGMCglIx0hMCYULygzY08sFxIZBAMFKCMoRDlLGhUcFhIUTz8xGRQVHRcTIBwhXUkoJB0lFxUdEA4SPzMiGBMbIx8mZFAwGxgfZiWCgAAAADR0Uk5TAP///////////////////////////////////////////////////////////////////wcEN2IAAACCSURBVHictc7HEoJAEATQNqAioKAosGBCDASV8P//Ru1ynJ3yon3oPryqqQG+ZsTKeMLJ1JA9m+tsYQJLSye2I3ulkbUr29tQ2ar2KeyG2XMvBhz8NyEHkVATE0gOAkfgJIicL+kVyG7ae3fg8QRyKgVQVni9CXxqNQ2VIW3HwC/SAxE8BZFmHjlyAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/deathspores.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/deathspores.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAEtQTFRFAAAAU1laMTQ2bHR1TVJUOjQohY6QTFFTU1haW2FiHiEiAwIDVWVOJCEaRFA+Pkk4ZnZbHSIaXGpQWltEWmlQS1hESU06UWBJVlM9mDpC4gAAABl0Uk5TAP///////////////////////////////zBTSd0AAABPSURBVHicY2CgEWDEIc5EsknMLDilWLELs5FsBwM7BycXN4LLgyTFi6qSD7ch/NiFBRgYBIWwSwkT5TgUIIJdWBSIxbBLieM2TIJ0+2kFAFDIAS1Y11HCAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/diamond-bak.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/diamond-bak.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAgdQTFRFAAAAmo6NU01MCgoLh319Pzo5CAcIc2ppRD8/CQkJi4GBWVJSIR4efnV0MC0thXt7c2lpPzk5CQgJeW9vbmZlSUREHhsbb2dmIiAgT0pKRkBAUEpJU01OODQ0gnh3TEZGGhkZSRgWNCoqa2Jil4yLQj08FxYVX1hXJg0MKCUlfnRzYFhYNTExDQwNgnd4QDw6b2ZmFQQEQhUTgHZ1R0FBY1tbaGBgPDc3enFwUElJBQECVzo6LSYmi4CAXVZWKygomo6OODU1OBEPDQkJaWJhVU1NKigmhXx7W1VUNDEvHQgJAAABcmhohXp6Y1paKiYmbGRjUkxMEhESJQoKOxISFRMTY1hXCAAAJAkJEgwMEQMDFhgTJSUiHxcUDgoJOxQSISEdJyMgHxsYHx8aGRAPGxIQEBAOIQoKFxEOFAYGHxsaGxkYFRUSCgEBDw8NDgEBERIFGBoYHBwYGRkVCAgIAQECGxMSBAICFRUVDw8PAwMCDg4PCgoKAAAAExMTJiUjGQ8OIyAeAgICBwcFFRUTJSQhHBMRIR8cKCglJiYjGhoYDQAADwwMFhYTCwsLGRkZAwMDBgMCFAcGExMSEhIRDg4MBQUEFQcGJCQhHBwZEgUFEBAPKyklJCUhHh4cKysnIyMgFxcSBAQEGxIRExYTGRkWGxsYFxcUFRUUHx8dDQ0NBwcHAwMERIvk+AAAAK10Uk5TAP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////KvguUAAABRElEQVR4nGNgAAFGJmYgycLKxoAO2Dk4GRi4uHkYePlQJfgFBIUYhEVExRjEJdD0SEqxMbBLy8jKyStgmMfAoKikrMKrqqaOKaPBoKmlraOrpw/iGEAFDYHYCIiNJU1MzcyBDAtLqIwVlLa2kbW1s2dgcBB3RDPQydmF19WNgcHdwxNNxsvbx9fPn4EhIDAILhYMIkJARCgQh5kgVIeDiAgQEQljAEFUdExsHExJPEJ1QmJSckpqGoybjpDJyIxJyMrOgXFzETJ5+QWFRcUlpQxl5WguZaiorKquqa2rb2hEl2Foaq71rm1pbWtHdicMAGU6OruAjG4g7kHV2NvXXzKBgWEiA8OkyWhmTplaOy1h+oyZsyYlYNjnPTthztx58xcsnIAhtShh8ZKly5bXeGPKrFjJ2bdq9SIMCRBYxbmmFsoEAKeTRnPJmktzAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/ful.data.png":
/*!***************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/ful.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZBAMAAAA2x5hQAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAA9QTFRFAAAAAAAAGwkAAAABBQIBhZLXkAAAAAV0Uk5TAP////8c0CZSAAAAP0lEQVR4nGNgAAIBBmTAiMJjUGDAARhRtQmj8VF5uMQF0XSx4LKNKNMYcagioE0ARR+zIapaQZyWCaDwsFgOAOhnAUcqUHS3AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/hydrix-bak.data.png":
/*!**********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/hydrix-bak.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAhBQTFRFAAAAyZs+aFEgDQoFsYc4RDQVBwUDlHItUD4ZCggEsYk3cVcjKSANjm0sNysTclgjj28sRDQWBwYDeV4ljW0sWUUcHRYKjWwrW0YeNikUXUcdXkkfZ1AfMCQPoXwxXEceFhEISRgWJhkDSzkYqoI0pH00TjwaExAIUz4YJg0MHhcKg2Qod1wnQTMTCwgEqYE1PS4RkXAtFQQEQhUTcFYjXEYbQTMWZU0ggGIoZ1AgBQECTCoYJBcEKSAOmXUvdVslLCEQtos4Pi8VOBEPCwUBYUsfnXgxaVEgJBsNrYU2dFkkMCYSHQgJAAABTTwZf2Inel8mIxsNY0wgZ08iJQoKOxISGhIHVT4bNCgRCAAAJAkJEgMDEQMDFhgTJSUiHxcUDgoJOxQSISEdJyMgHxsYHx8aGRAPGxIQEBAOIQoKFxEOFAYGHxsaGxkYFRUSCgEBDw8NDgEBERIFGBoYHBwYGRkVCAgIAQECGxMSBAICFRUVDw8PAwMCDg4PCgoKAAAAExMTJiUjGQ8OIyAeAgICBwcFFRUTJSQhHBMRIR8cKCglJiYjGhoYDQAADwwLFhYTCwsLGRkZAwMDBgMCFAcGExMSEhIRDg4MBQUEFQcGJCQhHBwZEgUFEBAPKyklJCUhHh4cKysnIyMgFxcSBAQEGxIRExYTGRkWGxsYFxcUFBQUHx8dCQkJDQ0NBwcHAwMEznoh6AAAALB0Uk5TAP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////KyKimAAABRElEQVR4nGNgAAFGJmYgycLKxoAO2Dk4GRi4uHkYePlQJfgFBIUYhEVExRjExdD0SEiyMUhJy8jKyStgmMfAoKikrKKqpq6BKaPJoKWto6unbwDiGEIFjYDYGIhNTM3MLdSADBFLqIwVlLa2sbWzd2BgcOR1QjPQ2cXVzd2DgcHTyxtNxsfXzz8gkIEhKBjhxBAQEQoiwoA4PAKhOhJERIGIaBgDCGJi4+ITYEoSEaqTklNS09IzYNxMhExWdlxSTm4ejJuPkCkoLCouKS0rZ6ioRHMpQ1V1TW1dfUNjUzO6DENLa71vfVt7RyeyO2EAKNPV3QNk9AJxH6rG/gkTyyYxMExmYJgyFc3MadPrZyTNnDV7zpQkDPt85ybNm79g4aLFkzCkliQtXbZ8xco6X0yZVavXTFi7bgmGBAisXbO+HsoEAF2RSSdLzUoGAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/jas-dragonbane.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/jas-dragonbane.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAFRQTFRFAAAAZmdvWltia2x0ZWduXF1kWFlgVlZdSDshFBAHamtzYmJqbG52PCYEOCUAHhUAOycAPSgAMiEAHRMAOyYAOicAIRYAPSkAPCYANiQAKhsGEA4CxFLivgAAABx0Uk5TAP///////////////////////////////////6l3rVEAAABZSURBVHicrY1JEoAgDARHcV9wV9T//9MTF2FSSNmn1HSSASxJCoai5jMZkHNbhD9SJVVVjaaltgvv+I+eGj1405iSEZj8ZgaW9R1udtid/UPsMdSc1y1eSjxH/QGM9BKC8gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/onyx-bak.data.png":
/*!********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/onyx-bak.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAblQTFRFAAAALysrEBAQAgIDKSYmCAgIAAABGhgYJyMjExISCAQFFxUVBgYHGhYWDgwMGRcXDg0NAwAAHRsbAAAADw8PAQEBCQkJEg0NHBsbDg4OSRgWCQMDHhsbIRwcDQ0NJg0MDgsLExERDQsLKCUlAwMDGhoaFQQEQhUTDAoKDwoKCAAADAsMFRUVFhUVDAwMBQECJw8PBQICFRQUFBQUJCAgHRoaOBEPBAEBDgQEGhcXEhERIiEhFBMTHQgJAQAADwwMBAQEExAQBAMDJQoKOxISBQQEBgICJAkJEQMDFhgTJSUiHxcUDgoJOxQSISEdJyMgHxsYHx8aGRAPGxIQEBAOIQoKFxEOFAYGHxsaGxkYFRUSCgEBDw8NDgEBERIFGBoYHBwYGRkVAQECGxMSBAICAwMCDg4PCgoKExMTJiUjGQ8OIyAeAgICBwcFFRUTJSQhHBMRIR8cKCglJiYjGhoYDQAADwwLFhYTCwsLGRkZBgMCFAcGExMSEhIRDg4MBQUEFQcGJCQhHBwZEgUFEBAPKyklJCUhHh4cKysnIyMgFxcSGxIRExYTGRkWGxsYFxcUHx8dBwcHAwME+R2AsgAAAJN0Uk5TAP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////MnztaAAAATZJREFUeJxjYAABRiZmIMnCysaADthBYhycXAzcPKgSrLxAGT5+AUEGIWE0PSKibAxiIuLCEpLoMiAgJS0sIysnLIopI8/ApqCoxKasAuKoQgXVgFgdiDU0tbR1WIEMXT2ojD6UNjAUNjIG2mRiqoJmoJm5haUVUMbaBl3Gls3OHiTj4OgEF3MGES4gwhWI3ZDcrgUi3EGENIwBBB6eXt4+MCW+CNV+/gGBQcEhMG4oQiYs3MsvIjIKxo1GyMTExsUnJLImMSSnoLmUQUckNS1dOCMzKxtdhiEnV5hNOC+/oBDZnTAAlCkqLgEySoG4DFVjeUUlKzBIqhgYqmvQzKytE673a2hsaq72w7CPrcWvta29o7MLPTiBAenX3dPb15+OmYIcjCeIVchNdMCQAAE5sUmwcAYAl0MyP/v4af8AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/ruby-bak.data.png":
/*!********************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/ruby-bak.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAhBQTFRFAAAAcTMvJxIKBAIBZC0rGggIAwABOhoYHQgIBAABXiwmKxMSDwgFUCMgHg4KMBUTNRcWGQgILxYUOBkXIA4NDAMASB8dIA8EFgEBKRERIhERJBINFgoHSSAeIw4OCQAASRgWFgMDHxEQYSwnTCIdHQ0NCAAAJA4OJg0MDQYGNhgVKxISFwsABQICZC4rHQ8FVSYiFQQEQhUTLRMSHgwMGgEBNRkVNRgXKA4OQyAbMhQSBQECNhMSEAMDEgQDSyIeLxUVEAAAaDAqQR4dFQMDOBEPBwEBKhMTQB0ZJhIRDQAAUSMiLBQUEwMDHQgJAAABHxAQMBQULBERKRYOIxAJCAMDJQoKOxISCQQEKBINFgAAJAkJCQMDEQMDFhgTJSUiHxcUDgoJOxQSISEdJyMgHxsYHx8aGRAPGxIQEBAOIQoKFxEOFAYGHxsaGxkYFRUSCgEBDw8NDgEBERIFGBoYHBwYGRkVCAgIAQECGxMSBAICFRUVDw8PAwMCDg4PCgoKAAAAExMTJiUjGQ8OIyAeAgICBwcFFRUTJSQhHBMRIR8cKCglJiYjGhoYDwwLFhYTCwsLGRkZAwMDBgMCFAcGExMSEhIRDg4MBQUEFQcGJCQhHBwZEgUFEBAPKyklJCUhHh4cKysnIyMgFxcSBAQEGxIRExYTGRkWGxsYFxcUFBQUHx8dCQkJDQ0NBwcHAwMEQ68RfAAAALB0Uk5TAP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////KyKimAAABRElEQVR4nGNgAAFGJmYgycLKxoAO2Dk4GRi4uHkYePlQJfgFBNkYhIRFRBnERNH0iEuwMUhKScvIysljmMfAoKCopKyiqqaOKaPBoKmlraOrpw/iGEAFDYHYCIiNTUzNzC2ADEsrqIw1lLaxtbN3cGRgcHJ2QTPQ1c3dw9OLgcHbxxdNxs8/IDAIKBMcEgoXCwMR4SAiAogjoxCq1UBENIiIgTGAIDYuPiERpiQJoTo5JTUtPSMTxs1CyGTnxCfn5uXDuAUImcKi4pLSsvIKhsoqNJcyVNfU1tU3NDY1t6DLMLS2Nfg3tHd0diG7EwaAMt09vUAG0JsMfaga+ydMLJ/EwDCZgWHKVDQzp01vmJE8c9bsOVOSMezzn5s8b/6ChYsWT8KQWpK8dNnyFSvr/TFlVq1eM2HtuiUYEiCwds36BigTAPb4SWPfXOF4AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/ammo/wen.data.png":
/*!***************************************************!*\
  !*** ./asset/data/buffs/ranged/ammo/wen.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAFpQTFRFAAAAPKO9MoyhCyY5PKS+MIOYNJGoChsgOZqzMIOXOZ63N5euQbHNI2BvPqjDNpWtDCEpAB0jAAgWABUYACQpAAQFAAYHACIoACUrAA4RABgeACAjABEUABMYs3vDEAAAAB50Uk5TAP//////////////////////////////////////9DgaNwAAAFxJREFUeJytjUcOgDAMBJfeCQm9/f+bIJQT8iJZYmRfPLYX8ASghFxFXEnECVVphrygtlSEVNTUDVrDDztFiArLlfsvpadmeEpknGb+cVnfk4/lDdhlc9x98kPPBZbzAd9oXrk7AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/data/buffs/ranged/balance-by-force.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/buffs/ranged/balance-by-force.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAALFQTFRFAAAAAAsMCiokG1U5F1E/HlM7FVA+G1M+EWRCFE07DSEWGXRUFUA2CRIQEW9JEDcoCA4METorEzAnFicdEi4lFTErFlRGCycbCBEPDz82EjsvDxUREFAwAwwIHE03G086EV9BFDwyETEqCA8OEB4aEygiFzAoABMNEUsuFD4uFkAvF0MxFDYnBREMBQ8LDzsnE2lGEG9KEVI1GlpEEDkuE0MxF0g1EEMyEDwvG003AB8ew29rlgAAADt0Uk5TAP////////////////////////////////////////////////////////////////////////////+SQC1NAAAAdklEQVR4nGNgoDJgZMIjyYxLgoUVlwwbOy4ZDk4uHDLcPLw4ZPj4BXAZJyiES0ZYRFQMu4y4hKSUNFYZGVyGMcjilIEAOXkFHDKKSso4ZFRU1bCKq2toamnrYNejq6dvYGhkjF3SxNTM3MLcEp87cQErcjQBAQCReQbnR1+wMwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/buffs/ranged/deaths-swiftness.data.png":
/*!***********************************************************!*\
  !*** ./asset/data/buffs/ranged/deaths-swiftness.data.png ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/ranged/greater-deaths-swiftness.data.png":
/*!*******************************************************************!*\
  !*** ./asset/data/buffs/ranged/greater-deaths-swiftness.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/ranged/perfect-equilibrium.data.png":
/*!**************************************************************!*\
  !*** ./asset/data/buffs/ranged/perfect-equilibrium.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/buffs/ranged/split-soul.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/buffs/ranged/split-soul.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/data/debuffs/crystal-rain.data.png":
/*!**************************************************!*\
  !*** ./asset/data/debuffs/crystal-rain.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAA/FBMVEUAAABhb4AdMUEiLT9VaX9LYXo+T2gbLTonSmFGXXkeKTg4PUsODxIRFRozS2s8QlgECg4cNUcGCg04UVw7VnFNcJI+Qk9aVkcsRlVPZHksN0YTFxsQEAoKCQofJDE6RE9NWnM2fYFPgY10cn40V3kyO0xofGw3e4K9vc4dHA45SF0UExQ7WV22tMMNDQc3OksrXWBUf6lUZIQcRV0hKS0+jZVQsr0eR2AvTWY8g45YlJ5XYFspSGJHWnFPc5I5TFx4iJsRExFAV3NRco9OX3lNW2oTJC92fYApM0JjaGpveIEzPEpfhKVATVRDXG1PaYA/W3gQFx8UGiYtNT8Ek0krAAAAAXRSTlMAQObYZgAAAJxJREFUeF6tyTUSwzAABdHvMDMzMzMzM9z/Lhk5TSxLhWeyxTYPyhJYoCJTa6Sg1ekNRhMRs8X6Cza7w+lye7yAD1R+IBAMhSOQFSWLxSlIIJlKg1Emi1y+UGRICShXqjWG1MkaTTm02uSdbk8m/QFIw9GYlsl0JtJ8QctytYbYZiuFHfYHfDuC6gReZyjscr1x5P54gtMLvN74Vx8VUg2fj0CU2AAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/data/debuffs/ode-to-deceit.data.png":
/*!***************************************************!*\
  !*** ./asset/data/debuffs/ode-to-deceit.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAHVQTFRFAAAAPiY6OyM3JQ0hGA0kNh4uDQAQNR0tCQAMUzhQNiUoKyMYHhYLSzBINyYpMiofIxsQLBErUC5TOSklNCY1SCZLQDAsPi4qMiQzLi8yLS4xSCFIHB0gTTtYLx06QC5LKRc0KBgxFgYfJBYjLR8sCAAHIRMgTGYfZAAAACd0Uk5TAP//////////////////////////////////////////////////WYQoUgAAAHlJREFUeJxjZEAHjP8hFLo4EyPjH6wSDKy/Gdh+YZNg/8nA8QNTgpPxGzfjFyxG8f5lYWRkfI8pIcT4VuQNNstFgepfYJGQZGR8yoDNHzJPYCwUCVnGRwxYJeQZH2CXQAZ0lFC8TzWjlO5hk1C+S6JRKndUGW9hSAAAxWQWGSDC5dMAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/enemyDebuffs/bloated.data.png":
/*!**************************************************!*\
  !*** ./asset/data/enemyDebuffs/bloated.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAIAAADZrBkAAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA69JREFUeJwVkUlsG2Ucxb/5lvGMPTOOYzu2szhKk7hriGgiIgStkBoQSlqJIHHocuAAAg4gQIUKoXKgoQeoVAl6KZGQEKIlAhUVkFhiQBCJEFoIxGlaJUrqLHUdb7E99sx4lu9j8s7/p/f+v4fH33hNPpBdWyK3JvssKR9/6iuEOchBwAG2I+AwMzj5yZw6L4l8otcM9ZTUrB8nv1RGMgf8rSueUK3j2DWECUIQchyAADBAKaMUOUc+Hp5+iw/ltlBqZprdz2zjWkNf/iewL3O0ZeyEB3shhghDiDjXuGNjzLGoFV/giFHX2B9LBnWExME85olXs017O+AhXsIj5Ia5JTG342NuFHMwdBBlJpHM+H5FGz3/U/zhTdzf2RGv7wENHvNo8LDSu9d7717jv5s6hO5jsCmAB4e8m+vGHfHVyF+nn3zmZ9Wwr7z0GF617kAsB0enfAoGkH37RTHWQ1pa0fKCIXi45h4y/sL606ebkWLV18O3zozJTApRCYdqfe1Cp7knRTH6bDxvaA6g3Njbwdya2T0kXvmgYFTp5LniE8+FQK49yHTEqEY1fJAfNA2HYQth5NguAJcepTs8WP6uqavUsRhEQFII4IjCoYy1XqRZDFxxABl+qVNFPEQNFx/XFrbTYd7gWKADlzftpjbiImXugrAclKHoIdj2bgNNEL9/sf/SRfN5f3Kisn/U1xNChQHy6dncsxeC33xYfeBxKRpzspCt6rmSWladAp7KzPGcNJwaDgsTh/rM/ovgUOAYRxftnrT/QmgwIXe9z9zla1WPw1kAQIfZgEFs2HrUF4Oi8edibbivJWFHZjO/PBSR3z1bOnxKbitZl8/XTpwJVF65LEAB8Q2LalpDxw92KlltjYrtzsvfTV0a8XnQzV9r16q54qp2/T1r70dScd3avOtIqr9mN2TCG2SVj2zjem8ynh5J5/VeoVZMG927RVGGw0eVud91TGC5YYW7SMduJw9MQqxC1XA8sLlLxZXbvUI5ussX5ZAlz55UO74WRBiNejGhHpHXHCfxiKi+OZGlG8uNhYGmoUqpOztj4a0NmOf+bVci7jU/e9xz8nphk4ZJEJM04aGqOd2z7xRXIkFfYYlVUiB5pHV0pdaCdUf3e2UlpGfafiCpscyP+bWrx4Ov2+c+L2RL5i45dOMqa+BtTTebBPG+5+/bxHrUdwo3x+hQwreFp2/M5zu1jXpZtypeTt83IERoWxSDSNI3E4jFkvMpxavYQVrt+m0R1P8HgULKvA0RLa0AAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/data/enemyDebuffs/death-mark.data.png":
/*!*****************************************************!*\
  !*** ./asset/data/enemyDebuffs/death-mark.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAACJVBMVEXMAAAYEzIcFDsdFDsfFUEjF0koGVUjHEZKeIcdFz8nHlQiGEYiGEcjFUgdFTsYEy0WEigaFDIkF00kGEs0R2ZJeoZJd4gaEDgYDjU1R2kmGFIeFT0cFDkaFDYaFDQgFkQoGVZHdoNKeIg2IMobET0ZDzckGE4iFkkeFUEgFUVHdoRHdIozGNAgFFIbEjsbETscETsmGVMfFj8mF081RmlIdYczGdAwF8keFD4eFT80RmUiF0gkGExHd4Y2IMkzGNEgF0EdFjsgGDsdFT4eFkIlGE4kHUtJfI4tGLEeFzkZFCeRhnC5sp0qJDElHU9KhZNJdJ0zGNIgGTsZFS0bFDdAmrJlXVPMxrRNkp5AVrcxGM4dGDIYFDFNSU1W1+NQtsnMyLZPnapBXrorGKgbFzgfGT28tZ5waV8xK0LQy7lwaWBRq7hTocEfGTQdF0PMxbHSyrXGv6XCuqPX0sAlIlFbw9EgGToeF0woIj94b1qimH22rJfRyrcpIj8nI1YjGExg2OMoJ3IdFjgYFDIoIjyxp5CQhWqMgWYmGFElF05FfJ1o0+sbFjYbFjSro4peVUoZFTFFfJ4fFT9qu+hnneIZFTRPR1NBOUYnGVQeFkAoGVdvkuNxe98gGkIZFDEjGEYjFksZEzIfFUMiF0pKRZN0Zd92V91rR85LLpNNRpkpGVkZFTMZEjMcFTojF0wnGVMnGlF7Tt18St4qHFcfF0EZFDMUEiR0Rw+vAAAAyklEQVQY022QsQrCMBCGr6G1l4SqdRXcCk7ufQBHwcEnEGd3fRafQp+iUOjcyUFdVXCTQrwkDVbJNx0f/13uAuAhgMABitniGcLw1XdSqbCViXOgrYqoCkFeJt8kEWsppsaYJJgoSf59yII6GTxGHXlPY5MU3SRXytf+J1njpOgke54kXfSmqXr5n5mRXomBIGreUguRnkjyI2JeIZYlYpUjxgVdt5rb5huM7T9tGgYLzq+IyLOMIyaDg1xSu9zvZsKSbOW5EGvw8gEL/GObfhoqMQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/magic/active-spell/blood-tithe.data.png":
/*!****************************************************************!*\
  !*** ./asset/gauge-ui/magic/active-spell/blood-tithe.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAMAAAC6CgRnAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAppQTFRFAAAAAQEB7CM/uwYh+jNN+zpVtAUm0xIp+TpV/ztX////rgs3zQMd3CQ7/TtX/zhT/zlU0AgswQgZ7TRQ/DhS+TVP/zlV9TRNzA0+wAITyxYt+jxY+zVO+TRO/zVQ/zZS8NpdtaBOvQ5LwwcfvAIV3ChD/zpV+jNO+jJN/zVS9DJLsYw03sRP8Nle//5u0rxbtxBbxgksvgUWvQoe7zdU/jVP+zNO+TRM/itM/01U/+dt//Zy//Vu2cNdaFM9rRJnyQ1BvQcYuQIUyRox+zxZ+zFM+zRO+y9N+jVN/Mlp+/Jw/+5u5M9fgWdHoRRuyRBavAcdvAcZtgMV3CxI+jNM+ytM/a1k+/Zx/+1v8NxllXlQaVBIjxRtxxRwvAkruwcYugYXuw4f7z1Z/SZL/I9e/PZx/epv+OZqnYFQelxWvxl9vA4+uwYZugAYtQARyRA0/X5n/e9u/Otw/u5up41QhGNcaSxBrRCIuwVZuwklwSYcyFYmy4Mn6tVd/e91//Fvt51VgGdaezdMUgAms1OUxm5c0Jc21LMx1L001bsw27k2//B4x65agmlZekZQZAQvUwgsrJtv2MFD07ww1roy27gw3Lct07AttJgsnJBbj31ufVFUXAkqaAk2TQYspZp93cRN3bYo3bgt1LEtt5s1jn1IamRjVVV9TE+MfGmJZxYuWgUpaAo5RQUnqqJ7585U0rEwuJ9FkoJbb2d0WFeLT06STUaHSTlqPidDQCE0byFEYQYvZQo6OQcjmZBtu6pginlPZF5rTUt9RUiNSkqTSTl0RClVQiJGPx49Ph87Nh02UylJcRNCYwc5JQUacmlOIyNAAABLAAA5MRtBOiBLPyNPRCRSQSZRbChbbAo+Lxk9Nx9MSidbZhxU9tUfvAAAAN50Uk5TAP///////////wH////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6///////////////////6////////////////////+v/////////////////////1+vr18P/////////6////xUsbdgAAANZJREFUeJxjZMANGAnKMf7HI8fAgEUWKgfUiCkJlWNiZPyDIQuVY2VkZPyBbDDXN7gcFyMIfETVCvUDowBYkvEVVBbsOJicOESO8RGEL8/4ACGnCJK4pwwkrmuBmJf+I8zUB+v6xA/VzngYSc6OEQVs+Y/kFl+IapiSZchy0SjaZvxH8gMDYyayXDeqXBmyXB2qXDOyXCGyHOMEFPuSkeQY56F6IQQhx7gWVYrRBS7HuBdNitEYIXcOyNUH8S5BpDTgkQEhYCpvAuVUkOQwIhSHHLoyHAAAwRE0HEOYyesAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/magic/active-spell/glacial-embrace.data.png":
/*!********************************************************************!*\
  !*** ./asset/gauge-ui/magic/active-spell/glacial-embrace.data.png ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAMAAAC6CgRnAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAmdQTFRFAAAAAQEB5///sOHs9///+/v6qNblyvX9+Pz6////pM3awPX/1vH2/P/7w/f/tufx7Pn7+/36+P379Pb1v/D+tOfyw+z1+v78+P36/v//xdTQmqGjsd/yuen0sOXx1/P3///9+f78+f378/b2p7Guvs3JxNTQ2OzmtLq8qtbruuv6tebx7fr6/f/89/z51ebhy93ZyN3Xtb6/a15uosvkve7/t+fysubyxOz1+/79+/78+Pz7zdzYvtDMyNvVuMXDf3SEmL7Yv+//uOjzseby2/T4/v/8/P/+1uPfx9nVv8/LjoOUZlVshqnCvuz/t+Xzuenzuejy7/r63+rnwNHNxtfTwtXRkoqXdWSCtuP+tePzuun0vez4uez5zvL76fLvwtTPxNbSx9rVlJOcf26NU3yhq9b0uun+uuf1st3mpsvPlLWzrsO/x9fUyNzXnaKqfmN+Y5G7NY60m7Phn73RlLCxjaagiaGai6Oblq+ozN7bqrS3gGeBaX6jRqrVOX+jd3unkqWrjaWej6ihlK6mlrKojqmhdo6LZXCFe2OGc3mbRJ/GS6nUNnaXcHCnm665nbeqnbesk62leY+QWGZ3PD5kKiVcGhNXQ0KAVKTHQ6HIS6PPL2qHd3SrpLXEk6ulfI2XW2WAPT9vKCNjHhlgGhxiFSZiDS1ZDjlbTZe8S6bOR5vGJ1JrZmaUfoikV2B3NTZkIRxWGRJWGRJcEh9hCylgCC9iBzBfCDBdAyZRH0pyVKnTR5rFFSo6SEtmCgonAAAJAAAMBR9LBiNXByddCSxjAiNbNW6lT6DKBRlDAx1RDC1nOXGiwC20PAAAAM10Uk5TAP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+v//////////////////+v////////////////////r/////////////////////9fr69fD/////////+v///y+Dp0MAAADxSURBVHichdGhCsJAGAfw+wsGhybDmEZB7LJgM5jEKvgCvoDYBbv4AnsBwSomg80gdhEWJxjEMHVBmHfbuX23Of3Ctm+/+x/fcWDZhb8G/4cx9kWl8WAapeWAV0ql5QF4yY2lFSCCnoryDChxxFO7Sg2G+1iZEx/p5oW9ASe2KoJi54pdEx9HP96zAVx0uA/9xOrCDsSaQczWjDC/9cksbbhinL2Je5G/V9R6/IdTxbobxBY+OQPDAKQs1YbU5qqNqE2pYUIJY2KYKYRhbLBUQj8yLBOETmwb3rZFtw2pFV1G+Pis3HEziaUuNMOSyzLqDe9cPhzK4da9AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/magic/active-spell/ice-barrage.data.png":
/*!****************************************************************!*\
  !*** ./asset/gauge-ui/magic/active-spell/ice-barrage.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/magic/active-spell/no-spell.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/magic/active-spell/no-spell.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAMAAAC6CgRnAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAWJQTFRFAAAAAQEBf39/WVlZjIyMkZGRWFhYaWlplJSUXV1dXl5eeHh4k5OTkpKSZmZmiYmJkJCQjY2Ni4uLbGxsVFRUaGhojo6O1NTUmJiYW1tbe3t7vLy88/Pztra2cHBwYmJiVVVVj4+PlZWV5ubm8PDw7u7uvb29cnJyVlZWUlJS6+vr6urqycnJd3d3UVFRfn5+xcXF7e3t19fXfX19tLS05+fn4uLig4ODZ2dngoKCU1NTT09PrKys6Ojob29vTExMzs7O7Ozsmpqabm5uWlpaMDAwm5ubp6enqqqqr6+vOzs7NDQ0qampq6urpKSkioqKgYGBY2NjNzc3QEBAMTExmZmZu7u7paWlenp6NTU1QkJCLCwsn5+fx8fHl5eXV1dXOjo6Tk5OQUFBJiYmeXl5ZGRkPDw8NjY2MTExRkZGS0tLPz8/GhoaaGhoKCgoDw8PCwsLLy8vODg4Pj4+LS0tUFBQ3dX3VAAAAHZ0Uk5TAP//////////////////////////////////////////////////////////////////////////////////////////////////////////////+v////////r/////////+v//////////9fr69fD////6/1Qaq3IAAAFRSURBVHichdG/S8NAFAfw+/bHtSmtbWKNojRqBV1EHAUXXTuLi+Bf4CD4b7g4CE6Obg4uujjp5CwKapWCQrGkjflRSL1iTGzaXhqrbzh4fO69e3cHMjzwr8H5wwj5RX1zC8PoWwRoh9S3OL6ircHGviXhBrGC6N8BGVsAGNV8/RmuaxJgC8xptju5jHfOKKOGnTGRMkShHceb0+9ZAF5R+CAmUbyjK4yzeXUML3G3MENHgWrD4WYpZB+KFM/2iILPBG4Zb/l6UrY0RS/qObfljcPdgWDlTprE44ImNaqLuAraUvaJssR0bdwb5TJoMXEZzTTKc/fqGs55w7oxAU3ERckrwyln2IBhTZ1JFlvNMwqc9A1b0HOGWa5tVmZbSSeC454hWpJxrWrbiLkv4MVh33bc9MDLdmHVZ9TUUe8zOkt3554ZSe9zFvrQITa4bUh8A9E5dBxEkPS4AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/magic/instability/active.data.png":
/*!**********************************************************!*\
  !*** ./asset/gauge-ui/magic/instability/active.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAYBQTFRFAAAAAAACAGs+AGQ6AGY8AGc8AFo1AHlGAHVEENB9EMd0ELVqEKNgAEkqADAcOjIqAFcyAFEwaWcqbWwtEKNcTUQ8TU0gXFokamkqb20tACcXADwkAAAASUA3V1ckWlkkZGInAFMtAEYQAE0QAD4kFxAQLScgEIdOZGIqAEAnADcAADoAADwAAEIAADcgg4I1AF43QDcwWVckAEAQADAAADIAAC0AcXAteXcygH81AHFCTkY8QDoyUVYkADcQAEQAAEAAADoQdHMwe3oyEIhQMCokLSokTk4gAFAXAEkXUFAgc3IwdnUwfXwyEIZOAE0tHBwXJCAcMi0nRDw1JyQgRj43fn0yeXcwd3YwcnEwAFw1HBcXRj41enkyABAARIJHAFk1AH9JS0I6dXQwIBwXR0A3UEY+NTAqUUdAQjoyHBcQKicgKiQgLSckNzIqS0Q6OjItPDUtJyAcSUI6UEc+U0lAJyQcMC0QNzIXREAcXlknLSoQEIxLVlEkS0cgYFonYMY/iwAAAIB0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9QCrogAAABhUlEQVR4nM3SP0hCQRwH8PtmFla8QAoiJaKyIYgMnDRosbnArcZXQ5M2VNDQYEQQEdEU5NAi0RBEc0MQSUv0Z2iIiED6M5gU9gctue69emJ6v6ejt7x3dx++v997d2BlDlQi1Hd4aQh9fOUoAcFqfiVS3AxCEUTsIZPi4GawKdEsaKb2kaP1gcuhlgCHVvXbCtx2Pr/IIbpuNOlCblxQiY57zuAGM+CHLiU9whvj8AkRb8NlH5Agof+AsSGcNXT/Re5TcFjfPuy99opHtnqb6FGT9emndiTtQNpqwRYJGUav+l8bcZc812b0D4d66uFVomrEOBaix5GWjUl81u0M7LHArsmlgGrDUYdzXStqnuj2JG3RvKtIQATfI+MRXrRctOAazP8GEiL0VpwmgZjCqtQVQASjCbn7DxGyYKUMCN9xaI1wBgQXL2PR6SzRoQExsxxwxu3KSYxyucRZYImxwuOQwDks0iivtF/pwYKp1CEcanhis4xEzIdlxysrXUIx6X2sOPgDfrl4KagIiKsAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/magic/instability/inactive.data.png":
/*!************************************************************!*\
  !*** ./asset/gauge-ui/magic/instability/inactive.data.png ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAASBQTFRFAAAAAAAAgYGBeHh4eXl5e3t7a2trkpKSjIyM9PT08/Pz39/fyMjIWFhYOTk5NDQ0aWlpYGBgXl5eYmJizs7ORkZGUlJSX19fZGRkLi4uAQEBQkJCT09PUVFRWVlZaGhod3d3hoaGSkpKEhISKCgoqampWlpacHBwdnZ2enp6UFBQYWFhZmZmW1tbbW1tdHR0h4eHR0dHOzs7VFRUioqKgoKCb29vqKioKysrKioqc3NzSEhIcXFxp6enXFxcGxsbICAgPj4+JCQkQEBAcnJyZ2dnGRkZPz8/bm5uvr6+mZmZREREampqHBwcQUFBMTExSUlJPDw8FxcXJycnJSUlMjIyRUVFNjY2IiIiQ0NDS0tLKSkpLy8vU1NTuLi4TExMJ9+HbgAAAGB0Uk5TAP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////NrNwFAAAAYlJREFUeJzN0kFLAkEUB/D5BxpqKwRusRBBSVF2SYMModSgTnaog0F9vKKiLoGHSIqQIIzIpIsWERGSYVLSUm5qTbsriunM6rE5zc78eO/NvgfS4cJ/hPoNbQ+hr3KdciCIuSohUyMIu0rUO5RkCmoEHXmHltj8TNUtZUMtAiQta8UEPAy9FdgQw/eadFadUhLoLS+ilKUEwgC5GwFoF1DUJaNGTCYp3Hjpy4uPle9RFLjQe07IjJKxiSZkstPAKQ/O4WYMuC5bXbm0n75fcGrUZHelICI1rliO5+O+Ay4kWIjPflqRS8vaF/+HIxQL0FcHfiK1tnBq9PfuL0OxxCZiJHhiMBQIpdyHU+KeltQ4ohCQzdGGUeRA2P2RpQhtOW45cLoa38CFCBdbozEgVrHDdE0QdnOe7f5ChL+s2x1AuK/CuxxXg6DqZjEa7OdUWINY2wpeegRbOslz9YjrHz2bhDS3gwFXbBt81JDaaxk8ejKUOoQkJXxnHUSEJ8FqLyt1G0WY8/jv4C+np4wpIzAPgQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/magic/ode-to-deceit/active.data.png":
/*!************************************************************!*\
  !*** ./asset/gauge-ui/magic/ode-to-deceit/active.data.png ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAUFQTFRFAAAAAAACTTxeMic+WUZtQDJOKiA1LCM2AAAASTpaPhwXRjZWIxwsTyMfXlAnYConTiQgNipDLxcQbDAsUUBlXSonNCpBJh8xUkUjDwAAUSMjLSQ4TjxfXyonUUUjDw8AGxYeVUkiNipCbi8sXikmJhsvGxYjbTArKCIyFg8aOBoVFQ8aX0pzay8sPjFOOhsWYisoMig/JR4tJw8PGhUhUUFlaC8pQDBNOStGNytDQx4aHhokbzEsViUiVCUiTyIeLyQ6Myc/Tz5iOitGLiU5OCpFTz5hJR8uWkdwQDBOKyI1SzxeNytEIhsoMyg/HhsoVkNrPTBKGhYiQTNPIhooRDRVJR4vRzdZKyI3TDtdLyU8TT1gNCpCNypDGhUiTT1fOS1HIhoqRzdYJB4tSzpcOi1IZFQoSDweHhUkVkkkQDca+bbj7wAAAGt0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9H/20fAAABDElEQVR4nNXUrUuDURTH8fOdslkMc2DQtmpd0mQQwaKIiCwMhgj+RzIQEURERAQRBDGYBIPValOxaDHMsT36DB+fl3vuS90vHj6cw70HDhIYRhsiUQhEYCCptUHGoCdlupEPTjCIrQ8yyW8+pr66yXAbrDHMq8y8RE44yzvTMX32dKzzlycnZC5xj+7H0Biqz+q95x9Z6JVjeZfuRoUswnflVrI71CBL/fGbnNIhy3AdGVUFrsBVAKQ2z6XhTMjq24OYToFrXCjOgKxzrrkiZIMz1RUgm5zqLg/Z4sTicpAmxzaXhTRLHAVAWnBodVnY5sDu/iGyzb7DJZAd6Lhc2nGXvSBYOEkO6MsowB85z0Yp4QqU9gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/magic/ode-to-deceit/inactive.data.png":
/*!**************************************************************!*\
  !*** ./asset/gauge-ui/magic/ode-to-deceit/inactive.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAK5QTFRFAAAAAAAATU1NMjIyWVlZQEBAKioqLCwsSUlJKSkpRkZGIyMjNDQ0T09PPz8/NjY2ICAgR0dHUlJSPj4+NTU1JycnRUVFBgYGLS0tTk5ODQ0NGxsbSEhIJiYmHBwcFRUVJSUlX19fMzMzGRkZGhoaOTk5Nzc3Hh4eODg4Ly8vLi4uW1tbKysrTExMIiIiHx8fVlZWPT09QUFBREREMDAwS0tLOjo6VFRUPDw8HR0d2mclfQAAADp0Uk5TAP///////////////////////////////////////////////////////////////////////////53JphUAAAEYSURBVHic1dTBS8MwFMfxfN1cnGzYHnRVEQQPggx0Iv7/R0G8KB4cikyG4KBQJ9V261rnwXZt0rTX/Y7hw8t7eRBEzbDeEJHUgQiIRWbLIA2Yi9YslaVQErTBr4J0iBt8Wl56eRm0+cvCFb2PxAgdP5ztNuFrWlHx8Geb2N0jeTNCjr2F9I6Wbb6Yh8FuBj1G+3JY8Y7I1kEcyfA1240W0nE2o40nsbpDHVy6YJxTesjZ8PQxUU41sB9uPdSA2Fb3XnEq5Nx/FqrTwIvJu8YpkEGk9qeBXE7GWleAWN8zvctD+vKuxOUgztwtc6sQp+trBy5AOGnrBy5Ca2dU7lKIuOLW4P4h13BjcllFKae1YOFLMsCqrAP8BahHXCmBn+D5AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/magic/sunshine/active.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/magic/sunshine/active.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/magic/sunshine/inactive.data.png":
/*!*********************************************************!*\
  !*** ./asset/gauge-ui/magic/sunshine/inactive.data.png ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAQVQTFRFAAAAFBQUQEBARkZGDg4OBwcHOjo6W1tbYGBgIiIiVVVVXV1dWlpaKCgoHBwcUFBQYWFhVlZWXl5eZWVlWVlZWFhYX19fY2NjaGhoZGRkaWlpYmJiZ2dnXFxca2trZmZmbW1tbGxsb29vbm5uc3NzcHBwdnZ2dXV1dHR0V1dXLy8vampqeHh4enp6fHx8cXFxVFRUUlJSNTU1U1NTf39/gYGBgICAfX19eXl5e3t7fn5+goKCg4ODTU1NT09Pd3d3cnJyTExMhISETk5OUVFRSkpKSUlJSEhIS0tLR0dHRUVFREREQ0NDQUFBPj4+QkJCPz8/PDw8OTk5Ozs7PT09NjY2Nzc3kHOxYgAAA7ZJREFUeJyFlPlv3FQQx2dsP59rJ7ubowpRroYKJRBBRFNxVREqCMQ/TFAlikIKiKoSR8lRpUkacu5unOz6tt+bvk13N1cL7wfLHn80833fN28QbiyUq7gZvR5gEgMQ2f+BFgoViQPprf8CPUzBLBhGdgRGk94GtquqYJJCnGGWQKYUbwLbWB9R5CLXMLYDN4wuS+2BXiE80MWJXZKlWwac2aQ0L0ntgF7IQLUQHYhsRCKlqLM+aKUcjLC4ANtVPYbcV8tSYduf/NQw4mx4x4kLEJS/Btm7mzgYR7zCFOdMlwmBSG25teLMHTTwufRq5uk5aBHMCtrRYs12SDV0bJ9NPYr0wjlmJpKIgLU6oAdN0xGZpRkVmRApV2ucu+ALDXicA++CatHHtFRnpCoVztqqizAR0hvD3nxva66+1QVLM611x6xJ2qhwnc5B1Q9v5QZU1pK5tVYX1NSp9fFd3ajErCwkiEmWjPihhU5Qor3pv1uXMiYvvUoCQlHLwtCDhPIUh0NH5g6D8k7QBclDq9TINa2wDDJcCGwfM1YFDjE4gc/9Lmj2BdyNk3Kq3dlWR4+Gj8A4m4gJBOg8psjc7IIejQFPa61BK+S2V3N4MfVCrUqfNA4Qx7s9H0sfKOivOoqT1atmntoUD8RqPxDowM3Ngb3eZtwPE9Tr29VAh6x0GvZbWfiOZud6AFHs32O/x11wcgxD40+zySgxbtVCz/RdwQpqqB4FH5naT6IHbjwofi1nIxvju6U8Bds50Exm7r9fhuXBaNZ91AOtT7M1pf4J+LzhbdvQnN5jQCacsI9F87Cx8OQCXFhx9DsZ/jG11WfvGJqdVOAwGzpYUDUteYyEvdJ1jD4XVCgN/2gW+IZbDO3qqae6o8rDb8X+y6jXPWjNa98/IOWJE2V3G3DoaO0eomD6x28UhF969qiUfkdKvnT/GY5Ucv3ZhAIZgmRr9rhs4q3V3ll/pSNmRMuYz2tPR512o+H59VfXv2DKD2mvw780pG1crMTW3Xx9VBbt3lHBssnN1c4RwswLcOeqBSXL5cmV6hgovVmCQv/3pKDbz/POdeU6fPZIvbeK83Em2vnwdVI85Xuw+LC4GADopXD/Z2ds+LfbQibscMrBMSw+bl4dKTPbQq1MmDv9UmE7KB/1rH5e9fo0m/8HaGiEK53Pk+yYZv/K3zT2EHUY0frP30+LfVhcujQhrw5StASMGRagFGdk8ZVfcHVJqwZk+14S9xZQblWXO8nV/Fr4Jiilfr1EN6KvALth5zg4XCLSAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/magic/tsunami/active.data.png":
/*!******************************************************!*\
  !*** ./asset/gauge-ui/magic/tsunami/active.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/magic/tsunami/inactive.data.png":
/*!********************************************************!*\
  !*** ./asset/gauge-ui/magic/tsunami/inactive.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAXpQTFRFAAAAFBQUQEBARkZGDg4OBwcHOjo6W1tbYGBgIiIiVVVVXFxcU1NTVFRUKCgoHBwcUFBQaGhocnJyampqZmZmXl5eX19fa2trdXV1dnZ2WlpaYWFhZ2dnWFhYY2NjdHR0eHh4fn5+b29vbGxsXV1dVlZWeXl5e3t7bm5ufHx8cXFxgoKCbW1tZWVlfX19aWlpd3d3hISESkpKODg4Pz8/cHBwenp6f39/g4ODLy8vSUlJMjIyMzMzNDQ0MDAwLi4ugYGBT09PWVlZNTU1TU1NV1dXPDw8QUFBIyMjTExMc3NzLCwsFhYWRERENjY2OTk5RUVFUVFRgICAHh4eHR0dEhISEBAQQkJCKysrGxsbICAgJiYmKioqPj4+YmJiSEhIUlJSNzc3JycnFRUVDQ0NCgoKExMTJSUlR0dHTk5OLS0tISEhCAgIGBgYHx8fGRkZQ0NDCQkJDw8PS0tLJCQkGhoaCwsLOzs7FxcXDAwMERERMTExKSkpPT09WKY3gwAABFFJREFUeJyF1PtPW3UUAPDz7eve0tLbF69SKIxXCBlOnNtKIVO2X5bIkhGmEqeDJWPJiCTGROM/MRX1J5Yp0YSa4VDnwAwZgW44xfEapnMFZFBay6O3vVB6n73ejnEZsOn3x3M/93vO99zvPQj2LCQtfm90d0AtMYAE+39QixJKhBKCiFH/BQlESzS5KMCj4vNgMqteyWkQgzCEVoBV8M+CSWaW0iIGo3EUNaLo+tOlypDgEgYDgy/TGRiitVKhYQtCvu1Sn0BiXQ0GDllxXh0ipCPxAihjRmExBvg6vw2TWVXF0mH/LKcYGuVEjb5MFZXObZjoR3FIiNwmVB8cRapyqXsS95hteGitUIH/k9CpOVYDXicaBlf/Y6gVoUoYcSa3FhUxkY+paQMHghIkFy2S3r+FNNQmNG+kwaLkXHP2Na1+lcu66wDAGJI3aqar0Y3X+mRIoRIbhCFuj/fXhjLn8ofTlzCzN09n5NKS3f9BhqHTiMW66xg8yva9FSJ5+mWEbmcWLRG41E80P7gF39S0NwD81OBGcVfxiN12l7Ro81MBkaz0Rb+/sCzvWPFSIBuEmRJ0o2ypqPOE+MthWpPznboBD15rRHrkk2ts4ToAnAXaCXEI9mvLv2lsr1st7ngH96bY25pMc3EZVpWu9Jzh3Yd/r7UNla9ZO6BZCVNaIm3aAFfOk8D9vAVfLfYT3lL629SjZCll/bze1lZvIrvrrp2yLdn9VgXzlbxjycwGpNiERSabs1jBl9MGwkfidNc586JppuDKi6Nb0JkfOjCO9xXCgc5mJbai/+wDH8Q954NGUvE3Dix2ews26e7UjOPZ0fl7lUUMiaDQZ8Iuq1uHTAZvaSgDlG45de509XjB7M2UMiORzQbAhAWsfoflxv6va/1w/8OpXvkwFoensOts4maainNwds3qRgpLrY0diiPhFQ8kpmgZ5nqrSTruRjrmSKpQwD8AMWtVSwoO1QJb4wHlr3LqkXdFTyGdu+offH+gnOI3XvjYeWQpNp+rm0yzhHtdMmxSBQhvza0KDL83u3zwt+OREZULp8EYoXUx5mjgKi+n3hdSo9TO+qgDmww+vPCJ8nW3cJE08VEzhM3Sdf5y+1IENQDddZh+NuVq6zoldZpZkS6ydRGw7pZwcGALwiG7ibTCStgWMIucCLHBc6QJZgZPMZqes+0Xv4BNCM4xUB8bOJ4JEMkPAzxKhTUH9WPzFNhC4Im97RYr/uCe/K6CBhoJvx46W+fy2lrHaH08bM5+qCozTVMD0PIpvz0AEEEDWzkJtVnBBTyDjaRDpKf2OuxbgJbL0Z0jxTmRUJzWR9X3T/ToxusZwLrOiH8NP866e5oduwPV+pgwUg9dACfzJjy0WDXEPWvsIaSBNyIMWK6fhPz+UWi59NSE3DlIkTYBrKuInbf0As7EdzyCnUtqlbLyQVjYLu45EEAhfSSRU3K7wnuhVOp7l8Q90X8BHoD6OG1GrvEAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/0.data.png":
/*!****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/0.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/10.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/10.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/100.data.png":
/*!******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/100.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/20.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/20.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/30.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/30.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/40.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/40.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/50.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/50.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/60.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/60.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/70.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/70.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/80.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/80.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/90.data.png":
/*!*****************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/90.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAIAAAC0gsLIAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAACcpJREFUeJztWntwVGcVP9+9d9+PbLLkCbKhWR7GaSEEKGCtI4YqbdGRdhydaq2PFocydAhabK2ttlhLq7UztFP5xxah4/gHqYSSAPKo1jbDQ2g6liAvQwgJ2exmX9ns7n19fvexd+/evbtJ/0FHOJm5c+893+Oc8zuv724YuEn/M8SU4W1/5mjQPXtgYiCUvYaAsjOuDc+uvG6S3YBkDsbr23ZyGeb9jhPngntGqUujoyjVH5whtHRtvXRh/PyG5750naW8QcgIxu49bw72+vfs+GtFa49j5UiUwQyC+iYQWvuqjwf3/6HvdPKjbc/ur67lvrF2dZl1zza0zBs6fZOrUHNz85kzZ0pxNSoAo2vXwdOn9vcdc/kWnfAERmmaoSgECAHGIsbJO7d5jrbfbl0ceS8+6Ltw9J2TYdfbxvVw7vKtrpmM7dcHN+FClkrf7ibcl/ZvwsapMj0ocbd2bzKuqdBDEveFrk36mXnudyXu8/t0XD37e/sl7jvtWL+xRt+XuL/c226yLKEfSNznOtuNyii3Dx+QuHs2ms598fFOq9W6erW5+0aj0SNHjoAejK1PdOzacqW1cVXdtHeTjSMWK0MzNEUjCQuyuIAFRhQX7qt/78mxTOzUx5ljmzqbPxexnv2sKFCiCCJHiRxDBhHkCH63QRdZ89D6VoxVwQQyTiay4HzoJm8Oty8iV2V9QGQPyURkcIvC/VELuRdEQuRCbgTiEuRuoSztn9c3kZlksdz6ykixVeb+6YcNGCsGl/gY1MUXydyda6tBg1hyNiSLgRbL3D8+VkcBwpIHEhcU1auIl8jc36/1YBCxopKysHx7u8zd/ojDYGhlcfBKl56eHhMWwNKlS5WbPBg2mz2WTfMj9dySYzYHw9jkwKDVKbIpMB+4yPeMQ7J69vRptmlRKtlIT4uzYZ+QtmGewiKSLaMLBtkk5A9JhiMwIGzukyakTNVIVQCQQRnlKg9ApuuYkBzrRe+Q7gZpvm8QAKB4aslNFJG0lQ0bFZMKRseb+w7suNTomYlpFvtHqmqt85e443Hh0vksoiTB3G46OM925d9ccvqFgMufcuFEtFLgkCBIK2BFu5yUxRYvZSt1pAxSMR/nFsU5/y5jcE35sgPUNbCRZZxowECXdSaHQu8lSKZSGxm8UwXjWmLsinCh2m7nqnivn2mcYzvbO2F1UZU19HA/6/LSXi/qOZBoWmjn7vx7+sM2MVxt47l0VhDSiMSEYq2ytsBaXOsVzt8go5aaNbCaDQow1imc16e0z8lqlxauSFasE0CNbp0a5XYBHQBlkCgMRJUkMH779N7dr552WwP19gByDlEW+vih1NmeCRITbY/4QgPs9Ln2D7rHB89k0hNiA9DUtVqRRSzP8kKGYzlBAFIzzLUqVBHM0pSMBNJsgE3zA4Z8iJiboCDzyIUu/4zM8pKpjQqkKhZjMjLAoA+R4u10CVYlCQw3VdHm/YoFrAIrcjCEaBQa4HgWCwKOjfJ8Fo+FuMgwx2bJozhnflbIeFPjmMMpFvM8L0jlFZR8UhQchelJ8zj9owaEwSRq56A+ABaN9iyTfA3sUoaUhqDi4YUxMRmpE9V0ayRTiUqFiwRGQohmEbIhn0BhxNu8leBrYMJXOKBQpR9dYYHnsNNPp8YEp48mR3EUrxSEeAaLWSxwpIshdgKpBdYn4994fwqhB1TFdGVXekKw1fsTCD1YoCpSKrYUGS/6dVydURQ/+5lzPcC6YiSUN0841wI8VspwG63fAdhcyqDtrocAHtdeFvQPGK+lvw7wc1UMJSnL8ijtycP0fQBnpD5F/jPERCKRMLW+gSQw6qqdrD9OOilRdDKZqmCTpcJHJWNi7Sx66Vw/nxzrO55efo/rpI0KLrR6hmrDvCXGpSdQmoWsABnSBiLM0ECjwri4K/hWroHEavOaw4M8rgjuIJ1ogWT5PIZXzNuhgaCBoTnq8qbfgeqGBeEi10NoCbyCcYm8Sc5fM15Qhpo2VLc1vSTm4Vc7V233xrqnlYFy64v00UBuZk1/RoHBNEHV1NRMEsoKGBbs+Dh8PplCFO9ayMxhBOvSoGvm+orZFYEae5Zmxhc322samE8FwGFH4b99ZgJnMiKXgUyWSmEg4UTRIpIbW7rMTnJMmKQsooDyjHLtrJa4DHms0HDl9SpHWrIA2akLW+S8eAWlO98jIH2roiU6pXfXTi1QFAGlkDDWjKuj8f6RiIV21jo9wDHDB5b77z8esHv7+i8n3cL2V6OfXuacGbce7JxY+YA709vitdiv4jSHJ3iUJmcPWnTQCMxa03Ib5x9FuYDnEi/OFWtdS6MzkE5Z0y3K12ptEKgwmxiuIBC17c1sqZ+ugoq090g/aipIgALGxi33dLx8/PDenjQ/yuHqxO77e5s+9NUP9/wlVVcFF3vTLAfWL9LhQS4zWM2NVmdwnMQCQBaByCCKFjDFKYJMEY+Crkl7r/inBobeHJqHTsXUn5QMlppi6VZQVwDQ1+pcnJmsbCBDOwPaOQM3nuTmvEudu0OIeWi2cqL73vG73yDb1DZZGAuFecTYYNYCm+WjlWExjDFPKrfVQsoEGUIzcsGggKKmciIqJZCWi1Cu2TWEEWiJQhpAyecGFSaENQdUYmcSS+bP87kqLJOuPEwJEi0aiiOjVL9koriOVDDuW7Nu12t73j4caXBbGeL1A7eGE5L6M2d5nJ4xr6uCckJgvp1/a0EErkbE0HRrw5iYQXTGitwgMKRqSNlG/vBRaMHJCevOH1pCghJRphQerOuYVVVlPJRPXzJItPShSjKmKH/UMp4WNacG8xw1hbDQ/nSEdUUISkeGKRKg/zaVCDmGMgMzPLWVTpaPVOK0nYrXBqY5GueGRZqcxt3+gS8MpdhaR8UgeyrCJJoty0ayoYw1xlpi2ENOKFacdYhpB+Yskq9i7bQ21VKroaL4vuL0pt8t9AoX+67MlNoaSubTBBgJE4GciJRVS7mtoVSUCovcFOXzC4V0aWpSJLQ1i29AD8a6X9z12pbu0fdTobp/ZP/VmuzjudNLfLzw6I+ZLGvLsvjyOZ6jE5m0zWGxj/lOLtvw+X76g6LdtAsA6J29yNuw8d3URxZvajajNHuyrxql5xWoZrqZ6dy9bywps080GlVuCn7PePSpVYc6ui6Hbuk8dtEXtUeGxROdwbZvujHMPf/P/l50gnIk6r/sb6AXoKqqxW3zp6DQTfoEZPylr23N3eT68lPdFcE1Ow+Er14Ox0YhFkkODV8eS6bmrPD398U2/+pr/w1R///J/Dfw9i2ryHXrkx233Gp3OG0M7RQoZ9bdeO8dX72+4t1YVO6/QzY/v+a6yXGTCP0H6aH3j1BniFoAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/bloat/expired.data.png":
/*!**********************************************************!*\
  !*** ./asset/gauge-ui/necromancy/bloat/expired.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAMAAAAMPqWtAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAASZQTFRFAAAAPT09T09PQEBANzc3Ozs7PDw8Ojo6IyMjKSkpHBwcGhoaS0tLSkpKHR0dLCwsPj4+KysrKioqQ0NDMTExQkJCREREMDAwUFBQW1tbWVlZWlpaBgYGV1dXWFhYVlZWVVVVU1NTVFRUUlJSNDQ0RkZGSEhISUlJLS0tJycnKCgoJSUlJiYmJCQkIiIiISEhICAgHh4eGRkZGBgYGxsbRUVFTU1NTk5OTExMMjIyLi4uHx8fMzMznZ2db29vqqqqXV1dOTk5Ly8vUVFRa2trY2NjYGBgaWlpNTU1QUFBYWFhODg4R0dHNjY2Xl5ebGxsdHR0goKC6urqo6OjsbGxf39/X19fkJCQ1NTUeHh4XFxccXFxPz8/hoaGiYmJurq6bW1tfHx8SQp9qgAAA/JJREFUeJzN1v9P20YUAPB3tvOlR8NCWEgKrCFKCUrWrqpYS/fLOqZJ+2enSftpbTWpFZPWdhI/jKGGJCSldAWyQoJJFkLi2Hv37pzYKU1/mFr2EPLlfL776N7d2Qz+B8GGJQxgvYtEBJHgaKxv9M4uChHphlin+4kZ5OysO3k0uBurf/iSi4iEWqFWzNb7UI/a4c4lpm6xU247sk2HM3GxqASggQ3wjyiBji2aVAId4IQbqmcq0UPHqo6ByQP4LD4qSxStNzSAYczXzWgMB7XNs7ixy67W4DQN2HmNR/A+ZolK2FbVaaCVs/AXj0EpK0ba5XHRXwX74idIFYMaVFdBd5g3AJZEgx2eoIEdLDVEIQdw9IIQoXwTpgr5XYAUq0+z4wPH1k/TOJ4YUIc+zpAfoTtaGRQCr+ciMi95nLcFIl8dQThUaggBuIhFY2e5Zs2zF8yxsmzzxqursPe3BwGgEMDcuv+CEH0UIcQbZHiel4hg+LPaTba9ELAL13fSj1e345fW9aRo6yKQIRMj66IOZeMcRKbiQ1A28uBFzAiBmH2eFAT8TwjEatPipcu516Vvf5vMPJkwF5LlTKGT9iNgz4fQYIiArECk2nTz/YiiXAlVRCDBAIsQ0euXW1u8vdRu7Af09Bxjh4OJEAPCWAQazkGIIIRYln5EA+RSqPK6IGBM00w8v9XauvPgc5bqVueeRFbuR3t6wt3BTYlwmGNGxdIQ2/A4KpcEQP1Q1GRxsxy6CJiUiAzAm7iciAJMEaK4VMRSTmUBDwq5cQkRv4Y9s5h1lPyTZX/55vH3a3MazoMNcki1pYCOC9wouvhBSwKjJBF4Gky4CBWIUMuyAN7ISQKoaXARtzu6w5PizdEL7s+yH5eLV7CrRac/QDhMJof2s/ghszEOkZGXCk2E36AQrkGuiVVT27wVtmfN6MObhS+mf+gHruFrxPEiYCQoGwzr34NQ2TjH4BJwzSTkORFgiYnNTPLnzsrLYPFe6Pd2FkoZNoLQ3AwNEDgn4xFyWXoQrmFAEA3UYRWCmbXvOr/Ommyyc3K7b7LKoi0NfsQwECEmgmaCzu0RxHBFwBDxNoGQ6tiOzx7k+cY99kdt2XrE5xMHmHaVgnEINx20UcSbio1FvMPgIoI3qitQ169sLDU37m7zXvnr9W6axpabw4MoL+IfDUwz4ZRdBBBkol3xIoTBixhNhTAUZiQCglNT+1+9Wm5B5Kdc9dPAkSX7pLWnXuXoUa9yXZIGC0Qnoz2YN18w+VVgqw4pNNvXRL3KAe5uLeymjJT91Mqs9wLdt/r6wOF+3q2G1+6k9oLPWN362ATvh67xZVZ/DQ8/PsGLuMD4F9f14SiviZwqAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/conjure-undead-army/active.data.png":
/*!***********************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/conjure-undead-army/active.data.png ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/conjure-undead-army/inactive.data.png":
/*!*************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/conjure-undead-army/inactive.data.png ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAT5QTFRFAAAAFBQUQEBARkZGDg4OBwcHOjo6W1tbYGBgIiIiVVVVUFBQPDw8QkJCKCgoHBwcPT09Hx8fFhYWIyMjUVFRSUlJODg4KioqJycnJiYmJSUlS0tLWFhYSkpKKysrLy8vNDQ0NTU1XFxcMDAwTU1NWVlZMzMzLCwsLS0tNjY2KSkpMjIyVFRUU1NTR0dHNzc3Ozs7SEhITExMPj4+GhoaGxsbOTk5Li4uXV1dMTExHR0dREREQ0NDHh4eT09PTk5OUlJSPz8/RUVFQUFBISEhJCQkICAgFxcXGBgYGRkZV1dXWlpaenp6FRUVEBAQXl5ef39/YmJig4ODEhISDw8PaWlpDQ0NfHx8bW1tbm5uExMTX19fVlZWaGhoZ2dnY2NjZGRkZmZmYWFhZWVlc3NzcnJybGxscXFxd3d3hISE/F/F9QAABBdJREFUeJyF1NtP21YYAPDvxLnZcRKHXEgMgXFJCuHSMLWssO2lVcXeNvVlYtK0v24PmzppU7VKfUDTxBgtCMGihHsbSEISIIHc7djn+MwpTdJC2c6LdT7/fL7Pn+UPwY2F9IVvRq8HTDoD0JT/gyzSGISIRi2V/4JOTMCqn4hkAkyD3gZbWXmESi79WnEWQTHgj8EW87ReBB3zHAJK6tr7pXagU9XEPPY3+aKZY845gAZrR+luqe+gs2YCdaTEWlGGCuVgvdSfARY86BCYJu7CVtYQOu3JYZFFSc5fOrfpUQsLcBDdBo2qV9Ak5lvMwianUJrzULisul8PA0UgsRQISkMg+RbqO2OvUX8oGdUA6T1JRGRjxZcHMGL9nhCf2jJXriATlMAP+WJQz4j2IUSsWiIoQEU1ydhfApJpQ97JqJzs2wnw+2ETJEKxPgP4Lyz86pzCnHnKuAt535bgVe34aJromcPxXuRL+npWJho5OUxI/6s2fNAgjnWv43gwNQkxgPAFsdVG0PKI3R6ruy+9wbU2DKUJ1O9te+nF3fgkSUxs95H9cNYlyNWavT6u7JIOTCDgmIACntg9/cj+hiZyWzNrQv/eDFpyN4YO23BUqBeyc0Wh6CqYkZhicVVg7QaQpHSULg8FVrUO3BEtIondv7QVHQUNTAaDsZcatHUGZjexewC/bEPD2B7Yo3oP1Zdo8gw8R+hcmAGIU8ltLvSeSp0TH0LhOKp/E32zKSrkUuICeapxjAPFXYzd2ejU+KhxEF2d/xsofPHsUyKXKW26LcnP1/yMo1qk9m4fF5LDCNcdhp3Ib9/8HjrqLwq56Tcwwmag6G5a8nIndWjv68sl9iso254/qWywtpyv4ldpCVz8EfAj8Cdqw9n4xJZJW0BlkxWk52O7PUWeG9+4e0YJePJWau7WWNl5fLmGw+EmwB/RnCpWs+AuEDxP8nmBmHG6DaNHyDy9MsbEPgPm/LTHVXSd1NB4LMLT2mC6nkeFNhSH1mc37i9/+aqfeJU34sGTf9iKNKrE5taGBrinnp6DTupUcpS+ju4M18TMBdebZS3bxjuq3ZSY3/QcRA4/6UDg+dxAyq76G9LgZujEBzbpwa+mkZO6re6bSKmHcAVh8BQeCU9DXGrUonDHuLTwSzCUVcTNcKNknNbwEvVn1Xe/KzFDJG7zNvCUzBPch/7KBK0YnQxVyMOfwH2KuwMAcQQUNoDN1VG2dEfeTYLR5bi4oBq4a+UPR8rgufYtWilxA+zp3uL6jl8pC87Ii7dZr0+zoRx8t91QKoXFZjUlh9JymooZ9WNjDyEzLBpenH+fDyCQfwZ39r0J+eEgRawGP7RGc+EZMJp02yCFq1YtSg7yY7e4WyCAwQxAVUa9Fr4J9VIDWXoj+i9kYAZHd+FD7QAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/darkness/active.data.png":
/*!*************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/darkness/active.data.png ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAIAAADTi7lxAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAA7BJREFUeJyFVEtvHEUQ7urXeMa7O2vHia01wighBhxAcEqwhMQpAgkJOIYDv4BfwIEjB4jECQ6ckThYnHJCIlyRYkvmFRKykuN1HMd4H157Pdvz6K6mdteyiW1BT6l3pur7vq2urm7OzhrAuIAg1vPT0ZuzpetkF8I36JOcg+BZg592CdATwQvz8Y1r0zevnf/i6sgu3KTP+fjDsqoR4P+FOIjJ4PJC9aMX4xsT6pnUPWya2wf57+MinNIXyXmp/D4BCPYfQjAmqlPBwlvTn75cfTcUeC/7fF18/UQvNeQ3f2afNfMfZsZqi+c/JgDBFA//vcxjIQpU5OxC5Z2L46+3zfJf6bdGb6S56e51THpg1GaD3doxP5cEJwDByrI21DolFPDKbPjKfHlRQLZVLHewXhS5MUluc5P2EbGA3lZ+B3wSCUWwCTVHlJNCkgcVWXvt3PXn4yut/LdNe8eCSU1OGXmPWZH2D4wt3Db7tW3/iBReiq/MlV4lChGfEtIwXtFTtfJzpXD8b/vA8dxbTul47ynqme9n9BSWpetmpc9apTB6tvISUYh4LAQMBIxFKo6jSRWIZr6Gzmdp7rxlQxkyRJsVmXesbRs539eBnCnPEYWIo5IPMwKQoCNdiitVHfGN3t08dTK/XHGLwo8NOssHZXc1tm+nqd0xGxnfDyM1Xa0RhYgAcJwRTR5QahaGejKcQYbkjPG9wM8CE9rPVvGDwM955kqqWgpLOpJMWaIcdQAflYCmzCUFN07k1GzorYF6VyxZ2KWog92u+L7LbyG9AljIqAL7RSuzyXDlR8X23vq8nWw/SdZur333uF8H5JaZBFYd9CRIBwcJX035I+aha7eX7n6JqnjQWWmbbSKONuQwo8InqU3qrV+SYg8Bh8v2AFzSUFwpyYETXNDDGbkSu9vo3E+LhIijpA633/rUYVHfXt03HY+eCkQ1kFwyjgjOc1RSadCcc/r/c9F0o31/Z3+TKER8qo8sZn1sbXTqKw9/8sicKJhCxwvnHelSWzsoQPuBx9l7O8tf/fjJnmkShYgnj4hxnRx7lKd0mjaNyCMJPJzRuYEocxyspB9SIcoZZ835wmCnwER4KVFzFICC6uj9sJrIBy2BwJ2iEMFS1yXKmdcI1anbteskxx0PMBJeCydhoMjJpAuUDb1zBCBYgeZo79npi406pWe39tyjxDU9WuWDAEMyUqRT0nfNPbtBAIKdIJ5x1RIodwd91+rZx0PbGpgbvJMzx/5pFRr/ADhhSf8dyyqSAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/darkness/inactive.data.png":
/*!***************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/darkness/inactive.data.png ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAMlQTFRFAAAAAQEBAgICCQkJDg4OERERDQ0NCgoKGBgYKysrMTExNDQ0MDAwBwcHDAwMIyMjLy8vNTU1KioqJCQkKSkpNzc3GxsbBQUFPDw8MzMzGhoaFRUVFBQUGRkZJycnPT09AwMDIiIiQkJCLi4uLS0tHx8fEhISExMTHh4eQEBARkZGMjIySUlJEBAQCAgIUFBQKCgoDw8PQ0NDU1NTPz8/UlJSWFhYWVlZTExMVVVVXl5eCwsLXFxcQUFBYWFhBAQEFxcXICAgRUVFt5gaCQAAAWtJREFUeJxNkUtPwlAQhWdKoeVlkKcskCImNZquxIXR6G93ZTQNCxs0NT5aDCBECdKSttDe620rwmwmmS+TOXMOQlwYFmBAyXoQNy65BskF2QKYjzYw4Fcp16L/oOZwYjinHC6FH1I0/oA0LSFayUnaqdE0ATqsGzHIF+zdBIIRZOuhiFFlZEWA42Qc2EdP9KSH2Bq0YPFBSAhq/E6KKXqUAXoJud8O/Jk/ZgBz+aKweMlIoQz9+CuXwaFlhYA7KODqtemZsk6qVnvUxO83QiNQxu7pvfRO8XDeMqsiWYNSUzAnQNKS4dBE+QDtz3EEcq6iJzy5xwP4wNNK+2Ehhjfg+rYBe6qsCwCenL+7dKbm+U30R04UG6B2NEUDRXMv8Hluk/hzL7asA6ApoLkijT8HDrPg+bzPR1ADGjofuzujZyq7DAwJLtaNTR6K4TLExqBY2iYP1q66S6ZKUVMlk25Hy+zed1hL99eZ/wKdHZgWhdjNYAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/invoke-death/active.data.png":
/*!*****************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/invoke-death/active.data.png ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAr5QTFRFAAAAAQIDBgoLEBoeERggDA0aEhwiAQECBgoMIDU7MlNdOltsJy5NHBY8LDpWGCgtAwQFKURNP2d4RGiLLjlgHBU7GQ82Hho/PGJwAwUGAQEBFCEmMlNeRGGYODOxKxyMGxE7GhA5PD+uCxIVDRUYOFxpRGaONyfCKhePIBNSHBI8LhmsLUtWIDY9Q2iKPkSuMBi7IxZgHhRBHhU/HhU+JxZ5QWmACA4QP2d9PD+yNR7MJxh8HhY8IRo6OzJJKyNFIRlCMShHHxc+QVWhGCowRWqYNyjFMRnDIBdGGxUwLyk3hn5wg3twSUFPjIR3HBY0Oje6JEBHQ2ClNR/MLRmlHRc2GxUzLjVbYmxwnZeGkIh8joh7GxUxNiXHAQABMFpjQlqzMBq8JRluGhYxJiREP3CVUbXEcISEtbGjXoePHxw5MhzEAAABNGVvQly6KxmZIRhOIBs5amRohIqDTnmEVGJsqqedSmh1S0VVLxqzM2VvRGe8KBuAHxhDQDlTrKWXvbagl5SKlZGIwr2tjoyFl5CKLR2lKVdeS4fAJyRqHhhFU01jraSQpJuBtayTxr6q0866wrulrqeVLy+PGDQ5VbLLL0J1IBlQJiA9SEJKfHNlr6WOtq2Xxb6otauVQTtIPGaXCxcZVLjFPGmYJCNbGhUzKiU8d29pqqCJkohymI95mI53Ih03S5a3LmJsXLXWQGiUGRUzHRg0U01VjoRwRT5DIx42V09MGxYzXLvUCxUZR36cX5jPNDttGhY2Ix44X1dXLig8GhUyQDlEHRk6M1xxAQICHjBBTXChXGy7MjBmIBtALCc8Ih02GRUyKiQ6PT18ERskBQYJQUeAYly/ZVXESDWJOihuNSVmPCpyXlu3BQUKHRo4NyxoXUCrbUTGc0XQakTBFRMpAgIFCgcSGxMyJRdCKRhKKRlKIxY/hPDmswAAALxJREFUeJxjZIAARhBgYPz7n/UnVABCcSBJ/ECSEGBEkuB4DpOQYoSKMzD8/8/8+z/792cQCRW4OFCG6c9/th93IBK6MIMY/jNAdFwGS5gzwgDEjv+cX/+fBEm4YJHYA5IIxCKxHigRx4hFgncKIwN7GhaJ/0CJOBksEp+AEgztWCQqQZZPwSKRA5JYiEUiHuzzdRgSQZAg2YUh4QaROIYhYQWLj0soEnpIMXgbSUIVOWoZHkP0/PmvDI1zAHxkfBYAZa2VAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/invoke-death/inactive.data.png":
/*!*******************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/invoke-death/inactive.data.png ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAPNQTFRFAAAAAQEBBQUFDAwMCAgIDQ0NFxcXJSUlKSkpGRkZERERHh4eEhISAgICLi4uMjIyHx8fDw8PLCwsEBAQLS0tCQkJKioqFBQUIiIiISEhGBgYJCQkGhoaMTExBgYGLy8vGxsbExMTMDAwNDQ0KysrJiYmQ0NDQkJCR0dHMzMzNzc3UlJSSUlJFhYWTk5OZWVlPz8/JycnNjY2TU1NXV1dIyMjOTk5HBwcXFxcaWlpUFBQb29vS0tLT09PVFRUYWFhcXFxf39/bW1tFRUVPT09YmJicHBwCgoKOzs7WVlZTExMKCgoU1NTRkZGICAgAwMDPj4+SDI4sAAAAYhJREFUeJxNkctLwzAcx/Pruj7WZHW+Cm7MiUNUBI9e9KLCRA/7Wz2IigiCJ1EQREGZyJwPmEOd9pFmWxObrsKSQyCfhN/3AWi4AADFmwsh0ovhoaiQoEhkAz4CCM8A9HTUV0WGKe4/gLHAYBlDvlRCsx9GkRiCKVfXfTxI/qrAWW7QGYIZX5COlqoYE64dvSegDL6S+3C+c/EMr9CZDHAkWhJgB2DQNTE00Rz3WF79ttueBBXzM/NjhrOxXMSfNWZbWdqUpqr8VTFKgcWM2KDfzoaLv0pDgvn8k+4vAHUd1CYmb1jl6PcxAePwQSsAHpGRqA2Tlr8kQEXsZ38WtDSS4MmmtvcmwVYvbK3cL3kEEGP4bvlWq2inEtSCG4v6m/CiI0eIh1i4kztOnO/BucLw2qWJ/LWLiPNVcpBmNac99vOfmKKNs4l2vnpF0qxgxew1C2/FLio9FFVLux6I/z7qx+v4qECR0d0Jz2r7Iw3WT7ZfOUVLrdLh7v5otYgUXG0aeV3yknb+B452phYPxwQ5AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/split-soul/active.data.png":
/*!***************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/split-soul/active.data.png ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAwBQTFRFAAAAAgECAQECAgEDDgoUDAkSCAUYDgksAAABAgEGCAUZAwIKBAMGEw4aEw0aAAACAQEEAQADHhNhJxl+AwIJIxZvKBl8DQgqCQcOMBZTJRQ8BAMHDAgoKRqDFg5GDAclLB2KKBl9CgYgIBViIBZUHBJYCQYfFQ0lYCCdSxyACwgVHBJaJhlsKRt4IhZtHRNbKxx+HhRcAQEDEQs2JBlhIRZcIhdvJRJFfCe/cCS2EQ0nKBp+IRdWGxQ7MByELRuHKht+Kh15GxJTHRNdKxhdOhpfRBpzpjTenS/jJhZlKRyIGRNFMBlYRh15KhdXHxVGKxx5GA9MAQABAwIFEQ0rHhNERRxppjXMyEPovTzocyy2JBh4GhJUeC29TySnKBpwGBEqLBx+FQ1CBwULDQkSEQwaLxVSTByGaiKryT/o3Uvr2knrcy3FIBR2RB+VkTC+LBJZHhNdKhx6MR+XEgs6CAYNEw4bHxM0PhlreCXAnC/fszjm3Urr10fqoTrhJxaaXia+qzvhZSGNDgkfBwUODgkoGA9LCAUaBQMHCQYNDgoWPxhvhiq1ukHneDPeOR2uUCG6sT3l0ELpeiXBUx2TORhoFA4fDgsTCgcOFw5ICAUPQhlWgi62XyzRNSC5KRedhzLc10nq20rrlS3beCbBGhEoEgw6LR6HKRt6KhdpOhp1Mx6VFxJmLhmOZSnGy0Pp20nry0LoaSGsRht9LhVSCwgQFQ5EIhdTGBElIBZKKBt3IhhpFRA+RSKiWyWutDbmrjXjhCyxTh90JhltEgw1IBdMHxZGHBQ/GBM1FxI0GxNCOyGcLhpxny/jkS3UQxpzKhlrHRRdKBtsKhx+KRqBJRpnGhQ7IBdWHBJWEQ4obyS3YiGfJBNFIhdwIBdQJRlhIBRhLh6KGRBMBQMQHRJdKxyFKRt+DQgoCAYRPxlsOxliEQocBQMPFg5FIRZeIxdnCQYcJxl9Jhh3BgQTBgQUIxI6BAIMDgkrFg5HJhl9EAo0Eg0aEAsWBwQVCQYOCAYMop9HCAAAAPxJREFUeJxjZIADRsZ/DEg8OIuZkfE3hMXGyPgDLMHJyPiVgYGHkfETP+MHBgZBRsa/H8ASIoxAse8SjGDw7Y08I+N9qFFKjEjgCy8j43mohBEjGtgHt9wZVWI9VCIIXcc8sARTIro4Yw9YohRDnLESoqONkXFtCIrErHNgO9qF3ojChG5qMF7Rvfi/GyyxDNWcjQHr5v8DS2xDlcg7BwvEwBKEaFk3oz48dJ0moOgIufMRKvEA3bUSPyASHxl1H37W/n9d/f9t5RffGOUfybwBSwi8ZBR/D6R+/PjNKPCFgYH7peh3sATHV57vkKD8x8gMj11E1AIBEwMi1gFVXUIWhpEDTQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/split-soul/inactive.data.png":
/*!*****************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/split-soul/inactive.data.png ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAOdQTFRFAAAAAQEBBwcHBgYGCgoKAgICFRUVGxsbGBgYCQkJBQUFGRkZExMTHBwcDw8PCAgIHx8fFhYWFBQUDAwMMTExJycnHR0dFxcXPz8/Ojo6CwsLEBAQHh4eEhISIyMjU1NTUFBQERERGhoaJSUlZ2dnYGBgPDw8LS0tDQ0NDg4OBAQEKCgoNzc3ZmZmdHR0cnJyPj4+R0dHIiIiICAgT09PW1tbcHBwNTU1V1dXAwMDISEhQkJCX19fQ0NDJiYmLy8vampqLCwsQUFBOTk5SEhITExMaGhoNjY2KSkpMjIyWFhYUVFRSUlJSxX6kAAAAVdJREFUeJxdkcFPwjAUxvutpWBRYMNFk0kUE6Lzqge9+P8bD0Y9QETDQYhT2CImdmwdVFhhGt+hee0v32ve94EUBaLJ31vRgSxMR5EZUFpYanlqkhEsRSgh1QZQbWVKAAljiFUdcbIeZdWRShuItnSGtMGyaA3gsDQWHAi1+709JY3X4nMnsS0gqFWBEcPuYKNgLoXFlo+OqiseNbs5gN8rW0dYVW/noCtUR/ZyINKWM2dIKu9zD8/KGzjB3Cgu70v0NFfIas+/E0ElNnvQ/Qh+HQ/q4ivhjTGVfS5zcBrEnq2f2Dl938PzCOlJ1yhqs+OhajiHmLizR1mJ9MbE9jR1Q29mfVzjYcE/o8LdVmlMVHPMaz6/kUJWww2wtb0ViGkG/yVpDymfzNeg7IXTs6Fu9ct2KK9uaTlWZg/efFvFoAmrylUwnb4BRChlrBRH3SLd32j/pf4DQCOMFiTnhEoAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/threads-of-fate/active.data.png":
/*!********************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/threads-of-fate/active.data.png ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAIAAADTi7lxAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABBZJREFUeJxjYMAAzIysXCzCvKwS3CwibMw8TIysLEzs8jzm+gJ+2nwuUpwa3CzCjAyMmBpRABszt5loepzyinTV7UnK6wNlJ1qJZgqwyUpx6ZkLxVSq7uzQOJ6juFiRxwxoOk5TOFgEDIVjK7Uvteq/rNd7VKtzt1X3Yb32lSCZXlFOdaBDTASDmjUPzzN4Wqy2UYPfjZ2ZF4spTIwsTpLVdXp3i7ROqvC58LCKAz2oLxhaqLR7pu6HUtWjegKBDAyMfGwSQTKNS8w+TTV+Hq0wFegDLM5JUFnZbfTOXboZGC6w8GLT5POaqPOuW+tVlNxKJkZmoCAvq1i73oX5Fp+nmL7UFwhADy+gE9LUtvcaf7KTLGNAkuNhlWjVel2v+Spe8SgzyAJGblbRRu2LC8w+Lzb9HCzTCvQKWjDzBijOqzV6FauygYdNipGRiQFkHqMIp26h+rMMlXtOElO4WUXsxHKrNU7NMXxbrb7HW7IMKILuNaBONUH/GI39ubpPHWX6JXnMgR7hYZUxFWmKVrzlJbVWkdfTX6a9T+/RPMOPUXK9kpxarEyc2GONi1VERyQuWetekuYdf8W1qgKBWgKp7pIb/GT2agsmWYgkdendnWX4rkh1kziHOiS8cAKgu0Q49czFa33k1kSrnA+QP+gutc5IKD9CbmKf3u0O/Tv2Yln8bJL4jECYxcAoyK6sL5DqJD7VVmyCnejUdKWN041fTTd+ZydeyMkiSDhZQwAni7AuX7Kj8EQboVYVPl9n8Zqphk+nG74sUD1sLlSnxOMryK4CiQqcABi7fGzyNoKtPqJrXIRnqPJ6h8j19+rf7dK7biWSIs/taCJU7S6xylNipSKPJwsTB3ZTOJgF1HhDHUQmBYpvsxZsk+dysRRN7tV/NNP4g4tkKTCCGEEpSEJPINNTYpWb5EIRDl1GjPBm5GAR1OBLcBdbHiKxz1V0jhSnFQezYLTC/CmGb6cYfpDiMoAFH5MAu4q1SEeA9A5lXl9WJtT8AczHBoIFoVKnwiRPeImvBoYRxJvFGqf79d90678BJm6EnYyMWgJxEXJH9ATTICpRokmUQ99XameE9Klg6b0C7MpgDUyBspM69V526r02Fk4CZjqIYnZmPguRqmi5o2p8weguAgJWJi5joZoQmaORsmcMBfPYQCoYtQUCKjSvtOi8iFHYIM1tzskixMUios4fEiCzOkx2lxSXJXoug5nFrcYX4Sg2LUzmsI1ohzy3GzDgZHmsXCXbMlSPZalfSFE9nqRyIlH5ZLj8NlU+f3wFG9D93KySWvxxDmITXcRnGwuViHLoAgNChttcTyjaTCTbQrRQRzBSksuEGVbO4ATA8ALGlzC7phSXlRy3swC7IjMTO7B4AgYN0ERuFlEgA6spAPml9S7zUMFBAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/incantations/threads-of-fate/inactive.data.png":
/*!**********************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/incantations/threads-of-fate/inactive.data.png ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAMAAABrN94UAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAPxQTFRFAAAAAgICBgYGBwcHBAQEAQEBEBAQGBgYFRUVDQ0NAwMDHR0dMjIyNzc3NDQ0KysrHx8fCQkJDg4OHBwcPT09RERENjY2ERERBQUFGhoaQkJCSUlJRkZGSEhIQ0NDCwsLUVFROzs7IyMjRUVFExMTGRkZUFBQKSkpVlZWTk5OLy8vMzMzTExMJiYmTU1NS0tLMTExVVVVT09PIiIiKioqLCwsDAwMQUFBICAgQEBAUlJSPz8/NTU1JSUlODg4U1NTLS0tPDw8Li4uOjo6SkpKCAgICgoKJCQkFBQUHh4eKCgoFxcXMDAwJycnDw8PPj4+GxsbFhYWEhISOTk5cDWsZgAAAY9JREFUeJxNkd1LAkEUxefO7qitiYsfuWkf6Fo9VISm9hAURdBDUH9rTz0EBUVFQorUlkKWWaiYrZawouM67a6V3ZfLnN8w5547gKwCAIahT4ze5ailWLoA/6vOfoFkHrsO+BRfA2CDar8/BGTakJ6Z3Cdqu8tFjUslzQKSFyBPEdjnARTKTfpBGVATcEKY3Jg9yHrvDE95O+M5C/CxqjuPKYlBcVJJGS99KYOhB5fQeaU9SNpyfs4hwjVoP1NheaoUvpyuh2hFJHI7S/9ykBjW8/Izv8wXQq5jNAqIyNatL4iyIvKUPuh/ILkkzc/KeqjTiJyOVgI76uNM6MNdWMrEn1yt4u9KpFaSfL7FK85ajeoBbb1huhtAWn2cA0gnKqikIjIecdvOrHHBI71wYzXYL3J3ujEGjqqsZgISEzIbF00iJN/DhwzxifseHgYUNs8x6Wh7jUpzO10/aLZmjoYeSNhtZBdmL9W1CVVHWTnf/fsowHxKPFkspx6iVx1nk40CEq995brX4pmvjnVLR9+qOJ4WHfzkVAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/living-death/active.data.png":
/*!****************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/living-death/active.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/living-death/inactive.data.png":
/*!******************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/living-death/inactive.data.png ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/0.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/0.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAOFQTFRFAAAAOTk5Nzc3PDw8Ojo6MzMzODg4QUFBPz8/NjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09Dg4OEBAQExMTFhYWGRkZIiIiT09PDAwMEhISFxcXHR0dNTU1UVFRUFBQQEBAKSkpJCQkGBgYKioqQ0NDLS0tJiYmTExMVlZWRUVFLi4uJycnIyMjICAgHh4eWlpaRkZGKysrKCgoISEhREREV1dXXV1dXFxcTU1NMjIyMTExX19fY2NjZGRkUlJSU1NTOzs7R0dHaWlpaGhoZmZma2trZWVlLCwsYWFhWFhYLy8vd3dlHgAAAWZJREFUeJzNlr1Lw0AYh+9tYpqgpU2lgh1sFknF0clB6H9dcNLFzU4KKiLt0KUN9QNqkzQmXr6aI8nwHi+IN4Xnfjz84L4C7B8MED4hrJlHQ4KjKKEAgF+O4iHFsSsBaqRAEJTqoiHJkZcwIB0fYhQPaY6shKEn0DU2X0IUDYkOyGjTiye2bLHnF1EspDqSEoYBEdMDvxX3m2W7Fg8l41UYl2iYrO1x7GpNXm/tJGE8ZHLxGshLNCzmbTuvp/C9z5tZDB5DGZh2IDl4Cegfhptlx/R0pwferNedRDIw3VokR7wcYDl2vD6Ti4f2yVJ7To4vHjK5eA1MNqai6kOV32CfR/B2MM/OEh5KxqswPaKjxcvVqqXxfk9n17kWD6mO7LIaTe07xVodmzAWtGhIdOTXtqoPXPv9/vJW1OIhzbF7wNThtP8zd0taNCQ5iqcczteDm7IWDykO8aeGReWoDCQ4oDr99+MXlLmwJJ00VKkAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/10.data.png":
/*!********************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/10.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAutQTFRFAAAAh4bRfYPLOTk5Nzc3ipDSll3HkSnGg4TQPDw8Ojo6MzMzODg4hobRkCfIm0vOonLQo1/TiobUQUFBPz8/e4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09eoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faDg4OEBAQExMTFhYWGRkZIiIiT09PeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXDAwMEhISFxcXHR0dNTU1KQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUUVFRUFBQQEBAKSkpJCQke4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRGBgYKioqQ0NDLS0tJiYmfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQTExMVlZWRUVFLi4uJycnIyMjICAghIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbHh4eWlpaRkZGKysrKCgoISEhhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmREREV1dXXV1dXFxcTU1NMjIyMTExjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4brX19fY2NjZGRkUlJSU1NTiobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwOzs7R0dHaWlpaGhoZmZma2trZWVlbw/njw/osRjqyybs2EHu4Grv5nXv0JDmLCwsYWFhWFhYh4boTRDjVxLlYhDldxLnhxLooA/px4bvLy8vh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bg16AadQAAAdFJREFUeJzNljtLw2AUhs8xFZqCIi1eIeBQQZBWRKiDSwWd3LzgoJMuggoOLl6GQlWs1h+gqIPgpnZw8bI4aEEEkeqoBcFLwVYqluqQWps0iUna4TuL+E75njw5vCT5QhD+QVB3iN9FzjNDos6hWKREKSJ+mVV2SNT5HEwVlChDKW9GlR0Sdc6a5TGdNpWoxHwe9So7JOqCAu8MJRpQTeRXZYdEXbDn744jEdWV8EhEkU9VlR0SdcFul2ESrviUVsJTgdkSrXJIuZ4ZEnXBgVlwvCfdEtsXlRIDaMw6kCDQdIsLPPfgjD8I1Yiv0WtRLjGO5vgpUA67bhmB+2Tb2gzeuhC3RgB9olRiweC91CGOUaAcdp3r6Ek8Hbd0xmr3+jC25ekazciPY8PUtx9IEGg613u5Ii2GdiadE4c1S2nlxTwwqN78WHZI1HlbRTC3R+PXXbjq3o6quwPCOrVZHcsOiXokFLg4a5K+FbOLjaCVgHBgWVHrdWOZIVGP+INebupkqBUF0JWAR0Wt1I9lh0TdVjX8PH8+eNQOhhKQkNVy41h2SNRt05vdmd04mErAR061mceyQ6LO+W7m3OpC91PzidbCseyQqHOQ0Y6x8PTf5wfYYbYVA4CanAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/12.data.png":
/*!********************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/12.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAg1QTFRFAAAAh4bRfYPLipDSll3HkSnGg4TQhobRkCfIm0vOonLQo1/TiobUe4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XeoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXKQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUe4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQhIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4briobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwbw/njw/osRjqyybs2EHu4Grv5nXv0JDmh4boTRDjVxLlYhDldxLnhxLooA/px4bvh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bgHuL/kgAAAQ1JREFUeJzNljsOAVEYhe+hUKAS9ezCEixAFFOJSqLRs4GxBIlSJWEFlmABerWoaBSYuY+Z+5jiv/kTcarJNydfTjJPiD8IrEO8a86TIcNRjWgCePlVOuQ4yhEtFHm4VTpkOcyILlRudpUOeQ49og+Ta1WlQ6ZDjUiAZ0fzi6nSIdchRyRtfBrlurOukmFkPYTFiAHcnEQUFHH1GpiPGMLPPgbK8Bz5iNRB9x6wiYEyPEdxOebetLWIgiKuXgPljbl06Epp6TCyHkL1iGYWXRgtHXId+mWVHaaaziwtGTId5rW91XRia+mQ5yg/YDtJU1dLhyxH9Snf53Tsa+mQ47B+ao4YhVo6ZDgQnv59vrkshBUDppEWAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/2.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/2.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAutQTFRFAAAAh4bRfYPLOTk5Nzc3ipDSll3HkSnGg4TQPDw8Ojo6MzMzODg4hobRkCfIm0vOonLQo1/TiobUQUFBPz8/e4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09eoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faDg4OEBAQExMTFhYWGRkZIiIiT09PeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXDAwMEhISFxcXHR0dNTU1KQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUUVFRUFBQQEBAKSkpJCQke4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRGBgYKioqQ0NDLS0tJiYmfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQTExMVlZWRUVFLi4uJycnIyMjICAghIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbHh4eWlpaRkZGKysrKCgoISEhhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmREREV1dXXV1dXFxcTU1NMjIyMTExjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4brX19fY2NjZGRkUlJSU1NTiobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwOzs7R0dHaWlpaGhoZmZma2trZWVlbw/njw/osRjqyybs2EHu4Grv5nXv0JDmLCwsYWFhWFhYh4boTRDjVxLlYhDldxLnhxLooA/px4bvLy8vh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bg16AadQAAAehJREFUeJzNlrtLQlEcgM8vC1QoROkJQoNBEBoR3IYWg5zaetCQUy5BBQ0tPQbBiiz7A4pyCNoqh5YeS0MJEYRYYwqBlZCGkViDZvelnnvuVe9Zot+k3/348XH1XAX0Dwawl/Ajv66BrEpIqeOwFFEHAN+kqmNhWhWk1CWwGFEP3LwTudq8DjIZFZBSl8JCRCMIE8NVswgfq0JKnYBiRAcUJoypRuHumJLRKpBSJ6EQwXBErLgsqUYeptCdLl0RUuoyyEcwBsjXFO9FQFRNkEemj5SNY8fZCpBSl0MuYhyks8OptVbERJAl8WRuBniLhrJlIaLTFSAbMQPkeFjVhSKpvu1FeLAC+F0I3NkyUGhQrStBNmJVEvDaBjDNnqGB4eTzec9gvPVoFOJ+xjGVKwP5Ua8rQe7j2CVuxBi/duR2k3vjPJizzJ62rGfKQkSnK0D+i3kiabALa3V6g489SomQA7Zs+9EKkFKXQ+GIBrGG7sLacMB7c9XFHemltc6KkFKXQfFhFfRuiA3t2FqPz66Zv3D2grkKpNRJWHhsx8SGRnytvmnyZeV64qy/KqTUCVj8AUvyDQ3E2oW9odxhQgWk1KWw9FP+yTboybUa9/2yTRWk1CUQ+1PzBVqFtSinElLqOAT55b+fX5WMfiTNCxE7AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/4.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/4.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAutQTFRFAAAAh4bRfYPLOTk5Nzc3ipDSll3HkSnGg4TQPDw8Ojo6MzMzODg4hobRkCfIm0vOonLQo1/TiobUQUFBPz8/e4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09eoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faDg4OEBAQExMTFhYWGRkZIiIiT09PeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXDAwMEhISFxcXHR0dNTU1KQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUUVFRUFBQQEBAKSkpJCQke4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRGBgYKioqQ0NDLS0tJiYmfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQTExMVlZWRUVFLi4uJycnIyMjICAghIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbHh4eWlpaRkZGKysrKCgoISEhhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmREREV1dXXV1dXFxcTU1NMjIyMTExjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4brX19fY2NjZGRkUlJSU1NTiobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwOzs7R0dHaWlpaGhoZmZma2trZWVlbw/njw/osRjqyybs2EHu4Grv5nXv0JDmLCwsYWFhWFhYh4boTRDjVxLlYhDldxLnhxLooA/px4bvLy8vh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bg16AadQAAAgJJREFUeJzNlrlLw3AUx3/PKNiCIi2eEHBQEMSKCHVwUbCTmwcOOukiqODg4jEIHliPP0DRDoKbx+DisTioIIJIdVRB8AJbqSjqYK1JkzTXN/Q3id8p+Xwf733T5CUl9g9EhkP6AT6CAn07tINOWqiHyCKiL2sphC4JvsMM0EkPUyFySNaLuRRCITvhoo8PkAE6HFALkU+K7oylEIoqvLJlgA4PVEOUk6awXgqh6FF+HW/0xpoBOVxQCeGXiTrwQCuFUPR4kjDGzlzmGw0dPpgM4c+jREbqsrfUDAiKXkow72vMJ7NN40MPHU4oh+ggs5aYE8ysYv5rVha5FQuJnm/O9RTQ4YVSiH6yasIBZvaw61jd4ghdVhGFehiNaymgww2lEFOmWY8lRH0OUGhsid7v1TQ9FW+00VPIH+iNqyGgww3l27FsueZ25gSF1tM5+aRrbbBsYKdoRt9+6PDC5IO5bRrXoLSF0OXOm5f2K3IeoAXfqnFJocMJlRU9Noyr1tpCGN4KnhxWyns+Ol3BjIIOH1RfVsfBWXVcqd4WwvDEfIMwtN9VSyIzCzpcUHtt36nj8o1tIXQXdD9MHnXu1jOroMMDUx+waHJcrrkthO7hleb4esSWwcHhgPqn/E0a57a2hVAYvxjzgQwOTnpo+FPzSdn2thAKLG6Hzk5aSHb77/ULwdxMJJbTjbcAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/6.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/6.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAutQTFRFAAAAh4bRfYPLOTk5Nzc3ipDSll3HkSnGg4TQPDw8Ojo6MzMzODg4hobRkCfIm0vOonLQo1/TiobUQUFBPz8/e4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09eoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faDg4OEBAQExMTFhYWGRkZIiIiT09PeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXDAwMEhISFxcXHR0dNTU1KQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUUVFRUFBQQEBAKSkpJCQke4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRGBgYKioqQ0NDLS0tJiYmfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQTExMVlZWRUVFLi4uJycnIyMjICAghIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbHh4eWlpaRkZGKysrKCgoISEhhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmREREV1dXXV1dXFxcTU1NMjIyMTExjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4brX19fY2NjZGRkUlJSU1NTiobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwOzs7R0dHaWlpaGhoZmZma2trZWVlbw/njw/osRjqyybs2EHu4Grv5nXv0JDmLCwsYWFhWFhYh4boTRDjVxLlYhDldxLnhxLooA/px4bvLy8vh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bg16AadQAAAdhJREFUeJxjZBgEgBGJyfgPizzRgmDAzPiHDEGEI1gZGRl/oCslXhAMOIEyX0gXhDuClxEE3qEqJV4QDJg5/nMyfvtGsiDMEaKMEPAEWSnxgmAgC5W5Q6og1BGqjDBwCaGUeEGIyUKQIBJ+e49EQYgjzEAiULMPwJQSLwg1WQgs84HhHOcX0gTBjjATYPzPBPfheqh1RAtCTBZm/M8g/PGDHkhi3R+SBEGOCGdEBbMYSBIEAxZdBrO7DCpvHsqKMzK+vnfhDymCQEfkMKKDZlIEIW5IZrj7wXxmFeMVXUbGeckMjA1/SBAEOqIVxdjnUoyM2aQIggGzY9Dbp7sMXV5Irg1hfDHPzDXjLwmCoOiYg+a9UAaSBCGuCD7dDRKJWVqgkrtDouMbKYLghLkZxWQHiLHEC4IBJ5dADzDnvbngytirt+geSYKQLHoMyWR9mLHEC4LBpfWdJ49og0qA6jYN0gShhdWxzi6oyQoIY4kXhJjd3OPAXLI7xphRlkRBWLH9BGqyKLKxxAuCAZdY0rOWo9E7rUkVhFdgb8Em86EaS7wgxOzKud5/17whWRBRlX8GmsyFbizxgmDA3HC5Ro90QaRGzXdGDkxjiReEmM3wlwxBRkxp+gMACHcaJNgGT4cAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/8.data.png":
/*!*******************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/8.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAutQTFRFAAAAh4bRfYPLOTk5Nzc3ipDSll3HkSnGg4TQPDw8Ojo6MzMzODg4hobRkCfIm0vOonLQo1/TiobUQUFBPz8/e4PLMgKEQAaYZw+xliDLpkvWsXvfkI3XNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09eoPHJgJLKQJcLQJ6MwKUOgGjWga3sSnhvZTpk4faDg4OEBAQExMTFhYWGRkZIiIiT09PeoPIJgZDJAI6LQJyNQKcSAKzmxbXv4bpx2TvoxDrgITXDAwMEhISFxcXHR0dNTU1KQZUMAhmKQJkNQKbVAi8qzDgw4frymTvvRjuXw/lTQ/ifYTUUVFRUFBQQEBAKSkpJCQke4TLMAZpMAhuNQmcPgnDQAbHbwnWsi7nwX3rx27vxxjvdAvmVBDlShLiRRDafYTRGBgYKioqQ0NDLS0tJiYmfYTSNQmYNQmWPgu9Rg/dVAvlmw/rx03vypTvymHvyCDveA/nWg/lTRLjRhLiRhLdRRDIfYTQTExMVlZWRUVFLi4uJycnIyMjICAghIbgPg+8QA/KSg/gYg/muhDvyl/vz6Lv0nHvzCDvkw/paQ/oWhDmVBLlTRLgRhLRhIbbHh4eWlpaRkZGKysrKCgoISEhhIbfTQ/fkRDqyhjvzofv06nw14rv1zDvowvpigvpjRjpkBjpgw/ndBDmVxLkh4bmREREV1dXXV1dXFxcTU1NMjIyMTExjYbovRjvzinw0qDw1qzv27Hw3qPv3XXv1WfvzWftzmrt20Hv1g/tk4brX19fY2NjZGRkUlJSU1NTiobpdw/nqwvryinu3G7v3p7v4bfv4q3v4Z/v47nvzmrl4pPwOzs7R0dHaWlpaGhoZmZma2trZWVlbw/njw/osRjqyybs2EHu4Grv5nXv0JDmLCwsYWFhWFhYh4boTRDjVxLlYhDldxLnhxLooA/px4bvLy8vh4bjRhLfTRLiVBLjXxjllobrh4bfRhjXShjeioboh4beh4bg16AadQAAAelJREFUeJxjZBgEgBGJyfgPizzRgrhlmBn/4BdEOIKVkZHxB7pS4gVxy3ACBb/gFYQ7gpcRBN6hKiVeELcMM8d/TsZv3/AJwhwhyggBT5CVEi+IW0YWKngHjyDUEaqMMHAJoZR4QdwyskKQ0BF+ew+3IMQRZiARqAkHYEqJF8QtIyskBBb8wHCO8wtOQbAjzAQY/zPB/bEeaijRgrhlZIUZ/zMIf/ygBxJb9weXIMgR4YyoYBYDSYIMOGVYdBnM7jKovHkoK87I+PrehT84BIGOyGFEB82kCIIBVhmWZIa7H8xnVjFe0WVknJfMwNjwB7sg0BGtKJqfSzEyZpMiCAZYZZgdg94+3WXo8kJybQjji3lmrhl/sQuComMOmidCGUgSZMApwxx8uhvEiVlaoJK7Q6LjGw5BcMLcjKLfAWIs8YK4ZTi5BHqA2fHNBVfGXr1F93AJQrLoMST9+jBjiRfELXNpfefJI9qgYqG6TQOnILSwOtbZBdWvgGQs0YK4ZS419zgwl+yOMWaUxS0IK7afQPWLIhtLvCBuGS6xpGctR6N3WuMRhFdgb8H6+VCNJV4QtwxX5Vzvv2ve4BNEVOWfgfq50I0lXhC3DHPD5Ro9vIJIjZrvjByYxhIviFuGmeEvfkFGTGn6AwBjTugVhA9vXwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/colored/10-warning.data.png":
/*!************************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/colored/10-warning.data.png ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAk9QTFRFAAAAvZAMt4oGOTk5Nzc3w5YSpHsAeVoAuo0JPDw8Ojo6MzMzODg4vI8Ld1kAmXIAuYwIrYEAvpENQUFBPz8/t4oFKR8ANSgAUDwAdFcAn3YAxJcTNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09tokFHBUAIBgAJhwALCEAMCQARDMAimcA2KsnwpURDg4OEBAQExMTFhYWGRkZIiIiT09PHhYAGRIAJRsALiIAOSsAcFQA0KMfv5IOclUADAwMEhISFxcXHR0dNTU1IhkAIRkAjWkA0qUhwJMPg2IAVD8ATTkAUVFRUFBQQEBAKSkpJCQkKB4AKh8ANCcAPS4APC0Aj2sAzJ8axZgUh2UAWkMAUTwATjoASTcAuIsHGBgYKioqQ0NDLS0tJiYmMyYAPi4AblIAsYQA3K8rjmoAX0cAUj4ATzsATDkATDgARjUATExMVlZWRUVFLi4uJycnIyMjICAgQTAASzgAVkAAfFwA5rk1yp0ZkGsAak8AWUIAUz4AUj0ASjcAHh4eWlpaRkZGKysrKCgoISEhiWYA1qkl67462q0poXgAbVIAY0oAb1MAXkYAREREV1dXXV1dXFxcTU1NMjIyMTExwZQQmHEA7sE988ZBsIMAhmQAX19fY2NjZGRkUlJSU1NTX0YAcVQAlnAAy54a6Ls3+MtH8sVB6r05+s1JxJcS47YyOzs7R0dHaWlpaGhoZmZma2trZWVlW0QAaE4Afl4AlG4Ar4IA264qLCwsYWFhWFhYVD4AYUgAaE0A06YiLy8vv5EOXEQAyDPE0gAAAhdJREFUeJxjZBgEgBGJyfgPizzRgiQqZ2b8g8URrIyMjD/QlRIvSKJyTqDgFwxH8DKCwDtUpcQLkqicmeM/J+O3b2iOEAUrZWR4iqyUeEESlctABBnvojhChREGLiOUEi9IonIZIUjoCL+9j+QIFUHG9xAJxtPw6CNekETlMkICHwSBIp8YznN+gTtCRf6yLuOXT9Jgxcc+QPUTLUiichlhxv8Mgp8/aIAEt/6BOoLJD8T9ygMLuMUMJAkykKacRYdB7zGD3Lvn4sDk8vbJxT9gR8SyMTD+eAd07eowiNr3i0kRBAPilbNEMTz+pL8om/GOKiPjmlAGxv4/IEcwlm7xZWTsqIQofM0g1vCfFEFI0iJaObOd46fXh7TN34rsc2Z8u8bAouYvODoYswW5oQG2OoTp/d4jDCQJMpCmnNnnYiFIpLyrSyn0lND0b9CEOWND4EMFxvcbZa69a2TM+A0xlnhBEpVzcvEXcQHLyzuGjCvVNtyH5Q4G9xhGOAiGGUu8IInK1x2ZsfSKDCiTzsj0YYA7gsGdKQek7tDpEjckY4kWJFH5ugW5qcyJJzw0GJ0ZkBzBYCOfvMud8byRPbKxxAuSqJxLNORN8pWyaXEMKI5gOLzyv6hLOFqFQLwgicq5slY7/936hgHNEQxCkaLHd6IbS7wgicqZC2/HB8E4SI0aIQYs1TPxgiQqZ2b4C2czYkrTHwAAW4lHJCu1ZgYAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/colored/12-danger.data.png":
/*!***********************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/colored/12-danger.data.png ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAU1QTFRFAAAA5m1t42ho63R02VlZwjk55Wtrwjg401BQ42pq3V9f529v4mdnlQAAnQgIrRsbwDY21lRU63V1dwAAgQAAjgAAmAICmgUFphISzEZG94iI6nJyfAAAbwAAiwAAmQMDnwsLvjMz84GB6HBwvzQ0hQAAlAAAgwAAzUhI9IOD6XFxyEFBrx4eqxkZ42lpkQAAlgAAnAcHog4OoQ0NzkpK8Hx87HZ2ykREsiIirRwcqRYWnAYGog8PvTEx32Ji+o2NzklJtSYmrh0drBoaqhgYpxQU525upBERqRcXsB8fxDs7/5iY73t7uy4uy0VF9oeH/5+f+YuL11ZWtykpvjIytCUl6XJy0k9P/5eX/6Oj/6mp8oCA6nNz3mFhyUND0k5O/5ub/7Gx/52d/7S0/pSUsyMjui0txT090E1N3mBgsCAgtigouSws9YSEsyQkZCWXHgAAAWBJREFUeJzNlr9Lw0AYhu9N/dmL0KnSWRCpVURx6NKxi7u7f5Org4PObg7+DTpYsA5SEEWoFFyMrRVNvNwl6ZFk+I4PxG9qnnt5eEmuuUD8g4H1E2HJOhkyHLMSFQBf+SgdchxZCSwojI9cXTJkOdISPvSINztKhzxHUsJfRDIvVpQMmQ5Twq9hLA1+yp4UHXIduoTfQOR9TmtmoZdEydAxXoRxCW8rvpouaRisBDpMh8ItXgJVie1KFeG7Kna9r3cLXnsuUA/PoUp0cbsDfM9j2BgFdYiJf+UC9fAc8ePohsv63ozquNn17icD4QSFW7wE6o15eNdSdCwf1i8PcP5jtHToGC9C8xdtrj52+pvxbjk9Okm1dMh1JC+rpteOb9HzYOPC0pIh05G+tteqUQdqsxzbWjrkObIDTLajqHWWOxDokOWYHeVybm/YL2jJkOOwPmqkKDme6ZDhQHH57+cX6BVcJC/EZ2sAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/colored/6-warning.data.png":
/*!***********************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/colored/6-warning.data.png ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAk9QTFRFAAAAvZAMt4oGOTk5Nzc3w5YSpHsAeVoAuo0JPDw8Ojo6MzMzODg4vI8Ld1kAmXIAuYwIrYEAvpENQUFBPz8/t4oFKR8ANSgAUDwAdFcAn3YAxJcTNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09tokFHBUAIBgAJhwALCEAMCQARDMAimcA2KsnwpURDg4OEBAQExMTFhYWGRkZIiIiT09PHhYAGRIAJRsALiIAOSsAcFQA0KMfv5IOclUADAwMEhISFxcXHR0dNTU1IhkAIRkAjWkA0qUhwJMPg2IAVD8ATTkAUVFRUFBQQEBAKSkpJCQkKB4AKh8ANCcAPS4APC0Aj2sAzJ8axZgUh2UAWkMAUTwATjoASTcAuIsHGBgYKioqQ0NDLS0tJiYmMyYAPi4AblIAsYQA3K8rjmoAX0cAUj4ATzsATDkATDgARjUATExMVlZWRUVFLi4uJycnIyMjICAgQTAASzgAVkAAfFwA5rk1yp0ZkGsAak8AWUIAUz4AUj0ASjcAHh4eWlpaRkZGKysrKCgoISEhiWYA1qkl67462q0poXgAbVIAY0oAb1MAXkYAREREV1dXXV1dXFxcTU1NMjIyMTExwZQQmHEA7sE988ZBsIMAhmQAX19fY2NjZGRkUlJSU1NTX0YAcVQAlnAAy54a6Ls3+MtH8sVB6r05+s1JxJcS47YyOzs7R0dHaWlpaGhoZmZma2trZWVlW0QAaE4Afl4AlG4Ar4IA264qLCwsYWFhWFhYVD4AYUgAaE0A06YiLy8vv5EOXEQAyDPE0gAAAhtJREFUeJxjZBgEgBGJyfgPizzRgmDAzPiHDEGEI1gZGRl/oCslXhAMOIEyX0gXhDuClxEE3qEqJV4QDJg5/nMyfvtGsiDMEaJgkxkZniIrJV4QDGQgMox3SRWEOkKFEQYuI5QSLwgxWQgSRMJv75MoCHGEiiDje4gE42l4bBMvCDVZ4IMgUPgTw3nOL6QJgh2hIn9Zl/HLJ2mw2cc+QK0jWhBisjDjfwbBzx80QDJb/5AkCHIEkx+I+5UHFs6LGUgSBAMWHQa9xwxy756LA9PM2ycX/5AiCHRELBsD4493QM+tDoMY/X4xKYIQN0QxPP6kvyib8Y4qI+OaUAbG/j8kCAIdwVi6xZeRsaMSYu5rBrGG/6QIggGzneOn14e0zd+K7HNmfLvGwKLmLwmCoOhgzBbkhobv6hCm93uPMJAkCHGFz8VCkHB5V5dS6Cmh6d9IEQQnzBkbAh8qML7fKHPtXSNjxm+IscQLggEnF38RF7AUvGPIuFJtw32SBCFZ1D0GnvsZg2HGEi8IBuuOzFh6RQaU9WZk+pAmCC2s3JlyQMYeOl3ihjCWeEGI2QtyU5kTT3hoMDqTKAgrtm3kk3e5M543skc2lnhBMOASDXmTfKVsWhypgvAK7PDK/6Iu4WgVAvGCELOzVjv/3fqGZEFEVS4UKXp8J7qxxAuCAXPh7fgg0gWRGjVCDFiqZ+IFIWYz/CVDkBFTmv4AAH5gcSTRoYGFAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/necrosis/colored/8-warning.data.png":
/*!***********************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/necrosis/colored/8-warning.data.png ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAUCAMAAAB7/GXWAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAk9QTFRFAAAAvZAMt4oGOTk5Nzc3w5YSpHsAeVoAuo0JPDw8Ojo6MzMzODg4vI8Ld1kAmXIAuYwIrYEAvpENQUFBPz8/t4oFKR8ANSgAUDwAdFcAn3YAxJcTNjY2FRUVGhoaJSUlNDQ0Pj4+SEhIPT09tokFHBUAIBgAJhwALCEAMCQARDMAimcA2KsnwpURDg4OEBAQExMTFhYWGRkZIiIiT09PHhYAGRIAJRsALiIAOSsAcFQA0KMfv5IOclUADAwMEhISFxcXHR0dNTU1IhkAIRkAjWkA0qUhwJMPg2IAVD8ATTkAUVFRUFBQQEBAKSkpJCQkKB4AKh8ANCcAPS4APC0Aj2sAzJ8axZgUh2UAWkMAUTwATjoASTcAuIsHGBgYKioqQ0NDLS0tJiYmMyYAPi4AblIAsYQA3K8rjmoAX0cAUj4ATzsATDkATDgARjUATExMVlZWRUVFLi4uJycnIyMjICAgQTAASzgAVkAAfFwA5rk1yp0ZkGsAak8AWUIAUz4AUj0ASjcAHh4eWlpaRkZGKysrKCgoISEhiWYA1qkl67462q0poXgAbVIAY0oAb1MAXkYAREREV1dXXV1dXFxcTU1NMjIyMTExwZQQmHEA7sE988ZBsIMAhmQAX19fY2NjZGRkUlJSU1NTX0YAcVQAlnAAy54a6Ls3+MtH8sVB6r05+s1JxJcS47YyOzs7R0dHaWlpaGhoZmZma2trZWVlW0QAaE4Afl4AlG4Ar4IA264qLCwsYWFhWFhYVD4AYUgAaE0A06YiLy8vv5EOXEQAyDPE0gAAAi1JREFUeJxjZBgEgBGJyfgPizzRgrhlmBn/4BdEOIKVkZHxB7pS4gVxy3ACBb/gFYQ7gpcRBN6hKiVeELcMM8d/TsZv3/AJwhwhCtbPyPAUWSnxgrhlZCCCjHfxCEIdocIIA5cRSokXxC0jIwQJHeG393ELQhyhIsj4HiLBeBoep8QL4paRERL4IAgU+cRwnvMLTkGwI1TkL+syfvkkDTbh2AeooUQL4paREWb8zyD4+YMGSHDrH1yCIEcw+YG4X3lgobmYgSRBBpwyLDoMeo8Z5N49Fwcml7dPLv7BIQh0RCwbA+OPd0AvrA6DGPB+MSmCYIBVhiWK4fEn/UXZjHdUGRnXhDIw9v/BLgh0BGPpFl9Gxo5KiO7XDGIN/0kRhCQtbDLMdo6fXh/SNn8rss+Z8e0aA4uav9gFQdHBmC3IDQ3F1SFM7/ceYSBJkAGnDLPPxUKQSHlXl1LoKaHp33AIghPmjA2BDxUY32+UufaukTHjN8RY4gVxy3By8RdxAYvGO4aMK9U23MclCMmi7jGMcBAMM5Z4Qdwy647MWHpFBpQfZ2T64BSEFlbuTDkgzYdOl7ghGUu0IG6ZdQtyU5kTT3hoMDrjFoQV2zbyybvcGc8b2SMbS7wgbhku0ZA3yVfKpsXhEYRXYIdX/hd1CUerEIgXxC3DlbXa+e/WN/gEEVW5UKTo8Z3oxhIviFuGufB2fBBeQaRGjRADluqZeEHcMswMf/ELMmJK0x8AABBtXCRPr3YtAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/0.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/0.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAMAAAAMPqWtAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAN5QTFRFAAAAFRUVFhYWFBQUFxcXGhoaGBgYGRkZHR0dGxsbHh4eIyMjIiIiJiYmKSkpLS0tJSUlISEhHBwcKCgoLi4uMjIyNTU1Nzc3NjY2MzMzKioqExMTOzs7RkZGRUVFPT09OTk5NDQ0MDAwSEhIYGBgUFBQRERELCwsICAgHx8fUlJSR0dHEhISPDw8T09PVFRUTExMX19fTk5OLy8vOjo6SkpKVVVVVlZWWVlZJCQkV1dXXV1dWFhYSUlJMTExJycnS0tLU1NTQUFBKysrQkJCTU1NPj4+Q0NDODg4QEBAMdzkoAAAAdJJREFUeJzNll1P2zAUhn3s03y0ZSoC0bJ2sAlt09BA+/8/YtpHK+gdm6BMhW5oaSGJHZ/ZCYGu2y57NOfGOo9f6VEs2wfEfzBgeQYki38sWiuqJcBNJBSC3LeaWDuqJJQFKcEqIuNKv8lzoFJCkZSE5OzAgEG95M6CoHJDBRL8yKIFkX1Q50GlBGGbqjrATZSgNo/eHMhJ9CeNdv5EQ1CCmdKm2LmoIkwIvFyo4pacNZtebnOqts8yqr1ZEHi5gyzP8g5qEQQwvR1c74wPh/feLMhJXIZhZHEL4LZlFcxn4e447Za/jwuBiAlfA319Du4Ssd9bc2rc3Bm68xkuBKJ9NGqFi33TvGq2gXQ4pl4QnP7wGS4EQiLiOzg5BJMEUvzswUe5yAvrM1wIxNtRJLFQx8m2/SIb/dOsG4zy3XILuZA/ovhi8nRz4yQoxCub6s6HuTFvhtWJ4kH+srqMQj3onh2cD85xK/6UZln95DCh8toOhKS9bjw8+qzt8ftUFw8PDg/yEv0rEhvps0SrYq/j6lbYOsODqqdcGaQGvpzE10bTUoQJ3Tc1RICE+9OE7EorxIHq9k45JVBug/5sCtePHhvdvvhG0LtYTXAg+Nsa7vELZl9rRqgJHxkAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/1.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/1.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/2.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/2.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAIAAAC0gsLIAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAB3BJREFUeJztWluPHEcVrr5f59IzPbPr3U18IQ4CKYqQDS9cFOFE/AjEC1HACQ8g8UsS8YASGYEQD7zmDZmARQS8gYgAgYLX9jqzl5mevs10T9+Lb6Z8y+x6cUIbzUgczbbOVld/e76qr07V6VmR/N9WxsRT7l24/AbhBcoRXpLysihJNfjjj/6bP1Y7YK/XYw7HcXRhjuOsL+DJk/GZy9/jBInyGDae43lZVct0Rgnd+uoPMIJH77/1SWOqHRAkQY/5cARBKIoCDiM/Go3WEXB5Mi5cep0XRY6XIGFOxEfERza0lOdoVVZVwdOyf+WHRZW7v32iEawd0LZt7piBKtNdVVXo0+/34TyhqFcH8GOTceHSVV6UeVEiosTLMq/InCTiqjWMBONYFqTI8zwjZS5JivXK973rb54eVu2A4MljbS2MOewqSRLugh5+rRYmiiI0+B8VvVKADyfj3KXvcqKMUSOKIuq6pOtKY/6RFEUxdeqq0+k0SVKSZzRNy6qQ223rylXvvR8/LqzaAZniyP1VDxMXxhyQRB4oS6y2CldoEPzxyClyXjXAR1YGL871qyhSw9BaLbPfNTpN2dRkVREVubnTz9J0eDTc3xsIklBlKScSzmw+LqynArggCUogBhqYU1mWGVU0apoGhrPZDHNMFhpkI7JGgPcm45nLV4kkElkSG6bWtVpbveZmR9DkZtvc2OiVlIyDSZRmXU3IuMpzPJUjcTTBAcH6+qveb64dj6l2wG63+4AnGKoLAxP4hmFAZUmSsB2S+XCQAdEBD47H47UAvL8yMD9YSbqu252zL15sbLRGB07iTrMq39nuf+Vs529+azcMJ7dngqGWLtl+7uzdD3cLwIqPORzXDfhgGwS3drsN0UFiIAN9NRqNzc1N3/ehuCAImNZM0wzDEA5GZ10A58zPfPE7VBCwxcitxtbnz7W2u+NDZ5alz7zwvH3GDpL0xq3R1873MqNDTDnOM8EZ51XZ3Opn+weFJLdf+qZ/4xePhlU74KOiazabWO/giSUPzhAdnMFgsL29jQ7giS0RdzEEECYcPNjpdFzXXX1A8Z6KRUE0DN1uG3YzDCZjx79w+XPnLz7blIS4NLIk+UuQXOyoIdWefeG54d3DNM8Nu+X5LpEkTjim5doB72+J8sKyDABJZ2FIzcXCPM8DczhojOMYVKFN9GSCXQvAOe12z5YUTW1Z3Z0NxdC8W/vWpt0/v9WSUS3TNs+psjpDmueJJQueoVqb3SSatfrWNAiLYIdOjaWwageEgqApsELag/SiKEILBAjauIsrlMjSMRsI3MWvuMKHIx5LfasJOP+x7I4oa3KrpTX0ilJF18zNDg9pC8TLqiZHTVUoeZLOsxsEQIymgYe1pm60GqndTU11KbLaAaEgRhXdsPtBgIw8LE1TNKID2pENmMrQk/UHc2RttK8F4Hwydu/sSaqmx3asCk1ajvaHmx19g6MBJX4cJzwpZVMX+AklE0ICPzw4HEqqTILw7t1Bdusm9YZLkdUOiH0PoTOVYXVjjbOCFpoCVaY4EGaneOQH1gG38CCSMtrXAnA+GUkaQaRcOgunUzHRJ3GsOF5SlW6eu9OIVGVIqdluCIQLirKlyr2dvt5t7O8dJKgePYdGk6XIagdErAgdNLCoQQlSAh9wThfGODMl4hbLFVDiZDJhSeC4kFcTcD4Z/u/ftl56I83ne04yS7I8Hx+OnJGLHVVtmft3Bk44UQIDxdqXUKkhs1fF0eFosPsR8VySJVh8S5HVDoiTBipVVrgidDhQE8vLECMOi0xrGIV+v89qq+nCWGeMxVoA3tuIaIWhm2EOx0cOrwjRNPrr+396/stfUA3V3rDzPEUu3Dlj/zOYHLq+5/k3P/hXdvsOCX086d/4JTlm9QMuEi7iBiv2XuHo6AjEQI+dHSFMbJigjSFAHxxdcGWKWzqGrizgvcnwf3fNevn1JG0nRY5qOZ3N3OH473/487kXPzvVFM1Ux1G0+4ETT+PA8UeDQ7p/wHljUubu9Z8dD+tpAKJGhfTKhUFuLAMMh0PLskASCx9KxKpHEkA7NMiW/ynfH6wg4MMjGi1mZRwSVXNv71HTpKKgt43Bh7daG7YWafEsSbIsnkTORwd0MOBCn8tSIp5w3H6KgAvpQXRgxapWMEQRC+ZgyDIvro/yPLEgWFnAh5Ph3/ip9fKrnNAjacblSZlqe/+gvXPbWZLxAp+n2cQL3Ju3qTPkplN0QJUwfvedUyKrHZBJD6uevYiGgSfLAKCERjBEBmCcWRaGMNcI8GPFi/fra9Y3XuMkhUwTLo3JLBo5Q0dVhG639FwaRwS1e5YQDJzIjd894XXektUOiBXNvjBg2RnGTo2syn3waprxfJKv51YKcLmS9H4116b1yre5KpuPUcwTUaJJTMKAFDmpClIWj0vrJ1rtgCzDgjCjxETHzo6M4Sf94np1AE9+Repd/wmu1pVvcTlHeR44dBahmnGv//zJY3qqgIxMt9sli5dCDw6IJ77cXhfA0/47xHvvU47U/wzwU4/UagL+GydwD92DwRZGAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/3.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/3.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/4.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/4.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/5.data.png":
/*!*************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/5.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAIAAAC0gsLIAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABOFJREFUeJzt2ktvG0UAB/CZ2dn32uu113aapG1a2iKQqgo1cOGhirbiQyAuIKAtB5D4JCAOCFQEQhy49oZCIaICbiAqQKDSJE1qJ7HX+/K+Zl/DWgpq6zyIzYXDjtb2wd6f/9LfuzuzMgbl+N8MfMB7JxevAcRQCBDLJlmagbzz4wf/5ctK8GBw7zIeW3wLMixFhYEgQpwgZCSkgM4+/07Bbd96f9JMJXgYcLyMk+evIowhYos+IS42XGycLBIEaZ7leYpo1rr4bpon5reHyleChwfxo8oVhDmEWYBZxHGI5yCLi2exIkcFmqUgTZIkBlnCsrx2+W1r6b1/i1WCE4APylg4/ybEXEEAnseSxEoSXxltLM/zikRNwfO8KCIgiSkhWZ5ytZp28Yp188P9YpXgpOBDRwbCozJ5nq3IoqoqrYZcr3KKyAk85rnqfCsmpLfd6653GJbJYwIxgEp1v1glOAW4U8bRxSuAxYBjcUURG5o626zO1BmRq9aUdruZUTBwhj6JGyITw9wyLAGCwB9CSLUXX7O+ub47VQlOAf5zZDAMYHBxZEl6/fi505W22t80ItOL82R+rvXc8fpvtrriusO1kJGFzARzp45v3FlJIaV4n8lxCU4Ojl6OPP0GZRjIspxamX1yQZ1rDLaMMCZHz57Rj+hORJZX+y+caMZyHShckMSMMUjyrDrbirubKcvVLrxsL3/xcKoSnA7EO5ViBsuypNdkveo6w4Fhn1x84sTpY1WWCTI5jqJfnOh0XXCpeOzsqd7GFkkSWVct2wQsC5ldv5QSnAocPWpNneVFQdUa821eFq3Vrjajt07MqlyxdKQ1BAVOCItzHgIax1iyoM00Ij9UW5rnuKkzTz15LFgJTgeOytD0OuZETlXFipRTykuiMlNHRc8MsOK8CqkiMBkCpJgsIAAgkKsyxlisSrJaIXqDKMJYshKcDhyVsXJvnRVEKdADganSrN/tzdSlNqQOBXYQRAhknCIxaEjBEADHdje3eqzAAcfd2OjEq3ep1RtLVoLTgaMyIuIXjUESup6HI2kYBLxhRXlmJonp+SDPXEqVWoUB0EkzVeCa8y2pUemub0b9PrAM6g/HkpXgdOCoDPv7j7QL10hSXGOiKIziJBls9Y2+WVxeBFXp3usY7pB35GLl8kyxbClOc3m6vdXvrNwHlgniiNJsLFkJTgfuzApoXjghIWSwbSCe8T3/11s/nXn2KUEW9LaeJITFeP6I/qcz3DJty7Lv3v4rXrsHXLvY017+EuwaJTgFuFOG/d117dLViNSiNCmWjiQMzd7g9x9+Xjj3uCfyoiIMfH/lthF4gWPY/c4W7W5CawCyxFz6bHesEpwOfDBfpmmYBS4QRHNtnSoKxYxUkzt3VtW2LvpiEEZRHAdD37i/STsd6NowJgDDPWOV4HTggzLs5U+1S69BpglIDJMoI+L6H7S5MBdHMWJQQuKh5Zh316jRg55XfKCYMg9ufHxAshKcFHxkJWl9fV176XXI8sCLIAlA6PeNniHwTKORWSYNfBCGMI5AoWA4uLHHzbKxUYITgePLeuurUVHa5VdhHo92CBDALI0C4DogTUCegizd76S5d7gSPDS49w1Ia+mTEXfxFZhAihClKQ19AHJz6fPDZyrBScGD/h1i3ZwyRwlOB/4N6nTRlGrfFEkAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/pre95/0.data.png":
/*!*******************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/pre95/0.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAMAAAAMPqWtAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAN5QTFRFAAAAFRUVFhYWFBQUFxcXGhoaGBgYGRkZHR0dGxsbHh4eIyMjIiIiJiYmKSkpLS0tJSUlISEhHBwcKCgoLi4uMjIyNTU1Nzc3NjY2MzMzKioqExMTOzs7RkZGRUVFPT09OTk5NDQ0MDAwSEhIYGBgUFBQRERELCwsICAgHx8fUlJSR0dHEhISPDw8T09PVFRUTExMX19fTk5OLy8vOjo6SkpKVVVVVlZWWVlZJCQkV1dXXV1dWFhYSUlJMTExJycnS0tLU1NTQUFBKysrQkJCTU1NPj4+Q0NDODg4QEBAMdzkoAAAAb9JREFUeJzNlltPGzEQRj32xLubhCoIREIToBVqq6KC+P8/AvWSCPJGEQlVIIDYBHbXl6kB9aEtDzAGifHjGX06I8sXEK+g4JFNQNI9H3q6BIQeCU5QWM+Cni6hPEgJXhHZ0O3iEUNCkZSEFGYCCxYNxSKGRJgIFUi4rTKdE3kXh1gShE26TwO4THM0Ng4xJLrjWrN6Y0DfxU2VsW5lFIM4EooSlTXktF6/HWlxopYPS4pBDIkw0mZZlVULjdAaJte9s5XhVp+PWBInSZJ6XAK4bngFs2myOizaIz7iSGSEn4CO3kG4evx5Y0a1yxtLN3zEkWhuDxrJfMPWT+tNIJMMqaP1wQUfcSQkIu7C/hbYXEtx1YFvcl45z0cciS+DVKJTO/my/ylr3YOyrQfV6oiPOBJC4fvx28WFfe3ER1+Y1teZtZ/7EYgj0T1JE9NrH24e945xKftelOWf14iHOBJCaSFpvZ31t38Yv7NXGEdxiCPRPSWxUKzlRrn1VkjzwschjoRQyiLV8MM4O7OG/krjIY5EeAgIkHBjkpP/55fEQxyJEBgGARW29f//Ig9xJMIei18EnQdPOg9xJF66fgOAwQ03jKp2OQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/pre95/1.data.png":
/*!*******************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/pre95/1.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/pre95/2.data.png":
/*!*******************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/pre95/2.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/necromancy/residual-souls/pre95/3.data.png":
/*!*******************************************************************!*\
  !*** ./asset/gauge-ui/necromancy/residual-souls/pre95/3.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAIAAAC0gsLIAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAABMpJREFUeJztmstvG0Ucx2dmZ99rr9de22mSNmloi0CqKtTAhYcq2oo/AnGhAtpyAIm/BMQBgYpAiAPX3lAoRFTADUQFCFSapEntJPZ6X97X7GvYnBGCxt7IW/HRaE/2x/vTd2Z2ZscY/M/MgI/yx1ZWrwPEUAgQyyZZmoG898P7j7bwoTiiMB5bfRMyLEVFlQgixAlCRkIK6PzzbxcF799+79ETHoLSw1g5fw1hDBFb9DiIi4aLxskiQZDmWZ6niGadi++keWJ+858Knn3hoSk3jJXzVxHmEGYBZhHHIZ6DLC6uYk2OirKzFKRJksQgS1iW1y6/Za29W3XhJJQYxvL5NyDmiiIBz2NJYiWJrx00lud5RaKm4HleFBGQxJSQLE+5RkO7eNW69UF1hRNS5shA+KC78Txbk0VVVTotuVnnFJETeMxz9cVOTMhgf9Df7jEsk8cEYgCVerWFk1FWGMdXrwIWA47FNUVsaep8uz7XZESu3lC63XZGwcgZ+yRuiUwMc8uwBAgCfwwh1V68Yn19o4rCySltZDAMYHAx9iW9uXTudK2rDneNyPTiPFlc6Dy31PzVVjdcd7wVMrKQmWDh1NLO3Y0UUor/4ZZmXzgxpXiPPf06ZRjIspxam39yWV1ojfaMMCbHz57Rj+lORNY3hy+cbMdyEyhckMSMMUryrD7fifu7Kcs1Lrxsr39eLeFUKCfkotNhBsuypDdkve4645Fhr6w+cfL0iTrLBJkcR9HPTnS6KbhUPHH21GBnjySJrKuWbQKWhczf7mr2hdOgFGmjrbO8KKhaa7HLy6K12dfm9M7JeZUrNre0gaDACWExKyOgcYwlC9pcK/JDtaN5jps6i9STKyecCqWEoelNzImcqoo1KaeUl0RlromKnsgAK87rkCoCkyFAiuUMAgACuS5jjMW6JKs1oreIIlROOBVKCWPj/jYriFKgBwJTp9mwP5hrSl1IHQrsIIgQyDhFYtCYgjEAju3u7g1YgQOOu7PTizfvUWtQOeFUKCWMiPhFn4IkdD0PR9I4CHjDivLMTBLT80GeuZQqjRoDoJNmqsC1FztSq9bf3o2GQ2AZ1B9XTjgVSgnD/u5D7cJ1khRPwSgKozhJRntDY2gWD0BBVfr3e4Y75h252Fs9U2ysiok4T/f3hr2NB8AyQRxRmlVOOBXKWjLTvKg0JISM9g3EM77n/3L7xzPPPiXIgt7Vk4SwGC8e0/9wxnumbVn2vTt/xlv3gWsX37TXv6iicHLKCsP+9oZ26VpEGlGaFJtbEobmYPTb9z8tn3vcE3lREUa+v3HHCLzAMexhb4/2d6E1Allirn1aUeHklPhuiqZhFrhAEM2tbaooFDNSQ+7d3VS7uuiLQRhFcRyMfePBLu31oGvDmAAMKy2ckBLDsNc/0S5dgUwbkBgmUUbE7d9pe3khjmLEoITEY8sx721RYwA9r/hAsagf3fyo0sIJKfc8w/rqhvbSa5DlgRdBEoDQHxoDQ+CZViuzTBr4IAxhHIGiTgxHN//97dvsCyeh9JM+68uDrqRdfhXm8UFJAQKYpVEAXAekCchTkKUPNQvPvvDQHNEZuLX2cXHVLr4CE0gRojSloQ9Abq599qgKD8GR/jvEujXlwmZf+FD8BVDsfeaKj3//AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/ranged/crystal-rain/active.data.png":
/*!************************************************************!*\
  !*** ./asset/gauge-ui/ranged/crystal-rain/active.data.png ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAbZQTFRFAAAAAAACZHOCYZG8fIGHkpefYpK+YY+6IFBrIE1nMDdJVn+mYI24NVaAPF1xLUdsUWWAYWFpXmR7JFRxN0RWlqCjFyAwHCQ1ipKXYXeYN1drV2uHUGF8HEdeHEZdUWR+PlZ1S2ePTVNiSVFePGCOQFBmJEdzQEBTFz5RIDA+PFRcLUBXS22OUHWZKkZpe3WBJCcwf3lhJEZZPF1yTmV7Vm+HQGaXJCQtUV5qWWZ0EBAwcISRN1eDYHaXPpOWRHaEWVRGJ059n5emJyo1KmVnSa6yV4Gn1srcRHajRlZsKio6jodtJ15hOomM2crcMlBhUE5UKmJl1MXXR0RZICcqMHByV3qpXYCyS2+QdHWXIFNvKjxTQpyfTbe7UcHFN0BXHElhJFl2AAAALWFtWYOqUL7CHEliRlRsKktnXIewRqSnQJaYfoB1qqqcIEtkNUlkSVxzUGx/WoWtAAAXUGJ9aoOmPlR0SWJzWm+MaoOnIEtlj5ecVGeEMj5OgIWKkJicQlx+WnSNUGJ+hZCRS2+RR1dwQF58Wm+NXnqUZZbCb4KPFyAtWXOLJzdLUGZ8IC1Ab3R5QE1iEBtb2QAAAJJ0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+r6/v1AAABm0lEQVR4nNXTTygEURwH8N83RUQuUsrBouSiHHBAueHCwUE50CYHB8WWw661/qy1W2gdHBxMkYNy4OCyuSkccFAO/hSbg3JZRZRWed57zOzsztsxR97pNe8zvz9vfgNyuPA3IYg5ggA+ybBKCCajgXKAD6aEklBukvLwzgXygTemgCh8pSLIlRCvlIjdI7NAMFAZ8FDOj++JKp5eXHGiyjuWAVF1S9XATQ2uakWoC3LFmSwnHfJ4DHXAOdVzdcafSGfpGg2nxFM3nojimjg9NrsURPMRtRy2Agd6RQwmZ45Ibd/97pvPVbAdsU4B9+whupIxXmI3sEsqmYIdBTviLnp4zG2F1CF6gS3ZRh+Xm1ZpwH5gXeSEm8M1GzgkxmpVyGG+WbFIA46IhqP8sgc1D7CYDWJgg8aR0Bh3DO5SRDKlDr1h8s1PhJgcAfgRzALFRARmp2aMcc6SWgz2NBBQfhMTRHCSYc6v/CLpMARf2GvHjNQR4FqzlT9wAZf2TodL8Ng74x6Lnx3C6JgzSFgedVIj6X+vA/jb+g/wCxOegCm28N82AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/ranged/crystal-rain/inactive.data.png":
/*!**************************************************************!*\
  !*** ./asset/gauge-ui/ranged/crystal-rain/inactive.data.png ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAARpQTFRFAAAAAAAAcHBwh4eHgICAl5eXiIiIhoaGQkJCQEBAODg4d3d3hISEUVFRVFRUREREYmJiY2NjZmZmR0dHnZ2dICAgJCQkkJCQdnZ2Tk5OaWlpYGBgOjo6U1NTZGRkUFBQW1tbMjIyLCwsTExMPT09bm5ue3t7KCgoPDw8ampqYWFhJiYmFhYWf39/dXV1cXFxZWVlSEhIn5+fKysrhYWFeXl51dXVbGxsLS0tSUlJ2NjY09PTSkpKJSUlV1dXfX19Z2dnfHx8OTk5eHh4jIyMlJSUQUFBT09PkpKSQ0NDfn5+dHR0qKioPz8/RkZGWVlZBQUFgYGBUlJSbW1tlZWVlpaWWFhYb29vaGhoVlZWi4uLHx8fNTU1c3NzIz3+hwAAAF50Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4+ZFeoAAAGoSURBVHic1dPfKwRRFAfw882vlNnN8rCFpc22kV8P4kXJA6Et+bF+lD/PA/mRB5TiRX6UjRJZ2rJhbHnB7lhZy173TmZ2mNkxj9yammY+c86595wBOVz4mxDEHEEAOdKtJQRTo4GKgCyzhCqh0jcqwysXKAfSzAKi4pkkiJXOiE+qxO09M0EwkBdI1NCzJBPVJVOSQuS7YT8g6q/J+1iWakDcj4eq2wxJClPL+Q55PIYA5BcKJiTXBX+iOtOu0RQlnrr5XBRXn3PhzOjyELUytZ624UrRKmIwOGNE6hD7ACLG91awK6p0v5c8VR7YQ3iyCi/RV+zdJyuZh1LbnjiLHhx17lhIDaIXxyl1G328GVtmqcP+m+o9kRM0EPdv2sAgpVvkMyGHsDm4bpI6DAHXbl4cArGRSNdqIYjgJY0el8Z4D/lFYzmT1GBojcaX20+YOgIIyukCUEzExFJ4UR/nAqnFYE/uNm1b9sQAMbXAMD1v2ZHvMPyxMrxhx/TUM3e1kZit/IKN3Yf2ToNuT9ze6efoTjqEs3POIMF/5aRG0v5eB/C39R/gJ58smykmrvPBAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/ranged/deaths-swiftness/active.data.png":
/*!****************************************************************!*\
  !*** ./asset/gauge-ui/ranged/deaths-swiftness/active.data.png ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/ranged/deaths-swiftness/inactive.data.png":
/*!******************************************************************!*\
  !*** ./asset/gauge-ui/ranged/deaths-swiftness/inactive.data.png ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAThQTFRFAAAAExMTJycnKCgoDg4OBwcHIyMjICAgHBwcJSUlLCwsKioqGBgYJCQkGxsbHx8fHh4eISEhGhoaGRkZLS0tMTExHR0dIiIiKSkpLy8vSUlJOjo6V1dXVVVVMzMzODg4XFxcUVFRMDAwJiYmFxcXTExMQEBAFhYWQkJCRkZGU1NTNzc3W1tbR0dHPT09T09PVFRUWlpaYWFhUlJSbm5uXV1dXl5ePDw8SkpKdHR0aWlpVlZWMjIyTU1NFBQUZGRkaGhoWVlZPj4+Ozs7EhISEBAQNjY2KysrNTU1Li4uYGBgY2NjNDQ0DQ0NDAwMFRUVZmZmZWVlERERCwsLCgoKX19fDw8PbGxsPz8/CQkJZ2dnbW1ta2trRERESEhIampqCAgIRUVFQUFBTk5OS0tLYmJiBgYGBQUF9EyOwwAAA/5JREFUeJyFld9TG1UUx8/ZvXt3Nwn51UTSIpLaGWoFK8WWERCn2ocO1Q4jMuODvviX9UUeOuM4jGNBqYBD/TFSHHWAKRS1NCkYCSUhye5md+/u9YaSpECr923Pfna/59x7zvciHFsoFjsePRpQPCJirv9/oIa+hOgiR/u/wJCpAPc0gVbB5fx5YE1VB8FSREM3wZXYs8Aa1oJYiiBUZRsCj8Pm06k2wJDnQxy9om6ypOsAUNMJOtBM9QAMWQQSiI9bHFMCVfwQqIG8tdzUx7qqFhXbV2CEhip7JAU5SeYMIlBk4MruE1BBQF1rsQJZagWhahOJtMEmNSAYL8cMqwwgWfugxoFqCYQ1RQdfy4OqspQswIBFpHYsxtYEYz8B9bDQre46aq0UUH1RBTDdwFCilMKqvKI0wJd2WqV7REJTV0sQLpCTeUKwEHPjmbYTuJMhDbC9krQ2zbB4tKKQv4QZrQKOpcuJzRdjWMqV6yDtlCguQsDUADhr03chndlWKUveH/rhLSPE7tZB9nYx9qupvpBjYQfby+kHSVZ8+Y6eTOO3nR1bifwfdfAy3lZU8N7EzHqyd5W/isCttd5fujWcvBycbrdzDWlZMrVq34/XZgd+MrrKXQquex1k6Q1Ex8rkjVihDmqSiYGhWyPw1dl1TU5U08nfz8xfcFOi5+RJyhxeBwNV4FdvjSDMx7P+Ke4M3s9aMBi/+aFiWA+2RWs0wL3T+Z6IKg5g3T+z1tYuTn1nhZ2LUnfC69zhZgOMhrLR0lVOAWau34me20grG3+2OtvvqpWJy1kPHjVBU1IdmpdHwJn5aG6guHReWYxtDPuhikOmU11zdkPaRNCsSPh0hOf1pZ7gVnTrwlT+GvCp0dwCudIEQSUg2lNK9IA0kSZn/0ln/8q9Nxk2w44FwaFvGtIQNCmJp7PwmmLM9/498Bs7P7vzfukuUnDMYPdCA9SIofl9AYD4+JhN7xFv78r0RUmaFv2qS930+yaYzBGQB+PjouXHbg7arxeX2CWo3O5LfTGMMBlo5BjpXy3YNvtkHMYAKt/1dWwsjgKYX5/cTJ2i2DJrNXJslx+qeDEaKpdivuLwMk9+DiPbC5TURs+3DkZBGAPo4pi8/rmBZac/Ehrfn88PJiUSl72SY3Hgbn1cFdBArRK0VfudE+JDfmN4lsbTaK9UgO2b4IEBICqAAacNvMLu6Jefwo3h4rLgfrbFkFUOWwqVfd0vD8Vm1N3rUx9/NrBiG3F5b1/1qJvpvti1XmeZga9ycECyuczcZ9leTT+Y9HaZQwkThTL/KYc8bKSo+ZB+ZdXLEQtcWj30Cg4vUbGbhoekmdxzQNFDSm24ZfdI+DhYuz58fiz6L6ds5jgMBJjdAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./asset/gauge-ui/ranged/perfect-equilibrium/active.data.png":
/*!*******************************************************************!*\
  !*** ./asset/gauge-ui/ranged/perfect-equilibrium/active.data.png ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("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")

/***/ }),

/***/ "./asset/gauge-ui/ranged/perfect-equilibrium/inactive.data.png":
/*!*********************************************************************!*\
  !*** ./asset/gauge-ui/ranged/perfect-equilibrium/inactive.data.png ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAASNQTFRFAAAAIyMjZGRkbW1tGBgYDAwMXFxchISEODg4gICAQkJCLS0te3t7b29vVVVVSkpKW1tbf39/eHh4ampqT09PUVFRVFRUREREZWVldXV1enp6Z2dnOTk5Ojo6R0dHfHx8fn5+S0tLbm5ufX19dnZ2Ozs7PDw8TExMSUlJMjIycnJyZmZmLCwsQUFBV1dXU1NTMDAwMzMzQ0NDWFhYMTExWVlZcHBweXl5PT09QEBARUVFRkZGPj4+cXFxNjY2JycnPz8/UlJSc3NzVlZWTU1NJSUlNzc3UFBQgoKCJiYmKCgod3d3g4ODa2trgYGBTk5OKioqKSkpdHR0aGhoXV1dXl5eX19fYWFhNDQ0NTU1SEhIWlpaaWlpbGxsKysrLy8vYGBg4bleEwAAA7tJREFUeJyFlPtv2lYUx8+FGAzmkTjkiZ0WTIC2SksbtZ26RzcpbVKtmvbT/sZp0n7rfsk6JVunqkXpxKNdYECIeBRoeIVg42DH3rVJwIR2u79c33M+vud77z3nIJgYCA950nrZQCDNpPb/DySRMvgwC/8FUkgCC94SIQEIXv0UqEWlUM+OkGJGqAmSSf4YqGGz2kFQFZaQVF9GJaPUIUgpCrAlFqFDfek7gymUV0ZSz0FKnIJALpD35wJp3RDGjIzyEhCiPAIHUV2kaDWVmbcDMANXKJ5CKA6qKg1Awi5CpKuc0QgaHnRyvqOZrFsd5lrPt6eA+4MOkio4r0fZWdTNRTCb18FpAE6UMFm8l2lqSnWQDh7zXrR3F70NZL0Z7aT35AMOunm4n6oHll71L0DWa+240Q7+5Mqgi7T1nZz4DmDRxnsWG/EhGExcTZxqEW8nbgkpPD94zQFf1rTaYvd7BjDJ6H7YaKPUieZ3JqereH4k8Yc360NwQ62QpuTDbezhlMpMBTbRrr2JV15H218LNaJD0JJBubCjvYxlftuin8GGmMdxN096JtGaeGQA1QKtCOXA+6ajCcvhl2CDFtAOVkCqRWmunBh3PJvLMwdeUuTXfoMg1Pqf74SgyHbavqPC4/oIJLIEgDM/7cRpy8rx2kNHIe45vfbq+3Q4dhkMpeGIPQh0HPtrlVBHIPhjRi3OQShuXh2B7Nr2SuTFVQUv/vn6uWijhc7W7zYGK8xeP5IMGjG43sdvbLdMcS/wSTouogPLpcVZyM1nAmOH2fbnwhb/bgPAtNqoA1eawdcd4QpKbl4NGK+n4q6u//jkV/y4HiZWBab+WRL/BLecLbvIGEDiDdfSn5DaKlC7eHYG9imN/Ma6L9w0aAwmGOpPDbxh7ZpSeoJzLid+J3CRKqdEDWl22JJxGfnsZEwvGpvf1rP+BViD64u2Ic1WK40rqa2XvhaAFPkJgz/EPnBi6XHv+Xyv9WCUuOC884fHLtgdJK6NPb0UbpQ5Ef6GFQFad6LnpQBuEZbWSkcM6opzYNO1gpshFX5Wrq0nKzyQgnRermcEPM1eQ2rKVF5IX5Trd+kQ1HDO0UfyqAEgSgLX4u2f/cTMYMewHYJv2mQR6A4/3lLcfYVpf/WObg1aCrmgvienS3rUS00K5o+BUfvoy9cl2ExK/iXpF3C3pMlupvVkAixPsuzOXeU0mIsCXTV0yPFGikgFnqJ2kclWgZDFMReMD/eFdyjuEyDOM1wVIJmlS+ZJEEtdqKoT1n8Bcw29OJJ1/PYAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/ranged/split-soul/active.data.png":
/*!**********************************************************!*\
  !*** ./asset/gauge-ui/ranged/split-soul/active.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAjpQTFRFAAAAAAACwJony6Mnk3Uc47ct1qsqwpwn7b4w4LMtzqUnpIQg9sUw6bst1qwqtJEkfmUX+Mcw8MEwAAAQAAAA9MQw9cQwjHEcso8krYokEKKnEMvS06oqu5Yk4rUtxp8ngXt1f3lzENTc0agq98YwtZEkABcXABcc06kqyaAntpIkABwgACQqACcwdnBr2q8q88MwwJsn+ccw9cUwtJMtsJI3ADA6EKHAqostsY8ndG9q1Koq7b8wuZQkABAQ8cI3rpI+qJFHEK3QADVAACoyEM/WqYgkEOHqsI4kuJMkt5Qnx6Iwr5I8qZFGF7ndEJOwENjgx6AqEOLqq4kg+cgwt5MktpMqAHd8F7vgEKfIACAkEODnu5ckcWtmEODoy6InlXccnH0g88Qwt5MntZMqz6YqzqYnEKXFjIeCiYN9dW9qENrhlHYc3LAqEMfOENfes5AkrIogv5knvpgk0Kcq9sYysI0kxJwnlI2Hc21pim8cEJ6kELzCioR+l4+JkYqEbWlkyKAnyaEnkIiDfXZxcmxn0acq27Aq98cwoJiSj4eCZ2Jel5CJnJSOEN3krowkpp2Xlo6Ih4F87sAw0qgqi4R+fXZyENHXx6AnELrAp5+YiIJ9AHt/zKQnrYsknJWPjIV/mZGLhoB6ZWBcEMLJEJugEKWqkHMcnpaQfHVxkYqF160qlo6HiIJ8cGpl8sIwAHl8AImOl3ockYmEh4B757otxZ8nvZckpYUgkouFh4F7wpsnuJQkr4wknhBb4gAAAL50Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////n9n8wAAAG5SURBVHic5dRLKERRGAfw768RNW6YmEkxiiRkbGRrY8EGO6IwjFdZysJCFjI2pKSmNDWykIUFKbK0mZUNNaIbhTHyqvG4ScZx7twxjzMPs+YsTp3v/u537ne+0wWlOfA3IVh6EGApZQRmIJBK/kDogI+0YBYAJYUMQz2H8CeXYZjHHT3+DgkFXwQRRh1ZBBYGSEwJ4x0xERIM6uqRopKY+OfcMBFqMhvXLBhV5xK1wAsmwqDkNclEFaAzTlF5SkW+eMgXBuM9Ck+q1X56iGqfvJaj+K3VVUYttMGUHHhqcHseX0xo9ypEjWd3uDTxPsLQoJm3HCh6+NxxGbVCeSubgYPGUMZNRcwI6lkrl3mdvXBZNfSyPszn5diMGFvt49FFqpOHoDzQ7gjgLYY/D3YB6iaAc3qvCW1pnwSudi7ngAkBZs1gnOY1dV2Chf6nglyMOoAhAeabx2Aj0yxgzVy5LMX0gPmVJPW1ztgDB+k+mbrY6JCc6vPuJa8FXett261iZ/DTUslJxw1b7Yf1sLpaaK85YQuDEYloynJl2weaWOTqJvhTgDLLBmUHEbGYaIIBASWFyV7+f/AbY9eDKfpJ+/sAAAAASUVORK5CYII=")

/***/ }),

/***/ "./asset/gauge-ui/ranged/split-soul/inactive.data.png":
/*!************************************************************!*\
  !*** ./asset/gauge-ui/ranged/split-soul/inactive.data.png ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js").ImageDetect).imageDataFromBase64("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAW5vUEUAYtdMlAAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAMBQTFRFAAAAAQEBWVlZXV1dSEhIZ2dnYWFhXFxca2trYGBgU1NTcHBwZGRkWFhYREREcXFxb29vRkZGVVVVQkJCT09PYmJiWlpaZmZmW1tbTU1NTExMUlJSDAwMCgoKX19fXl5eDw8PEREREBAQR0dHcnJyFRUVRUVFVlZWbm5uSUlJFxcXEhISUFBQVFRUTk5OQEBAV1dXLy8vDg4OUVFRY2NjQUFBSkpKQ0NDPz8/bGxsMTExPj4+bW1tMDAwNjY2aGhoV3DkTwAAAEB0Uk5TAP///////////////////////////////////////////////////////////////////////////////////xMrnjEAAAG6SURBVHic3ZRbT8JAEIVndJEWFSyhqGDFG0KIIRqj8f8/aUyMDxITNGooCFIu5WZr6bIuqCgtIo/EbdLO2Xx72pnZLsKUA/8niGw6EJFNJL/BOaSTyC8QCaI1FeilBI0J5BD0cRBbv5ND0I8N/vgb5JavbvBHyRzgKIkr+nACXUt+mEimiFXmBD/CEGpsEPbvYeTjmTnBQRyyem2AKEKeo6ioEKy5wb7YzPkMFkNAqwCw01VDFfer+0qp2orWWlxDRkuCXDZl1Z3Mp0zUvK1VbZV/XN2I5nUG40Gu+bWnbaD9SBdBfNVdjh+J8nKSbcjF1EDgqbteiWScjghzLJ7leSYbxYRgmNB8E/QjvWjRUUc8zsSrhmlAotSEIwpPgYZSINLSg3znAMkh0kcQ5Vz8GvZFvewP31v+l4X59IUD9HpEDQ6gEbSXC2I7muV7affGOin5Mw7wrB686IFkLnmeBbJVTKjQrUFSqHQ2L0cLjkBs1hdSXaApO5dW8+QUa77LgxtnZ/CrpQKFlN3aOpc6nkiGLxzbwsGMAEBitz05Qrkb/tLCT1PZVK5gdBePPVIQ3H/PTJxmswu+A5iAsimvSLcbAAAAAElFTkSuQmCC")

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Error/Style/style.css":
/*!******************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./a1sauce/Error/Style/style.css ***!
  \******************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../../NIS/images/nis-bg.png */ "./a1sauce/NIS/images/nis-bg.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body:has(#Error) {
	overflow: hidden !important;
}

body:has(#Error)::before {
    content: '';
    display: block;
    width: 500vh;
    height: 500vh;
    z-index: 95;
    background-color: rgba(0,0,0,.7);
    position: fixed;
    top: 0;
    left: 0;
}

#Error {
	position: fixed;
	z-index: 99;
	top: 2rem;
	left: 5%;
	width: 100vw;
	max-width: 80%;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
	padding: 2rem;
	border: solid 2px #ffcb05;
}

#Error .title-row {
	display: flex;
	align-items: center;
	justify-content: flex-start;
	position: sticky;
	top: 0;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
	border-bottom: solid 2px #ffcb05;
}

#Error p {
	max-width: 90%;
}

#Error img {
	max-width: 90%;
	margin: 1rem auto;
}

#Error h2, #Error h3 {
	color: #ffcb05;
    text-shadow: 1px 1px #000000;
	letter-spacing: 1px;
}

#Error .close-button {
	white-space: nowrap;
	margin-left: 3rem;
}

#Error .close-button:hover {
	cursor: pointer;
}

#Error li {
	margin-bottom: .35rem;
	max-width: 80vw;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Patches/Style/style.css":
/*!********************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./a1sauce/Patches/Style/style.css ***!
  \********************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../../NIS/images/nis-bg.png */ "./a1sauce/NIS/images/nis-bg.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body:has(#PatchNotes) {
	overflow: hidden !important;
}

body:has(#PatchNotes)::before {
    content: '';
    display: block;
    width: 500vh;
    height: 500vh;
    z-index: 95;
    background-color: rgba(0,0,0,.7);
    position: fixed;
    top: 0;
    left: 0;
}

#PatchNotes {
	position: fixed;
	z-index: 99;
	top: 2rem;
	left: 5%;
	width: 100vw;
	max-width: 80%;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
	padding: 2rem;
	border: solid 2px #ffcb05;
}

#PatchNotes .title-row {
	display: flex;
	align-items: center;
	justify-content: flex-start;
	position: sticky;
	top: 0;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
	border-bottom: solid 2px #ffcb05;
}

#PatchNotes .patch-notes {
	max-height: 80vh;
	overflow-y: auto;
	margin-top: 2rem;
}

#PatchNotes .note {
	max-width: 90%;
}

#PatchNotes h2, #PatchNotes h3 {
	color: #ffcb05;
    text-shadow: 1px 1px #000000;
	letter-spacing: 1px;
}

#PatchNotes .close-button {
	white-space: nowrap;
	margin-left: 3rem;
}

#PatchNotes .close-button:hover {
	cursor: pointer;
}

#PatchNotes li {
	margin-bottom: .35rem;
	max-width: 80vw;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/alarm.css":
/*!******************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/alarm.css ***!
  \******************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `#Settings .alarm-setting,
#Settings .alarm-setting .alarm-volume {
	background-color: transparent !important;
}

#Settings .alarm-setting span.checkbox {
	margin-left: 0.5rem;
}

#Settings .alarm-setting .alarm-active,
#Settings .alarm-setting .alarm-looping {
	background-color: #071820 !important;
}

#Settings .alarm-setting .alarm-active:hover,
#Settings .alarm-setting .alarm-looping:hover {
	background-color: #03282d !important;
}

#Settings .alarm-setting p {
    font-family: sans-serif;
    font-size: 14px;
    color: #94afbd;
    text-shadow: 1px 1px #000000;
	margin-bottom: 3px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/file.css":
/*!*****************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/file.css ***!
  \*****************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `#Settings .upload-alarm {
	flex-wrap: wrap;
}

#Settings .upload-alarm label {
	margin-bottom: 5px;
}

#Settings .upload-alarm div {
	width: 100%;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/range.css":
/*!******************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/range.css ***!
  \******************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../../../NIS/images/range-input-tab.png */ "./a1sauce/NIS/images/range-input-tab.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../../../NIS/images/nis-range-minus.png */ "./a1sauce/NIS/images/nis-range-minus.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../../../NIS/images/nis-range-plus.png */ "./a1sauce/NIS/images/nis-range-plus.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `#Settings input[type="range"] {
   -webkit-appearance: none;
    appearance: none;
	transition: background 450ms ease-in;
    cursor: pointer;
	height: 8px;
	border: solid 1px #697479;
	border-radius: 3px;
	position: relative;
}

#Settings input[type="range"]::before {
	position: absolute;
	display: block;
	content: '';
	width: calc(100% - 6px);
	height: 1px;
	top: auto;
	bottom: -3px;
	background-color: #3e5765;
	z-index: 5;
	left: 50%;
    transform: translate(-50%);
}

#Settings input[type="range"]::after {
	position: absolute;
	display: block;
	content: '';
	width: calc(100% - 1px);
	height: 2px;
	top: 1px;
	bottom: auto;
	background-color: #09141b;
	z-index: 2;
	left: 50%;
    transform: translate(-50%);
	box-shadow: 0px 19px 0px #09141b;
}

#Settings input[type="range"]:focus {
  outline: none;
}

#Settings input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
   appearance: none;


   background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
   background-position: 50% 50%;
   background-repeat: no-repeat;
   width: 9px;
   height: 20px;
   position: relative;
   z-index: 6;
}

#Settings .flex-between-middle {
	display: flex;
	align-items: center;
	justify-content: space-between
}

#Settings .flex-between-center:has(input[type="range"]),
#Settings output {
	margin-top: 5px;
}

#Settings .minus-btn {
	width: 16px;
	height: 16px;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});
	background-position: 0px 0px;
	margin-top: 2px;
}

#Settings .plus-btn {
	width: 16px;
	height: 16px;
	background-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___});
	background-position: 0px 0px;
	margin-top: 2px;
	margin-right: 5px;
}
#Settings .minus-btn:hover,
#Settings .plus-btn:hover {
	cursor: pointer;
	background-position: 16px 0px;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!./css/styles.css":
/*!***************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./css/styles.css ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "../node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/nis-bg.png */ "./a1sauce/NIS/images/nis-bg.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/checkmark.png */ "./a1sauce/NIS/images/checkmark.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/imgbutton.png */ "./a1sauce/NIS/images/imgbutton.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! data:font/opentype;base64, */ "data:font/opentype;base64,"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/scroll.png */ "./a1sauce/NIS/images/scroll.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/scrollhor.png */ "./a1sauce/NIS/images/scrollhor.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ../a1sauce/NIS/images/button.png */ "./a1sauce/NIS/images/button.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);
var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `:root {
  --brightness: ,75;
}

body {
  display: block;
  padding: 0 .5rem;
  background-color: #0F0F0F;
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
  color: #FFFFFF;
  overflow-x: hidden;
  overflow-y: auto;
  margin: 0;
  opacity: 1;
}

#Settings {
  display: block;
  color: #F1F1F1;
}

#Settings {
  padding: .5rem;
}

#Settings a {
  color: #CEFC92;
}

#Settings a:visited,
#Settings a:hover {
  color: #57799e;
}

#Settings h2 {
  text-transform: uppercase;
  letter-spacing: 2px;
  text-align: center;
}

#Settings h2 + p {
  text-align: center;
}

#Settings h3 {
  letter-spacing: 1px;
}

#Settings h2,
#Settings h3 {
  color: #ffcb05;
  text-shadow: 1px 1px #000000;
}

#Settings label {
  font-family: sans-serif;
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
}

#Settings .setting:nth-child(2n+0) {
  background-color: #1c2c34;
  padding: 4px;
}

#Settings .setting:nth-child(2n+0):hover {
  background-color: #1c3b40;
}

#Settings .setting:nth-child(2n+1) {
  background-color: #071820;
  padding: 4px;
}

#Settings .setting:nth-child(2n+1):hover {
  background-color: #03282d;
}

#Settings .reverse-setting {
  flex-direction: row-reverse;
  align-items: center;
  justify-content: space-between;
}

#Settings .flex u,
#Settings .reverse-setting u {
  display: block;
  text-decoration: none;
  color: #a4c2d1;
  margin-bottom: 2px;
}

li.disabled {
  display: none !important;
  height: 0 !important;
  width: 0 !important;
  visibility: hidden;
  opacity: 0;
  border: none !important;
  pointer-events: none;
}

hr {
  opacity: .5;
}

h3 {
  margin-top: .75rem;
  margin-bottom: .35rem;
}

.flex {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.flex-wrap { flex-wrap: wrap; }
.full { width: 100%; }

#Settings .setting {
  margin-bottom: .65rem;
}

#Settings input[type="range"] ~ output {
  font-size: 14px;
  color: #94afbd;
  text-shadow: 1px 1px #000000;
  margin-top: .4rem;
}

input[type="color"] {
  margin-right: .5rem;
  width: 21px;
  height: 24px;
  background-color: transparent;
  padding: 0;
  border: none;
}

input[type="text"],
input[type="checkbox"],
select {
  margin-right: .5rem;
}

input[type="checkbox"] {
  display: none;
}

.reverse-setting label {
  position: relative;
}

input[type="checkbox"] ~ span.checkbox {
  display: block;
  content: '';
  width: 12px;
  height: 12px;
  background-color: #181616;
  border: solid 2px #3a5462;
  margin-left: 2.5rem;
  border-radius: 2px;
}

.reverse-setting:hover input[type="checkbox"] ~ span.checkbox {
  background-color: #2a2a29;
}

input[type="checkbox"]:checked ~ span.checkbox::after {
  position: absolute;
  content: '';
  display: block;
  width: 12px;
  height: 11px;
  top: 50%;
  right: 2px;
  transform: translateY(-50%);
  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});
  z-index: 2;
}

.reverse-setting:hover input[type="checkbox"]:checked ~ span.checkbox {
  background-color: #232323;
  border-color: #56788b;
}

input[type="color"]:hover {
  cursor: pointer;
}

input[type="number"] {
  margin: 0 .5rem;
  max-width: 40px;
  margin-left: 0;
}

input[type="number"].per-row {
  margin-left: 0;
}

small {
  display: block;
  margin: 1rem 0;
}

.nisimgbutton {
    width: 20px;
    height: 20px;
    border: 3px solid #212B2D;
    box-sizing: border-box;
    border-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___}) 3 fill;
    cursor: pointer;
}

.nisimgbutton:hover {
    filter: brightness(1.2);
}

/*font stolen from jagex*/
@font-face{
	font-family:'trajan-pro-3';
	src:url(${___CSS_LOADER_URL_REPLACEMENT_3___});
}

/*Chromium custom scrollbars, will only work on chromium browsers (such as alt1) */
body::-webkit-scrollbar,
body *:not(.normalscroll)::-webkit-scrollbar
{width:10px; height:10px;}

body::-webkit-scrollbar-button:start:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_4___}); background-position:0px 0px; height:15px;}

body::-webkit-scrollbar-button:end:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_4___}); background-position:-45px 0px; height:15px;}

body::-webkit-scrollbar-track:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-track:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_4___}); background-position:-15px 0px;}

body::-webkit-scrollbar-thumb:vertical,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:vertical
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_4___}); background-position:-30px 0px; border-radius:5px;}

body::-webkit-scrollbar-button:start:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:start:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_5___}); background-position:0px 0px; width:15px;}

body::-webkit-scrollbar-button:end:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-button:end:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_5___}); background-position:0px -45px; width:15px;}

body::-webkit-scrollbar-track:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-track:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_5___}); background-position:0px -15px;}

body::-webkit-scrollbar-thumb:horizontal,
body *:not(.normalscroll)::-webkit-scrollbar-thumb:horizontal
{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_5___}); background-position:0px -30px; border-radius:5px;}

body::-webkit-scrollbar-corner,
body *:not(.normalscroll)::-webkit-scrollbar-corner
{background:#060d11;}

input[type="text"],
input[type="number"],
input[type="input"],
select
	{height:20px; cursor:text; color:#B1AFAE; outline:none; position:relative; padding:0px 4px; box-sizing:border-box; background:linear-gradient(to bottom, #191714,#292222,#100C0C); border:1px solid #514949; font-family:sans-serif; font-size:13px;}

select{height:19px; cursor:pointer; outline:none; box-sizing:border-box; padding:0px 0px 0px 4px;}
select>option{background:#1D190D;}

hr {
  width:100%; height:0px; border-top:1px solid #000; border-bottom:1px solid #41555F;
}

.nisbutton {
    height: 32px;
    position: relative;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_6___}) 0px -100%/24px 400% repeat content-box;
    cursor: pointer;
    text-align: center;
    color: #000;
    font-family: 'trajan-pro-3';
    text-shadow: 1px 1px 2px #ecc622;
    font-size: 18px;
    margin: 5px;
    padding: 0px 12px;
    line-height: 32px;
    user-select: none;
    -webkit-user-select: none;
}

.nisbutton::before {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    left: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_6___}) 0px 0px / 24px 400%;
}

.nisbutton::after {
    width: 12px;
    height: 100%;
    content: "";
    position: absolute;
    top: 0px;
    right: 0px;
    background: url(${___CSS_LOADER_URL_REPLACEMENT_6___}) -12px 0px / 24px 400%;
}

.nisbutton:not([disabled]):hover {
    background-position: 0px -300%;
}

.nisbutton:not([disabled]):hover::before {
    background-position: 0px -200%;
}

.nisbutton:not([disabled]):hover::after {
    background-position: -12px -200%;
}

.nisbutton[disabled] {
  opacity: .5;
  cursor: default;
  pointer-events: none;
}
`, ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/getUrl.js":
/*!*********************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/getUrl.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!***************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ "../node_modules/events/events.js":
/*!****************************************!*\
  !*** ../node_modules/events/events.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "../node_modules/pouchdb/lib/index-browser.es.js":
/*!*******************************************************!*\
  !*** ../node_modules/pouchdb/lib/index-browser.es.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! spark-md5 */ "../node_modules/spark-md5/spark-md5.js");
/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(spark_md5__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var vuvuzela__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vuvuzela */ "../node_modules/vuvuzela/index.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ "../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);





function isBinaryObject(object) {
  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||
    (typeof Blob !== 'undefined' && object instanceof Blob);
}

/**
 * @template {ArrayBuffer | Blob} T
 * @param {T} object
 * @returns {T}
 */
function cloneBinaryObject(object) {
  return object instanceof ArrayBuffer
    ? object.slice(0)
    : object.slice(0, object.size, object.type);
}

// most of this is borrowed from lodash.isPlainObject:
// https://github.com/fis-components/lodash.isplainobject/
// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js

var funcToString = Function.prototype.toString;
var objectCtorString = funcToString.call(Object);

function isPlainObject(value) {
  var proto = Object.getPrototypeOf(value);
  /* istanbul ignore if */
  if (proto === null) { // not sure when this happens, but I guess it can
    return true;
  }
  var Ctor = proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

function clone(object) {
  var newObject;
  var i;
  var len;

  if (!object || typeof object !== 'object') {
    return object;
  }

  if (Array.isArray(object)) {
    newObject = [];
    for (i = 0, len = object.length; i < len; i++) {
      newObject[i] = clone(object[i]);
    }
    return newObject;
  }

  // special case: to avoid inconsistencies between IndexedDB
  // and other backends, we automatically stringify Dates
  if (object instanceof Date && isFinite(object)) {
    return object.toISOString();
  }

  if (isBinaryObject(object)) {
    return cloneBinaryObject(object);
  }

  if (!isPlainObject(object)) {
    return object; // don't clone objects like Workers
  }

  newObject = {};
  for (i in object) {
    /* istanbul ignore else */
    if (Object.prototype.hasOwnProperty.call(object, i)) {
      var value = clone(object[i]);
      if (typeof value !== 'undefined') {
        newObject[i] = value;
      }
    }
  }
  return newObject;
}

function once(fun) {
  var called = false;
  return function (...args) {
    /* istanbul ignore if */
    if (called) {
      // this is a smoke test and should never actually happen
      throw new Error('once called more than once');
    } else {
      called = true;
      fun.apply(this, args);
    }
  };
}

function toPromise(func) {
  //create the function we will be returning
  return function (...args) {
    // Clone arguments
    args = clone(args);
    var self = this;
    // if the last argument is a function, assume its a callback
    var usedCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;
    var promise = new Promise(function (fulfill, reject) {
      var resp;
      try {
        var callback = once(function (err, mesg) {
          if (err) {
            reject(err);
          } else {
            fulfill(mesg);
          }
        });
        // create a callback for this invocation
        // apply the function in the orig context
        args.push(callback);
        resp = func.apply(self, args);
        if (resp && typeof resp.then === 'function') {
          fulfill(resp);
        }
      } catch (e) {
        reject(e);
      }
    });
    // if there is a callback, call it back
    if (usedCB) {
      promise.then(function (result) {
        usedCB(null, result);
      }, usedCB);
    }
    return promise;
  };
}

function logApiCall(self, name, args) {
  /* istanbul ignore if */
  if (self.constructor.listeners('debug').length) {
    var logArgs = ['api', self.name, name];
    for (var i = 0; i < args.length - 1; i++) {
      logArgs.push(args[i]);
    }
    self.constructor.emit('debug', logArgs);

    // override the callback itself to log the response
    var origCallback = args[args.length - 1];
    args[args.length - 1] = function (err, res) {
      var responseArgs = ['api', self.name, name];
      responseArgs = responseArgs.concat(
        err ? ['error', err] : ['success', res]
      );
      self.constructor.emit('debug', responseArgs);
      origCallback(err, res);
    };
  }
}

function adapterFun(name, callback) {
  return toPromise(function (...args) {
    if (this._closed) {
      return Promise.reject(new Error('database is closed'));
    }
    if (this._destroyed) {
      return Promise.reject(new Error('database is destroyed'));
    }
    var self = this;
    logApiCall(self, name, args);
    if (!this.taskqueue.isReady) {
      return new Promise(function (fulfill, reject) {
        self.taskqueue.addTask(function (failed) {
          if (failed) {
            reject(failed);
          } else {
            fulfill(self[name].apply(self, args));
          }
        });
      });
    }
    return callback.apply(this, args);
  });
}

// like underscore/lodash _.pick()
function pick(obj, arr) {
  var res = {};
  for (var i = 0, len = arr.length; i < len; i++) {
    var prop = arr[i];
    if (prop in obj) {
      res[prop] = obj[prop];
    }
  }
  return res;
}

// Most browsers throttle concurrent requests at 6, so it's silly
// to shim _bulk_get by trying to launch potentially hundreds of requests
// and then letting the majority time out. We can handle this ourselves.
var MAX_NUM_CONCURRENT_REQUESTS = 6;

function identityFunction(x) {
  return x;
}

function formatResultForOpenRevsGet(result) {
  return [{
    ok: result
  }];
}

// shim for P/CouchDB adapters that don't directly implement _bulk_get
function bulkGet(db, opts, callback) {
  var requests = opts.docs;

  // consolidate into one request per doc if possible
  var requestsById = new Map();
  requests.forEach(function (request) {
    if (requestsById.has(request.id)) {
      requestsById.get(request.id).push(request);
    } else {
      requestsById.set(request.id, [request]);
    }
  });

  var numDocs = requestsById.size;
  var numDone = 0;
  var perDocResults = new Array(numDocs);

  function collapseResultsAndFinish() {
    var results = [];
    perDocResults.forEach(function (res) {
      res.docs.forEach(function (info) {
        results.push({
          id: res.id,
          docs: [info]
        });
      });
    });
    callback(null, {results});
  }

  function checkDone() {
    if (++numDone === numDocs) {
      collapseResultsAndFinish();
    }
  }

  function gotResult(docIndex, id, docs) {
    perDocResults[docIndex] = {id, docs};
    checkDone();
  }

  var allRequests = [];
  requestsById.forEach(function (value, key) {
    allRequests.push(key);
  });

  var i = 0;

  function nextBatch() {

    if (i >= allRequests.length) {
      return;
    }

    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);
    var batch = allRequests.slice(i, upTo);
    processBatch(batch, i);
    i += batch.length;
  }

  function processBatch(batch, offset) {
    batch.forEach(function (docId, j) {
      var docIdx = offset + j;
      var docRequests = requestsById.get(docId);

      // just use the first request as the "template"
      // TODO: The _bulk_get API allows for more subtle use cases than this,
      // but for now it is unlikely that there will be a mix of different
      // "atts_since" or "attachments" in the same request, since it's just
      // replicate.js that is using this for the moment.
      // Also, atts_since is aspirational, since we don't support it yet.
      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);
      docOpts.open_revs = docRequests.map(function (request) {
        // rev is optional, open_revs disallowed
        return request.rev;
      });

      // remove falsey / undefined revisions
      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);

      var formatResult = identityFunction;

      if (docOpts.open_revs.length === 0) {
        delete docOpts.open_revs;

        // when fetching only the "winning" leaf,
        // transform the result so it looks like an open_revs
        // request
        formatResult = formatResultForOpenRevsGet;
      }

      // globally-supplied options
      ['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(function (param) {
        if (param in opts) {
          docOpts[param] = opts[param];
        }
      });
      db.get(docId, docOpts, function (err, res) {
        var result;
        /* istanbul ignore if */
        if (err) {
          result = [{error: err}];
        } else {
          result = formatResult(res);
        }
        gotResult(docIdx, docId, result);
        nextBatch();
      });
    });
  }

  nextBatch();

}

var hasLocal;

try {
  localStorage.setItem('_pouch_check_localstorage', 1);
  hasLocal = !!localStorage.getItem('_pouch_check_localstorage');
} catch (e) {
  hasLocal = false;
}

function hasLocalStorage() {
  return hasLocal;
}

const nextTick = typeof queueMicrotask === "function"
  ? queueMicrotask
  : function nextTick(fn) {
    Promise.resolve().then(fn);
  };

class Changes extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {
  constructor() {
    super();

    this._listeners = {};

    if (hasLocalStorage()) {
      addEventListener("storage", (e) => {
        this.emit(e.key);
      });
    }
  }

  addListener(dbName, id, db, opts) {
    if (this._listeners[id]) {
      return;
    }
    var inprogress = false;
    var self = this;
    function eventFunction() {
      if (!self._listeners[id]) {
        return;
      }
      if (inprogress) {
        inprogress = 'waiting';
        return;
      }
      inprogress = true;
      var changesOpts = pick(opts, [
        'style', 'include_docs', 'attachments', 'conflicts', 'filter',
        'doc_ids', 'view', 'since', 'query_params', 'binary', 'return_docs'
      ]);

      function onError() {
        inprogress = false;
      }

      db.changes(changesOpts).on('change', function (c) {
        if (c.seq > opts.since && !opts.cancelled) {
          opts.since = c.seq;
          opts.onChange(c);
        }
      }).on('complete', function () {
        if (inprogress === 'waiting') {
          nextTick(eventFunction);
        }
        inprogress = false;
      }).on('error', onError);
    }
    this._listeners[id] = eventFunction;
    this.on(dbName, eventFunction);
  }

  removeListener(dbName, id) {
    if (!(id in this._listeners)) {
      return;
    }
    super.removeListener(dbName, this._listeners[id]);
    delete this._listeners[id];
  }

  notifyLocalWindows(dbName) {
    //do a useless change on a storage thing
    //in order to get other windows's listeners to activate
    if (hasLocalStorage()) {
      localStorage[dbName] = (localStorage[dbName] === "a") ? "b" : "a";
    }
  }

  notify(dbName) {
    this.emit(dbName);
    this.notifyLocalWindows(dbName);
  }
}

function guardedConsole(method) {
  /* istanbul ignore else */
  if (typeof console !== 'undefined' && typeof console[method] === 'function') {
    var args = Array.prototype.slice.call(arguments, 1);
    console[method].apply(console, args);
  }
}

function randomNumber(min, max) {
  var maxTimeout = 600000; // Hard-coded default of 10 minutes
  min = parseInt(min, 10) || 0;
  max = parseInt(max, 10);
  if (max !== max || max <= min) {
    max = (min || 1) << 1; //doubling
  } else {
    max = max + 1;
  }
  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout
  if (max > maxTimeout) {
    min = maxTimeout >> 1; // divide by two
    max = maxTimeout;
  }
  var ratio = Math.random();
  var range = max - min;

  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.
}

function defaultBackOff(min) {
  var max = 0;
  if (!min) {
    max = 2000;
  }
  return randomNumber(min, max);
}

// designed to give info to browser users, who are disturbed
// when they see http errors in the console
function explainError(status, str) {
  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);
}

class PouchError extends Error {
  constructor(status, error, reason) {
    super();
    this.status = status;
    this.name = error;
    this.message = reason;
    this.error = true;
  }

  toString() {
    return JSON.stringify({
      status: this.status,
      name: this.name,
      message: this.message,
      reason: this.reason
    });
  }
}

var UNAUTHORIZED = new PouchError(401, 'unauthorized', "Name or password is incorrect.");
var MISSING_BULK_DOCS = new PouchError(400, 'bad_request', "Missing JSON list of 'docs'");
var MISSING_DOC = new PouchError(404, 'not_found', 'missing');
var REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');
var INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');
var MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');
var RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');
var NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');
var UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');
var BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');
var INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');
var QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');
var DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');
var BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');
var NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');
var DB_MISSING = new PouchError(404, 'not_found', 'Database not found');
var IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');
var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');
var LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');
var FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');
var INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');
var FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');
var MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\'t found');
var INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');

function createError(error, reason) {
  function CustomPouchError(reason) {
    // inherit error properties from our parent error manually
    // so as to allow proper JSON parsing.
    var names = Object.getOwnPropertyNames(error);
    for (var i = 0, len = names.length; i < len; i++) {
      if (typeof error[names[i]] !== 'function') {
        this[names[i]] = error[names[i]];
      }
    }

    if (this.stack === undefined) {
      this.stack = (new Error()).stack;
    }

    if (reason !== undefined) {
      this.reason = reason;
    }
  }
  CustomPouchError.prototype = PouchError.prototype;
  return new CustomPouchError(reason);
}

function generateErrorFromResponse(err) {

  if (typeof err !== 'object') {
    var data = err;
    err = UNKNOWN_ERROR;
    err.data = data;
  }

  if ('error' in err && err.error === 'conflict') {
    err.name = 'conflict';
    err.status = 409;
  }

  if (!('name' in err)) {
    err.name = err.error || 'unknown';
  }

  if (!('status' in err)) {
    err.status = 500;
  }

  if (!('message' in err)) {
    err.message = err.message || err.reason;
  }

  if (!('stack' in err)) {
    err.stack = (new Error()).stack;
  }

  return err;
}

function tryFilter(filter, doc, req) {
  try {
    return !filter(doc, req);
  } catch (err) {
    var msg = 'Filter function threw: ' + err.toString();
    return createError(BAD_REQUEST, msg);
  }
}

function filterChange(opts) {
  var req = {};
  var hasFilter = opts.filter && typeof opts.filter === 'function';
  req.query = opts.query_params;

  return function filter(change) {
    if (!change.doc) {
      // CSG sends events on the changes feed that don't have documents,
      // this hack makes a whole lot of existing code robust.
      change.doc = {};
    }

    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);

    if (typeof filterReturn === 'object') {
      return filterReturn;
    }

    if (filterReturn) {
      return false;
    }

    if (!opts.include_docs) {
      delete change.doc;
    } else if (!opts.attachments) {
      for (var att in change.doc._attachments) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(change.doc._attachments, att)) {
          change.doc._attachments[att].stub = true;
        }
      }
    }
    return true;
  };
}

// shim for Function.prototype.name,

// Determine id an ID is valid
//   - invalid IDs begin with an underescore that does not begin '_design' or
//     '_local'
//   - any other string value is a valid id
// Returns the specific error object for each case
function invalidIdError(id) {
  var err;
  if (!id) {
    err = createError(MISSING_ID);
  } else if (typeof id !== 'string') {
    err = createError(INVALID_ID);
  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {
    err = createError(RESERVED_ID);
  }
  if (err) {
    throw err;
  }
}

// Checks if a PouchDB object is "remote" or not. This is

function isRemote(db) {
  if (typeof db._remote === 'boolean') {
    return db._remote;
  }
  /* istanbul ignore next */
  if (typeof db.type === 'function') {
    guardedConsole('warn',
      'db.type() is deprecated and will be removed in ' +
      'a future version of PouchDB');
    return db.type() === 'http';
  }
  /* istanbul ignore next */
  return false;
}

function listenerCount(ee, type) {
  return 'listenerCount' in ee ? ee.listenerCount(type) :
                                 events__WEBPACK_IMPORTED_MODULE_2___default().listenerCount(ee, type);
}

function parseDesignDocFunctionName(s) {
  if (!s) {
    return null;
  }
  var parts = s.split('/');
  if (parts.length === 2) {
    return parts;
  }
  if (parts.length === 1) {
    return [s, s];
  }
  return null;
}

function normalizeDesignDocFunctionName(s) {
  var normalized = parseDesignDocFunctionName(s);
  return normalized ? normalized.join('/') : null;
}

// originally parseUri 1.2.2, now patched by us
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
var keys = ["source", "protocol", "authority", "userInfo", "user", "password",
    "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
var qName ="queryKey";
var qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;

// use the "loose" parser
/* eslint no-useless-escape: 0 */
var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

function parseUri(str) {
  var m = parser.exec(str);
  var uri = {};
  var i = 14;

  while (i--) {
    var key = keys[i];
    var value = m[i] || "";
    var encoded = ['user', 'password'].indexOf(key) !== -1;
    uri[key] = encoded ? decodeURIComponent(value) : value;
  }

  uri[qName] = {};
  uri[keys[12]].replace(qParser, function ($0, $1, $2) {
    if ($1) {
      uri[qName][$1] = $2;
    }
  });

  return uri;
}

// Based on https://github.com/alexdavid/scope-eval v0.0.3
// (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)
// This is basically just a wrapper around new Function()

function scopeEval(source, scope) {
  var keys = [];
  var values = [];
  for (var key in scope) {
    if (Object.prototype.hasOwnProperty.call(scope, key)) {
      keys.push(key);
      values.push(scope[key]);
    }
  }
  keys.push(source);
  return Function.apply(null, keys).apply(null, values);
}

// this is essentially the "update sugar" function from daleharvey/pouchdb#1388
// the diffFun tells us what delta to apply to the doc.  it either returns
// the doc, or false if it doesn't need to do an update after all
function upsert(db, docId, diffFun) {
  return db.get(docId)
    .catch(function (err) {
      /* istanbul ignore next */
      if (err.status !== 404) {
        throw err;
      }
      return {};
    })
    .then(function (doc) {
      // the user might change the _rev, so save it for posterity
      var docRev = doc._rev;
      var newDoc = diffFun(doc);

      if (!newDoc) {
        // if the diffFun returns falsy, we short-circuit as
        // an optimization
        return {updated: false, rev: docRev};
      }

      // users aren't allowed to modify these values,
      // so reset them here
      newDoc._id = docId;
      newDoc._rev = docRev;
      return tryAndPut(db, newDoc, diffFun);
    });
}

function tryAndPut(db, doc, diffFun) {
  return db.put(doc).then(function (res) {
    return {
      updated: true,
      rev: res.rev
    };
  }, function (err) {
    /* istanbul ignore next */
    if (err.status !== 409) {
      throw err;
    }
    return upsert(db, doc._id, diffFun);
  });
}

var thisAtob = function (str) {
  return atob(str);
};

var thisBtoa = function (str) {
  return btoa(str);
};

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor (e.g.
// old QtWebKit versions, Android < 4.4).
function createBlob(parts, properties) {
  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
  parts = parts || [];
  properties = properties || {};
  try {
    return new Blob(parts, properties);
  } catch (e) {
    if (e.name !== "TypeError") {
      throw e;
    }
    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :
                  WebKitBlobBuilder;
    var builder = new Builder();
    for (var i = 0; i < parts.length; i += 1) {
      builder.append(parts[i]);
    }
    return builder.getBlob(properties.type);
  }
}

// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function binaryStringToArrayBuffer(bin) {
  var length = bin.length;
  var buf = new ArrayBuffer(length);
  var arr = new Uint8Array(buf);
  for (var i = 0; i < length; i++) {
    arr[i] = bin.charCodeAt(i);
  }
  return buf;
}

function binStringToBluffer(binString, type) {
  return createBlob([binaryStringToArrayBuffer(binString)], {type});
}

function b64ToBluffer(b64, type) {
  return binStringToBluffer(thisAtob(b64), type);
}

//Can't find original post, but this is close
//http://stackoverflow.com/questions/6965107/ (continues on next line)
//converting-between-strings-and-arraybuffers
function arrayBufferToBinaryString(buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var length = bytes.byteLength;
  for (var i = 0; i < length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return binary;
}

// shim for browsers that don't support it
function readAsBinaryString(blob, callback) {
  var reader = new FileReader();
  var hasBinaryString = typeof reader.readAsBinaryString === 'function';
  reader.onloadend = function (e) {
    var result = e.target.result || '';
    if (hasBinaryString) {
      return callback(result);
    }
    callback(arrayBufferToBinaryString(result));
  };
  if (hasBinaryString) {
    reader.readAsBinaryString(blob);
  } else {
    reader.readAsArrayBuffer(blob);
  }
}

function blobToBinaryString(blobOrBuffer, callback) {
  readAsBinaryString(blobOrBuffer, function (bin) {
    callback(bin);
  });
}

function blobToBase64(blobOrBuffer, callback) {
  blobToBinaryString(blobOrBuffer, function (base64) {
    callback(thisBtoa(base64));
  });
}

// simplified API. universal browser support is assumed
function readAsArrayBuffer(blob, callback) {
  var reader = new FileReader();
  reader.onloadend = function (e) {
    var result = e.target.result || new ArrayBuffer(0);
    callback(result);
  };
  reader.readAsArrayBuffer(blob);
}

// this is not used in the browser

var setImmediateShim = self.setImmediate || self.setTimeout;
var MD5_CHUNK_SIZE = 32768;

function rawToBase64(raw) {
  return thisBtoa(raw);
}

function appendBlob(buffer, blob, start, end, callback) {
  if (start > 0 || end < blob.size) {
    // only slice blob if we really need to
    blob = blob.slice(start, end);
  }
  readAsArrayBuffer(blob, function (arrayBuffer) {
    buffer.append(arrayBuffer);
    callback();
  });
}

function appendString(buffer, string, start, end, callback) {
  if (start > 0 || end < string.length) {
    // only create a substring if we really need to
    string = string.substring(start, end);
  }
  buffer.appendBinary(string);
  callback();
}

function binaryMd5(data, callback) {
  var inputIsString = typeof data === 'string';
  var len = inputIsString ? data.length : data.size;
  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);
  var chunks = Math.ceil(len / chunkSize);
  var currentChunk = 0;
  var buffer = inputIsString ? new (spark_md5__WEBPACK_IMPORTED_MODULE_0___default())() : new (spark_md5__WEBPACK_IMPORTED_MODULE_0___default().ArrayBuffer)();

  var append = inputIsString ? appendString : appendBlob;

  function next() {
    setImmediateShim(loadNextChunk);
  }

  function done() {
    var raw = buffer.end(true);
    var base64 = rawToBase64(raw);
    callback(base64);
    buffer.destroy();
  }

  function loadNextChunk() {
    var start = currentChunk * chunkSize;
    var end = start + chunkSize;
    currentChunk++;
    if (currentChunk < chunks) {
      append(buffer, data, start, end, next);
    } else {
      append(buffer, data, start, end, done);
    }
  }
  loadNextChunk();
}

function stringMd5(string) {
  return spark_md5__WEBPACK_IMPORTED_MODULE_0___default().hash(string);
}

/**
 * Creates a new revision string that does NOT include the revision height
 * For example '56649f1b0506c6ca9fda0746eb0cacdf'
 */
function rev(doc, deterministic_revs) {
  if (!deterministic_revs) {
    return (0,uuid__WEBPACK_IMPORTED_MODULE_3__["default"])().replace(/-/g, '').toLowerCase();
  }

  var mutateableDoc = Object.assign({}, doc);
  delete mutateableDoc._rev_tree;
  return stringMd5(JSON.stringify(mutateableDoc));
}

var uuid = uuid__WEBPACK_IMPORTED_MODULE_3__["default"]; // mimic old import, only v4 is ever used elsewhere

// We fetch all leafs of the revision tree, and sort them based on tree length
// and whether they were deleted, undeleted documents with the longest revision
// tree (most edits) win
// The final sort algorithm is slightly documented in a sidebar here:
// http://guide.couchdb.org/draft/conflicts.html
function winningRev(metadata) {
  var winningId;
  var winningPos;
  var winningDeleted;
  var toVisit = metadata.rev_tree.slice();
  var node;
  while ((node = toVisit.pop())) {
    var tree = node.ids;
    var branches = tree[2];
    var pos = node.pos;
    if (branches.length) { // non-leaf
      for (var i = 0, len = branches.length; i < len; i++) {
        toVisit.push({pos: pos + 1, ids: branches[i]});
      }
      continue;
    }
    var deleted = !!tree[1].deleted;
    var id = tree[0];
    // sort by deleted, then pos, then id
    if (!winningId || (winningDeleted !== deleted ? winningDeleted :
        winningPos !== pos ? winningPos < pos : winningId < id)) {
      winningId = id;
      winningPos = pos;
      winningDeleted = deleted;
    }
  }

  return winningPos + '-' + winningId;
}

// Pretty much all below can be combined into a higher order function to
// traverse revisions
// The return value from the callback will be passed as context to all
// children of that node
function traverseRevTree(revs, callback) {
  var toVisit = revs.slice();

  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var branches = tree[2];
    var newCtx =
      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});
    }
  }
}

function sortByPos(a, b) {
  return a.pos - b.pos;
}

function collectLeaves(revs) {
  var leaves = [];
  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {
    if (isLeaf) {
      leaves.push({rev: pos + "-" + id, pos, opts});
    }
  });
  leaves.sort(sortByPos).reverse();
  for (var i = 0, len = leaves.length; i < len; i++) {
    delete leaves[i].pos;
  }
  return leaves;
}

// returns revs of all conflicts that is leaves such that
// 1. are not deleted and
// 2. are different than winning revision
function collectConflicts(metadata) {
  var win = winningRev(metadata);
  var leaves = collectLeaves(metadata.rev_tree);
  var conflicts = [];
  for (var i = 0, len = leaves.length; i < len; i++) {
    var leaf = leaves[i];
    if (leaf.rev !== win && !leaf.opts.deleted) {
      conflicts.push(leaf.rev);
    }
  }
  return conflicts;
}

// compact a tree by marking its non-leafs as missing,
// and return a list of revs to delete
function compactTree(metadata) {
  var revs = [];
  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                               revHash, ctx, opts) {
    if (opts.status === 'available' && !isLeaf) {
      revs.push(pos + '-' + revHash);
      opts.status = 'missing';
    }
  });
  return revs;
}

// `findPathToLeaf()` returns an array of revs that goes from the specified
// leaf rev to the root of that leaf’s branch.
//
// eg. for this rev tree:
// 1-9692 ▶ 2-37aa ▶ 3-df22 ▶ 4-6e94 ▶ 5-df4a ▶ 6-6a3a ▶ 7-57e5
//          ┃                 ┗━━━━━━▶ 5-8d8c ▶ 6-65e0
//          ┗━━━━━━▶ 3-43f6 ▶ 4-a3b4
//
// For a `targetRev` of '7-57e5', `findPathToLeaf()` would return ['7-57e5', '6-6a3a', '5-df4a']
// The `revs` argument has the same structure as what `revs_tree` has on e.g.
// the IndexedDB representation of the rev tree datastructure. Please refer to
// tests/unit/test.purge.js for examples of what these look like.
//
// This function will throw an error if:
// - The requested revision does not exist
// - The requested revision is not a leaf
function findPathToLeaf(revs, targetRev) {
  let path = [];
  const toVisit = revs.slice();

  let node;
  while ((node = toVisit.pop())) {
    const { pos, ids: tree } = node;
    const rev = `${pos}-${tree[0]}`;
    const branches = tree[2];

    // just assuming we're already working on the path up towards our desired leaf.
    path.push(rev);

    // we've reached the leaf of our dreams, so return the computed path.
    if (rev === targetRev) {
      //…unleeeeess
      if (branches.length !== 0) {
        throw new Error('The requested revision is not a leaf');
      }
      return path.reverse();
    }

    // this is based on the assumption that after we have a leaf (`branches.length == 0`), we handle the next
    // branch. this is true for all branches other than the path leading to the winning rev (which is 7-57e5 in
    // the example above. i've added a reset condition for branching nodes (`branches.length > 1`) as well.
    if (branches.length === 0 || branches.length > 1) {
      path = [];
    }

    // as a next step, we push the branches of this node to `toVisit` for visiting it during the next iteration
    for (let i = 0, len = branches.length; i < len; i++) {
      toVisit.push({ pos: pos + 1, ids: branches[i] });
    }
  }
  if (path.length === 0) {
    throw new Error('The requested revision does not exist');
  }
  return path.reverse();
}

// build up a list of all the paths to the leafs in this revision tree
function rootToLeaf(revs) {
  var paths = [];
  var toVisit = revs.slice();
  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var id = tree[0];
    var opts = tree[1];
    var branches = tree[2];
    var isLeaf = branches.length === 0;

    var history = node.history ? node.history.slice() : [];
    history.push({id, opts});
    if (isLeaf) {
      paths.push({pos: (pos + 1 - history.length), ids: history});
    }
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: pos + 1, ids: branches[i], history});
    }
  }
  return paths.reverse();
}

// for a better overview of what this is doing, read:

function sortByPos$1(a, b) {
  return a.pos - b.pos;
}

// classic binary search
function binarySearch(arr, item, comparator) {
  var low = 0;
  var high = arr.length;
  var mid;
  while (low < high) {
    mid = (low + high) >>> 1;
    if (comparator(arr[mid], item) < 0) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return low;
}

// assuming the arr is sorted, insert the item in the proper place
function insertSorted(arr, item, comparator) {
  var idx = binarySearch(arr, item, comparator);
  arr.splice(idx, 0, item);
}

// Turn a path as a flat array into a tree with a single branch.
// If any should be stemmed from the beginning of the array, that's passed
// in as the second argument
function pathToTree(path, numStemmed) {
  var root;
  var leaf;
  for (var i = numStemmed, len = path.length; i < len; i++) {
    var node = path[i];
    var currentLeaf = [node.id, node.opts, []];
    if (leaf) {
      leaf[2].push(currentLeaf);
      leaf = currentLeaf;
    } else {
      root = leaf = currentLeaf;
    }
  }
  return root;
}

// compare the IDs of two trees
function compareTree(a, b) {
  return a[0] < b[0] ? -1 : 1;
}

// Merge two trees together
// The roots of tree1 and tree2 must be the same revision
function mergeTree(in_tree1, in_tree2) {
  var queue = [{tree1: in_tree1, tree2: in_tree2}];
  var conflicts = false;
  while (queue.length > 0) {
    var item = queue.pop();
    var tree1 = item.tree1;
    var tree2 = item.tree2;

    if (tree1[1].status || tree2[1].status) {
      tree1[1].status =
        (tree1[1].status ===  'available' ||
        tree2[1].status === 'available') ? 'available' : 'missing';
    }

    for (var i = 0; i < tree2[2].length; i++) {
      if (!tree1[2][0]) {
        conflicts = 'new_leaf';
        tree1[2][0] = tree2[2][i];
        continue;
      }

      var merged = false;
      for (var j = 0; j < tree1[2].length; j++) {
        if (tree1[2][j][0] === tree2[2][i][0]) {
          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});
          merged = true;
        }
      }
      if (!merged) {
        conflicts = 'new_branch';
        insertSorted(tree1[2], tree2[2][i], compareTree);
      }
    }
  }
  return {conflicts, tree: in_tree1};
}

function doMerge(tree, path, dontExpand) {
  var restree = [];
  var conflicts = false;
  var merged = false;
  var res;

  if (!tree.length) {
    return {tree: [path], conflicts: 'new_leaf'};
  }

  for (var i = 0, len = tree.length; i < len; i++) {
    var branch = tree[i];
    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {
      // Paths start at the same position and have the same root, so they need
      // merged
      res = mergeTree(branch.ids, path.ids);
      restree.push({pos: branch.pos, ids: res.tree});
      conflicts = conflicts || res.conflicts;
      merged = true;
    } else if (dontExpand !== true) {
      // The paths start at a different position, take the earliest path and
      // traverse up until it as at the same point from root as the path we
      // want to merge.  If the keys match we return the longer path with the
      // other merged After stemming we don't want to expand the trees

      var t1 = branch.pos < path.pos ? branch : path;
      var t2 = branch.pos < path.pos ? path : branch;
      var diff = t2.pos - t1.pos;

      var candidateParents = [];

      var trees = [];
      trees.push({ids: t1.ids, diff, parent: null, parentIdx: null});
      while (trees.length > 0) {
        var item = trees.pop();
        if (item.diff === 0) {
          if (item.ids[0] === t2.ids[0]) {
            candidateParents.push(item);
          }
          continue;
        }
        var elements = item.ids[2];
        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {
          trees.push({
            ids: elements[j],
            diff: item.diff - 1,
            parent: item.ids,
            parentIdx: j
          });
        }
      }

      var el = candidateParents[0];

      if (!el) {
        restree.push(branch);
      } else {
        res = mergeTree(el.ids, t2.ids);
        el.parent[2][el.parentIdx] = res.tree;
        restree.push({pos: t1.pos, ids: t1.ids});
        conflicts = conflicts || res.conflicts;
        merged = true;
      }
    } else {
      restree.push(branch);
    }
  }

  // We didnt find
  if (!merged) {
    restree.push(path);
  }

  restree.sort(sortByPos$1);

  return {
    tree: restree,
    conflicts: conflicts || 'internal_node'
  };
}

// To ensure we don't grow the revision tree infinitely, we stem old revisions
function stem(tree, depth) {
  // First we break out the tree into a complete list of root to leaf paths
  var paths = rootToLeaf(tree);
  var stemmedRevs;

  var result;
  for (var i = 0, len = paths.length; i < len; i++) {
    // Then for each path, we cut off the start of the path based on the
    // `depth` to stem to, and generate a new set of flat trees
    var path = paths[i];
    var stemmed = path.ids;
    var node;
    if (stemmed.length > depth) {
      // only do the stemming work if we actually need to stem
      if (!stemmedRevs) {
        stemmedRevs = {}; // avoid allocating this object unnecessarily
      }
      var numStemmed = stemmed.length - depth;
      node = {
        pos: path.pos + numStemmed,
        ids: pathToTree(stemmed, numStemmed)
      };

      for (var s = 0; s < numStemmed; s++) {
        var rev = (path.pos + s) + '-' + stemmed[s].id;
        stemmedRevs[rev] = true;
      }
    } else { // no need to actually stem
      node = {
        pos: path.pos,
        ids: pathToTree(stemmed, 0)
      };
    }

    // Then we remerge all those flat trees together, ensuring that we don't
    // connect trees that would go beyond the depth limit
    if (result) {
      result = doMerge(result, node, true).tree;
    } else {
      result = [node];
    }
  }

  // this is memory-heavy per Chrome profiler, avoid unless we actually stemmed
  if (stemmedRevs) {
    traverseRevTree(result, function (isLeaf, pos, revHash) {
      // some revisions may have been removed in a branch but not in another
      delete stemmedRevs[pos + '-' + revHash];
    });
  }

  return {
    tree: result,
    revs: stemmedRevs ? Object.keys(stemmedRevs) : []
  };
}

function merge(tree, path, depth) {
  var newTree = doMerge(tree, path);
  var stemmed = stem(newTree.tree, depth);
  return {
    tree: stemmed.tree,
    stemmedRevs: stemmed.revs,
    conflicts: newTree.conflicts
  };
}

// return true if a rev exists in the rev tree, false otherwise
function revExists(revs, rev) {
  var toVisit = revs.slice();
  var splitRev = rev.split('-');
  var targetPos = parseInt(splitRev[0], 10);
  var targetId = splitRev[1];

  var node;
  while ((node = toVisit.pop())) {
    if (node.pos === targetPos && node.ids[0] === targetId) {
      return true;
    }
    var branches = node.ids[2];
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: node.pos + 1, ids: branches[i]});
    }
  }
  return false;
}

function getTrees(node) {
  return node.ids;
}

// check if a specific revision of a doc has been deleted
//  - metadata: the metadata object from the doc store
//  - rev: (optional) the revision to check. defaults to winning revision
function isDeleted(metadata, rev) {
  if (!rev) {
    rev = winningRev(metadata);
  }
  var id = rev.substring(rev.indexOf('-') + 1);
  var toVisit = metadata.rev_tree.map(getTrees);

  var tree;
  while ((tree = toVisit.pop())) {
    if (tree[0] === id) {
      return !!tree[1].deleted;
    }
    toVisit = toVisit.concat(tree[2]);
  }
}

function isLocalId(id) {
  return typeof id === 'string' && id.startsWith('_local/');
}

// returns the current leaf node for a given revision
function latest(rev, metadata) {
  var toVisit = metadata.rev_tree.slice();
  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var id = tree[0];
    var opts = tree[1];
    var branches = tree[2];
    var isLeaf = branches.length === 0;

    var history = node.history ? node.history.slice() : [];
    history.push({id, pos, opts});

    if (isLeaf) {
      for (var i = 0, len = history.length; i < len; i++) {
        var historyNode = history[i];
        var historyRev = historyNode.pos + '-' + historyNode.id;

        if (historyRev === rev) {
          // return the rev of this leaf
          return pos + '-' + id;
        }
      }
    }

    for (var j = 0, l = branches.length; j < l; j++) {
      toVisit.push({pos: pos + 1, ids: branches[j], history});
    }
  }

  /* istanbul ignore next */
  throw new Error('Unable to resolve latest revision for id ' + metadata.id + ', rev ' + rev);
}

function tryCatchInChangeListener(self, change, pending, lastSeq) {
  // isolate try/catches to avoid V8 deoptimizations
  try {
    self.emit('change', change, pending, lastSeq);
  } catch (e) {
    guardedConsole('error', 'Error in .on("change", function):', e);
  }
}

function processChange(doc, metadata, opts) {
  var changeList = [{rev: doc._rev}];
  if (opts.style === 'all_docs') {
    changeList = collectLeaves(metadata.rev_tree)
    .map(function (x) { return {rev: x.rev}; });
  }
  var change = {
    id: metadata.id,
    changes: changeList,
    doc
  };

  if (isDeleted(metadata, doc._rev)) {
    change.deleted = true;
  }
  if (opts.conflicts) {
    change.doc._conflicts = collectConflicts(metadata);
    if (!change.doc._conflicts.length) {
      delete change.doc._conflicts;
    }
  }
  return change;
}

class Changes$1 extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {
  constructor(db, opts, callback) {
    super();
    this.db = db;
    opts = opts ? clone(opts) : {};
    var complete = opts.complete = once((err, resp) => {
      if (err) {
        if (listenerCount(this, 'error') > 0) {
          this.emit('error', err);
        }
      } else {
        this.emit('complete', resp);
      }
      this.removeAllListeners();
      db.removeListener('destroyed', onDestroy);
    });
    if (callback) {
      this.on('complete', function (resp) {
        callback(null, resp);
      });
      this.on('error', callback);
    }
    const onDestroy = () => {
      this.cancel();
    };
    db.once('destroyed', onDestroy);

    opts.onChange = (change, pending, lastSeq) => {
      /* istanbul ignore if */
      if (this.isCancelled) {
        return;
      }
      tryCatchInChangeListener(this, change, pending, lastSeq);
    };

    var promise = new Promise(function (fulfill, reject) {
      opts.complete = function (err, res) {
        if (err) {
          reject(err);
        } else {
          fulfill(res);
        }
      };
    });
    this.once('cancel', function () {
      db.removeListener('destroyed', onDestroy);
      opts.complete(null, {status: 'cancelled'});
    });
    this.then = promise.then.bind(promise);
    this['catch'] = promise['catch'].bind(promise);
    this.then(function (result) {
      complete(null, result);
    }, complete);



    if (!db.taskqueue.isReady) {
      db.taskqueue.addTask((failed) => {
        if (failed) {
          opts.complete(failed);
        } else if (this.isCancelled) {
          this.emit('cancel');
        } else {
          this.validateChanges(opts);
        }
      });
    } else {
      this.validateChanges(opts);
    }
  }

  cancel() {
    this.isCancelled = true;
    if (this.db.taskqueue.isReady) {
      this.emit('cancel');
    }
  }

  validateChanges(opts) {
    var callback = opts.complete;

    /* istanbul ignore else */
    if (PouchDB._changesFilterPlugin) {
      PouchDB._changesFilterPlugin.validate(opts, (err) => {
        if (err) {
          return callback(err);
        }
        this.doChanges(opts);
      });
    } else {
      this.doChanges(opts);
    }
  }

  doChanges(opts) {
    var callback = opts.complete;

    opts = clone(opts);
    if ('live' in opts && !('continuous' in opts)) {
      opts.continuous = opts.live;
    }
    opts.processChange = processChange;

    if (opts.since === 'latest') {
      opts.since = 'now';
    }
    if (!opts.since) {
      opts.since = 0;
    }
    if (opts.since === 'now') {
      this.db.info().then((info) => {
        /* istanbul ignore if */
        if (this.isCancelled) {
          callback(null, {status: 'cancelled'});
          return;
        }
        opts.since = info.update_seq;
        this.doChanges(opts);
      }, callback);
      return;
    }

    /* istanbul ignore else */
    if (PouchDB._changesFilterPlugin) {
      PouchDB._changesFilterPlugin.normalize(opts);
      if (PouchDB._changesFilterPlugin.shouldFilter(this, opts)) {
        return PouchDB._changesFilterPlugin.filter(this, opts);
      }
    } else {
      ['doc_ids', 'filter', 'selector', 'view'].forEach(function (key) {
        if (key in opts) {
          guardedConsole('warn',
            'The "' + key + '" option was passed in to changes/replicate, ' +
            'but pouchdb-changes-filter plugin is not installed, so it ' +
            'was ignored. Please install the plugin to enable filtering.'
          );
        }
      });
    }

    if (!('descending' in opts)) {
      opts.descending = false;
    }

    // 0 and 1 should return 1 document
    opts.limit = opts.limit === 0 ? 1 : opts.limit;
    opts.complete = callback;
    var newPromise = this.db._changes(opts);
    /* istanbul ignore else */
    if (newPromise && typeof newPromise.cancel === 'function') {
      const cancel = this.cancel;
      this.cancel = (...args) => {
        newPromise.cancel();
        cancel.apply(this, args);
      };
    }
  }
}

/*
 * A generic pouch adapter
 */

// Wrapper for functions that call the bulkdocs api with a single doc,
// if the first result is an error, return an error
function yankError(callback, docId) {
  return function (err, results) {
    if (err || (results[0] && results[0].error)) {
      err = err || results[0];
      err.docId = docId;
      callback(err);
    } else {
      callback(null, results.length ? results[0]  : results);
    }
  };
}

// clean docs given to us by the user
function cleanDocs(docs) {
  for (var i = 0; i < docs.length; i++) {
    var doc = docs[i];
    if (doc._deleted) {
      delete doc._attachments; // ignore atts for deleted docs
    } else if (doc._attachments) {
      // filter out extraneous keys from _attachments
      var atts = Object.keys(doc._attachments);
      for (var j = 0; j < atts.length; j++) {
        var att = atts[j];
        doc._attachments[att] = pick(doc._attachments[att],
          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);
      }
    }
  }
}

// compare two docs, first by _id then by _rev
function compareByIdThenRev(a, b) {
  if (a._id === b._id) {
    const aStart = a._revisions ? a._revisions.start : 0;
    const bStart = b._revisions ? b._revisions.start : 0;
    return aStart - bStart;
  }
  return a._id < b._id ? -1 : 1;
}

// for every node in a revision tree computes its distance from the closest
// leaf
function computeHeight(revs) {
  var height = {};
  var edges = [];
  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {
    var rev$$1 = pos + "-" + id;
    if (isLeaf) {
      height[rev$$1] = 0;
    }
    if (prnt !== undefined) {
      edges.push({from: prnt, to: rev$$1});
    }
    return rev$$1;
  });

  edges.reverse();
  edges.forEach(function (edge) {
    if (height[edge.from] === undefined) {
      height[edge.from] = 1 + height[edge.to];
    } else {
      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);
    }
  });
  return height;
}

function allDocsKeysParse(opts) {
  var keys =  ('limit' in opts) ?
    opts.keys.slice(opts.skip, opts.limit + opts.skip) :
    (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;
  opts.keys = keys;
  opts.skip = 0;
  delete opts.limit;
  if (opts.descending) {
    keys.reverse();
    opts.descending = false;
  }
}

// all compaction is done in a queue, to avoid attaching
// too many listeners at once
function doNextCompaction(self) {
  var task = self._compactionQueue[0];
  var opts = task.opts;
  var callback = task.callback;
  self.get('_local/compaction').catch(function () {
    return false;
  }).then(function (doc) {
    if (doc && doc.last_seq) {
      opts.last_seq = doc.last_seq;
    }
    self._compact(opts, function (err, res) {
      /* istanbul ignore if */
      if (err) {
        callback(err);
      } else {
        callback(null, res);
      }
      nextTick(function () {
        self._compactionQueue.shift();
        if (self._compactionQueue.length) {
          doNextCompaction(self);
        }
      });
    });
  });
}

function appendPurgeSeq(db, docId, rev$$1) {
  return db.get('_local/purges').then(function (doc) {
    const purgeSeq = doc.purgeSeq + 1;
    doc.purges.push({
      docId,
      rev: rev$$1,
      purgeSeq,
    });
    if (doc.purges.length > self.purged_infos_limit) {
      doc.purges.splice(0, doc.purges.length - self.purged_infos_limit);
    }
    doc.purgeSeq = purgeSeq;
    return doc;
  }).catch(function (err) {
    if (err.status !== 404) {
      throw err;
    }
    return {
      _id: '_local/purges',
      purges: [{
        docId,
        rev: rev$$1,
        purgeSeq: 0,
      }],
      purgeSeq: 0,
    };
  }).then(function (doc) {
    return db.put(doc);
  });
}

function attachmentNameError(name) {
  if (name.charAt(0) === '_') {
    return name + ' is not a valid attachment name, attachment ' +
      'names cannot start with \'_\'';
  }
  return false;
}

function isNotSingleDoc(doc) {
  return doc === null || typeof doc !== 'object' || Array.isArray(doc);
}

const validRevRegex = /^\d+-[^-]*$/;
function isValidRev(rev$$1) {
  return typeof rev$$1 === 'string' && validRevRegex.test(rev$$1);
}

class AbstractPouchDB extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {
  _setup() {
    this.post = adapterFun('post', function (doc, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      if (isNotSingleDoc(doc)) {
        return callback(createError(NOT_AN_OBJECT));
      }
      this.bulkDocs({docs: [doc]}, opts, yankError(callback, doc._id));
    }).bind(this);

    this.put = adapterFun('put', function (doc, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
      if (isNotSingleDoc(doc)) {
        return cb(createError(NOT_AN_OBJECT));
      }
      invalidIdError(doc._id);
      if ('_rev' in doc && !isValidRev(doc._rev)) {
        return cb(createError(INVALID_REV));
      }
      if (isLocalId(doc._id) && typeof this._putLocal === 'function') {
        if (doc._deleted) {
          return this._removeLocal(doc, cb);
        } else {
          return this._putLocal(doc, cb);
        }
      }

      const putDoc = (next) => {
        if (typeof this._put === 'function' && opts.new_edits !== false) {
          this._put(doc, opts, next);
        } else {
          this.bulkDocs({docs: [doc]}, opts, yankError(next, doc._id));
        }
      };

      if (opts.force && doc._rev) {
        transformForceOptionToNewEditsOption();
        putDoc(function (err) {
          var result = err ? null : {ok: true, id: doc._id, rev: doc._rev};
          cb(err, result);
        });
      } else {
        putDoc(cb);
      }

      function transformForceOptionToNewEditsOption() {
        var parts = doc._rev.split('-');
        var oldRevId = parts[1];
        var oldRevNum = parseInt(parts[0], 10);

        var newRevNum = oldRevNum + 1;
        var newRevId = rev();

        doc._revisions = {
          start: newRevNum,
          ids: [newRevId, oldRevId]
        };
        doc._rev = newRevNum + '-' + newRevId;
        opts.new_edits = false;
      }
    }).bind(this);

    this.putAttachment = adapterFun('putAttachment', function (docId, attachmentId, rev$$1, blob, type) {
      var api = this;
      if (typeof type === 'function') {
        type = blob;
        blob = rev$$1;
        rev$$1 = null;
      }
      // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267
      /* istanbul ignore if */
      if (typeof type === 'undefined') {
        type = blob;
        blob = rev$$1;
        rev$$1 = null;
      }
      if (!type) {
        guardedConsole('warn', 'Attachment', attachmentId, 'on document', docId, 'is missing content_type');
      }

      function createAttachment(doc) {
        var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;
        doc._attachments = doc._attachments || {};
        doc._attachments[attachmentId] = {
          content_type: type,
          data: blob,
          revpos: ++prevrevpos
        };
        return api.put(doc);
      }

      return api.get(docId).then(function (doc) {
        if (doc._rev !== rev$$1) {
          throw createError(REV_CONFLICT);
        }

        return createAttachment(doc);
      }, function (err) {
        // create new doc
        /* istanbul ignore else */
        if (err.reason === MISSING_DOC.message) {
          return createAttachment({_id: docId});
        } else {
          throw err;
        }
      });
    }).bind(this);

    this.removeAttachment = adapterFun('removeAttachment', function (docId, attachmentId, rev$$1, callback) {
      this.get(docId, (err, obj) => {
        /* istanbul ignore if */
        if (err) {
          callback(err);
          return;
        }
        if (obj._rev !== rev$$1) {
          callback(createError(REV_CONFLICT));
          return;
        }
        /* istanbul ignore if */
        if (!obj._attachments) {
          return callback();
        }
        delete obj._attachments[attachmentId];
        if (Object.keys(obj._attachments).length === 0) {
          delete obj._attachments;
        }
        this.put(obj, callback);
      });
    }).bind(this);

    this.remove = adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {
      var doc;
      if (typeof optsOrRev === 'string') {
        // id, rev, opts, callback style
        doc = {
          _id: docOrId,
          _rev: optsOrRev
        };
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
      } else {
        // doc, opts, callback style
        doc = docOrId;
        if (typeof optsOrRev === 'function') {
          callback = optsOrRev;
          opts = {};
        } else {
          callback = opts;
          opts = optsOrRev;
        }
      }
      opts = opts || {};
      opts.was_delete = true;
      var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};
      newDoc._deleted = true;
      if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {
        return this._removeLocal(doc, callback);
      }
      this.bulkDocs({docs: [newDoc]}, opts, yankError(callback, newDoc._id));
    }).bind(this);

    this.revsDiff = adapterFun('revsDiff', function (req, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      var ids = Object.keys(req);

      if (!ids.length) {
        return callback(null, {});
      }

      var count = 0;
      var missing = new Map();

      function addToMissing(id, revId) {
        if (!missing.has(id)) {
          missing.set(id, {missing: []});
        }
        missing.get(id).missing.push(revId);
      }

      function processDoc(id, rev_tree) {
        // Is this fast enough? Maybe we should switch to a set simulated by a map
        var missingForId = req[id].slice(0);
        traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,
          opts) {
            var rev$$1 = pos + '-' + revHash;
            var idx = missingForId.indexOf(rev$$1);
            if (idx === -1) {
              return;
            }

            missingForId.splice(idx, 1);
            /* istanbul ignore if */
            if (opts.status !== 'available') {
              addToMissing(id, rev$$1);
            }
          });

        // Traversing the tree is synchronous, so now `missingForId` contains
        // revisions that were not found in the tree
        missingForId.forEach(function (rev$$1) {
          addToMissing(id, rev$$1);
        });
      }

      ids.forEach(function (id) {
        this._getRevisionTree(id, function (err, rev_tree) {
          if (err && err.status === 404 && err.message === 'missing') {
            missing.set(id, {missing: req[id]});
          } else if (err) {
            /* istanbul ignore next */
            return callback(err);
          } else {
            processDoc(id, rev_tree);
          }

          if (++count === ids.length) {
            // convert LazyMap to object
            var missingObj = {};
            missing.forEach(function (value, key) {
              missingObj[key] = value;
            });
            return callback(null, missingObj);
          }
        });
      }, this);
    }).bind(this);

    // _bulk_get API for faster replication, as described in
    // https://github.com/apache/couchdb-chttpd/pull/33
    // At the "abstract" level, it will just run multiple get()s in
    // parallel, because this isn't much of a performance cost
    // for local databases (except the cost of multiple transactions, which is
    // small). The http adapter overrides this in order
    // to do a more efficient single HTTP request.
    this.bulkGet = adapterFun('bulkGet', function (opts, callback) {
      bulkGet(this, opts, callback);
    }).bind(this);

    // compact one document and fire callback
    // by compacting we mean removing all revisions which
    // are further from the leaf in revision tree than max_height
    this.compactDocument = adapterFun('compactDocument', function (docId, maxHeight, callback) {
      this._getRevisionTree(docId, (err, revTree) => {
        /* istanbul ignore if */
        if (err) {
          return callback(err);
        }
        var height = computeHeight(revTree);
        var candidates = [];
        var revs = [];
        Object.keys(height).forEach(function (rev$$1) {
          if (height[rev$$1] > maxHeight) {
            candidates.push(rev$$1);
          }
        });

        traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {
          var rev$$1 = pos + '-' + revHash;
          if (opts.status === 'available' && candidates.indexOf(rev$$1) !== -1) {
            revs.push(rev$$1);
          }
        });
        this._doCompaction(docId, revs, callback);
      });
    }).bind(this);

    // compact the whole database using single document
    // compaction
    this.compact = adapterFun('compact', function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      opts = opts || {};

      this._compactionQueue = this._compactionQueue || [];
      this._compactionQueue.push({opts, callback});
      if (this._compactionQueue.length === 1) {
        doNextCompaction(this);
      }
    }).bind(this);

    /* Begin api wrappers. Specific functionality to storage belongs in the _[method] */
    this.get = adapterFun('get', function (id, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      if (typeof id !== 'string') {
        return cb(createError(INVALID_ID));
      }
      if (isLocalId(id) && typeof this._getLocal === 'function') {
        return this._getLocal(id, cb);
      }
      var leaves = [];

      const finishOpenRevs = () => {
        var result = [];
        var count = leaves.length;
        /* istanbul ignore if */
        if (!count) {
          return cb(null, result);
        }

        // order with open_revs is unspecified
        leaves.forEach((leaf) => {
          this.get(id, {
            rev: leaf,
            revs: opts.revs,
            latest: opts.latest,
            attachments: opts.attachments,
            binary: opts.binary
          }, function (err, doc) {
            if (!err) {
              // using latest=true can produce duplicates
              var existing;
              for (var i = 0, l = result.length; i < l; i++) {
                if (result[i].ok && result[i].ok._rev === doc._rev) {
                  existing = true;
                  break;
                }
              }
              if (!existing) {
                result.push({ok: doc});
              }
            } else {
              result.push({missing: leaf});
            }
            count--;
            if (!count) {
              cb(null, result);
            }
          });
        });
      };

      if (opts.open_revs) {
        if (opts.open_revs === "all") {
          this._getRevisionTree(id, function (err, rev_tree) {
            /* istanbul ignore if */
            if (err) {
              return cb(err);
            }
            leaves = collectLeaves(rev_tree).map(function (leaf) {
              return leaf.rev;
            });
            finishOpenRevs();
          });
        } else {
          if (Array.isArray(opts.open_revs)) {
            leaves = opts.open_revs;
            for (var i = 0; i < leaves.length; i++) {
              var l = leaves[i];
              // looks like it's the only thing couchdb checks
              if (!isValidRev(l)) {
                return cb(createError(INVALID_REV));
              }
            }
            finishOpenRevs();
          } else {
            return cb(createError(UNKNOWN_ERROR, 'function_clause'));
          }
        }
        return; // open_revs does not like other options
      }

      return this._get(id, opts, (err, result) => {
        if (err) {
          err.docId = id;
          return cb(err);
        }

        var doc = result.doc;
        var metadata = result.metadata;
        var ctx = result.ctx;

        if (opts.conflicts) {
          var conflicts = collectConflicts(metadata);
          if (conflicts.length) {
            doc._conflicts = conflicts;
          }
        }

        if (isDeleted(metadata, doc._rev)) {
          doc._deleted = true;
        }

        if (opts.revs || opts.revs_info) {
          var splittedRev = doc._rev.split('-');
          var revNo       = parseInt(splittedRev[0], 10);
          var revHash     = splittedRev[1];

          var paths = rootToLeaf(metadata.rev_tree);
          var path = null;

          for (var i = 0; i < paths.length; i++) {
            var currentPath = paths[i];
            const hashIndex = currentPath.ids.findIndex(x => x.id === revHash);
            var hashFoundAtRevPos = hashIndex === (revNo - 1);

            if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {
              path = currentPath;
            }
          }

          /* istanbul ignore if */
          if (!path) {
            err = new Error('invalid rev tree');
            err.docId = id;
            return cb(err);
          }

          const pathId = doc._rev.split('-')[1];
          const indexOfRev = path.ids.findIndex(x => x.id === pathId) + 1;
          var howMany = path.ids.length - indexOfRev;
          path.ids.splice(indexOfRev, howMany);
          path.ids.reverse();

          if (opts.revs) {
            doc._revisions = {
              start: (path.pos + path.ids.length) - 1,
              ids: path.ids.map(function (rev$$1) {
                return rev$$1.id;
              })
            };
          }
          if (opts.revs_info) {
            var pos =  path.pos + path.ids.length;
            doc._revs_info = path.ids.map(function (rev$$1) {
              pos--;
              return {
                rev: pos + '-' + rev$$1.id,
                status: rev$$1.opts.status
              };
            });
          }
        }

        if (opts.attachments && doc._attachments) {
          var attachments = doc._attachments;
          var count = Object.keys(attachments).length;
          if (count === 0) {
            return cb(null, doc);
          }
          Object.keys(attachments).forEach((key) => {
            this._getAttachment(doc._id, key, attachments[key], {
              binary: opts.binary,
              metadata,
              ctx
            }, function (err, data) {
              var att = doc._attachments[key];
              att.data = data;
              delete att.stub;
              delete att.length;
              if (!--count) {
                cb(null, doc);
              }
            });
          });
        } else {
          if (doc._attachments) {
            for (var key in doc._attachments) {
              /* istanbul ignore else */
              if (Object.prototype.hasOwnProperty.call(doc._attachments, key)) {
                doc._attachments[key].stub = true;
              }
            }
          }
          cb(null, doc);
        }
      });
    }).bind(this);

    // TODO: I don't like this, it forces an extra read for every
    // attachment read and enforces a confusing api between
    // adapter.js and the adapter implementation
    this.getAttachment = adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {
      if (opts instanceof Function) {
        callback = opts;
        opts = {};
      }
      this._get(docId, opts, (err, res) => {
        if (err) {
          return callback(err);
        }
        if (res.doc._attachments && res.doc._attachments[attachmentId]) {
          opts.ctx = res.ctx;
          opts.binary = true;
          opts.metadata = res.metadata;
          this._getAttachment(docId, attachmentId,
                              res.doc._attachments[attachmentId], opts, callback);
        } else {
          return callback(createError(MISSING_DOC));
        }
      });
    }).bind(this);

    this.allDocs = adapterFun('allDocs', function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;
      if (opts.start_key) {
        opts.startkey = opts.start_key;
      }
      if (opts.end_key) {
        opts.endkey = opts.end_key;
      }
      if ('keys' in opts) {
        if (!Array.isArray(opts.keys)) {
          return callback(new TypeError('options.keys must be an array'));
        }
        var incompatibleOpt =
          ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {
          return incompatibleOpt in opts;
        })[0];
        if (incompatibleOpt) {
          callback(createError(QUERY_PARSE_ERROR,
            'Query parameter `' + incompatibleOpt +
            '` is not compatible with multi-get'
          ));
          return;
        }
        if (!isRemote(this)) {
          allDocsKeysParse(opts);
          if (opts.keys.length === 0) {
            return this._allDocs({limit: 0}, callback);
          }
        }
      }

      return this._allDocs(opts, callback);
    }).bind(this);

    this.close = adapterFun('close', function (callback) {
      this._closed = true;
      this.emit('closed');
      return this._close(callback);
    }).bind(this);

    this.info = adapterFun('info', function (callback) {
      this._info((err, info) => {
        if (err) {
          return callback(err);
        }
        // assume we know better than the adapter, unless it informs us
        info.db_name = info.db_name || this.name;
        info.auto_compaction = !!(this.auto_compaction && !isRemote(this));
        info.adapter = this.adapter;
        callback(null, info);
      });
    }).bind(this);

    this.id = adapterFun('id', function (callback) {
      return this._id(callback);
    }).bind(this);

    this.bulkDocs = adapterFun('bulkDocs', function (req, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      opts = opts || {};

      if (Array.isArray(req)) {
        req = {
          docs: req
        };
      }

      if (!req || !req.docs || !Array.isArray(req.docs)) {
        return callback(createError(MISSING_BULK_DOCS));
      }

      for (var i = 0; i < req.docs.length; ++i) {
        const doc = req.docs[i];
        if (isNotSingleDoc(doc)) {
          return callback(createError(NOT_AN_OBJECT));
        }
        if ('_rev' in doc && !isValidRev(doc._rev)) {
          return callback(createError(INVALID_REV));
        }
      }

      var attachmentError;
      req.docs.forEach(function (doc) {
        if (doc._attachments) {
          Object.keys(doc._attachments).forEach(function (name) {
            attachmentError = attachmentError || attachmentNameError(name);
            if (!doc._attachments[name].content_type) {
              guardedConsole('warn', 'Attachment', name, 'on document', doc._id, 'is missing content_type');
            }
          });
        }
      });

      if (attachmentError) {
        return callback(createError(BAD_REQUEST, attachmentError));
      }

      if (!('new_edits' in opts)) {
        if ('new_edits' in req) {
          opts.new_edits = req.new_edits;
        } else {
          opts.new_edits = true;
        }
      }

      var adapter = this;
      if (!opts.new_edits && !isRemote(adapter)) {
        // ensure revisions of the same doc are sorted, so that
        // the local adapter processes them correctly (#2935)
        req.docs.sort(compareByIdThenRev);
      }

      cleanDocs(req.docs);

      // in the case of conflicts, we want to return the _ids to the user
      // however, the underlying adapter may destroy the docs array, so
      // create a copy here
      var ids = req.docs.map(function (doc) {
        return doc._id;
      });

      this._bulkDocs(req, opts, function (err, res) {
        if (err) {
          return callback(err);
        }
        if (!opts.new_edits) {
          // this is what couch does when new_edits is false
          res = res.filter(function (x) {
            return x.error;
          });
        }
        // add ids for error/conflict responses (not required for CouchDB)
        if (!isRemote(adapter)) {
          for (var i = 0, l = res.length; i < l; i++) {
            res[i].id = res[i].id || ids[i];
          }
        }

        callback(null, res);
      });
    }).bind(this);

    this.registerDependentDatabase = adapterFun('registerDependentDatabase', function (dependentDb, callback) {
      var dbOptions = clone(this.__opts);
      if (this.__opts.view_adapter) {
        dbOptions.adapter = this.__opts.view_adapter;
      }

      var depDB = new this.constructor(dependentDb, dbOptions);

      function diffFun(doc) {
        doc.dependentDbs = doc.dependentDbs || {};
        if (doc.dependentDbs[dependentDb]) {
          return false; // no update required
        }
        doc.dependentDbs[dependentDb] = true;
        return doc;
      }
      upsert(this, '_local/_pouch_dependentDbs', diffFun).then(function () {
        callback(null, {db: depDB});
      }).catch(callback);
    }).bind(this);

    this.destroy = adapterFun('destroy', function (opts, callback) {

      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      var usePrefix = 'use_prefix' in this ? this.use_prefix : true;

      const destroyDb = () => {
        // call destroy method of the particular adaptor
        this._destroy(opts, (err, resp) => {
          if (err) {
            return callback(err);
          }
          this._destroyed = true;
          this.emit('destroyed');
          callback(null, resp || { 'ok': true });
        });
      };

      if (isRemote(this)) {
        // no need to check for dependent DBs if it's a remote DB
        return destroyDb();
      }

      this.get('_local/_pouch_dependentDbs', (err, localDoc) => {
        if (err) {
          /* istanbul ignore if */
          if (err.status !== 404) {
            return callback(err);
          } else { // no dependencies
            return destroyDb();
          }
        }
        var dependentDbs = localDoc.dependentDbs;
        var PouchDB = this.constructor;
        var deletedMap = Object.keys(dependentDbs).map((name) => {
          // use_prefix is only false in the browser
          /* istanbul ignore next */
          var trueName = usePrefix ?
            name.replace(new RegExp('^' + PouchDB.prefix), '') : name;
          return new PouchDB(trueName, this.__opts).destroy();
        });
        Promise.all(deletedMap).then(destroyDb, callback);
      });
    }).bind(this);
  }

  _compact(opts, callback) {
    var changesOpts = {
      return_docs: false,
      last_seq: opts.last_seq || 0,
      since: opts.last_seq || 0
    };
    var promises = [];

    var taskId;
    var compactedDocs = 0;

    const onChange = (row) => {
      this.activeTasks.update(taskId, {
        completed_items: ++compactedDocs
      });
      promises.push(this.compactDocument(row.id, 0));
    };
    const onError = (err) => {
      this.activeTasks.remove(taskId, err);
      callback(err);
    };
    const onComplete = (resp) => {
      var lastSeq = resp.last_seq;
      Promise.all(promises).then(() => {
        return upsert(this, '_local/compaction', (doc) => {
          if (!doc.last_seq || doc.last_seq < lastSeq) {
            doc.last_seq = lastSeq;
            return doc;
          }
          return false; // somebody else got here first, don't update
        });
      }).then(() => {
        this.activeTasks.remove(taskId);
        callback(null, {ok: true});
      }).catch(onError);
    };

    this.info().then((info) => {
      taskId = this.activeTasks.add({
        name: 'database_compaction',
        total_items: info.update_seq - changesOpts.last_seq,
      });

      this.changes(changesOpts)
        .on('change', onChange)
        .on('complete', onComplete)
        .on('error', onError);
    });
  }

  changes(opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    opts = opts || {};

    // By default set return_docs to false if the caller has opts.live = true,
    // this will prevent us from collecting the set of changes indefinitely
    // resulting in growing memory
    opts.return_docs = ('return_docs' in opts) ? opts.return_docs : !opts.live;

    return new Changes$1(this, opts, callback);
  }

  type() {
    return (typeof this._type === 'function') ? this._type() : this.adapter;
  }
}

// The abstract purge implementation expects a doc id and the rev of a leaf node in that doc.
// It will return errors if the rev doesn’t exist or isn’t a leaf.
AbstractPouchDB.prototype.purge = adapterFun('_purge', function (docId, rev$$1, callback) {
  if (typeof this._purge === 'undefined') {
    return callback(createError(UNKNOWN_ERROR, 'Purge is not implemented in the ' + this.adapter + ' adapter.'));
  }
  var self = this;

  self._getRevisionTree(docId, (error, revs) => {
    if (error) {
      return callback(error);
    }
    if (!revs) {
      return callback(createError(MISSING_DOC));
    }
    let path;
    try {
      path = findPathToLeaf(revs, rev$$1);
    } catch (error) {
      return callback(error.message || error);
    }
    self._purge(docId, path, (error, result) => {
      if (error) {
        return callback(error);
      } else {
        appendPurgeSeq(self, docId, rev$$1).then(function () {
          return callback(null, result);
        });
      }
    });
  });
});

class TaskQueue {
  constructor() {
    this.isReady = false;
    this.failed = false;
    this.queue = [];
  }

  execute() {
    var fun;
    if (this.failed) {
      while ((fun = this.queue.shift())) {
        fun(this.failed);
      }
    } else {
      while ((fun = this.queue.shift())) {
        fun();
      }
    }
  }

  fail(err) {
    this.failed = err;
    this.execute();
  }

  ready(db) {
    this.isReady = true;
    this.db = db;
    this.execute();
  }

  addTask(fun) {
    this.queue.push(fun);
    if (this.failed) {
      this.execute();
    }
  }
}

function parseAdapter(name, opts) {
  var match = name.match(/([a-z-]*):\/\/(.*)/);
  if (match) {
    // the http adapter expects the fully qualified name
    return {
      name: /https?/.test(match[1]) ? match[1] + '://' + match[2] : match[2],
      adapter: match[1]
    };
  }

  var adapters = PouchDB.adapters;
  var preferredAdapters = PouchDB.preferredAdapters;
  var prefix = PouchDB.prefix;
  var adapterName = opts.adapter;

  if (!adapterName) { // automatically determine adapter
    for (var i = 0; i < preferredAdapters.length; ++i) {
      adapterName = preferredAdapters[i];
      // check for browsers that have been upgraded from websql-only to websql+idb
      /* istanbul ignore if */
      if (adapterName === 'idb' && 'websql' in adapters &&
          hasLocalStorage() && localStorage['_pouch__websqldb_' + prefix + name]) {
        // log it, because this can be confusing during development
        guardedConsole('log', 'PouchDB is downgrading "' + name + '" to WebSQL to' +
          ' avoid data loss, because it was already opened with WebSQL.');
        continue; // keep using websql to avoid user data loss
      }
      break;
    }
  }

  var adapter = adapters[adapterName];

  // if adapter is invalid, then an error will be thrown later
  var usePrefix = (adapter && 'use_prefix' in adapter) ?
    adapter.use_prefix : true;

  return {
    name: usePrefix ? (prefix + name) : name,
    adapter: adapterName
  };
}

function inherits(A, B) {
  A.prototype = Object.create(B.prototype, {
    constructor: { value: A }
  });
}

function createClass(parent, init) {
  let klass = function (...args) {
    if (!(this instanceof klass)) {
      return new klass(...args);
    }
    init.apply(this, args);
  };
  inherits(klass, parent);
  return klass;
}

// OK, so here's the deal. Consider this code:
//     var db1 = new PouchDB('foo');
//     var db2 = new PouchDB('foo');
//     db1.destroy();
// ^ these two both need to emit 'destroyed' events,
// as well as the PouchDB constructor itself.
// So we have one db object (whichever one got destroy() called on it)
// responsible for emitting the initial event, which then gets emitted
// by the constructor, which then broadcasts it to any other dbs
// that may have been created with the same name.
function prepareForDestruction(self) {

  function onDestroyed(from_constructor) {
    self.removeListener('closed', onClosed);
    if (!from_constructor) {
      self.constructor.emit('destroyed', self.name);
    }
  }

  function onClosed() {
    self.removeListener('destroyed', onDestroyed);
    self.constructor.emit('unref', self);
  }

  self.once('destroyed', onDestroyed);
  self.once('closed', onClosed);
  self.constructor.emit('ref', self);
}

class PouchInternal extends AbstractPouchDB {
  constructor(name, opts) {
    super();
    this._setup(name, opts);
  }

  _setup(name, opts) {
    super._setup();
    opts = opts || {};

    if (name && typeof name === 'object') {
      opts = name;
      name = opts.name;
      delete opts.name;
    }

    if (opts.deterministic_revs === undefined) {
      opts.deterministic_revs = true;
    }

    this.__opts = opts = clone(opts);

    this.auto_compaction = opts.auto_compaction;
    this.purged_infos_limit = opts.purged_infos_limit || 1000;
    this.prefix = PouchDB.prefix;

    if (typeof name !== 'string') {
      throw new Error('Missing/invalid DB name');
    }

    var prefixedName = (opts.prefix || '') + name;
    var backend = parseAdapter(prefixedName, opts);

    opts.name = backend.name;
    opts.adapter = opts.adapter || backend.adapter;

    this.name = name;
    this._adapter = opts.adapter;
    PouchDB.emit('debug', ['adapter', 'Picked adapter: ', opts.adapter]);

    if (!PouchDB.adapters[opts.adapter] ||
        !PouchDB.adapters[opts.adapter].valid()) {
      throw new Error('Invalid Adapter: ' + opts.adapter);
    }

    if (opts.view_adapter) {
      if (!PouchDB.adapters[opts.view_adapter] ||
          !PouchDB.adapters[opts.view_adapter].valid()) {
        throw new Error('Invalid View Adapter: ' + opts.view_adapter);
      }
    }

    this.taskqueue = new TaskQueue();

    this.adapter = opts.adapter;

    PouchDB.adapters[opts.adapter].call(this, opts, (err) => {
      if (err) {
        return this.taskqueue.fail(err);
      }
      prepareForDestruction(this);

      this.emit('created', this);
      PouchDB.emit('created', this.name);
      this.taskqueue.ready(this);
    });
  }
}

const PouchDB = createClass(PouchInternal, function (name, opts) {
  PouchInternal.prototype._setup.call(this, name, opts);
});

var f$1 = fetch;
var h = Headers;

class ActiveTasks {
  constructor() {
    this.tasks = {};
  }

  list() {
    return Object.values(this.tasks);
  }

  add(task) {
    const id = (0,uuid__WEBPACK_IMPORTED_MODULE_3__["default"])();
    this.tasks[id] = {
      id,
      name: task.name,
      total_items: task.total_items,
      created_at: new Date().toJSON()
    };
    return id;
  }

  get(id) {
    return this.tasks[id];
  }

  /* eslint-disable no-unused-vars */
  remove(id, reason) {
    delete this.tasks[id];
    return this.tasks;
  }

  update(id, updatedTask) {
    const task = this.tasks[id];
    if (typeof task !== 'undefined') {
      const mergedTask = {
        id: task.id,
        name: task.name,
        created_at: task.created_at,
        total_items: updatedTask.total_items || task.total_items,
        completed_items: updatedTask.completed_items || task.completed_items,
        updated_at: new Date().toJSON()
      };
      this.tasks[id] = mergedTask;
    }
    return this.tasks;
  }
}

PouchDB.adapters = {};
PouchDB.preferredAdapters = [];

PouchDB.prefix = '_pouch_';

var eventEmitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();

function setUpEventEmitter(Pouch) {
  Object.keys((events__WEBPACK_IMPORTED_MODULE_2___default().prototype)).forEach(function (key) {
    if (typeof (events__WEBPACK_IMPORTED_MODULE_2___default().prototype)[key] === 'function') {
      Pouch[key] = eventEmitter[key].bind(eventEmitter);
    }
  });

  // these are created in constructor.js, and allow us to notify each DB with
  // the same name that it was destroyed, via the constructor object
  var destructListeners = Pouch._destructionListeners = new Map();

  Pouch.on('ref', function onConstructorRef(db) {
    if (!destructListeners.has(db.name)) {
      destructListeners.set(db.name, []);
    }
    destructListeners.get(db.name).push(db);
  });

  Pouch.on('unref', function onConstructorUnref(db) {
    if (!destructListeners.has(db.name)) {
      return;
    }
    var dbList = destructListeners.get(db.name);
    var pos = dbList.indexOf(db);
    if (pos < 0) {
      /* istanbul ignore next */
      return;
    }
    dbList.splice(pos, 1);
    if (dbList.length > 1) {
      /* istanbul ignore next */
      destructListeners.set(db.name, dbList);
    } else {
      destructListeners.delete(db.name);
    }
  });

  Pouch.on('destroyed', function onConstructorDestroyed(name) {
    if (!destructListeners.has(name)) {
      return;
    }
    var dbList = destructListeners.get(name);
    destructListeners.delete(name);
    dbList.forEach(function (db) {
      db.emit('destroyed',true);
    });
  });
}

setUpEventEmitter(PouchDB);

PouchDB.adapter = function (id, obj, addToPreferredAdapters) {
  /* istanbul ignore else */
  if (obj.valid()) {
    PouchDB.adapters[id] = obj;
    if (addToPreferredAdapters) {
      PouchDB.preferredAdapters.push(id);
    }
  }
};

PouchDB.plugin = function (obj) {
  if (typeof obj === 'function') { // function style for plugins
    obj(PouchDB);
  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0) {
    throw new Error('Invalid plugin: got "' + obj + '", expected an object or a function');
  } else {
    Object.keys(obj).forEach(function (id) { // object style for plugins
      PouchDB.prototype[id] = obj[id];
    });
  }
  if (this.__defaults) {
    PouchDB.__defaults = Object.assign({}, this.__defaults);
  }
  return PouchDB;
};

PouchDB.defaults = function (defaultOpts) {
  let PouchWithDefaults = createClass(PouchDB, function (name, opts) {
    opts = opts || {};

    if (name && typeof name === 'object') {
      opts = name;
      name = opts.name;
      delete opts.name;
    }

    opts = Object.assign({}, PouchWithDefaults.__defaults, opts);
    PouchDB.call(this, name, opts);
  });

  PouchWithDefaults.preferredAdapters = PouchDB.preferredAdapters.slice();
  Object.keys(PouchDB).forEach(function (key) {
    if (!(key in PouchWithDefaults)) {
      PouchWithDefaults[key] = PouchDB[key];
    }
  });

  // make default options transitive
  // https://github.com/pouchdb/pouchdb/issues/5922
  PouchWithDefaults.__defaults = Object.assign({}, this.__defaults, defaultOpts);

  return PouchWithDefaults;
};

PouchDB.fetch = function (url, opts) {
  return f$1(url, opts);
};

PouchDB.prototype.activeTasks = PouchDB.activeTasks = new ActiveTasks();

// managed automatically by set-version.js
var version = "9.0.0";

// this would just be "return doc[field]", but fields
// can be "deep" due to dot notation
function getFieldFromDoc(doc, parsedField) {
  var value = doc;
  for (var i = 0, len = parsedField.length; i < len; i++) {
    var key = parsedField[i];
    value = value[key];
    if (!value) {
      break;
    }
  }
  return value;
}

function compare(left, right) {
  return left < right ? -1 : left > right ? 1 : 0;
}

// Converts a string in dot notation to an array of its components, with backslash escaping
function parseField(fieldName) {
  // fields may be deep (e.g. "foo.bar.baz"), so parse
  var fields = [];
  var current = '';
  for (var i = 0, len = fieldName.length; i < len; i++) {
    var ch = fieldName[i];
    if (i > 0 && fieldName[i - 1] === '\\' && (ch === '$' || ch === '.')) {
      // escaped delimiter
      current = current.substring(0, current.length - 1) + ch;
    } else if (ch === '.') {
      // When `.` is not escaped (above), it is a field delimiter
      fields.push(current);
      current = '';
    } else { // normal character
      current += ch;
    }
  }
  fields.push(current);
  return fields;
}

var combinationFields = ['$or', '$nor', '$not'];
function isCombinationalField(field) {
  return combinationFields.indexOf(field) > -1;
}

function getKey(obj) {
  return Object.keys(obj)[0];
}

function getValue(obj) {
  return obj[getKey(obj)];
}


// flatten an array of selectors joined by an $and operator
function mergeAndedSelectors(selectors) {

  // sort to ensure that e.g. if the user specified
  // $and: [{$gt: 'a'}, {$gt: 'b'}], then it's collapsed into
  // just {$gt: 'b'}
  var res = {};
  var first = {$or: true, $nor: true};

  selectors.forEach(function (selector) {
    Object.keys(selector).forEach(function (field) {
      var matcher = selector[field];
      if (typeof matcher !== 'object') {
        matcher = {$eq: matcher};
      }

      if (isCombinationalField(field)) {
        // or, nor
        if (matcher instanceof Array) {
          if (first[field]) {
            first[field] = false;
            res[field] = matcher;
            return;
          }

          var entries = [];
          res[field].forEach(function (existing) {
            Object.keys(matcher).forEach(function (key) {
              var m = matcher[key];
              var longest = Math.max(Object.keys(existing).length, Object.keys(m).length);
              var merged = mergeAndedSelectors([existing, m]);
              if (Object.keys(merged).length <= longest) {
                // we have a situation like: (a :{$eq :1} || ...) && (a {$eq: 2} || ...)
                // merging would produce a $eq 2 when actually we shouldn't ever match against these merged conditions
                // merged should always contain more values to be valid
                return;
              }
              entries.push(merged);
            });
          });
          res[field] = entries;
        } else {
          // not
          res[field] = mergeAndedSelectors([matcher]);
        }
      } else {
        var fieldMatchers = res[field] = res[field] || {};
        Object.keys(matcher).forEach(function (operator) {
          var value = matcher[operator];

          if (operator === '$gt' || operator === '$gte') {
            return mergeGtGte(operator, value, fieldMatchers);
          } else if (operator === '$lt' || operator === '$lte') {
            return mergeLtLte(operator, value, fieldMatchers);
          } else if (operator === '$ne') {
            return mergeNe(value, fieldMatchers);
          } else if (operator === '$eq') {
            return mergeEq(value, fieldMatchers);
          } else if (operator === "$regex") {
            return mergeRegex(value, fieldMatchers);
          }
          fieldMatchers[operator] = value;
        });
      }
    });
  });

  return res;
}



// collapse logically equivalent gt/gte values
function mergeGtGte(operator, value, fieldMatchers) {
  if (typeof fieldMatchers.$eq !== 'undefined') {
    return; // do nothing
  }
  if (typeof fieldMatchers.$gte !== 'undefined') {
    if (operator === '$gte') {
      if (value > fieldMatchers.$gte) { // more specificity
        fieldMatchers.$gte = value;
      }
    } else { // operator === '$gt'
      if (value >= fieldMatchers.$gte) { // more specificity
        delete fieldMatchers.$gte;
        fieldMatchers.$gt = value;
      }
    }
  } else if (typeof fieldMatchers.$gt !== 'undefined') {
    if (operator === '$gte') {
      if (value > fieldMatchers.$gt) { // more specificity
        delete fieldMatchers.$gt;
        fieldMatchers.$gte = value;
      }
    } else { // operator === '$gt'
      if (value > fieldMatchers.$gt) { // more specificity
        fieldMatchers.$gt = value;
      }
    }
  } else {
    fieldMatchers[operator] = value;
  }
}

// collapse logically equivalent lt/lte values
function mergeLtLte(operator, value, fieldMatchers) {
  if (typeof fieldMatchers.$eq !== 'undefined') {
    return; // do nothing
  }
  if (typeof fieldMatchers.$lte !== 'undefined') {
    if (operator === '$lte') {
      if (value < fieldMatchers.$lte) { // more specificity
        fieldMatchers.$lte = value;
      }
    } else { // operator === '$gt'
      if (value <= fieldMatchers.$lte) { // more specificity
        delete fieldMatchers.$lte;
        fieldMatchers.$lt = value;
      }
    }
  } else if (typeof fieldMatchers.$lt !== 'undefined') {
    if (operator === '$lte') {
      if (value < fieldMatchers.$lt) { // more specificity
        delete fieldMatchers.$lt;
        fieldMatchers.$lte = value;
      }
    } else { // operator === '$gt'
      if (value < fieldMatchers.$lt) { // more specificity
        fieldMatchers.$lt = value;
      }
    }
  } else {
    fieldMatchers[operator] = value;
  }
}

// combine $ne values into one array
function mergeNe(value, fieldMatchers) {
  if ('$ne' in fieldMatchers) {
    // there are many things this could "not" be
    fieldMatchers.$ne.push(value);
  } else { // doesn't exist yet
    fieldMatchers.$ne = [value];
  }
}

// add $eq into the mix
function mergeEq(value, fieldMatchers) {
  // these all have less specificity than the $eq
  // TODO: check for user errors here
  delete fieldMatchers.$gt;
  delete fieldMatchers.$gte;
  delete fieldMatchers.$lt;
  delete fieldMatchers.$lte;
  delete fieldMatchers.$ne;
  fieldMatchers.$eq = value;
}

// combine $regex values into one array
function mergeRegex(value, fieldMatchers) {
  if ('$regex' in fieldMatchers) {
    // a value could match multiple regexes
    fieldMatchers.$regex.push(value);
  } else { // doesn't exist yet
    fieldMatchers.$regex = [value];
  }
}

//#7458: execute function mergeAndedSelectors on nested $and
function mergeAndedSelectorsNested(obj) {
    for (var prop in obj) {
        if (Array.isArray(obj)) {
            for (var i in obj) {
                if (obj[i]['$and']) {
                    obj[i] = mergeAndedSelectors(obj[i]['$and']);
                }
            }
        }
        var value = obj[prop];
        if (typeof value === 'object') {
            mergeAndedSelectorsNested(value); // <- recursive call
        }
    }
    return obj;
}

//#7458: determine id $and is present in selector (at any level)
function isAndInSelector(obj, isAnd) {
    for (var prop in obj) {
        if (prop === '$and') {
            isAnd = true;
        }
        var value = obj[prop];
        if (typeof value === 'object') {
            isAnd = isAndInSelector(value, isAnd); // <- recursive call
        }
    }
    return isAnd;
}

//
// normalize the selector
//
function massageSelector(input) {
  var result = clone(input);

  //#7458: if $and is present in selector (at any level) merge nested $and
  if (isAndInSelector(result, false)) {
    result = mergeAndedSelectorsNested(result);
    if ('$and' in result) {
      result = mergeAndedSelectors(result['$and']);
    }
  }

  ['$or', '$nor'].forEach(function (orOrNor) {
    if (orOrNor in result) {
      // message each individual selector
      // e.g. {foo: 'bar'} becomes {foo: {$eq: 'bar'}}
      result[orOrNor].forEach(function (subSelector) {
        var fields = Object.keys(subSelector);
        for (var i = 0; i < fields.length; i++) {
          var field = fields[i];
          var matcher = subSelector[field];
          if (typeof matcher !== 'object' || matcher === null) {
            subSelector[field] = {$eq: matcher};
          }
        }
      });
    }
  });

  if ('$not' in result) {
    //This feels a little like forcing, but it will work for now,
    //I would like to come back to this and make the merging of selectors a little more generic
    result['$not'] = mergeAndedSelectors([result['$not']]);
  }

  var fields = Object.keys(result);

  for (var i = 0; i < fields.length; i++) {
    var field = fields[i];
    var matcher = result[field];

    if (typeof matcher !== 'object' || matcher === null) {
      matcher = {$eq: matcher};
    }
    result[field] = matcher;
  }

  normalizeArrayOperators(result);

  return result;
}

//
// The $ne and $regex values must be placed in an array because these operators can be used multiple times on the same field.
// When $and is used, mergeAndedSelectors takes care of putting some of them into arrays, otherwise it's done here.
//
function normalizeArrayOperators(selector) {
  Object.keys(selector).forEach(function (field) {
    var matcher = selector[field];

    if (Array.isArray(matcher)) {
      matcher.forEach(function (matcherItem) {
        if (matcherItem && typeof matcherItem === 'object') {
          normalizeArrayOperators(matcherItem);
        }
      });
    } else if (field === '$ne') {
      selector.$ne = [matcher];
    } else if (field === '$regex') {
      selector.$regex = [matcher];
    } else if (matcher && typeof matcher === 'object') {
      normalizeArrayOperators(matcher);
    }
  });
}

function pad(str, padWith, upToLength) {
  var padding = '';
  var targetLength = upToLength - str.length;
  /* istanbul ignore next */
  while (padding.length < targetLength) {
    padding += padWith;
  }
  return padding;
}

function padLeft(str, padWith, upToLength) {
  var padding = pad(str, padWith, upToLength);
  return padding + str;
}

var MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE
var MAGNITUDE_DIGITS = 3; // ditto
var SEP = ''; // set to '_' for easier debugging

function collate(a, b) {

  if (a === b) {
    return 0;
  }

  a = normalizeKey(a);
  b = normalizeKey(b);

  var ai = collationIndex(a);
  var bi = collationIndex(b);
  if ((ai - bi) !== 0) {
    return ai - bi;
  }
  switch (typeof a) {
    case 'number':
      return a - b;
    case 'boolean':
      return a < b ? -1 : 1;
    case 'string':
      return stringCollate(a, b);
  }
  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);
}

// couch considers null/NaN/Infinity/-Infinity === undefined,
// for the purposes of mapreduce indexes. also, dates get stringified.
function normalizeKey(key) {
  switch (typeof key) {
    case 'undefined':
      return null;
    case 'number':
      if (key === Infinity || key === -Infinity || isNaN(key)) {
        return null;
      }
      return key;
    case 'object':
      var origKey = key;
      if (Array.isArray(key)) {
        var len = key.length;
        key = new Array(len);
        for (var i = 0; i < len; i++) {
          key[i] = normalizeKey(origKey[i]);
        }
      /* istanbul ignore next */
      } else if (key instanceof Date) {
        return key.toJSON();
      } else if (key !== null) { // generic object
        key = {};
        for (var k in origKey) {
          if (Object.prototype.hasOwnProperty.call(origKey, k)) {
            var val = origKey[k];
            if (typeof val !== 'undefined') {
              key[k] = normalizeKey(val);
            }
          }
        }
      }
  }
  return key;
}

function indexify(key) {
  if (key !== null) {
    switch (typeof key) {
      case 'boolean':
        return key ? 1 : 0;
      case 'number':
        return numToIndexableString(key);
      case 'string':
        // We've to be sure that key does not contain \u0000
        // Do order-preserving replacements:
        // 0 -> 1, 1
        // 1 -> 1, 2
        // 2 -> 2, 2
        /* eslint-disable no-control-regex */
        return key
          .replace(/\u0002/g, '\u0002\u0002')
          .replace(/\u0001/g, '\u0001\u0002')
          .replace(/\u0000/g, '\u0001\u0001');
        /* eslint-enable no-control-regex */
      case 'object':
        var isArray = Array.isArray(key);
        var arr = isArray ? key : Object.keys(key);
        var i = -1;
        var len = arr.length;
        var result = '';
        if (isArray) {
          while (++i < len) {
            result += toIndexableString(arr[i]);
          }
        } else {
          while (++i < len) {
            var objKey = arr[i];
            result += toIndexableString(objKey) +
                toIndexableString(key[objKey]);
          }
        }
        return result;
    }
  }
  return '';
}

// convert the given key to a string that would be appropriate
// for lexical sorting, e.g. within a database, where the
// sorting is the same given by the collate() function.
function toIndexableString(key) {
  var zero = '\u0000';
  key = normalizeKey(key);
  return collationIndex(key) + SEP + indexify(key) + zero;
}

function parseNumber(str, i) {
  var originalIdx = i;
  var num;
  var zero = str[i] === '1';
  if (zero) {
    num = 0;
    i++;
  } else {
    var neg = str[i] === '0';
    i++;
    var numAsString = '';
    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);
    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;
    /* istanbul ignore next */
    if (neg) {
      magnitude = -magnitude;
    }
    i += MAGNITUDE_DIGITS;
    while (true) {
      var ch = str[i];
      if (ch === '\u0000') {
        break;
      } else {
        numAsString += ch;
      }
      i++;
    }
    numAsString = numAsString.split('.');
    if (numAsString.length === 1) {
      num = parseInt(numAsString, 10);
    } else {
      /* istanbul ignore next */
      num = parseFloat(numAsString[0] + '.' + numAsString[1]);
    }
    /* istanbul ignore next */
    if (neg) {
      num = num - 10;
    }
    /* istanbul ignore next */
    if (magnitude !== 0) {
      // parseFloat is more reliable than pow due to rounding errors
      // e.g. Number.MAX_VALUE would return Infinity if we did
      // num * Math.pow(10, magnitude);
      num = parseFloat(num + 'e' + magnitude);
    }
  }
  return {num, length : i - originalIdx};
}

// move up the stack while parsing
// this function moved outside of parseIndexableString for performance
function pop(stack, metaStack) {
  var obj = stack.pop();

  if (metaStack.length) {
    var lastMetaElement = metaStack[metaStack.length - 1];
    if (obj === lastMetaElement.element) {
      // popping a meta-element, e.g. an object whose value is another object
      metaStack.pop();
      lastMetaElement = metaStack[metaStack.length - 1];
    }
    var element = lastMetaElement.element;
    var lastElementIndex = lastMetaElement.index;
    if (Array.isArray(element)) {
      element.push(obj);
    } else if (lastElementIndex === stack.length - 2) { // obj with key+value
      var key = stack.pop();
      element[key] = obj;
    } else {
      stack.push(obj); // obj with key only
    }
  }
}

function parseIndexableString(str) {
  var stack = [];
  var metaStack = []; // stack for arrays and objects
  var i = 0;

  /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
  while (true) {
    var collationIndex = str[i++];
    if (collationIndex === '\u0000') {
      if (stack.length === 1) {
        return stack.pop();
      } else {
        pop(stack, metaStack);
        continue;
      }
    }
    switch (collationIndex) {
      case '1':
        stack.push(null);
        break;
      case '2':
        stack.push(str[i] === '1');
        i++;
        break;
      case '3':
        var parsedNum = parseNumber(str, i);
        stack.push(parsedNum.num);
        i += parsedNum.length;
        break;
      case '4':
        var parsedStr = '';
        /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
        while (true) {
          var ch = str[i];
          if (ch === '\u0000') {
            break;
          }
          parsedStr += ch;
          i++;
        }
        // perform the reverse of the order-preserving replacement
        // algorithm (see above)
        /* eslint-disable no-control-regex */
        parsedStr = parsedStr.replace(/\u0001\u0001/g, '\u0000')
          .replace(/\u0001\u0002/g, '\u0001')
          .replace(/\u0002\u0002/g, '\u0002');
        /* eslint-enable no-control-regex */
        stack.push(parsedStr);
        break;
      case '5':
        var arrayElement = { element: [], index: stack.length };
        stack.push(arrayElement.element);
        metaStack.push(arrayElement);
        break;
      case '6':
        var objElement = { element: {}, index: stack.length };
        stack.push(objElement.element);
        metaStack.push(objElement);
        break;
      /* istanbul ignore next */
      default:
        throw new Error(
          'bad collationIndex or unexpectedly reached end of input: ' +
            collationIndex);
    }
  }
}

function arrayCollate(a, b) {
  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; i++) {
    var sort = collate(a[i], b[i]);
    if (sort !== 0) {
      return sort;
    }
  }
  return (a.length === b.length) ? 0 :
    (a.length > b.length) ? 1 : -1;
}
function stringCollate(a, b) {
  // See: https://github.com/daleharvey/pouchdb/issues/40
  // This is incompatible with the CouchDB implementation, but its the
  // best we can do for now
  return (a === b) ? 0 : ((a > b) ? 1 : -1);
}
function objectCollate(a, b) {
  var ak = Object.keys(a), bk = Object.keys(b);
  var len = Math.min(ak.length, bk.length);
  for (var i = 0; i < len; i++) {
    // First sort the keys
    var sort = collate(ak[i], bk[i]);
    if (sort !== 0) {
      return sort;
    }
    // if the keys are equal sort the values
    sort = collate(a[ak[i]], b[bk[i]]);
    if (sort !== 0) {
      return sort;
    }

  }
  return (ak.length === bk.length) ? 0 :
    (ak.length > bk.length) ? 1 : -1;
}
// The collation is defined by erlangs ordered terms
// the atoms null, true, false come first, then numbers, strings,
// arrays, then objects
// null/undefined/NaN/Infinity/-Infinity are all considered null
function collationIndex(x) {
  var id = ['boolean', 'number', 'string', 'object'];
  var idx = id.indexOf(typeof x);
  //false if -1 otherwise true, but fast!!!!1
  if (~idx) {
    if (x === null) {
      return 1;
    }
    if (Array.isArray(x)) {
      return 5;
    }
    return idx < 3 ? (idx + 2) : (idx + 3);
  }
  /* istanbul ignore next */
  if (Array.isArray(x)) {
    return 5;
  }
}

// conversion:
// x yyy zz...zz
// x = 0 for negative, 1 for 0, 2 for positive
// y = exponent (for negative numbers negated) moved so that it's >= 0
// z = mantisse
function numToIndexableString(num) {

  if (num === 0) {
    return '1';
  }

  // convert number to exponential format for easier and
  // more succinct string sorting
  var expFormat = num.toExponential().split(/e\+?/);
  var magnitude = parseInt(expFormat[1], 10);

  var neg = num < 0;

  var result = neg ? '0' : '2';

  // first sort by magnitude
  // it's easier if all magnitudes are positive
  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);
  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);

  result += SEP + magString;

  // then sort by the factor
  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)
  /* istanbul ignore next */
  if (neg) { // for negative reverse ordering
    factor = 10 - factor;
  }

  var factorStr = factor.toFixed(20);

  // strip zeros from the end
  factorStr = factorStr.replace(/\.?0+$/, '');

  result += SEP + factorStr;

  return result;
}

// create a comparator based on the sort object
function createFieldSorter(sort) {

  function getFieldValuesAsArray(doc) {
    return sort.map(function (sorting) {
      var fieldName = getKey(sorting);
      var parsedField = parseField(fieldName);
      var docFieldValue = getFieldFromDoc(doc, parsedField);
      return docFieldValue;
    });
  }

  return function (aRow, bRow) {
    var aFieldValues = getFieldValuesAsArray(aRow.doc);
    var bFieldValues = getFieldValuesAsArray(bRow.doc);
    var collation = collate(aFieldValues, bFieldValues);
    if (collation !== 0) {
      return collation;
    }
    // this is what mango seems to do
    return compare(aRow.doc._id, bRow.doc._id);
  };
}

function filterInMemoryFields(rows, requestDef, inMemoryFields) {
  rows = rows.filter(function (row) {
    return rowFilter(row.doc, requestDef.selector, inMemoryFields);
  });

  if (requestDef.sort) {
    // in-memory sort
    var fieldSorter = createFieldSorter(requestDef.sort);
    rows = rows.sort(fieldSorter);
    if (typeof requestDef.sort[0] !== 'string' &&
        getValue(requestDef.sort[0]) === 'desc') {
      rows = rows.reverse();
    }
  }

  if ('limit' in requestDef || 'skip' in requestDef) {
    // have to do the limit in-memory
    var skip = requestDef.skip || 0;
    var limit = ('limit' in requestDef ? requestDef.limit : rows.length) + skip;
    rows = rows.slice(skip, limit);
  }
  return rows;
}

function rowFilter(doc, selector, inMemoryFields) {
  return inMemoryFields.every(function (field) {
    var matcher = selector[field];
    var parsedField = parseField(field);
    var docFieldValue = getFieldFromDoc(doc, parsedField);
    if (isCombinationalField(field)) {
      return matchCominationalSelector(field, matcher, doc);
    }

    return matchSelector(matcher, doc, parsedField, docFieldValue);
  });
}

function matchSelector(matcher, doc, parsedField, docFieldValue) {
  if (!matcher) {
    // no filtering necessary; this field is just needed for sorting
    return true;
  }

  // is matcher an object, if so continue recursion
  if (typeof matcher === 'object') {
    return Object.keys(matcher).every(function (maybeUserOperator) {
      var userValue = matcher[ maybeUserOperator ];
      // explicit operator
      if (maybeUserOperator.indexOf("$") === 0) {
        return match(maybeUserOperator, doc, userValue, parsedField, docFieldValue);
      } else {
        var subParsedField = parseField(maybeUserOperator);

        if (
          docFieldValue === undefined &&
          typeof userValue !== "object" &&
          subParsedField.length > 0
        ) {
          // the field does not exist, return or getFieldFromDoc will throw
          return false;
        }

        var subDocFieldValue = getFieldFromDoc(docFieldValue, subParsedField);

        if (typeof userValue === "object") {
          // field value is an object that might contain more operators
          return matchSelector(userValue, doc, parsedField, subDocFieldValue);
        }

        // implicit operator
        return match("$eq", doc, userValue, subParsedField, subDocFieldValue);
      }
    });
  }

  // no more depth, No need to recurse further
  return matcher === docFieldValue;
}

function matchCominationalSelector(field, matcher, doc) {

  if (field === '$or') {
    return matcher.some(function (orMatchers) {
      return rowFilter(doc, orMatchers, Object.keys(orMatchers));
    });
  }

  if (field === '$not') {
    return !rowFilter(doc, matcher, Object.keys(matcher));
  }

  //`$nor`
  return !matcher.find(function (orMatchers) {
    return rowFilter(doc, orMatchers, Object.keys(orMatchers));
  });

}

function match(userOperator, doc, userValue, parsedField, docFieldValue) {
  if (!matchers[userOperator]) {
    /* istanbul ignore next */
    throw new Error('unknown operator "' + userOperator +
      '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, ' +
      '$nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
  }
  return matchers[userOperator](doc, userValue, parsedField, docFieldValue);
}

function fieldExists(docFieldValue) {
  return typeof docFieldValue !== 'undefined' && docFieldValue !== null;
}

function fieldIsNotUndefined(docFieldValue) {
  return typeof docFieldValue !== 'undefined';
}

function modField(docFieldValue, userValue) {
  if (typeof docFieldValue !== "number" ||
    parseInt(docFieldValue, 10) !== docFieldValue) {
    return false;
  }

  var divisor = userValue[0];
  var mod = userValue[1];

  return docFieldValue % divisor === mod;
}

function arrayContainsValue(docFieldValue, userValue) {
  return userValue.some(function (val) {
    if (docFieldValue instanceof Array) {
      return docFieldValue.some(function (docFieldValueItem) {
        return collate(val, docFieldValueItem) === 0;
      });
    }

    return collate(val, docFieldValue) === 0;
  });
}

function arrayContainsAllValues(docFieldValue, userValue) {
  return userValue.every(function (val) {
    return docFieldValue.some(function (docFieldValueItem) {
      return collate(val, docFieldValueItem) === 0;
    });
  });
}

function arraySize(docFieldValue, userValue) {
  return docFieldValue.length === userValue;
}

function regexMatch(docFieldValue, userValue) {
  var re = new RegExp(userValue);

  return re.test(docFieldValue);
}

function typeMatch(docFieldValue, userValue) {

  switch (userValue) {
    case 'null':
      return docFieldValue === null;
    case 'boolean':
      return typeof (docFieldValue) === 'boolean';
    case 'number':
      return typeof (docFieldValue) === 'number';
    case 'string':
      return typeof (docFieldValue) === 'string';
    case 'array':
      return docFieldValue instanceof Array;
    case 'object':
      return ({}).toString.call(docFieldValue) === '[object Object]';
  }
}

var matchers = {

  '$elemMatch': function (doc, userValue, parsedField, docFieldValue) {
    if (!Array.isArray(docFieldValue)) {
      return false;
    }

    if (docFieldValue.length === 0) {
      return false;
    }

    if (typeof docFieldValue[0] === 'object' &&  docFieldValue[0] !== null) {
      return docFieldValue.some(function (val) {
        return rowFilter(val, userValue, Object.keys(userValue));
      });
    }

    return docFieldValue.some(function (val) {
      return matchSelector(userValue, doc, parsedField, val);
    });
  },

  '$allMatch': function (doc, userValue, parsedField, docFieldValue) {
    if (!Array.isArray(docFieldValue)) {
      return false;
    }

    /* istanbul ignore next */
    if (docFieldValue.length === 0) {
      return false;
    }

    if (typeof docFieldValue[0] === 'object' &&  docFieldValue[0] !== null) {
      return docFieldValue.every(function (val) {
        return rowFilter(val, userValue, Object.keys(userValue));
      });
    }

    return docFieldValue.every(function (val) {
      return matchSelector(userValue, doc, parsedField, val);
    });
  },

  '$eq': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) === 0;
  },

  '$gte': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) >= 0;
  },

  '$gt': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) > 0;
  },

  '$lte': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) <= 0;
  },

  '$lt': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) < 0;
  },

  '$exists': function (doc, userValue, parsedField, docFieldValue) {
    //a field that is null is still considered to exist
    if (userValue) {
      return fieldIsNotUndefined(docFieldValue);
    }

    return !fieldIsNotUndefined(docFieldValue);
  },

  '$mod': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && modField(docFieldValue, userValue);
  },

  '$ne': function (doc, userValue, parsedField, docFieldValue) {
    return userValue.every(function (neValue) {
      return collate(docFieldValue, neValue) !== 0;
    });
  },
  '$in': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && arrayContainsValue(docFieldValue, userValue);
  },

  '$nin': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && !arrayContainsValue(docFieldValue, userValue);
  },

  '$size': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) &&
      Array.isArray(docFieldValue) &&
      arraySize(docFieldValue, userValue);
  },

  '$all': function (doc, userValue, parsedField, docFieldValue) {
    return Array.isArray(docFieldValue) && arrayContainsAllValues(docFieldValue, userValue);
  },

  '$regex': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) &&
      typeof docFieldValue == "string" &&
      userValue.every(function (regexValue) {
        return regexMatch(docFieldValue, regexValue);
      });
  },

  '$type': function (doc, userValue, parsedField, docFieldValue) {
    return typeMatch(docFieldValue, userValue);
  }
};

// return true if the given doc matches the supplied selector
function matchesSelector(doc, selector) {
  /* istanbul ignore if */
  if (typeof selector !== 'object') {
    // match the CouchDB error message
    throw new Error('Selector error: expected a JSON object');
  }

  selector = massageSelector(selector);
  var row = {
    doc
  };

  var rowsMatched = filterInMemoryFields([row], { selector }, Object.keys(selector));
  return rowsMatched && rowsMatched.length === 1;
}

function evalFilter(input) {
  return scopeEval('"use strict";\nreturn ' + input + ';', {});
}

function evalView(input) {
  var code = [
    'return function(doc) {',
    '  "use strict";',
    '  var emitted = false;',
    '  var emit = function (a, b) {',
    '    emitted = true;',
    '  };',
    '  var view = ' + input + ';',
    '  view(doc);',
    '  if (emitted) {',
    '    return true;',
    '  }',
    '};'
  ].join('\n');

  return scopeEval(code, {});
}

function validate(opts, callback) {
  if (opts.selector) {
    if (opts.filter && opts.filter !== '_selector') {
      var filterName = typeof opts.filter === 'string' ?
        opts.filter : 'function';
      return callback(new Error('selector invalid for filter "' + filterName + '"'));
    }
  }
  callback();
}

function normalize(opts) {
  if (opts.view && !opts.filter) {
    opts.filter = '_view';
  }

  if (opts.selector && !opts.filter) {
    opts.filter = '_selector';
  }

  if (opts.filter && typeof opts.filter === 'string') {
    if (opts.filter === '_view') {
      opts.view = normalizeDesignDocFunctionName(opts.view);
    } else {
      opts.filter = normalizeDesignDocFunctionName(opts.filter);
    }
  }
}

function shouldFilter(changesHandler, opts) {
  return opts.filter && typeof opts.filter === 'string' &&
    !opts.doc_ids && !isRemote(changesHandler.db);
}

function filter(changesHandler, opts) {
  var callback = opts.complete;
  if (opts.filter === '_view') {
    if (!opts.view || typeof opts.view !== 'string') {
      var err = createError(BAD_REQUEST,
        '`view` filter parameter not found or invalid.');
      return callback(err);
    }
    // fetch a view from a design doc, make it behave like a filter
    var viewName = parseDesignDocFunctionName(opts.view);
    changesHandler.db.get('_design/' + viewName[0], function (err, ddoc) {
      /* istanbul ignore if */
      if (changesHandler.isCancelled) {
        return callback(null, {status: 'cancelled'});
      }
      /* istanbul ignore next */
      if (err) {
        return callback(generateErrorFromResponse(err));
      }
      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&
        ddoc.views[viewName[1]].map;
      if (!mapFun) {
        return callback(createError(MISSING_DOC,
          (ddoc.views ? 'missing json key: ' + viewName[1] :
            'missing json key: views')));
      }
      opts.filter = evalView(mapFun);
      changesHandler.doChanges(opts);
    });
  } else if (opts.selector) {
    opts.filter = function (doc) {
      return matchesSelector(doc, opts.selector);
    };
    changesHandler.doChanges(opts);
  } else {
    // fetch a filter from a design doc
    var filterName = parseDesignDocFunctionName(opts.filter);
    changesHandler.db.get('_design/' + filterName[0], function (err, ddoc) {
      /* istanbul ignore if */
      if (changesHandler.isCancelled) {
        return callback(null, {status: 'cancelled'});
      }
      /* istanbul ignore next */
      if (err) {
        return callback(generateErrorFromResponse(err));
      }
      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];
      if (!filterFun) {
        return callback(createError(MISSING_DOC,
          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]
            : 'missing json key: filters')));
      }
      opts.filter = evalFilter(filterFun);
      changesHandler.doChanges(opts);
    });
  }
}

function applyChangesFilterPlugin(PouchDB) {
  PouchDB._changesFilterPlugin = {
    validate,
    normalize,
    shouldFilter,
    filter
  };
}

// TODO: remove from pouchdb-core (breaking)
PouchDB.plugin(applyChangesFilterPlugin);

PouchDB.version = version;

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37, Android <5 and (some?) webkit-based browsers.
// In those versions, storing a blob will throw.
//
// Example Webkit error:
// > DataCloneError: Failed to store record in an IDBObjectStore: BlobURLs are not yet supported.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
function checkBlobSupport(txn, store, docIdOrCreateDoc) {
  return new Promise(function (resolve) {
    var blob$$1 = createBlob(['']);

    let req;
    if (typeof docIdOrCreateDoc === 'function') {
      // Store may require a specific key path, in which case we can't store the
      // blob directly in the store.
      const createDoc = docIdOrCreateDoc;
      const doc = createDoc(blob$$1);
      req = txn.objectStore(store).put(doc);
    } else {
      const docId = docIdOrCreateDoc;
      req = txn.objectStore(store).put(blob$$1, docId);
    }

    req.onsuccess = function () {
      var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
      var matchedEdge = navigator.userAgent.match(/Edge\//);
      // MS Edge pretends to be Chrome 42:
      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
      resolve(matchedEdge || !matchedChrome ||
        parseInt(matchedChrome[1], 10) >= 43);
    };

    req.onerror = txn.onabort = function (e) {
      // If the transaction aborts now its due to not being able to
      // write to the database, likely due to the disk being full
      e.preventDefault();
      e.stopPropagation();
      resolve(false);
    };
  }).catch(function () {
    return false; // error, so assume unsupported
  });
}

function toObject(array) {
  return array.reduce(function (obj, item) {
    obj[item] = true;
    return obj;
  }, {});
}
// List of top level reserved words for doc
var reservedWords = toObject([
  '_id',
  '_rev',
  '_access',
  '_attachments',
  '_deleted',
  '_revisions',
  '_revs_info',
  '_conflicts',
  '_deleted_conflicts',
  '_local_seq',
  '_rev_tree',
  // replication documents
  '_replication_id',
  '_replication_state',
  '_replication_state_time',
  '_replication_state_reason',
  '_replication_stats',
  // Specific to Couchbase Sync Gateway
  '_removed'
]);

// List of reserved words that should end up in the document
var dataWords = toObject([
  '_access',
  '_attachments',
  // replication documents
  '_replication_id',
  '_replication_state',
  '_replication_state_time',
  '_replication_state_reason',
  '_replication_stats'
]);

function parseRevisionInfo(rev$$1) {
  if (!/^\d+-/.test(rev$$1)) {
    return createError(INVALID_REV);
  }
  var idx = rev$$1.indexOf('-');
  var left = rev$$1.substring(0, idx);
  var right = rev$$1.substring(idx + 1);
  return {
    prefix: parseInt(left, 10),
    id: right
  };
}

function makeRevTreeFromRevisions(revisions, opts) {
  var pos = revisions.start - revisions.ids.length + 1;

  var revisionIds = revisions.ids;
  var ids = [revisionIds[0], opts, []];

  for (var i = 1, len = revisionIds.length; i < len; i++) {
    ids = [revisionIds[i], {status: 'missing'}, [ids]];
  }

  return [{
    pos,
    ids
  }];
}

// Preprocess documents, parse their revisions, assign an id and a
// revision for new writes that are missing them, etc
function parseDoc(doc, newEdits, dbOpts) {
  if (!dbOpts) {
    dbOpts = {
      deterministic_revs: true
    };
  }

  var nRevNum;
  var newRevId;
  var revInfo;
  var opts = {status: 'available'};
  if (doc._deleted) {
    opts.deleted = true;
  }

  if (newEdits) {
    if (!doc._id) {
      doc._id = uuid();
    }
    newRevId = rev(doc, dbOpts.deterministic_revs);
    if (doc._rev) {
      revInfo = parseRevisionInfo(doc._rev);
      if (revInfo.error) {
        return revInfo;
      }
      doc._rev_tree = [{
        pos: revInfo.prefix,
        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]
      }];
      nRevNum = revInfo.prefix + 1;
    } else {
      doc._rev_tree = [{
        pos: 1,
        ids : [newRevId, opts, []]
      }];
      nRevNum = 1;
    }
  } else {
    if (doc._revisions) {
      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);
      nRevNum = doc._revisions.start;
      newRevId = doc._revisions.ids[0];
    }
    if (!doc._rev_tree) {
      revInfo = parseRevisionInfo(doc._rev);
      if (revInfo.error) {
        return revInfo;
      }
      nRevNum = revInfo.prefix;
      newRevId = revInfo.id;
      doc._rev_tree = [{
        pos: nRevNum,
        ids: [newRevId, opts, []]
      }];
    }
  }

  invalidIdError(doc._id);

  doc._rev = nRevNum + '-' + newRevId;

  var result = {metadata : {}, data : {}};
  for (var key in doc) {
    /* istanbul ignore else */
    if (Object.prototype.hasOwnProperty.call(doc, key)) {
      var specialKey = key[0] === '_';
      if (specialKey && !reservedWords[key]) {
        var error = createError(DOC_VALIDATION, key);
        error.message = DOC_VALIDATION.message + ': ' + key;
        throw error;
      } else if (specialKey && !dataWords[key]) {
        result.metadata[key.slice(1)] = doc[key];
      } else {
        result.data[key] = doc[key];
      }
    }
  }
  return result;
}

function parseBase64(data) {
  try {
    return thisAtob(data);
  } catch (e) {
    var err = createError(BAD_ARG,
      'Attachment is not a valid base64 string');
    return {error: err};
  }
}

function preprocessString(att, blobType, callback) {
  var asBinary = parseBase64(att.data);
  if (asBinary.error) {
    return callback(asBinary.error);
  }

  att.length = asBinary.length;
  if (blobType === 'blob') {
    att.data = binStringToBluffer(asBinary, att.content_type);
  } else if (blobType === 'base64') {
    att.data = thisBtoa(asBinary);
  } else { // binary
    att.data = asBinary;
  }
  binaryMd5(asBinary, function (result) {
    att.digest = 'md5-' + result;
    callback();
  });
}

function preprocessBlob(att, blobType, callback) {
  binaryMd5(att.data, function (md5) {
    att.digest = 'md5-' + md5;
    // size is for blobs (browser), length is for buffers (node)
    att.length = att.data.size || att.data.length || 0;
    if (blobType === 'binary') {
      blobToBinaryString(att.data, function (binString) {
        att.data = binString;
        callback();
      });
    } else if (blobType === 'base64') {
      blobToBase64(att.data, function (b64) {
        att.data = b64;
        callback();
      });
    } else {
      callback();
    }
  });
}

function preprocessAttachment(att, blobType, callback) {
  if (att.stub) {
    return callback();
  }
  if (typeof att.data === 'string') { // input is a base64 string
    preprocessString(att, blobType, callback);
  } else { // input is a blob
    preprocessBlob(att, blobType, callback);
  }
}

function preprocessAttachments(docInfos, blobType, callback) {

  if (!docInfos.length) {
    return callback();
  }

  var docv = 0;
  var overallErr;

  docInfos.forEach(function (docInfo) {
    var attachments = docInfo.data && docInfo.data._attachments ?
      Object.keys(docInfo.data._attachments) : [];
    var recv = 0;

    if (!attachments.length) {
      return done();
    }

    function processedAttachment(err) {
      overallErr = err;
      recv++;
      if (recv === attachments.length) {
        done();
      }
    }

    for (var key in docInfo.data._attachments) {
      if (Object.prototype.hasOwnProperty.call(docInfo.data._attachments, key)) {
        preprocessAttachment(docInfo.data._attachments[key],
          blobType, processedAttachment);
      }
    }
  });

  function done() {
    docv++;
    if (docInfos.length === docv) {
      if (overallErr) {
        callback(overallErr);
      } else {
        callback();
      }
    }
  }
}

function updateDoc(revLimit, prev, docInfo, results,
                   i, cb, writeDoc, newEdits) {

  if (revExists(prev.rev_tree, docInfo.metadata.rev) && !newEdits) {
    results[i] = docInfo;
    return cb();
  }

  // sometimes this is pre-calculated. historically not always
  var previousWinningRev = prev.winningRev || winningRev(prev);
  var previouslyDeleted = 'deleted' in prev ? prev.deleted :
    isDeleted(prev, previousWinningRev);
  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :
    isDeleted(docInfo.metadata);
  var isRoot = /^1-/.test(docInfo.metadata.rev);

  if (previouslyDeleted && !deleted && newEdits && isRoot) {
    var newDoc = docInfo.data;
    newDoc._rev = previousWinningRev;
    newDoc._id = docInfo.metadata.id;
    docInfo = parseDoc(newDoc, newEdits);
  }

  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);

  var inConflict = newEdits && ((
    (previouslyDeleted && deleted && merged.conflicts !== 'new_leaf') ||
    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||
    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));

  if (inConflict) {
    var err = createError(REV_CONFLICT);
    results[i] = err;
    return cb();
  }

  var newRev = docInfo.metadata.rev;
  docInfo.metadata.rev_tree = merged.tree;
  docInfo.stemmedRevs = merged.stemmedRevs || [];
  /* istanbul ignore else */
  if (prev.rev_map) {
    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb
  }

  // recalculate
  var winningRev$$1 = winningRev(docInfo.metadata);
  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$1);

  // calculate the total number of documents that were added/removed,
  // from the perspective of total_rows/doc_count
  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :
    previouslyDeleted < winningRevIsDeleted ? -1 : 1;

  var newRevIsDeleted;
  if (newRev === winningRev$$1) {
    // if the new rev is the same as the winning rev, we can reuse that value
    newRevIsDeleted = winningRevIsDeleted;
  } else {
    // if they're not the same, then we need to recalculate
    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);
  }

  writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
    true, delta, i, cb);
}

function rootIsMissing(docInfo) {
  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';
}

function processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,
                     writeDoc, opts, overallCallback) {

  // Default to 1000 locally
  revLimit = revLimit || 1000;

  function insertDoc(docInfo, resultsIdx, callback) {
    // Cant insert new deleted documents
    var winningRev$$1 = winningRev(docInfo.metadata);
    var deleted = isDeleted(docInfo.metadata, winningRev$$1);
    if ('was_delete' in opts && deleted) {
      results[resultsIdx] = createError(MISSING_DOC, 'deleted');
      return callback();
    }

    // 4712 - detect whether a new document was inserted with a _rev
    var inConflict = newEdits && rootIsMissing(docInfo);

    if (inConflict) {
      var err = createError(REV_CONFLICT);
      results[resultsIdx] = err;
      return callback();
    }

    var delta = deleted ? 0 : 1;

    writeDoc(docInfo, winningRev$$1, deleted, deleted, false,
      delta, resultsIdx, callback);
  }

  var newEdits = opts.new_edits;
  var idsToDocs = new Map();

  var docsDone = 0;
  var docsToDo = docInfos.length;

  function checkAllDocsDone() {
    if (++docsDone === docsToDo && overallCallback) {
      overallCallback();
    }
  }

  docInfos.forEach(function (currentDoc, resultsIdx) {

    if (currentDoc._id && isLocalId(currentDoc._id)) {
      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';
      api[fun](currentDoc, {ctx: tx}, function (err, res) {
        results[resultsIdx] = err || res;
        checkAllDocsDone();
      });
      return;
    }

    var id = currentDoc.metadata.id;
    if (idsToDocs.has(id)) {
      docsToDo--; // duplicate
      idsToDocs.get(id).push([currentDoc, resultsIdx]);
    } else {
      idsToDocs.set(id, [[currentDoc, resultsIdx]]);
    }
  });

  // in the case of new_edits, the user can provide multiple docs
  // with the same id. these need to be processed sequentially
  idsToDocs.forEach(function (docs, id) {
    var numDone = 0;

    function docWritten() {
      if (++numDone < docs.length) {
        nextDoc();
      } else {
        checkAllDocsDone();
      }
    }
    function nextDoc() {
      var value = docs[numDone];
      var currentDoc = value[0];
      var resultsIdx = value[1];

      if (fetchedDocs.has(id)) {
        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,
          resultsIdx, docWritten, writeDoc, newEdits);
      } else {
        // Ensure stemming applies to new writes as well
        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);
        currentDoc.metadata.rev_tree = merged.tree;
        currentDoc.stemmedRevs = merged.stemmedRevs || [];
        insertDoc(currentDoc, resultsIdx, docWritten);
      }
    }
    nextDoc();
  });
}

// IndexedDB requires a versioned database structure, so we use the
// version here to manage migrations.
var ADAPTER_VERSION = 5;

// The object stores created for each database
// DOC_STORE stores the document meta data, its revision history and state
// Keyed by document id
var DOC_STORE = 'document-store';
// BY_SEQ_STORE stores a particular version of a document, keyed by its
// sequence id
var BY_SEQ_STORE = 'by-sequence';
// Where we store attachments
var ATTACH_STORE = 'attach-store';
// Where we store many-to-many relations
// between attachment digests and seqs
var ATTACH_AND_SEQ_STORE = 'attach-seq-store';

// Where we store database-wide meta data in a single record
// keyed by id: META_STORE
var META_STORE = 'meta-store';
// Where we store local documents
var LOCAL_STORE = 'local-store';
// Where we detect blob support
var DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';

function safeJsonParse(str) {
  // This try/catch guards against stack overflow errors.
  // JSON.parse() is faster than vuvuzela.parse() but vuvuzela
  // cannot overflow.
  try {
    return JSON.parse(str);
  } catch (e) {
    /* istanbul ignore next */
    return vuvuzela__WEBPACK_IMPORTED_MODULE_1__.parse(str);
  }
}

function safeJsonStringify(json) {
  try {
    return JSON.stringify(json);
  } catch (e) {
    /* istanbul ignore next */
    return vuvuzela__WEBPACK_IMPORTED_MODULE_1__.stringify(json);
  }
}

function idbError(callback) {
  return function (evt) {
    var message = 'unknown_error';
    if (evt.target && evt.target.error) {
      message = evt.target.error.name || evt.target.error.message;
    }
    callback(createError(IDB_ERROR, message, evt.type));
  };
}

// Unfortunately, the metadata has to be stringified
// when it is put into the database, because otherwise
// IndexedDB can throw errors for deeply-nested objects.
// Originally we just used JSON.parse/JSON.stringify; now
// we use this custom vuvuzela library that avoids recursion.
// If we could do it all over again, we'd probably use a
// format for the revision trees other than JSON.
function encodeMetadata(metadata, winningRev, deleted) {
  return {
    data: safeJsonStringify(metadata),
    winningRev,
    deletedOrLocal: deleted ? '1' : '0',
    seq: metadata.seq, // highest seq for this doc
    id: metadata.id
  };
}

function decodeMetadata(storedObject) {
  if (!storedObject) {
    return null;
  }
  var metadata = safeJsonParse(storedObject.data);
  metadata.winningRev = storedObject.winningRev;
  metadata.deleted = storedObject.deletedOrLocal === '1';
  metadata.seq = storedObject.seq;
  return metadata;
}

// read the doc back out from the database. we don't store the
// _id or _rev because we already have _doc_id_rev.
function decodeDoc(doc) {
  if (!doc) {
    return doc;
  }
  var idx = doc._doc_id_rev.lastIndexOf(':');
  doc._id = doc._doc_id_rev.substring(0, idx - 1);
  doc._rev = doc._doc_id_rev.substring(idx + 1);
  delete doc._doc_id_rev;
  return doc;
}

// Read a blob from the database, encoding as necessary
// and translating from base64 if the IDB doesn't support
// native Blobs
function readBlobData(body, type, asBlob, callback) {
  if (asBlob) {
    if (!body) {
      callback(createBlob([''], {type}));
    } else if (typeof body !== 'string') { // we have blob support
      callback(body);
    } else { // no blob support
      callback(b64ToBluffer(body, type));
    }
  } else { // as base64 string
    if (!body) {
      callback('');
    } else if (typeof body !== 'string') { // we have blob support
      readAsBinaryString(body, function (binary) {
        callback(thisBtoa(binary));
      });
    } else { // no blob support
      callback(body);
    }
  }
}

function fetchAttachmentsIfNecessary(doc, opts, txn, cb) {
  var attachments = Object.keys(doc._attachments || {});
  if (!attachments.length) {
    return cb && cb();
  }
  var numDone = 0;

  function checkDone() {
    if (++numDone === attachments.length && cb) {
      cb();
    }
  }

  function fetchAttachment(doc, att) {
    var attObj = doc._attachments[att];
    var digest = attObj.digest;
    var req = txn.objectStore(ATTACH_STORE).get(digest);
    req.onsuccess = function (e) {
      attObj.body = e.target.result.body;
      checkDone();
    };
  }

  attachments.forEach(function (att) {
    if (opts.attachments && opts.include_docs) {
      fetchAttachment(doc, att);
    } else {
      doc._attachments[att].stub = true;
      checkDone();
    }
  });
}

// IDB-specific postprocessing necessary because
// we don't know whether we stored a true Blob or
// a base64-encoded string, and if it's a Blob it
// needs to be read outside of the transaction context
function postProcessAttachments(results, asBlob) {
  return Promise.all(results.map(function (row) {
    if (row.doc && row.doc._attachments) {
      var attNames = Object.keys(row.doc._attachments);
      return Promise.all(attNames.map(function (att) {
        var attObj = row.doc._attachments[att];
        if (!('body' in attObj)) { // already processed
          return;
        }
        var body = attObj.body;
        var type = attObj.content_type;
        return new Promise(function (resolve) {
          readBlobData(body, type, asBlob, function (data) {
            row.doc._attachments[att] = Object.assign(
              pick(attObj, ['digest', 'content_type']),
              {data}
            );
            resolve();
          });
        });
      }));
    }
  }));
}

function compactRevs(revs, docId, txn) {

  var possiblyOrphanedDigests = [];
  var seqStore = txn.objectStore(BY_SEQ_STORE);
  var attStore = txn.objectStore(ATTACH_STORE);
  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
  var count = revs.length;

  function checkDone() {
    count--;
    if (!count) { // done processing all revs
      deleteOrphanedAttachments();
    }
  }

  function deleteOrphanedAttachments() {
    if (!possiblyOrphanedDigests.length) {
      return;
    }
    possiblyOrphanedDigests.forEach(function (digest) {
      var countReq = attAndSeqStore.index('digestSeq').count(
        IDBKeyRange.bound(
          digest + '::', digest + '::\uffff', false, false));
      countReq.onsuccess = function (e) {
        var count = e.target.result;
        if (!count) {
          // orphaned
          attStore.delete(digest);
        }
      };
    });
  }

  revs.forEach(function (rev$$1) {
    var index = seqStore.index('_doc_id_rev');
    var key = docId + "::" + rev$$1;
    index.getKey(key).onsuccess = function (e) {
      var seq = e.target.result;
      if (typeof seq !== 'number') {
        return checkDone();
      }
      seqStore.delete(seq);

      var cursor = attAndSeqStore.index('seq')
        .openCursor(IDBKeyRange.only(seq));

      cursor.onsuccess = function (event) {
        var cursor = event.target.result;
        if (cursor) {
          var digest = cursor.value.digestSeq.split('::')[0];
          possiblyOrphanedDigests.push(digest);
          attAndSeqStore.delete(cursor.primaryKey);
          cursor.continue();
        } else { // done
          checkDone();
        }
      };
    };
  });
}

function openTransactionSafely(idb, stores, mode) {
  try {
    return {
      txn: idb.transaction(stores, mode)
    };
  } catch (err) {
    return {
      error: err
    };
  }
}

var changesHandler = new Changes();

function idbBulkDocs(dbOpts, req, opts, api, idb, callback) {
  var docInfos = req.docs;
  var txn;
  var docStore;
  var bySeqStore;
  var attachStore;
  var attachAndSeqStore;
  var metaStore;
  var docInfoError;
  var metaDoc;

  for (var i = 0, len = docInfos.length; i < len; i++) {
    var doc = docInfos[i];
    if (doc._id && isLocalId(doc._id)) {
      continue;
    }
    doc = docInfos[i] = parseDoc(doc, opts.new_edits, dbOpts);
    if (doc.error && !docInfoError) {
      docInfoError = doc;
    }
  }

  if (docInfoError) {
    return callback(docInfoError);
  }

  var allDocsProcessed = false;
  var docCountDelta = 0;
  var results = new Array(docInfos.length);
  var fetchedDocs = new Map();
  var preconditionErrored = false;
  var blobType = api._meta.blobSupport ? 'blob' : 'base64';

  preprocessAttachments(docInfos, blobType, function (err) {
    if (err) {
      return callback(err);
    }
    startTransaction();
  });

  function startTransaction() {

    var stores = [
      DOC_STORE, BY_SEQ_STORE,
      ATTACH_STORE,
      LOCAL_STORE, ATTACH_AND_SEQ_STORE,
      META_STORE
    ];
    var txnResult = openTransactionSafely(idb, stores, 'readwrite');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    txn = txnResult.txn;
    txn.onabort = idbError(callback);
    txn.ontimeout = idbError(callback);
    txn.oncomplete = complete;
    docStore = txn.objectStore(DOC_STORE);
    bySeqStore = txn.objectStore(BY_SEQ_STORE);
    attachStore = txn.objectStore(ATTACH_STORE);
    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
    metaStore = txn.objectStore(META_STORE);

    metaStore.get(META_STORE).onsuccess = function (e) {
      metaDoc = e.target.result;
      updateDocCountIfReady();
    };

    verifyAttachments(function (err) {
      if (err) {
        preconditionErrored = true;
        return callback(err);
      }
      fetchExistingDocs();
    });
  }

  function onAllDocsProcessed() {
    allDocsProcessed = true;
    updateDocCountIfReady();
  }

  function idbProcessDocs() {
    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,
                txn, results, writeDoc, opts, onAllDocsProcessed);
  }

  function updateDocCountIfReady() {
    if (!metaDoc || !allDocsProcessed) {
      return;
    }
    // caching the docCount saves a lot of time in allDocs() and
    // info(), which is why we go to all the trouble of doing this
    metaDoc.docCount += docCountDelta;
    metaStore.put(metaDoc);
  }

  function fetchExistingDocs() {

    if (!docInfos.length) {
      return;
    }

    var numFetched = 0;

    function checkDone() {
      if (++numFetched === docInfos.length) {
        idbProcessDocs();
      }
    }

    function readMetadata(event) {
      var metadata = decodeMetadata(event.target.result);

      if (metadata) {
        fetchedDocs.set(metadata.id, metadata);
      }
      checkDone();
    }

    for (var i = 0, len = docInfos.length; i < len; i++) {
      var docInfo = docInfos[i];
      if (docInfo._id && isLocalId(docInfo._id)) {
        checkDone(); // skip local docs
        continue;
      }
      var req = docStore.get(docInfo.metadata.id);
      req.onsuccess = readMetadata;
    }
  }

  function complete() {
    if (preconditionErrored) {
      return;
    }

    changesHandler.notify(api._meta.name);
    callback(null, results);
  }

  function verifyAttachment(digest, callback) {

    var req = attachStore.get(digest);
    req.onsuccess = function (e) {
      if (!e.target.result) {
        var err = createError(MISSING_STUB,
          'unknown stub attachment with digest ' +
          digest);
        err.status = 412;
        callback(err);
      } else {
        callback();
      }
    };
  }

  function verifyAttachments(finish) {


    var digests = [];
    docInfos.forEach(function (docInfo) {
      if (docInfo.data && docInfo.data._attachments) {
        Object.keys(docInfo.data._attachments).forEach(function (filename) {
          var att = docInfo.data._attachments[filename];
          if (att.stub) {
            digests.push(att.digest);
          }
        });
      }
    });
    if (!digests.length) {
      return finish();
    }
    var numDone = 0;
    var err;

    function checkDone() {
      if (++numDone === digests.length) {
        finish(err);
      }
    }
    digests.forEach(function (digest) {
      verifyAttachment(digest, function (attErr) {
        if (attErr && !err) {
          err = attErr;
        }
        checkDone();
      });
    });
  }

  function writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
                    isUpdate, delta, resultsIdx, callback) {

    docInfo.metadata.winningRev = winningRev$$1;
    docInfo.metadata.deleted = winningRevIsDeleted;

    var doc = docInfo.data;
    doc._id = docInfo.metadata.id;
    doc._rev = docInfo.metadata.rev;

    if (newRevIsDeleted) {
      doc._deleted = true;
    }

    var hasAttachments = doc._attachments &&
      Object.keys(doc._attachments).length;
    if (hasAttachments) {
      return writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
        isUpdate, resultsIdx, callback);
    }

    docCountDelta += delta;
    updateDocCountIfReady();

    finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
      isUpdate, resultsIdx, callback);
  }

  function finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
                     isUpdate, resultsIdx, callback) {

    var doc = docInfo.data;
    var metadata = docInfo.metadata;

    doc._doc_id_rev = metadata.id + '::' + metadata.rev;
    delete doc._id;
    delete doc._rev;

    function afterPutDoc(e) {
      var revsToDelete = docInfo.stemmedRevs || [];

      if (isUpdate && api.auto_compaction) {
        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));
      }

      if (revsToDelete && revsToDelete.length) {
        compactRevs(revsToDelete, docInfo.metadata.id, txn);
      }

      metadata.seq = e.target.result;
      // Current _rev is calculated from _rev_tree on read
      // delete metadata.rev;
      var metadataToStore = encodeMetadata(metadata, winningRev$$1,
        winningRevIsDeleted);
      var metaDataReq = docStore.put(metadataToStore);
      metaDataReq.onsuccess = afterPutMetadata;
    }

    function afterPutDocError(e) {
      // ConstraintError, need to update, not put (see #1638 for details)
      e.preventDefault(); // avoid transaction abort
      e.stopPropagation(); // avoid transaction onerror
      var index = bySeqStore.index('_doc_id_rev');
      var getKeyReq = index.getKey(doc._doc_id_rev);
      getKeyReq.onsuccess = function (e) {
        var putReq = bySeqStore.put(doc, e.target.result);
        putReq.onsuccess = afterPutDoc;
      };
    }

    function afterPutMetadata() {
      results[resultsIdx] = {
        ok: true,
        id: metadata.id,
        rev: metadata.rev
      };
      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);
      insertAttachmentMappings(docInfo, metadata.seq, callback);
    }

    var putReq = bySeqStore.put(doc);

    putReq.onsuccess = afterPutDoc;
    putReq.onerror = afterPutDocError;
  }

  function writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
                            isUpdate, resultsIdx, callback) {


    var doc = docInfo.data;

    var numDone = 0;
    var attachments = Object.keys(doc._attachments);

    function collectResults() {
      if (numDone === attachments.length) {
        finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
          isUpdate, resultsIdx, callback);
      }
    }

    function attachmentSaved() {
      numDone++;
      collectResults();
    }

    attachments.forEach(function (key) {
      var att = docInfo.data._attachments[key];
      if (!att.stub) {
        var data = att.data;
        delete att.data;
        att.revpos = parseInt(winningRev$$1, 10);
        var digest = att.digest;
        saveAttachment(digest, data, attachmentSaved);
      } else {
        numDone++;
        collectResults();
      }
    });
  }

  // map seqs to attachment digests, which
  // we will need later during compaction
  function insertAttachmentMappings(docInfo, seq, callback) {

    var attsAdded = 0;
    var attsToAdd = Object.keys(docInfo.data._attachments || {});

    if (!attsToAdd.length) {
      return callback();
    }

    function checkDone() {
      if (++attsAdded === attsToAdd.length) {
        callback();
      }
    }

    function add(att) {
      var digest = docInfo.data._attachments[att].digest;
      var req = attachAndSeqStore.put({
        seq,
        digestSeq: digest + '::' + seq
      });

      req.onsuccess = checkDone;
      req.onerror = function (e) {
        // this callback is for a constaint error, which we ignore
        // because this docid/rev has already been associated with
        // the digest (e.g. when new_edits == false)
        e.preventDefault(); // avoid transaction abort
        e.stopPropagation(); // avoid transaction onerror
        checkDone();
      };
    }
    for (var i = 0; i < attsToAdd.length; i++) {
      add(attsToAdd[i]); // do in parallel
    }
  }

  function saveAttachment(digest, data, callback) {


    var getKeyReq = attachStore.count(digest);
    getKeyReq.onsuccess = function (e) {
      var count = e.target.result;
      if (count) {
        return callback(); // already exists
      }
      var newAtt = {
        digest,
        body: data
      };
      var putReq = attachStore.put(newAtt);
      putReq.onsuccess = callback;
    };
  }
}

// Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations
// while falling back to a normal IDBCursor operation on browsers that don't support getAll() or
// getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because
// we're not processing each document one-at-a-time.
function runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {

  if (batchSize === -1) {
    batchSize = 1000;
  }

  // Bail out of getAll()/getAllKeys() in the following cases:
  // 1) either method is unsupported - we need both
  // 2) batchSize is 1 (might as well use IDBCursor)
  // 3) descending – no real way to do this via getAll()/getAllKeys()

  var useGetAll = typeof objectStore.getAll === 'function' &&
    typeof objectStore.getAllKeys === 'function' &&
    batchSize > 1 && !descending;

  var keysBatch;
  var valuesBatch;
  var pseudoCursor;

  function onGetAll(e) {
    valuesBatch = e.target.result;
    if (keysBatch) {
      onBatch(keysBatch, valuesBatch, pseudoCursor);
    }
  }

  function onGetAllKeys(e) {
    keysBatch = e.target.result;
    if (valuesBatch) {
      onBatch(keysBatch, valuesBatch, pseudoCursor);
    }
  }

  function continuePseudoCursor() {
    if (!keysBatch.length) { // no more results
      return onBatch();
    }
    // fetch next batch, exclusive start
    var lastKey = keysBatch[keysBatch.length - 1];
    var newKeyRange;
    if (keyRange && keyRange.upper) {
      try {
        newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,
          true, keyRange.upperOpen);
      } catch (e) {
        if (e.name === "DataError" && e.code === 0) {
          return onBatch(); // we're done, startkey and endkey are equal
        }
      }
    } else {
      newKeyRange = IDBKeyRange.lowerBound(lastKey, true);
    }
    keyRange = newKeyRange;
    keysBatch = null;
    valuesBatch = null;
    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
  }

  function onCursor(e) {
    var cursor = e.target.result;
    if (!cursor) { // done
      return onBatch();
    }
    // regular IDBCursor acts like a batch where batch size is always 1
    onBatch([cursor.key], [cursor.value], cursor);
  }

  if (useGetAll) {
    pseudoCursor = {"continue": continuePseudoCursor};
    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
  } else if (descending) {
    objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;
  } else {
    objectStore.openCursor(keyRange).onsuccess = onCursor;
  }
}

// simple shim for objectStore.getAll(), falling back to IDBCursor
function getAll(objectStore, keyRange, onSuccess) {
  if (typeof objectStore.getAll === 'function') {
    // use native getAll
    objectStore.getAll(keyRange).onsuccess = onSuccess;
    return;
  }
  // fall back to cursors
  var values = [];

  function onCursor(e) {
    var cursor = e.target.result;
    if (cursor) {
      values.push(cursor.value);
      cursor.continue();
    } else {
      onSuccess({
        target: {
          result: values
        }
      });
    }
  }

  objectStore.openCursor(keyRange).onsuccess = onCursor;
}

function allDocsKeys(keys, docStore, onBatch) {
  // It's not guaranteed to be returned in right order
  var valuesBatch = new Array(keys.length);
  var count = 0;
  keys.forEach(function (key, index) {
    docStore.get(key).onsuccess = function (event) {
      if (event.target.result) {
        valuesBatch[index] = event.target.result;
      } else {
        valuesBatch[index] = {key, error: 'not_found'};
      }
      count++;
      if (count === keys.length) {
        onBatch(keys, valuesBatch, {});
      }
    };
  });
}

function createKeyRange(start, end, inclusiveEnd, key, descending) {
  try {
    if (start && end) {
      if (descending) {
        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);
      } else {
        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);
      }
    } else if (start) {
      if (descending) {
        return IDBKeyRange.upperBound(start);
      } else {
        return IDBKeyRange.lowerBound(start);
      }
    } else if (end) {
      if (descending) {
        return IDBKeyRange.lowerBound(end, !inclusiveEnd);
      } else {
        return IDBKeyRange.upperBound(end, !inclusiveEnd);
      }
    } else if (key) {
      return IDBKeyRange.only(key);
    }
  } catch (e) {
    return {error: e};
  }
  return null;
}

function idbAllDocs(opts, idb, callback) {
  var start = 'startkey' in opts ? opts.startkey : false;
  var end = 'endkey' in opts ? opts.endkey : false;
  var key = 'key' in opts ? opts.key : false;
  var keys = 'keys' in opts ? opts.keys : false;
  var skip = opts.skip || 0;
  var limit = typeof opts.limit === 'number' ? opts.limit : -1;
  var inclusiveEnd = opts.inclusive_end !== false;

  var keyRange ;
  var keyRangeError;
  if (!keys) {
    keyRange = createKeyRange(start, end, inclusiveEnd, key, opts.descending);
    keyRangeError = keyRange && keyRange.error;
    if (keyRangeError &&
      !(keyRangeError.name === "DataError" && keyRangeError.code === 0)) {
      // DataError with error code 0 indicates start is less than end, so
      // can just do an empty query. Else need to throw
      return callback(createError(IDB_ERROR,
        keyRangeError.name, keyRangeError.message));
    }
  }

  var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE];

  if (opts.attachments) {
    stores.push(ATTACH_STORE);
  }
  var txnResult = openTransactionSafely(idb, stores, 'readonly');
  if (txnResult.error) {
    return callback(txnResult.error);
  }
  var txn = txnResult.txn;
  txn.oncomplete = onTxnComplete;
  txn.onabort = idbError(callback);
  var docStore = txn.objectStore(DOC_STORE);
  var seqStore = txn.objectStore(BY_SEQ_STORE);
  var metaStore = txn.objectStore(META_STORE);
  var docIdRevIndex = seqStore.index('_doc_id_rev');
  var results = [];
  var docCount;
  var updateSeq;

  metaStore.get(META_STORE).onsuccess = function (e) {
    docCount = e.target.result.docCount;
  };

  /* istanbul ignore if */
  if (opts.update_seq) {
    // get max updateSeq
    seqStore.openKeyCursor(null, 'prev').onsuccess = e => {
      var cursor = e.target.result;
      if (cursor && cursor.key) {
        updateSeq = cursor.key;
      }
    };
  }

  // if the user specifies include_docs=true, then we don't
  // want to block the main cursor while we're fetching the doc
  function fetchDocAsynchronously(metadata, row, winningRev$$1) {
    var key = metadata.id + "::" + winningRev$$1;
    docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {
      row.doc = decodeDoc(e.target.result) || {};
      if (opts.conflicts) {
        var conflicts = collectConflicts(metadata);
        if (conflicts.length) {
          row.doc._conflicts = conflicts;
        }
      }
      fetchAttachmentsIfNecessary(row.doc, opts, txn);
    };
  }

  function allDocsInner(winningRev$$1, metadata) {
    var row = {
      id: metadata.id,
      key: metadata.id,
      value: {
        rev: winningRev$$1
      }
    };
    var deleted = metadata.deleted;
    if (deleted) {
      if (keys) {
        results.push(row);
        // deleted docs are okay with "keys" requests
        row.value.deleted = true;
        row.doc = null;
      }
    } else if (skip-- <= 0) {
      results.push(row);
      if (opts.include_docs) {
        fetchDocAsynchronously(metadata, row, winningRev$$1);
      }
    }
  }

  function processBatch(batchValues) {
    for (var i = 0, len = batchValues.length; i < len; i++) {
      if (results.length === limit) {
        break;
      }
      var batchValue = batchValues[i];
      if (batchValue.error && keys) {
        // key was not found with "keys" requests
        results.push(batchValue);
        continue;
      }
      var metadata = decodeMetadata(batchValue);
      var winningRev$$1 = metadata.winningRev;
      allDocsInner(winningRev$$1, metadata);
    }
  }

  function onBatch(batchKeys, batchValues, cursor) {
    if (!cursor) {
      return;
    }
    processBatch(batchValues);
    if (results.length < limit) {
      cursor.continue();
    }
  }

  function onGetAll(e) {
    var values = e.target.result;
    if (opts.descending) {
      values = values.reverse();
    }
    processBatch(values);
  }

  function onResultsReady() {
    var returnVal = {
      total_rows: docCount,
      offset: opts.skip,
      rows: results
    };

    /* istanbul ignore if */
    if (opts.update_seq && updateSeq !== undefined) {
      returnVal.update_seq = updateSeq;
    }
    callback(null, returnVal);
  }

  function onTxnComplete() {
    if (opts.attachments) {
      postProcessAttachments(results, opts.binary).then(onResultsReady);
    } else {
      onResultsReady();
    }
  }

  // don't bother doing any requests if start > end or limit === 0
  if (keyRangeError || limit === 0) {
    return;
  }
  if (keys) {
    return allDocsKeys(keys, docStore, onBatch);
  }
  if (limit === -1) { // just fetch everything
    return getAll(docStore, keyRange, onGetAll);
  }
  // else do a cursor
  // choose a batch size based on the skip, since we'll need to skip that many
  runBatchedCursor(docStore, keyRange, opts.descending, limit + skip, onBatch);
}

function countDocs(txn, cb) {
  var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');
  index.count(IDBKeyRange.only('0')).onsuccess = function (e) {
    cb(e.target.result);
  };
}

// This task queue ensures that IDB open calls are done in their own tick

var running = false;
var queue = [];

function tryCode(fun, err, res, PouchDB) {
  try {
    fun(err, res);
  } catch (err) {
    // Shouldn't happen, but in some odd cases
    // IndexedDB implementations might throw a sync
    // error, in which case this will at least log it.
    PouchDB.emit('error', err);
  }
}

function applyNext() {
  if (running || !queue.length) {
    return;
  }
  running = true;
  queue.shift()();
}

function enqueueTask(action, callback, PouchDB) {
  queue.push(function runAction() {
    action(function runCallback(err, res) {
      tryCode(callback, err, res, PouchDB);
      running = false;
      nextTick(function runNext() {
        applyNext(PouchDB);
      });
    });
  });
  applyNext();
}

function changes(opts, api, dbName, idb) {
  opts = clone(opts);

  if (opts.continuous) {
    var id = dbName + ':' + uuid();
    changesHandler.addListener(dbName, id, api, opts);
    changesHandler.notify(dbName);
    return {
      cancel: function () {
        changesHandler.removeListener(dbName, id);
      }
    };
  }

  var docIds = opts.doc_ids && new Set(opts.doc_ids);

  opts.since = opts.since || 0;
  var lastSeq = opts.since;

  var limit = 'limit' in opts ? opts.limit : -1;
  if (limit === 0) {
    limit = 1; // per CouchDB _changes spec
  }

  var results = [];
  var numResults = 0;
  var filter = filterChange(opts);
  var docIdsToMetadata = new Map();

  var txn;
  var bySeqStore;
  var docStore;
  var docIdRevIndex;

  function onBatch(batchKeys, batchValues, cursor) {
    if (!cursor || !batchKeys.length) { // done
      return;
    }

    var winningDocs = new Array(batchKeys.length);
    var metadatas = new Array(batchKeys.length);

    function processMetadataAndWinningDoc(metadata, winningDoc) {
      var change = opts.processChange(winningDoc, metadata, opts);
      lastSeq = change.seq = metadata.seq;

      var filtered = filter(change);
      if (typeof filtered === 'object') { // anything but true/false indicates error
        return Promise.reject(filtered);
      }

      if (!filtered) {
        return Promise.resolve();
      }
      numResults++;
      if (opts.return_docs) {
        results.push(change);
      }
      // process the attachment immediately
      // for the benefit of live listeners
      if (opts.attachments && opts.include_docs) {
        return new Promise(function (resolve) {
          fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {
            postProcessAttachments([change], opts.binary).then(function () {
              resolve(change);
            });
          });
        });
      } else {
        return Promise.resolve(change);
      }
    }

    function onBatchDone() {
      var promises = [];
      for (var i = 0, len = winningDocs.length; i < len; i++) {
        if (numResults === limit) {
          break;
        }
        var winningDoc = winningDocs[i];
        if (!winningDoc) {
          continue;
        }
        var metadata = metadatas[i];
        promises.push(processMetadataAndWinningDoc(metadata, winningDoc));
      }

      Promise.all(promises).then(function (changes) {
        for (var i = 0, len = changes.length; i < len; i++) {
          if (changes[i]) {
            opts.onChange(changes[i]);
          }
        }
      }).catch(opts.complete);

      if (numResults !== limit) {
        cursor.continue();
      }
    }

    // Fetch all metadatas/winningdocs from this batch in parallel, then process
    // them all only once all data has been collected. This is done in parallel
    // because it's faster than doing it one-at-a-time.
    var numDone = 0;
    batchValues.forEach(function (value, i) {
      var doc = decodeDoc(value);
      var seq = batchKeys[i];
      fetchWinningDocAndMetadata(doc, seq, function (metadata, winningDoc) {
        metadatas[i] = metadata;
        winningDocs[i] = winningDoc;
        if (++numDone === batchKeys.length) {
          onBatchDone();
        }
      });
    });
  }

  function onGetMetadata(doc, seq, metadata, cb) {
    if (metadata.seq !== seq) {
      // some other seq is later
      return cb();
    }

    if (metadata.winningRev === doc._rev) {
      // this is the winning doc
      return cb(metadata, doc);
    }

    // fetch winning doc in separate request
    var docIdRev = doc._id + '::' + metadata.winningRev;
    var req = docIdRevIndex.get(docIdRev);
    req.onsuccess = function (e) {
      cb(metadata, decodeDoc(e.target.result));
    };
  }

  function fetchWinningDocAndMetadata(doc, seq, cb) {
    if (docIds && !docIds.has(doc._id)) {
      return cb();
    }

    var metadata = docIdsToMetadata.get(doc._id);
    if (metadata) { // cached
      return onGetMetadata(doc, seq, metadata, cb);
    }
    // metadata not cached, have to go fetch it
    docStore.get(doc._id).onsuccess = function (e) {
      metadata = decodeMetadata(e.target.result);
      docIdsToMetadata.set(doc._id, metadata);
      onGetMetadata(doc, seq, metadata, cb);
    };
  }

  function finish() {
    opts.complete(null, {
      results,
      last_seq: lastSeq
    });
  }

  function onTxnComplete() {
    if (!opts.continuous && opts.attachments) {
      // cannot guarantee that postProcessing was already done,
      // so do it again
      postProcessAttachments(results).then(finish);
    } else {
      finish();
    }
  }

  var objectStores = [DOC_STORE, BY_SEQ_STORE];
  if (opts.attachments) {
    objectStores.push(ATTACH_STORE);
  }
  var txnResult = openTransactionSafely(idb, objectStores, 'readonly');
  if (txnResult.error) {
    return opts.complete(txnResult.error);
  }
  txn = txnResult.txn;
  txn.onabort = idbError(opts.complete);
  txn.oncomplete = onTxnComplete;

  bySeqStore = txn.objectStore(BY_SEQ_STORE);
  docStore = txn.objectStore(DOC_STORE);
  docIdRevIndex = bySeqStore.index('_doc_id_rev');

  var keyRange = (opts.since && !opts.descending) ?
    IDBKeyRange.lowerBound(opts.since, true) : null;

  runBatchedCursor(bySeqStore, keyRange, opts.descending, limit, onBatch);
}

var cachedDBs = new Map();
var blobSupportPromise;
var openReqList = new Map();

function IdbPouch(opts, callback) {
  var api = this;

  enqueueTask(function (thisCallback) {
    init(api, opts, thisCallback);
  }, callback, api.constructor);
}

function init(api, opts, callback) {

  var dbName = opts.name;

  var idb = null;
  var idbGlobalFailureError = null;
  api._meta = null;

  function enrichCallbackError(callback) {
    return function (error, result) {
      if (error && error instanceof Error && !error.reason) {
        if (idbGlobalFailureError) {
          error.reason = idbGlobalFailureError;
        }
      }

      callback(error, result);
    };
  }

  // called when creating a fresh new database
  function createSchema(db) {
    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});
    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})
      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});
    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});
    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);

    // added in v2
    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

    // added in v3
    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});

    // added in v4
    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
      {autoIncrement: true});
    attAndSeqStore.createIndex('seq', 'seq');
    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
  }

  // migration to version 2
  // unfortunately "deletedOrLocal" is a misnomer now that we no longer
  // store local docs in the main doc-store, but whaddyagonnado
  function addDeletedOrLocalIndex(txn, callback) {
    var docStore = txn.objectStore(DOC_STORE);
    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

    docStore.openCursor().onsuccess = function (event) {
      var cursor = event.target.result;
      if (cursor) {
        var metadata = cursor.value;
        var deleted = isDeleted(metadata);
        metadata.deletedOrLocal = deleted ? "1" : "0";
        docStore.put(metadata);
        cursor.continue();
      } else {
        callback();
      }
    };
  }

  // migration to version 3 (part 1)
  function createLocalStoreSchema(db) {
    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})
      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
  }

  // migration to version 3 (part 2)
  function migrateLocalStore(txn, cb) {
    var localStore = txn.objectStore(LOCAL_STORE);
    var docStore = txn.objectStore(DOC_STORE);
    var seqStore = txn.objectStore(BY_SEQ_STORE);

    var cursor = docStore.openCursor();
    cursor.onsuccess = function (event) {
      var cursor = event.target.result;
      if (cursor) {
        var metadata = cursor.value;
        var docId = metadata.id;
        var local = isLocalId(docId);
        var rev$$1 = winningRev(metadata);
        if (local) {
          var docIdRev = docId + "::" + rev$$1;
          // remove all seq entries
          // associated with this docId
          var start = docId + "::";
          var end = docId + "::~";
          var index = seqStore.index('_doc_id_rev');
          var range = IDBKeyRange.bound(start, end, false, false);
          var seqCursor = index.openCursor(range);
          seqCursor.onsuccess = function (e) {
            seqCursor = e.target.result;
            if (!seqCursor) {
              // done
              docStore.delete(cursor.primaryKey);
              cursor.continue();
            } else {
              var data = seqCursor.value;
              if (data._doc_id_rev === docIdRev) {
                localStore.put(data);
              }
              seqStore.delete(seqCursor.primaryKey);
              seqCursor.continue();
            }
          };
        } else {
          cursor.continue();
        }
      } else if (cb) {
        cb();
      }
    };
  }

  // migration to version 4 (part 1)
  function addAttachAndSeqStore(db) {
    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
      {autoIncrement: true});
    attAndSeqStore.createIndex('seq', 'seq');
    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
  }

  // migration to version 4 (part 2)
  function migrateAttsAndSeqs(txn, callback) {
    var seqStore = txn.objectStore(BY_SEQ_STORE);
    var attStore = txn.objectStore(ATTACH_STORE);
    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);

    // need to actually populate the table. this is the expensive part,
    // so as an optimization, check first that this database even
    // contains attachments
    var req = attStore.count();
    req.onsuccess = function (e) {
      var count = e.target.result;
      if (!count) {
        return callback(); // done
      }

      seqStore.openCursor().onsuccess = function (e) {
        var cursor = e.target.result;
        if (!cursor) {
          return callback(); // done
        }
        var doc = cursor.value;
        var seq = cursor.primaryKey;
        var atts = Object.keys(doc._attachments || {});
        var digestMap = {};
        for (var j = 0; j < atts.length; j++) {
          var att = doc._attachments[atts[j]];
          digestMap[att.digest] = true; // uniq digests, just in case
        }
        var digests = Object.keys(digestMap);
        for (j = 0; j < digests.length; j++) {
          var digest = digests[j];
          attAndSeqStore.put({
            seq,
            digestSeq: digest + '::' + seq
          });
        }
        cursor.continue();
      };
    };
  }

  // migration to version 5
  // Instead of relying on on-the-fly migration of metadata,
  // this brings the doc-store to its modern form:
  // - metadata.winningrev
  // - metadata.seq
  // - stringify the metadata when storing it
  function migrateMetadata(txn) {

    function decodeMetadataCompat(storedObject) {
      if (!storedObject.data) {
        // old format, when we didn't store it stringified
        storedObject.deleted = storedObject.deletedOrLocal === '1';
        return storedObject;
      }
      return decodeMetadata(storedObject);
    }

    // ensure that every metadata has a winningRev and seq,
    // which was previously created on-the-fly but better to migrate
    var bySeqStore = txn.objectStore(BY_SEQ_STORE);
    var docStore = txn.objectStore(DOC_STORE);
    var cursor = docStore.openCursor();
    cursor.onsuccess = function (e) {
      var cursor = e.target.result;
      if (!cursor) {
        return; // done
      }
      var metadata = decodeMetadataCompat(cursor.value);

      metadata.winningRev = metadata.winningRev ||
        winningRev(metadata);

      function fetchMetadataSeq() {
        // metadata.seq was added post-3.2.0, so if it's missing,
        // we need to fetch it manually
        var start = metadata.id + '::';
        var end = metadata.id + '::\uffff';
        var req = bySeqStore.index('_doc_id_rev').openCursor(
          IDBKeyRange.bound(start, end));

        var metadataSeq = 0;
        req.onsuccess = function (e) {
          var cursor = e.target.result;
          if (!cursor) {
            metadata.seq = metadataSeq;
            return onGetMetadataSeq();
          }
          var seq = cursor.primaryKey;
          if (seq > metadataSeq) {
            metadataSeq = seq;
          }
          cursor.continue();
        };
      }

      function onGetMetadataSeq() {
        var metadataToStore = encodeMetadata(metadata,
          metadata.winningRev, metadata.deleted);

        var req = docStore.put(metadataToStore);
        req.onsuccess = function () {
          cursor.continue();
        };
      }

      if (metadata.seq) {
        return onGetMetadataSeq();
      }

      fetchMetadataSeq();
    };

  }

  api._remote = false;
  api.type = function () {
    return 'idb';
  };

  api._id = toPromise(function (callback) {
    callback(null, api._meta.instanceId);
  });

  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {
    idbBulkDocs(opts, req, reqOpts, api, idb, enrichCallbackError(callback));
  };

  // First we look up the metadata in the ids database, then we fetch the
  // current revision(s) from the by sequence store
  api._get = function idb_get(id, opts, callback) {
    var doc;
    var metadata;
    var err;
    var txn = opts.ctx;
    if (!txn) {
      var txnResult = openTransactionSafely(idb,
        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      txn = txnResult.txn;
    }

    function finish() {
      callback(err, {doc, metadata, ctx: txn});
    }

    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {
      metadata = decodeMetadata(e.target.result);
      // we can determine the result here if:
      // 1. there is no such document
      // 2. the document is deleted and we don't ask about specific rev
      // When we ask with opts.rev we expect the answer to be either
      // doc (possibly with _deleted=true) or missing error
      if (!metadata) {
        err = createError(MISSING_DOC, 'missing');
        return finish();
      }

      var rev$$1;
      if (!opts.rev) {
        rev$$1 = metadata.winningRev;
        var deleted = isDeleted(metadata);
        if (deleted) {
          err = createError(MISSING_DOC, "deleted");
          return finish();
        }
      } else {
        rev$$1 = opts.latest ? latest(opts.rev, metadata) : opts.rev;
      }

      var objectStore = txn.objectStore(BY_SEQ_STORE);
      var key = metadata.id + '::' + rev$$1;

      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {
        doc = e.target.result;
        if (doc) {
          doc = decodeDoc(doc);
        }
        if (!doc) {
          err = createError(MISSING_DOC, 'missing');
          return finish();
        }
        finish();
      };
    };
  };

  api._getAttachment = function (docId, attachId, attachment, opts, callback) {
    var txn;
    if (opts.ctx) {
      txn = opts.ctx;
    } else {
      var txnResult = openTransactionSafely(idb,
        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      txn = txnResult.txn;
    }
    var digest = attachment.digest;
    var type = attachment.content_type;

    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {
      var body = e.target.result.body;
      readBlobData(body, type, opts.binary, function (blobData) {
        callback(null, blobData);
      });
    };
  };

  api._info = function idb_info(callback) {
    var updateSeq;
    var docCount;

    var txnResult = openTransactionSafely(idb, [META_STORE, BY_SEQ_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;
    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
      docCount = e.target.result.docCount;
    };
    txn.objectStore(BY_SEQ_STORE).openKeyCursor(null, 'prev').onsuccess = function (e) {
      var cursor = e.target.result;
      updateSeq = cursor ? cursor.key : 0;
    };

    txn.oncomplete = function () {
      callback(null, {
        doc_count: docCount,
        update_seq: updateSeq,
        // for debugging
        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')
      });
    };
  };

  api._allDocs = function idb_allDocs(opts, callback) {
    idbAllDocs(opts, idb, enrichCallbackError(callback));
  };

  api._changes = function idbChanges(opts) {
    return changes(opts, api, dbName, idb);
  };

  api._close = function (callback) {
    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close
    // "Returns immediately and closes the connection in a separate thread..."
    idb.close();
    cachedDBs.delete(dbName);
    callback();
  };

  api._getRevisionTree = function (docId, callback) {
    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;
    var req = txn.objectStore(DOC_STORE).get(docId);
    req.onsuccess = function (event) {
      var doc = decodeMetadata(event.target.result);
      if (!doc) {
        callback(createError(MISSING_DOC));
      } else {
        callback(null, doc.rev_tree);
      }
    };
  };

  // This function removes revisions of document docId
  // which are listed in revs and sets this document
  // revision to to rev_tree
  api._doCompaction = function (docId, revs, callback) {
    var stores = [
      DOC_STORE,
      BY_SEQ_STORE,
      ATTACH_STORE,
      ATTACH_AND_SEQ_STORE
    ];
    var txnResult = openTransactionSafely(idb, stores, 'readwrite');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;

    var docStore = txn.objectStore(DOC_STORE);

    docStore.get(docId).onsuccess = function (event) {
      var metadata = decodeMetadata(event.target.result);
      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                                         revHash, ctx, opts) {
        var rev$$1 = pos + '-' + revHash;
        if (revs.indexOf(rev$$1) !== -1) {
          opts.status = 'missing';
        }
      });
      compactRevs(revs, docId, txn);
      var winningRev$$1 = metadata.winningRev;
      var deleted = metadata.deleted;
      txn.objectStore(DOC_STORE).put(
        encodeMetadata(metadata, winningRev$$1, deleted));
    };
    txn.onabort = idbError(callback);
    txn.oncomplete = function () {
      callback();
    };
  };


  api._getLocal = function (id, callback) {
    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var tx = txnResult.txn;
    var req = tx.objectStore(LOCAL_STORE).get(id);

    req.onerror = idbError(callback);
    req.onsuccess = function (e) {
      var doc = e.target.result;
      if (!doc) {
        callback(createError(MISSING_DOC));
      } else {
        delete doc['_doc_id_rev']; // for backwards compat
        callback(null, doc);
      }
    };
  };

  api._putLocal = function (doc, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    delete doc._revisions; // ignore this, trust the rev
    var oldRev = doc._rev;
    var id = doc._id;
    if (!oldRev) {
      doc._rev = '0-1';
    } else {
      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);
    }

    var tx = opts.ctx;
    var ret;
    if (!tx) {
      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      tx = txnResult.txn;
      tx.onerror = idbError(callback);
      tx.oncomplete = function () {
        if (ret) {
          callback(null, ret);
        }
      };
    }

    var oStore = tx.objectStore(LOCAL_STORE);
    var req;
    if (oldRev) {
      req = oStore.get(id);
      req.onsuccess = function (e) {
        var oldDoc = e.target.result;
        if (!oldDoc || oldDoc._rev !== oldRev) {
          callback(createError(REV_CONFLICT));
        } else { // update
          var req = oStore.put(doc);
          req.onsuccess = function () {
            ret = {ok: true, id: doc._id, rev: doc._rev};
            if (opts.ctx) { // return immediately
              callback(null, ret);
            }
          };
        }
      };
    } else { // new doc
      req = oStore.add(doc);
      req.onerror = function (e) {
        // constraint error, already exists
        callback(createError(REV_CONFLICT));
        e.preventDefault(); // avoid transaction abort
        e.stopPropagation(); // avoid transaction onerror
      };
      req.onsuccess = function () {
        ret = {ok: true, id: doc._id, rev: doc._rev};
        if (opts.ctx) { // return immediately
          callback(null, ret);
        }
      };
    }
  };

  api._removeLocal = function (doc, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    var tx = opts.ctx;
    if (!tx) {
      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      tx = txnResult.txn;
      tx.oncomplete = function () {
        if (ret) {
          callback(null, ret);
        }
      };
    }
    var ret;
    var id = doc._id;
    var oStore = tx.objectStore(LOCAL_STORE);
    var req = oStore.get(id);

    req.onerror = idbError(callback);
    req.onsuccess = function (e) {
      var oldDoc = e.target.result;
      if (!oldDoc || oldDoc._rev !== doc._rev) {
        callback(createError(MISSING_DOC));
      } else {
        oStore.delete(id);
        ret = {ok: true, id, rev: '0-0'};
        if (opts.ctx) { // return immediately
          callback(null, ret);
        }
      }
    };
  };

  api._destroy = function (opts, callback) {
    changesHandler.removeAllListeners(dbName);

    //Close open request for "dbName" database to fix ie delay.
    var openReq = openReqList.get(dbName);
    if (openReq && openReq.result) {
      openReq.result.close();
      cachedDBs.delete(dbName);
    }
    var req = indexedDB.deleteDatabase(dbName);

    req.onsuccess = function () {
      //Remove open request from the list.
      openReqList.delete(dbName);
      if (hasLocalStorage() && (dbName in localStorage)) {
        delete localStorage[dbName];
      }
      callback(null, { 'ok': true });
    };

    req.onerror = idbError(callback);
  };

  var cached = cachedDBs.get(dbName);

  if (cached) {
    idb = cached.idb;
    api._meta = cached.global;
    return nextTick(function () {
      callback(null, api);
    });
  }

  var req = indexedDB.open(dbName, ADAPTER_VERSION);
  openReqList.set(dbName, req);

  req.onupgradeneeded = function (e) {
    var db = e.target.result;
    if (e.oldVersion < 1) {
      return createSchema(db); // new db, initial schema
    }
    // do migrations

    var txn = e.currentTarget.transaction;
    // these migrations have to be done in this function, before
    // control is returned to the event loop, because IndexedDB

    if (e.oldVersion < 3) {
      createLocalStoreSchema(db); // v2 -> v3
    }
    if (e.oldVersion < 4) {
      addAttachAndSeqStore(db); // v3 -> v4
    }

    var migrations = [
      addDeletedOrLocalIndex, // v1 -> v2
      migrateLocalStore,      // v2 -> v3
      migrateAttsAndSeqs,     // v3 -> v4
      migrateMetadata         // v4 -> v5
    ];

    var i = e.oldVersion;

    function next() {
      var migration = migrations[i - 1];
      i++;
      if (migration) {
        migration(txn, next);
      }
    }

    next();
  };

  req.onsuccess = function (e) {

    idb = e.target.result;

    idb.onversionchange = function () {
      idb.close();
      cachedDBs.delete(dbName);
    };

    idb.onabort = function (e) {
      guardedConsole('error', 'Database has a global failure', e.target.error);
      idbGlobalFailureError = e.target.error;
      idb.close();
      cachedDBs.delete(dbName);
    };

    // Do a few setup operations (in parallel as much as possible):
    // 1. Fetch meta doc
    // 2. Check blob support
    // 3. Calculate docCount
    // 4. Generate an instanceId if necessary
    // 5. Store docCount and instanceId on meta doc

    var txn = idb.transaction([
      META_STORE,
      DETECT_BLOB_SUPPORT_STORE,
      DOC_STORE
    ], 'readwrite');

    var storedMetaDoc = false;
    var metaDoc;
    var docCount;
    var blobSupport;
    var instanceId;

    function completeSetup() {
      if (typeof blobSupport === 'undefined' || !storedMetaDoc) {
        return;
      }
      api._meta = {
        name: dbName,
        instanceId,
        blobSupport
      };

      cachedDBs.set(dbName, {
        idb,
        global: api._meta
      });
      callback(null, api);
    }

    function storeMetaDocIfReady() {
      if (typeof docCount === 'undefined' || typeof metaDoc === 'undefined') {
        return;
      }
      var instanceKey = dbName + '_id';
      if (instanceKey in metaDoc) {
        instanceId = metaDoc[instanceKey];
      } else {
        metaDoc[instanceKey] = instanceId = uuid();
      }
      metaDoc.docCount = docCount;
      txn.objectStore(META_STORE).put(metaDoc);
    }

    //
    // fetch or generate the instanceId
    //
    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
      metaDoc = e.target.result || { id: META_STORE };
      storeMetaDocIfReady();
    };

    //
    // countDocs
    //
    countDocs(txn, function (count) {
      docCount = count;
      storeMetaDocIfReady();
    });

    //
    // check blob support
    //
    if (!blobSupportPromise) {
      // make sure blob support is only checked once
      blobSupportPromise = checkBlobSupport(txn, DETECT_BLOB_SUPPORT_STORE, 'key');
    }

    blobSupportPromise.then(function (val) {
      blobSupport = val;
      completeSetup();
    });

    // only when the metadata put transaction has completed,
    // consider the setup done
    txn.oncomplete = function () {
      storedMetaDoc = true;
      completeSetup();
    };
    txn.onabort = idbError(callback);
  };

  req.onerror = function (e) {
    var msg = e.target.error && e.target.error.message;

    if (!msg) {
      msg = 'Failed to open indexedDB, are you in private browsing mode?';
    } else if (msg.indexOf("stored database is a higher version") !== -1) {
      msg = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter');
    }

    guardedConsole('error', msg);
    callback(createError(IDB_ERROR, msg));
  };
}

IdbPouch.valid = function () {
  // Following #7085 buggy idb versions (typically Safari < 10.1) are
  // considered valid.

  // On Firefox SecurityError is thrown while referencing indexedDB if cookies
  // are not allowed. `typeof indexedDB` also triggers the error.
  try {
    // some outdated implementations of IDB that appear on Samsung
    // and HTC Android devices <4.4 are missing IDBKeyRange
    return typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';
  } catch (e) {
    return false;
  }
};

function IDBPouch (PouchDB) {
  PouchDB.adapter('idb', IdbPouch, true);
}

// dead simple promise pool, inspired by https://github.com/timdp/es6-promise-pool
// but much smaller in code size. limits the number of concurrent promises that are executed


function pool(promiseFactories, limit) {
  return new Promise(function (resolve, reject) {
    var running = 0;
    var current = 0;
    var done = 0;
    var len = promiseFactories.length;
    var err;

    function runNext() {
      running++;
      promiseFactories[current++]().then(onSuccess, onError);
    }

    function doNext() {
      if (++done === len) {
        /* istanbul ignore if */
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      } else {
        runNextBatch();
      }
    }

    function onSuccess() {
      running--;
      doNext();
    }

    /* istanbul ignore next */
    function onError(thisErr) {
      running--;
      err = err || thisErr;
      doNext();
    }

    function runNextBatch() {
      while (running < limit && current < len) {
        runNext();
      }
    }

    runNextBatch();
  });
}

const CHANGES_BATCH_SIZE = 25;
const MAX_SIMULTANEOUS_REVS = 50;
const CHANGES_TIMEOUT_BUFFER = 5000;
const DEFAULT_HEARTBEAT = 10000;

const supportsBulkGetMap = {};

function readAttachmentsAsBlobOrBuffer(row) {
  const doc = row.doc || row.ok;
  const atts = doc && doc._attachments;
  if (!atts) {
    return;
  }
  Object.keys(atts).forEach(function (filename) {
    const att = atts[filename];
    att.data = b64ToBluffer(att.data, att.content_type);
  });
}

function encodeDocId(id) {
  if (/^_design/.test(id)) {
    return '_design/' + encodeURIComponent(id.slice(8));
  }
  if (id.startsWith('_local/')) {
    return '_local/' + encodeURIComponent(id.slice(7));
  }
  return encodeURIComponent(id);
}

function preprocessAttachments$1(doc) {
  if (!doc._attachments || !Object.keys(doc._attachments)) {
    return Promise.resolve();
  }

  return Promise.all(Object.keys(doc._attachments).map(function (key) {
    const attachment = doc._attachments[key];
    if (attachment.data && typeof attachment.data !== 'string') {
      return new Promise(function (resolve) {
        blobToBase64(attachment.data, resolve);
      }).then(function (b64) {
        attachment.data = b64;
      });
    }
  }));
}

function hasUrlPrefix(opts) {
  if (!opts.prefix) {
    return false;
  }
  const protocol = parseUri(opts.prefix).protocol;
  return protocol === 'http' || protocol === 'https';
}

// Get all the information you possibly can about the URI given by name and
// return it as a suitable object.
function getHost(name, opts) {
  // encode db name if opts.prefix is a url (#5574)
  if (hasUrlPrefix(opts)) {
    const dbName = opts.name.substr(opts.prefix.length);
    // Ensure prefix has a trailing slash
    const prefix = opts.prefix.replace(/\/?$/, '/');
    name = prefix + encodeURIComponent(dbName);
  }

  const uri = parseUri(name);
  if (uri.user || uri.password) {
    uri.auth = {username: uri.user, password: uri.password};
  }

  // Split the path part of the URI into parts using '/' as the delimiter
  // after removing any leading '/' and any trailing '/'
  const parts = uri.path.replace(/(^\/|\/$)/g, '').split('/');

  uri.db = parts.pop();
  // Prevent double encoding of URI component
  if (uri.db.indexOf('%') === -1) {
    uri.db = encodeURIComponent(uri.db);
  }

  uri.path = parts.join('/');

  return uri;
}

// Generate a URL with the host data given by opts and the given path
function genDBUrl(opts, path) {
  return genUrl(opts, opts.db + '/' + path);
}

// Generate a URL with the host data given by opts and the given path
function genUrl(opts, path) {
  // If the host already has a path, then we need to have a path delimiter
  // Otherwise, the path delimiter is the empty string
  const pathDel = !opts.path ? '' : '/';

  // If the host already has a path, then we need to have a path delimiter
  // Otherwise, the path delimiter is the empty string
  return opts.protocol + '://' + opts.host +
         (opts.port ? (':' + opts.port) : '') +
         '/' + opts.path + pathDel + path;
}

function paramsToStr(params) {
  const paramKeys = Object.keys(params);
  if (paramKeys.length === 0) {
    return '';
  }

  return '?' + paramKeys.map(key => key + '=' + encodeURIComponent(params[key])).join('&');
}

function shouldCacheBust(opts) {
  const ua = (typeof navigator !== 'undefined' && navigator.userAgent) ?
      navigator.userAgent.toLowerCase() : '';
  const isIE = ua.indexOf('msie') !== -1;
  const isTrident = ua.indexOf('trident') !== -1;
  const isEdge = ua.indexOf('edge') !== -1;
  const isGET = !('method' in opts) || opts.method === 'GET';
  return (isIE || isTrident || isEdge) && isGET;
}

// Implements the PouchDB API for dealing with CouchDB instances over HTTP
function HttpPouch(opts, callback) {

  // The functions that will be publicly available for HttpPouch
  const api = this;

  const host = getHost(opts.name, opts);
  const dbUrl = genDBUrl(host, '');

  opts = clone(opts);

  const ourFetch = async function (url, options) {

    options = options || {};
    options.headers = options.headers || new h();

    options.credentials = 'include';

    if (opts.auth || host.auth) {
      const nAuth = opts.auth || host.auth;
      const str = nAuth.username + ':' + nAuth.password;
      const token = thisBtoa(unescape(encodeURIComponent(str)));
      options.headers.set('Authorization', 'Basic ' + token);
    }

    const headers = opts.headers || {};
    Object.keys(headers).forEach(function (key) {
      options.headers.append(key, headers[key]);
    });

    /* istanbul ignore if */
    if (shouldCacheBust(options)) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + '_nonce=' + Date.now();
    }

    const fetchFun = opts.fetch || f$1;
    return await fetchFun(url, options);
  };

  function adapterFun$$1(name, fun) {
    return adapterFun(name, function (...args) {
      setup().then(function () {
        return fun.apply(this, args);
      }).catch(function (e) {
        const callback = args.pop();
        callback(e);
      });
    }).bind(api);
  }

  async function fetchJSON(url, options) {

    const result = {};

    options = options || {};
    options.headers = options.headers || new h();

    if (!options.headers.get('Content-Type')) {
      options.headers.set('Content-Type', 'application/json');
    }
    if (!options.headers.get('Accept')) {
      options.headers.set('Accept', 'application/json');
    }

    const response = await ourFetch(url, options);
    result.ok = response.ok;
    result.status = response.status;
    const json = await response.json();

    result.data = json;
    if (!result.ok) {
      result.data.status = result.status;
      const err = generateErrorFromResponse(result.data);
      throw err;
    }

    if (Array.isArray(result.data)) {
      result.data = result.data.map(function (v) {
        if (v.error || v.missing) {
          return generateErrorFromResponse(v);
        } else {
          return v;
        }
      });
    }

    return result;
  }

  let setupPromise;

  async function setup() {
    if (opts.skip_setup) {
      return Promise.resolve();
    }

    // If there is a setup in process or previous successful setup
    // done then we will use that
    // If previous setups have been rejected we will try again
    if (setupPromise) {
      return setupPromise;
    }

    setupPromise = fetchJSON(dbUrl).catch(function (err) {
      if (err && err.status && err.status === 404) {
        // Doesnt exist, create it
        explainError(404, 'PouchDB is just detecting if the remote exists.');
        return fetchJSON(dbUrl, {method: 'PUT'});
      } else {
        return Promise.reject(err);
      }
    }).catch(function (err) {
      // If we try to create a database that already exists, skipped in
      // istanbul since its catching a race condition.
      /* istanbul ignore if */
      if (err && err.status && err.status === 412) {
        return true;
      }
      return Promise.reject(err);
    });

    setupPromise.catch(function () {
      setupPromise = null;
    });

    return setupPromise;
  }

  nextTick(function () {
    callback(null, api);
  });

  api._remote = true;

  /* istanbul ignore next */
  api.type = function () {
    return 'http';
  };

  api.id = adapterFun$$1('id', async function (callback) {
    let result;
    try {
      const response = await ourFetch(genUrl(host, ''));
      result = await response.json();
    } catch (err) {
      result = {};
    }

    // Bad response or missing `uuid` should not prevent ID generation.
    const uuid$$1 = (result && result.uuid) ? (result.uuid + host.db) : genDBUrl(host, '');
    callback(null, uuid$$1);
  });

  // Sends a POST request to the host calling the couchdb _compact function
  //    version: The version of CouchDB it is running
  api.compact = adapterFun$$1('compact', async function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    await fetchJSON(genDBUrl(host, '_compact'), {method: 'POST'});

    function ping() {
      api.info(function (err, res) {
        // CouchDB may send a "compact_running:true" if it's
        // already compacting. PouchDB Server doesn't.
        /* istanbul ignore else */
        if (res && !res.compact_running) {
          callback(null, {ok: true});
        } else {
          setTimeout(ping, opts.interval || 200);
        }
      });
    }
    // Ping the http if it's finished compaction
    ping();
  });

  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {
    const self = this;

    async function doBulkGet(cb) {
      const params = {};
      if (opts.revs) {
        params.revs = true;
      }
      if (opts.attachments) {
        /* istanbul ignore next */
        params.attachments = true;
      }
      if (opts.latest) {
        params.latest = true;
      }
      try {
        const result = await fetchJSON(genDBUrl(host, '_bulk_get' + paramsToStr(params)), {
          method: 'POST',
          body: JSON.stringify({ docs: opts.docs})
        });

        if (opts.attachments && opts.binary) {
          result.data.results.forEach(function (res) {
            res.docs.forEach(readAttachmentsAsBlobOrBuffer);
          });
        }
        cb(null, result.data);
      } catch (error) {
        cb(error);
      }
    }

    /* istanbul ignore next */
    function doBulkGetShim() {
      // avoid "url too long error" by splitting up into multiple requests
      const batchSize = MAX_SIMULTANEOUS_REVS;
      const numBatches = Math.ceil(opts.docs.length / batchSize);
      let numDone = 0;
      const results = new Array(numBatches);

      function onResult(batchNum) {
        return function (err, res) {
          // err is impossible because shim returns a list of errs in that case
          results[batchNum] = res.results;
          if (++numDone === numBatches) {
            callback(null, {results: results.flat()});
          }
        };
      }

      for (let i = 0; i < numBatches; i++) {
        const subOpts = pick(opts, ['revs', 'attachments', 'binary', 'latest']);
        subOpts.docs = opts.docs.slice(i * batchSize,
          Math.min(opts.docs.length, (i + 1) * batchSize));
        bulkGet(self, subOpts, onResult(i));
      }
    }

    // mark the whole database as either supporting or not supporting _bulk_get
    const dbUrl = genUrl(host, '');
    const supportsBulkGet = supportsBulkGetMap[dbUrl];

    /* istanbul ignore next */
    if (typeof supportsBulkGet !== 'boolean') {
      // check if this database supports _bulk_get
      doBulkGet(function (err, res) {
        if (err) {
          supportsBulkGetMap[dbUrl] = false;
          explainError(
            err.status,
            'PouchDB is just detecting if the remote ' +
            'supports the _bulk_get API.'
          );
          doBulkGetShim();
        } else {
          supportsBulkGetMap[dbUrl] = true;
          callback(null, res);
        }
      });
    } else if (supportsBulkGet) {
      doBulkGet(callback);
    } else {
      doBulkGetShim();
    }
  });

  // Calls GET on the host, which gets back a JSON string containing
  //    couchdb: A welcome string
  //    version: The version of CouchDB it is running
  api._info = async function (callback) {
    try {
      await setup();
      const response = await ourFetch(genDBUrl(host, ''));
      const info = await response.json();
      info.host = genDBUrl(host, '');
      callback(null, info);
    } catch (err) {
      callback(err);
    }
  };

  api.fetch = async function (path, options) {
    await setup();
    const url = path.substring(0, 1) === '/' ?
    genUrl(host, path.substring(1)) :
    genDBUrl(host, path);
    return ourFetch(url, options);
  };

  // Get the document with the given id from the database given by host.
  // The id could be solely the _id in the database, or it may be a
  // _design/ID or _local/ID path
  api.get = adapterFun$$1('get', async function (id, opts, callback) {
    // If no options were given, set the callback to the second parameter
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    // List of parameters to add to the GET request
    const params = {};

    if (opts.revs) {
      params.revs = true;
    }

    if (opts.revs_info) {
      params.revs_info = true;
    }

    if (opts.latest) {
      params.latest = true;
    }

    if (opts.open_revs) {
      if (opts.open_revs !== "all") {
        opts.open_revs = JSON.stringify(opts.open_revs);
      }
      params.open_revs = opts.open_revs;
    }

    if (opts.rev) {
      params.rev = opts.rev;
    }

    if (opts.conflicts) {
      params.conflicts = opts.conflicts;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = opts.update_seq;
    }

    id = encodeDocId(id);

    function fetchAttachments(doc) {
      const atts = doc._attachments;
      const filenames = atts && Object.keys(atts);
      if (!atts || !filenames.length) {
        return;
      }
      // we fetch these manually in separate XHRs, because
      // Sync Gateway would normally send it back as multipart/mixed,
      // which we cannot parse. Also, this is more efficient than
      // receiving attachments as base64-encoded strings.
      async function fetchData(filename) {
        const att = atts[filename];
        const path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +
            '?rev=' + doc._rev;

        const response = await ourFetch(genDBUrl(host, path));

        let blob;
        if ('buffer' in response) {
          blob = await response.buffer();
        } else {
          /* istanbul ignore next */
          blob = await response.blob();
        }

        let data;
        if (opts.binary) {
          const typeFieldDescriptor = Object.getOwnPropertyDescriptor(blob.__proto__, 'type');
          if (!typeFieldDescriptor || typeFieldDescriptor.set) {
            blob.type = att.content_type;
          }
          data = blob;
        } else {
          data = await new Promise(function (resolve) {
            blobToBase64(blob, resolve);
          });
        }

        delete att.stub;
        delete att.length;
        att.data = data;
      }

      const promiseFactories = filenames.map(function (filename) {
        return function () {
          return fetchData(filename);
        };
      });

      // This limits the number of parallel xhr requests to 5 any time
      // to avoid issues with maximum browser request limits
      return pool(promiseFactories, 5);
    }

    function fetchAllAttachments(docOrDocs) {
      if (Array.isArray(docOrDocs)) {
        return Promise.all(docOrDocs.map(function (doc) {
          if (doc.ok) {
            return fetchAttachments(doc.ok);
          }
        }));
      }
      return fetchAttachments(docOrDocs);
    }

    const url = genDBUrl(host, id + paramsToStr(params));
    try {
      const res = await fetchJSON(url);
      if (opts.attachments) {
        await fetchAllAttachments(res.data);
      }
      callback(null, res.data);
    } catch (error) {
      error.docId = id;
      callback(error);
    }
  });


  // Delete the document given by doc from the database given by host.
  api.remove = adapterFun$$1('remove', async function (docOrId, optsOrRev, opts, cb) {
    let doc;
    if (typeof optsOrRev === 'string') {
      // id, rev, opts, callback style
      doc = {
        _id: docOrId,
        _rev: optsOrRev
      };
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
    } else {
      // doc, opts, callback style
      doc = docOrId;
      if (typeof optsOrRev === 'function') {
        cb = optsOrRev;
        opts = {};
      } else {
        cb = opts;
        opts = optsOrRev;
      }
    }

    const rev$$1 = (doc._rev || opts.rev);
    const url = genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev$$1;

    try {
      const result = await fetchJSON(url, {method: 'DELETE'});
      cb(null, result.data);
    } catch (error) {
      cb(error);
    }
  });

  function encodeAttachmentId(attachmentId) {
    return attachmentId.split("/").map(encodeURIComponent).join("/");
  }

  // Get the attachment
  api.getAttachment = adapterFun$$1('getAttachment', async function (docId, attachmentId,
                                                            opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    const params = opts.rev ? ('?rev=' + opts.rev) : '';
    const url = genDBUrl(host, encodeDocId(docId)) + '/' +
        encodeAttachmentId(attachmentId) + params;
    let contentType;
    try {
      const response = await ourFetch(url, {method: 'GET'});

      if (!response.ok) {
        throw response;
      }

      contentType = response.headers.get('content-type');
      let blob;
      if (typeof process !== 'undefined' && !process.browser && typeof response.buffer === 'function') {
        blob = await response.buffer();
      } else {
        /* istanbul ignore next */
        blob = await response.blob();
      }

      // TODO: also remove
      if (typeof process !== 'undefined' && !process.browser) {
        const typeFieldDescriptor = Object.getOwnPropertyDescriptor(blob.__proto__, 'type');
        if (!typeFieldDescriptor || typeFieldDescriptor.set) {
          blob.type = contentType;
        }
      }
      callback(null, blob);
    } catch (err) {
      callback(err);
    }
  });

  // Remove the attachment given by the id and rev
  api.removeAttachment =  adapterFun$$1('removeAttachment', async function (
    docId,
    attachmentId,
    rev$$1,
    callback,
  ) {
    const url = genDBUrl(host, encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId)) + '?rev=' + rev$$1;

    try {
      const result = await fetchJSON(url, {method: 'DELETE'});
      callback(null, result.data);
    } catch (error) {
      callback(error);
    }
  });

  // Add the attachment given by blob and its contentType property
  // to the document with the given id, the revision given by rev, and
  // add it to the database given by host.
  api.putAttachment = adapterFun$$1('putAttachment', async function (
    docId,
    attachmentId,
    rev$$1,
    blob,
    type,
    callback,
  ) {
    if (typeof type === 'function') {
      callback = type;
      type = blob;
      blob = rev$$1;
      rev$$1 = null;
    }
    const id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);
    let url = genDBUrl(host, id);
    if (rev$$1) {
      url += '?rev=' + rev$$1;
    }

    if (typeof blob === 'string') {
      // input is assumed to be a base64 string
      let binary;
      try {
        binary = thisAtob(blob);
      } catch (err) {
        return callback(createError(BAD_ARG,
                        'Attachment is not a valid base64 string'));
      }
      blob = binary ? binStringToBluffer(binary, type) : '';
    }

    try {
      // Add the attachment
      const result = await fetchJSON(url, {
        headers: new h({'Content-Type': type}),
        method: 'PUT',
        body: blob
      });
      callback(null, result.data);
    } catch (error) {
      callback(error);
    }
  });

  // Update/create multiple documents given by req in the database
  // given by host.
  api._bulkDocs = async function (req, opts, callback) {
    // If new_edits=false then it prevents the database from creating
    // new revision numbers for the documents. Instead it just uses
    // the old ones. This is used in database replication.
    req.new_edits = opts.new_edits;

    try {
      await setup();
      await Promise.all(req.docs.map(preprocessAttachments$1));

      // Update/create the documents
      const result = await fetchJSON(genDBUrl(host, '_bulk_docs'), {
        method: 'POST',
        body: JSON.stringify(req)
      });
      callback(null, result.data);
    } catch (error) {
      callback(error);
    }
  };

  // Update/create document
  api._put = async function (doc, opts, callback) {
    try {
      await setup();
      await preprocessAttachments$1(doc);

      const result = await fetchJSON(genDBUrl(host, encodeDocId(doc._id)), {
        method: 'PUT',
        body: JSON.stringify(doc)
      });
      callback(null, result.data);
    } catch (error) {
      error.docId = doc && doc._id;
      callback(error);
    }
  };


  // Get a listing of the documents in the database given
  // by host and ordered by increasing id.
  api.allDocs = adapterFun$$1('allDocs', async function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    // List of parameters to add to the GET request
    const params = {};
    let body;
    let method = 'GET';

    if (opts.conflicts) {
      params.conflicts = true;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = true;
    }

    if (opts.descending) {
      params.descending = true;
    }

    if (opts.include_docs) {
      params.include_docs = true;
    }

    // added in CouchDB 1.6.0
    if (opts.attachments) {
      params.attachments = true;
    }

    if (opts.key) {
      params.key = JSON.stringify(opts.key);
    }

    if (opts.start_key) {
      opts.startkey = opts.start_key;
    }

    if (opts.startkey) {
      params.startkey = JSON.stringify(opts.startkey);
    }

    if (opts.end_key) {
      opts.endkey = opts.end_key;
    }

    if (opts.endkey) {
      params.endkey = JSON.stringify(opts.endkey);
    }

    if (typeof opts.inclusive_end !== 'undefined') {
      params.inclusive_end = !!opts.inclusive_end;
    }

    if (typeof opts.limit !== 'undefined') {
      params.limit = opts.limit;
    }

    if (typeof opts.skip !== 'undefined') {
      params.skip = opts.skip;
    }

    const paramStr = paramsToStr(params);

    if (typeof opts.keys !== 'undefined') {
      method = 'POST';
      body = {keys: opts.keys};
    }

    try {
      const result = await fetchJSON(genDBUrl(host, '_all_docs' + paramStr), {
        method,
        body: JSON.stringify(body)
      });
      if (opts.include_docs && opts.attachments && opts.binary) {
        result.data.rows.forEach(readAttachmentsAsBlobOrBuffer);
      }
      callback(null, result.data);
    } catch (error) {
      callback(error);
    }
  });

  // Get a list of changes made to documents in the database given by host.
  // TODO According to the README, there should be two other methods here,
  // api.changes.addListener and api.changes.removeListener.
  api._changes = function (opts) {

    // We internally page the results of a changes request, this means
    // if there is a large set of changes to be returned we can start
    // processing them quicker instead of waiting on the entire
    // set of changes to return and attempting to process them at once
    const batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;

    opts = clone(opts);

    if (opts.continuous && !('heartbeat' in opts)) {
      opts.heartbeat = DEFAULT_HEARTBEAT;
    }

    let requestTimeout = ('timeout' in opts) ? opts.timeout : 30 * 1000;

    // ensure CHANGES_TIMEOUT_BUFFER applies
    if ('timeout' in opts && opts.timeout &&
      (requestTimeout - opts.timeout) < CHANGES_TIMEOUT_BUFFER) {
        requestTimeout = opts.timeout + CHANGES_TIMEOUT_BUFFER;
    }

    /* istanbul ignore if */
    if ('heartbeat' in opts && opts.heartbeat &&
       (requestTimeout - opts.heartbeat) < CHANGES_TIMEOUT_BUFFER) {
        requestTimeout = opts.heartbeat + CHANGES_TIMEOUT_BUFFER;
    }

    const params = {};
    if ('timeout' in opts && opts.timeout) {
      params.timeout = opts.timeout;
    }

    const limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;
    let leftToFetch = limit;

    if (opts.style) {
      params.style = opts.style;
    }

    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {
      params.include_docs = true;
    }

    if (opts.attachments) {
      params.attachments = true;
    }

    if (opts.continuous) {
      params.feed = 'longpoll';
    }

    if (opts.seq_interval) {
      params.seq_interval = opts.seq_interval;
    }

    if (opts.conflicts) {
      params.conflicts = true;
    }

    if (opts.descending) {
      params.descending = true;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = true;
    }

    if ('heartbeat' in opts) {
      // If the heartbeat value is false, it disables the default heartbeat
      if (opts.heartbeat) {
        params.heartbeat = opts.heartbeat;
      }
    }

    if (opts.filter && typeof opts.filter === 'string') {
      params.filter = opts.filter;
    }

    if (opts.view && typeof opts.view === 'string') {
      params.filter = '_view';
      params.view = opts.view;
    }

    // If opts.query_params exists, pass it through to the changes request.
    // These parameters may be used by the filter on the source database.
    if (opts.query_params && typeof opts.query_params === 'object') {
      for (const param_name in opts.query_params) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(opts.query_params, param_name)) {
          params[param_name] = opts.query_params[param_name];
        }
      }
    }

    let method = 'GET';
    let body;

    if (opts.doc_ids) {
      // set this automagically for the user; it's annoying that couchdb
      // requires both a "filter" and a "doc_ids" param.
      params.filter = '_doc_ids';
      method = 'POST';
      body = {doc_ids: opts.doc_ids };
    }
    /* istanbul ignore next */
    else if (opts.selector) {
      // set this automagically for the user, similar to above
      params.filter = '_selector';
      method = 'POST';
      body = {selector: opts.selector };
    }

    const controller = new AbortController();
    let lastFetchedSeq;

    // Get all the changes starting with the one immediately after the
    // sequence number given by since.
    const fetchData = async function (since, callback) {
      if (opts.aborted) {
        return;
      }
      params.since = since;
      // "since" can be any kind of json object in Cloudant/CouchDB 2.x
      /* istanbul ignore next */
      if (typeof params.since === "object") {
        params.since = JSON.stringify(params.since);
      }

      if (opts.descending) {
        if (limit) {
          params.limit = leftToFetch;
        }
      } else {
        params.limit = (!limit || leftToFetch > batchSize) ?
          batchSize : leftToFetch;
      }

      // Set the options for the ajax call
      const url = genDBUrl(host, '_changes' + paramsToStr(params));
      const fetchOpts = {
        signal: controller.signal,
        method,
        body: JSON.stringify(body)
      };
      lastFetchedSeq = since;

      /* istanbul ignore if */
      if (opts.aborted) {
        return;
      }

      // Get the changes
      try {
        await setup();
        const result = await fetchJSON(url, fetchOpts);
        callback(null, result.data);
      } catch (error) {
        callback(error);
      }
    };

    // If opts.since exists, get all the changes from the sequence
    // number given by opts.since. Otherwise, get all the changes
    // from the sequence number 0.
    const results = {results: []};

    const fetched = function (err, res) {
      if (opts.aborted) {
        return;
      }
      let raw_results_length = 0;
      // If the result of the ajax call (res) contains changes (res.results)
      if (res && res.results) {
        raw_results_length = res.results.length;
        results.last_seq = res.last_seq;
        let pending = null;
        let lastSeq = null;
        // Attach 'pending' property if server supports it (CouchDB 2.0+)
        /* istanbul ignore if */
        if (typeof res.pending === 'number') {
          pending = res.pending;
        }
        if (typeof results.last_seq === 'string' || typeof results.last_seq === 'number') {
          lastSeq = results.last_seq;
        }
        // For each change
        const req = {};
        req.query = opts.query_params;
        res.results = res.results.filter(function (c) {
          leftToFetch--;
          const ret = filterChange(opts)(c);
          if (ret) {
            if (opts.include_docs && opts.attachments && opts.binary) {
              readAttachmentsAsBlobOrBuffer(c);
            }
            if (opts.return_docs) {
              results.results.push(c);
            }
            opts.onChange(c, pending, lastSeq);
          }
          return ret;
        });
      } else if (err) {
        // In case of an error, stop listening for changes and call
        // opts.complete
        opts.aborted = true;
        opts.complete(err);
        return;
      }

      // The changes feed may have timed out with no results
      // if so reuse last update sequence
      if (res && res.last_seq) {
        lastFetchedSeq = res.last_seq;
      }

      const finished = (limit && leftToFetch <= 0) ||
        (res && raw_results_length < batchSize) ||
        (opts.descending);

      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {
        // Queue a call to fetch again with the newest sequence number
        nextTick(function () { fetchData(lastFetchedSeq, fetched); });
      } else {
        // We're done, call the callback
        opts.complete(null, results);
      }
    };

    fetchData(opts.since || 0, fetched);

    // Return a method to cancel this method from processing any more
    return {
      cancel: function () {
        opts.aborted = true;
        controller.abort();
      }
    };
  };

  // Given a set of document/revision IDs (given by req), tets the subset of
  // those that do NOT correspond to revisions stored in the database.
  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff
  api.revsDiff = adapterFun$$1('revsDiff', async function (req, opts, callback) {
    // If no options were given, set the callback to be the second parameter
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    try {
      // Get the missing document/revision IDs
      const result = await fetchJSON(genDBUrl(host, '_revs_diff'), {
        method: 'POST',
        body: JSON.stringify(req)
      });
      callback(null, result.data);
    } catch (error) {
      callback(error);
    }
  });

  api._close = function (callback) {
    callback();
  };

  api._destroy = async function (options, callback) {
    try {
      const json = await fetchJSON(genDBUrl(host, ''), {method: 'DELETE'});
      callback(null, json);
    } catch (error) {
      if (error.status === 404) {
        callback(null, {ok: true});
      } else {
        callback(error);
      }
    }
  };
}

// HttpPouch is a valid adapter.
HttpPouch.valid = function () {
  return true;
};

function HttpPouch$1 (PouchDB) {
  PouchDB.adapter('http', HttpPouch, false);
  PouchDB.adapter('https', HttpPouch, false);
}

class QueryParseError extends Error {
  constructor(message) {
    super();
    this.status = 400;
    this.name = 'query_parse_error';
    this.message = message;
    this.error = true;
    try {
      Error.captureStackTrace(this, QueryParseError);
    } catch (e) {}
  }
}

class NotFoundError extends Error {
  constructor(message) {
    super();
    this.status = 404;
    this.name = 'not_found';
    this.message = message;
    this.error = true;
    try {
      Error.captureStackTrace(this, NotFoundError);
    } catch (e) {}
  }
}

class BuiltInError extends Error {
  constructor(message) {
    super();
    this.status = 500;
    this.name = 'invalid_value';
    this.message = message;
    this.error = true;
    try {
      Error.captureStackTrace(this, BuiltInError);
    } catch (e) {}
  }
}

function promisedCallback(promise, callback) {
  if (callback) {
    promise.then(function (res) {
      nextTick(function () {
        callback(null, res);
      });
    }, function (reason) {
      nextTick(function () {
        callback(reason);
      });
    });
  }
  return promise;
}

function callbackify(fun) {
  return function (...args) {
    var cb = args.pop();
    var promise = fun.apply(this, args);
    if (typeof cb === 'function') {
      promisedCallback(promise, cb);
    }
    return promise;
  };
}

// Promise finally util similar to Q.finally
function fin(promise, finalPromiseFactory) {
  return promise.then(function (res) {
    return finalPromiseFactory().then(function () {
      return res;
    });
  }, function (reason) {
    return finalPromiseFactory().then(function () {
      throw reason;
    });
  });
}

function sequentialize(queue, promiseFactory) {
  return function () {
    var args = arguments;
    var that = this;
    return queue.add(function () {
      return promiseFactory.apply(that, args);
    });
  };
}

// uniq an array of strings, order not guaranteed
// similar to underscore/lodash _.uniq
function uniq(arr) {
  var theSet = new Set(arr);
  var result = new Array(theSet.size);
  var index = -1;
  theSet.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

function mapToKeysArray(map) {
  var result = new Array(map.size);
  var index = -1;
  map.forEach(function (value, key) {
    result[++index] = key;
  });
  return result;
}

function createBuiltInError(name) {
  var message = 'builtin ' + name +
    ' function requires map values to be numbers' +
    ' or number arrays';
  return new BuiltInError(message);
}

function sum(values) {
  var result = 0;
  for (var i = 0, len = values.length; i < len; i++) {
    var num = values[i];
    if (typeof num !== 'number') {
      if (Array.isArray(num)) {
        // lists of numbers are also allowed, sum them separately
        result = typeof result === 'number' ? [result] : result;
        for (var j = 0, jLen = num.length; j < jLen; j++) {
          var jNum = num[j];
          if (typeof jNum !== 'number') {
            throw createBuiltInError('_sum');
          } else if (typeof result[j] === 'undefined') {
            result.push(jNum);
          } else {
            result[j] += jNum;
          }
        }
      } else { // not array/number
        throw createBuiltInError('_sum');
      }
    } else if (typeof result === 'number') {
      result += num;
    } else { // add number to array
      result[0] += num;
    }
  }
  return result;
}

var log = guardedConsole.bind(null, 'log');
var isArray = Array.isArray;
var toJSON = JSON.parse;

function evalFunctionWithEval(func, emit) {
  return scopeEval(
    "return (" + func.replace(/;\s*$/, "") + ");",
    {
      emit,
      sum,
      log,
      isArray,
      toJSON
    }
  );
}

/*
 * Simple task queue to sequentialize actions. Assumes
 * callbacks will eventually fire (once).
 */

class TaskQueue$1 {
  constructor() {
    this.promise = Promise.resolve();
  }

  add(promiseFactory) {
    this.promise = this.promise
      // just recover
      .catch(() => { })
      .then(() => promiseFactory());
    return this.promise;
  }

  finish() {
    return this.promise;
  }
}

function stringify(input) {
  if (!input) {
    return 'undefined'; // backwards compat for empty reduce
  }
  // for backwards compat with mapreduce, functions/strings are stringified
  // as-is. everything else is JSON-stringified.
  switch (typeof input) {
    case 'function':
      // e.g. a mapreduce map
      return input.toString();
    case 'string':
      // e.g. a mapreduce built-in _reduce function
      return input.toString();
    default:
      // e.g. a JSON object in the case of mango queries
      return JSON.stringify(input);
  }
}

/* create a string signature for a view so we can cache it and uniq it */
function createViewSignature(mapFun, reduceFun) {
  // the "undefined" part is for backwards compatibility
  return stringify(mapFun) + stringify(reduceFun) + 'undefined';
}

async function createView(sourceDB, viewName, mapFun, reduceFun, temporary, localDocName) {
  const viewSignature = createViewSignature(mapFun, reduceFun);

  let cachedViews;
  if (!temporary) {
    // cache this to ensure we don't try to update the same view twice
    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};
    if (cachedViews[viewSignature]) {
      return cachedViews[viewSignature];
    }
  }

  const promiseForView = sourceDB.info().then(async function (info) {
    const depDbName = info.db_name + '-mrview-' +
    (temporary ? 'temp' : stringMd5(viewSignature));

    // save the view name in the source db so it can be cleaned up if necessary
    // (e.g. when the _design doc is deleted, remove all associated view data)
    function diffFunction(doc) {
      doc.views = doc.views || {};
      let fullViewName = viewName;
      if (fullViewName.indexOf('/') === -1) {
        fullViewName = viewName + '/' + viewName;
      }
      const depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};
      /* istanbul ignore if */
      if (depDbs[depDbName]) {
        return; // no update necessary
      }
      depDbs[depDbName] = true;
      return doc;
    }
    await upsert(sourceDB, '_local/' + localDocName, diffFunction);
    const res = await sourceDB.registerDependentDatabase(depDbName);
    const db = res.db;
    db.auto_compaction = true;
    const view = {
      name: depDbName,
      db,
      sourceDB,
      adapter: sourceDB.adapter,
      mapFun,
      reduceFun
    };

    let lastSeqDoc;
    try {
      lastSeqDoc = await view.db.get('_local/lastSeq');
    } catch (err) {
        /* istanbul ignore if */
      if (err.status !== 404) {
        throw err;
      }
    }

    view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;
    if (cachedViews) {
      view.db.once('destroyed', function () {
        delete cachedViews[viewSignature];
      });
    }
    return view;
  });

  if (cachedViews) {
    cachedViews[viewSignature] = promiseForView;
  }
  return promiseForView;
}

const persistentQueues = {};
const tempViewQueue = new TaskQueue$1();
const CHANGES_BATCH_SIZE$1 = 50;

function parseViewName(name) {
  // can be either 'ddocname/viewname' or just 'viewname'
  // (where the ddoc name is the same)
  return name.indexOf('/') === -1 ? [name, name] : name.split('/');
}

function isGenOne(changes) {
  // only return true if the current change is 1-
  // and there are no other leafs
  return changes.length === 1 && /^1-/.test(changes[0].rev);
}

function emitError(db, e, data) {
  try {
    db.emit('error', e);
  } catch (err) {
    guardedConsole('error',
      'The user\'s map/reduce function threw an uncaught error.\n' +
      'You can debug this error by doing:\n' +
      'myDatabase.on(\'error\', function (err) { debugger; });\n' +
      'Please double-check your map/reduce function.');
    guardedConsole('error', e, data);
  }
}

/**
 * Returns an "abstract" mapreduce object of the form:
 *
 *   {
 *     query: queryFun,
 *     viewCleanup: viewCleanupFun
 *   }
 *
 * Arguments are:
 *
 * localDoc: string
 *   This is for the local doc that gets saved in order to track the
 *   "dependent" DBs and clean them up for viewCleanup. It should be
 *   unique, so that indexer plugins don't collide with each other.
 * mapper: function (mapFunDef, emit)
 *   Returns a map function based on the mapFunDef, which in the case of
 *   normal map/reduce is just the de-stringified function, but may be
 *   something else, such as an object in the case of pouchdb-find.
 * reducer: function (reduceFunDef)
 *   Ditto, but for reducing. Modules don't have to support reducing
 *   (e.g. pouchdb-find).
 * ddocValidator: function (ddoc, viewName)
 *   Throws an error if the ddoc or viewName is not valid.
 *   This could be a way to communicate to the user that the configuration for the
 *   indexer is invalid.
 */
function createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator) {

  function tryMap(db, fun, doc) {
    // emit an event if there was an error thrown by a map function.
    // putting try/catches in a single function also avoids deoptimizations.
    try {
      fun(doc);
    } catch (e) {
      emitError(db, e, {fun, doc});
    }
  }

  function tryReduce(db, fun, keys, values, rereduce) {
    // same as above, but returning the result or an error. there are two separate
    // functions to avoid extra memory allocations since the tryCode() case is used
    // for custom map functions (common) vs this function, which is only used for
    // custom reduce functions (rare)
    try {
      return {output : fun(keys, values, rereduce)};
    } catch (e) {
      emitError(db, e, {fun, keys, values, rereduce});
      return {error: e};
    }
  }

  function sortByKeyThenValue(x, y) {
    const keyCompare = collate(x.key, y.key);
    return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);
  }

  function sliceResults(results, limit, skip) {
    skip = skip || 0;
    if (typeof limit === 'number') {
      return results.slice(skip, limit + skip);
    } else if (skip > 0) {
      return results.slice(skip);
    }
    return results;
  }

  function rowToDocId(row) {
    const val = row.value;
    // Users can explicitly specify a joined doc _id, or it
    // defaults to the doc _id that emitted the key/value.
    const docId = (val && typeof val === 'object' && val._id) || row.id;
    return docId;
  }

  function readAttachmentsAsBlobOrBuffer(res) {
    for (const row of res.rows) {
      const atts = row.doc && row.doc._attachments;
      if (!atts) {
        continue;
      }
      for (const filename of Object.keys(atts)) {
        const att = atts[filename];
        atts[filename].data = b64ToBluffer(att.data, att.content_type);
      }
    }
  }

  function postprocessAttachments(opts) {
    return function (res) {
      if (opts.include_docs && opts.attachments && opts.binary) {
        readAttachmentsAsBlobOrBuffer(res);
      }
      return res;
    };
  }

  function addHttpParam(paramName, opts, params, asJson) {
    // add an http param from opts to params, optionally json-encoded
    let val = opts[paramName];
    if (typeof val !== 'undefined') {
      if (asJson) {
        val = encodeURIComponent(JSON.stringify(val));
      }
      params.push(paramName + '=' + val);
    }
  }

  function coerceInteger(integerCandidate) {
    if (typeof integerCandidate !== 'undefined') {
      const asNumber = Number(integerCandidate);
      // prevents e.g. '1foo' or '1.1' being coerced to 1
      if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {
        return asNumber;
      } else {
        return integerCandidate;
      }
    }
  }

  function coerceOptions(opts) {
    opts.group_level = coerceInteger(opts.group_level);
    opts.limit = coerceInteger(opts.limit);
    opts.skip = coerceInteger(opts.skip);
    return opts;
  }

  function checkPositiveInteger(number) {
    if (number) {
      if (typeof number !== 'number') {
        return  new QueryParseError(`Invalid value for integer: "${number}"`);
      }
      if (number < 0) {
        return new QueryParseError(`Invalid value for positive integer: "${number}"`);
      }
    }
  }

  function checkQueryParseError(options, fun) {
    const startkeyName = options.descending ? 'endkey' : 'startkey';
    const endkeyName = options.descending ? 'startkey' : 'endkey';

    if (typeof options[startkeyName] !== 'undefined' &&
      typeof options[endkeyName] !== 'undefined' &&
      collate(options[startkeyName], options[endkeyName]) > 0) {
      throw new QueryParseError('No rows can match your key range, ' +
        'reverse your start_key and end_key or set {descending : true}');
    } else if (fun.reduce && options.reduce !== false) {
      if (options.include_docs) {
        throw new QueryParseError('{include_docs:true} is invalid for reduce');
      } else if (options.keys && options.keys.length > 1 &&
        !options.group && !options.group_level) {
        throw new QueryParseError('Multi-key fetches for reduce views must use ' +
          '{group: true}');
      }
    }
    for (const optionName of ['group_level', 'limit', 'skip']) {
      const error = checkPositiveInteger(options[optionName]);
      if (error) {
        throw error;
      }
    }
  }

  async function httpQuery(db, fun, opts) {
    // List of parameters to add to the PUT request
    let params = [];
    let body;
    let method = 'GET';
    let ok;

    // If opts.reduce exists and is defined, then add it to the list
    // of parameters.
    // If reduce=false then the results are that of only the map function
    // not the final result of map and reduce.
    addHttpParam('reduce', opts, params);
    addHttpParam('include_docs', opts, params);
    addHttpParam('attachments', opts, params);
    addHttpParam('limit', opts, params);
    addHttpParam('descending', opts, params);
    addHttpParam('group', opts, params);
    addHttpParam('group_level', opts, params);
    addHttpParam('skip', opts, params);
    addHttpParam('stale', opts, params);
    addHttpParam('conflicts', opts, params);
    addHttpParam('startkey', opts, params, true);
    addHttpParam('start_key', opts, params, true);
    addHttpParam('endkey', opts, params, true);
    addHttpParam('end_key', opts, params, true);
    addHttpParam('inclusive_end', opts, params);
    addHttpParam('key', opts, params, true);
    addHttpParam('update_seq', opts, params);

    // Format the list of parameters into a valid URI query string
    params = params.join('&');
    params = params === '' ? '' : '?' + params;

    // If keys are supplied, issue a POST to circumvent GET query string limits
    // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options
    if (typeof opts.keys !== 'undefined') {
      const MAX_URL_LENGTH = 2000;
      // according to http://stackoverflow.com/a/417184/680742,
      // the de facto URL length limit is 2000 characters

      const keysAsString = `keys=${encodeURIComponent(JSON.stringify(opts.keys))}`;
      if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {
        // If the keys are short enough, do a GET. we do this to work around
        // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)
        params += (params[0] === '?' ? '&' : '?') + keysAsString;
      } else {
        method = 'POST';
        if (typeof fun === 'string') {
          body = {keys: opts.keys};
        } else { // fun is {map : mapfun}, so append to this
          fun.keys = opts.keys;
        }
      }
    }

    // We are referencing a query defined in the design doc
    if (typeof fun === 'string') {
      const parts = parseViewName(fun);

      const response = await db.fetch('_design/' + parts[0] + '/_view/' + parts[1] + params, {
        headers: new h({'Content-Type': 'application/json'}),
        method,
        body: JSON.stringify(body)
      });
      ok = response.ok;
      // status = response.status;
      const result = await response.json();

      if (!ok) {
        result.status = response.status;
        throw generateErrorFromResponse(result);
      }

      // fail the entire request if the result contains an error
      for (const row of result.rows) {
        /* istanbul ignore if */
        if (row.value && row.value.error && row.value.error === "builtin_reduce_error") {
          throw new Error(row.reason);
        }
      }

      return new Promise(function (resolve) {
        resolve(result);
      }).then(postprocessAttachments(opts));
    }

    // We are using a temporary view, terrible for performance, good for testing
    body = body || {};
    for (const key of Object.keys(fun)) {
      if (Array.isArray(fun[key])) {
        body[key] = fun[key];
      } else {
        body[key] = fun[key].toString();
      }
    }

    const response = await db.fetch('_temp_view' + params, {
      headers: new h({'Content-Type': 'application/json'}),
      method: 'POST',
      body: JSON.stringify(body)
    });

    ok = response.ok;
    // status = response.status;
    const result = await response.json();
    if (!ok) {
      result.status = response.status;
      throw generateErrorFromResponse(result);
    }

    return new Promise(function (resolve) {
      resolve(result);
    }).then(postprocessAttachments(opts));
  }

  // custom adapters can define their own api._query
  // and override the default behavior
  /* istanbul ignore next */
  function customQuery(db, fun, opts) {
    return new Promise(function (resolve, reject) {
      db._query(fun, opts, function (err, res) {
        if (err) {
          return reject(err);
        }
        resolve(res);
      });
    });
  }

  // custom adapters can define their own api._viewCleanup
  // and override the default behavior
  /* istanbul ignore next */
  function customViewCleanup(db) {
    return new Promise(function (resolve, reject) {
      db._viewCleanup(function (err, res) {
        if (err) {
          return reject(err);
        }
        resolve(res);
      });
    });
  }

  function defaultsTo(value) {
    return function (reason) {
      /* istanbul ignore else */
      if (reason.status === 404) {
        return value;
      } else {
        throw reason;
      }
    };
  }

  // returns a promise for a list of docs to update, based on the input docId.
  // the order doesn't matter, because post-3.2.0, bulkDocs
  // is an atomic operation in all three adapters.
  async function getDocsToPersist(docId, view, docIdsToChangesAndEmits) {
    const metaDocId = '_local/doc_' + docId;
    const defaultMetaDoc = {_id: metaDocId, keys: []};
    const docData = docIdsToChangesAndEmits.get(docId);
    const indexableKeysToKeyValues = docData[0];
    const changes = docData[1];

    function getMetaDoc() {
      if (isGenOne(changes)) {
        // generation 1, so we can safely assume initial state
        // for performance reasons (avoids unnecessary GETs)
        return Promise.resolve(defaultMetaDoc);
      }
      return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));
    }

    function getKeyValueDocs(metaDoc) {
      if (!metaDoc.keys.length) {
        // no keys, no need for a lookup
        return Promise.resolve({rows: []});
      }
      return view.db.allDocs({
        keys: metaDoc.keys,
        include_docs: true
      });
    }

    function processKeyValueDocs(metaDoc, kvDocsRes) {
      const kvDocs = [];
      const oldKeys = new Set();

      for (const row of kvDocsRes.rows) {
        const doc = row.doc;
        if (!doc) { // deleted
          continue;
        }
        kvDocs.push(doc);
        oldKeys.add(doc._id);
        doc._deleted = !indexableKeysToKeyValues.has(doc._id);
        if (!doc._deleted) {
          const keyValue = indexableKeysToKeyValues.get(doc._id);
          if ('value' in keyValue) {
            doc.value = keyValue.value;
          }
        }
      }
      const newKeys = mapToKeysArray(indexableKeysToKeyValues);
      for (const key of newKeys) {
        if (!oldKeys.has(key)) {
          // new doc
          const kvDoc = {
            _id: key
          };
          const keyValue = indexableKeysToKeyValues.get(key);
          if ('value' in keyValue) {
            kvDoc.value = keyValue.value;
          }
          kvDocs.push(kvDoc);
        }
      }
      metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));
      kvDocs.push(metaDoc);

      return kvDocs;
    }

    const metaDoc = await getMetaDoc();
    const keyValueDocs = await getKeyValueDocs(metaDoc);
    return processKeyValueDocs(metaDoc, keyValueDocs);
  }

  function updatePurgeSeq(view) {
    // with this approach, we just assume to have processed all missing purges and write the latest
    // purgeSeq into the _local/purgeSeq doc.
    return view.sourceDB.get('_local/purges').then(function (res) {
      const purgeSeq = res.purgeSeq;
      return view.db.get('_local/purgeSeq').then(function (res) {
        return res._rev;
      })
      .catch(defaultsTo(undefined))
      .then(function (rev$$1) {
        return view.db.put({
          _id: '_local/purgeSeq',
          _rev: rev$$1,
          purgeSeq,
        });
      });
    }).catch(function (err) {
      if (err.status !== 404) {
        throw err;
      }
    });
  }

  // updates all emitted key/value docs and metaDocs in the mrview database
  // for the given batch of documents from the source database
  function saveKeyValues(view, docIdsToChangesAndEmits, seq) {
    var seqDocId = '_local/lastSeq';
    return view.db.get(seqDocId)
      .catch(defaultsTo({_id: seqDocId, seq: 0}))
      .then(function (lastSeqDoc) {
        var docIds = mapToKeysArray(docIdsToChangesAndEmits);
        return Promise.all(docIds.map(function (docId) {
          return getDocsToPersist(docId, view, docIdsToChangesAndEmits);
        })).then(function (listOfDocsToPersist) {
          var docsToPersist = listOfDocsToPersist.flat();
          lastSeqDoc.seq = seq;
          docsToPersist.push(lastSeqDoc);
          // write all docs in a single operation, update the seq once
          return view.db.bulkDocs({docs : docsToPersist});
        })
          // TODO: this should be placed somewhere else, probably? we're querying both docs twice
          //   (first time when getting the actual purges).
          .then(() => updatePurgeSeq(view));
      });
  }

  function getQueue(view) {
    const viewName = typeof view === 'string' ? view : view.name;
    let queue = persistentQueues[viewName];
    if (!queue) {
      queue = persistentQueues[viewName] = new TaskQueue$1();
    }
    return queue;
  }

  async function updateView(view, opts) {
    return sequentialize(getQueue(view), function () {
      return updateViewInQueue(view, opts);
    })();
  }

  async function updateViewInQueue(view, opts) {
    // bind the emit function once
    let mapResults;
    let doc;
    let taskId;

    function emit(key, value) {
      const output = {id: doc._id, key: normalizeKey(key)};
      // Don't explicitly store the value unless it's defined and non-null.
      // This saves on storage space, because often people don't use it.
      if (typeof value !== 'undefined' && value !== null) {
        output.value = normalizeKey(value);
      }
      mapResults.push(output);
    }

    const mapFun = mapper(view.mapFun, emit);

    let currentSeq = view.seq || 0;

    function createTask() {
      return view.sourceDB.info().then(function (info) {
        taskId = view.sourceDB.activeTasks.add({
          name: 'view_indexing',
          total_items: info.update_seq - currentSeq,
        });
      });
    }

    function processChange(docIdsToChangesAndEmits, seq) {
      return function () {
        return saveKeyValues(view, docIdsToChangesAndEmits, seq);
      };
    }

    let indexed_docs = 0;
    const progress = {
      view: view.name,
      indexed_docs
    };
    view.sourceDB.emit('indexing', progress);

    const queue = new TaskQueue$1();

    async function processNextBatch() {
      const response = await view.sourceDB.changes({
        return_docs: true,
        conflicts: true,
        include_docs: true,
        style: 'all_docs',
        since: currentSeq,
        limit: opts.changes_batch_size
      });
      const purges = await getRecentPurges();
      return processBatch(response, purges);
    }

    function getRecentPurges() {
      return view.db.get('_local/purgeSeq').then(function (res) {
        return res.purgeSeq;
      })
      .catch(defaultsTo(-1))
      .then(function (purgeSeq) {
        return view.sourceDB.get('_local/purges').then(function (res) {
          const recentPurges = res.purges.filter(function (purge, index) {
            return index > purgeSeq;
          }).map((purge) => purge.docId);

          const uniquePurges = recentPurges.filter(function (docId, index) {
            return recentPurges.indexOf(docId) === index;
          });

          return Promise.all(uniquePurges.map(function (docId) {
            return view.sourceDB.get(docId).then(function (doc) {
              return { docId, doc };
            })
            .catch(defaultsTo({ docId }));
          }));
        })
        .catch(defaultsTo([]));
      });
    }

    function processBatch(response, purges) {
      const results = response.results;
      if (!results.length && !purges.length) {
        return;
      }

      for (const purge of purges) {
        const index = results.findIndex(function (change) {
          return change.id === purge.docId;
        });
        if (index < 0) {
          // mimic a db.remove() on the changes feed
          const entry = {
            _id: purge.docId,
            doc: {
              _id: purge.docId,
              _deleted: 1,
            },
            changes: [],
          };

          if (purge.doc) {
            // update with new winning rev after purge
            entry.doc = purge.doc;
            entry.changes.push({ rev: purge.doc._rev });
          }

          results.push(entry);
        }
      }

      const docIdsToChangesAndEmits = createDocIdsToChangesAndEmits(results);

      queue.add(processChange(docIdsToChangesAndEmits, currentSeq));

      indexed_docs = indexed_docs + results.length;
      const progress = {
        view: view.name,
        last_seq: response.last_seq,
        results_count: results.length,
        indexed_docs
      };
      view.sourceDB.emit('indexing', progress);
      view.sourceDB.activeTasks.update(taskId, {completed_items: indexed_docs});

      if (results.length < opts.changes_batch_size) {
        return;
      }
      return processNextBatch();
    }

    function createDocIdsToChangesAndEmits(results) {
      const docIdsToChangesAndEmits = new Map();
      for (const change of results) {
        if (change.doc._id[0] !== '_') {
          mapResults = [];
          doc = change.doc;

          if (!doc._deleted) {
            tryMap(view.sourceDB, mapFun, doc);
          }
          mapResults.sort(sortByKeyThenValue);

          const indexableKeysToKeyValues = createIndexableKeysToKeyValues(mapResults);
          docIdsToChangesAndEmits.set(change.doc._id, [
            indexableKeysToKeyValues,
            change.changes
          ]);
        }
        currentSeq = change.seq;
      }
      return docIdsToChangesAndEmits;
    }

    function createIndexableKeysToKeyValues(mapResults) {
      const indexableKeysToKeyValues = new Map();
      let lastKey;
      for (let i = 0, len = mapResults.length; i < len; i++) {
        const emittedKeyValue = mapResults[i];
        const complexKey = [emittedKeyValue.key, emittedKeyValue.id];
        if (i > 0 && collate(emittedKeyValue.key, lastKey) === 0) {
          complexKey.push(i); // dup key+id, so make it unique
        }
        indexableKeysToKeyValues.set(toIndexableString(complexKey), emittedKeyValue);
        lastKey = emittedKeyValue.key;
      }
      return indexableKeysToKeyValues;
    }

    try {
      await createTask();
      await processNextBatch();
      await queue.finish();
      view.seq = currentSeq;
      view.sourceDB.activeTasks.remove(taskId);
    } catch (error) {
      view.sourceDB.activeTasks.remove(taskId, error);
    }
  }

  function reduceView(view, results, options) {
    if (options.group_level === 0) {
      delete options.group_level;
    }

    const shouldGroup = options.group || options.group_level;
    const reduceFun = reducer(view.reduceFun);
    const groups = [];
    const lvl = isNaN(options.group_level)
      ? Number.POSITIVE_INFINITY
      : options.group_level;

    for (const result of results) {
      const last = groups[groups.length - 1];
      let groupKey = shouldGroup ? result.key : null;

      // only set group_level for array keys
      if (shouldGroup && Array.isArray(groupKey)) {
        groupKey = groupKey.slice(0, lvl);
      }

      if (last && collate(last.groupKey, groupKey) === 0) {
        last.keys.push([result.key, result.id]);
        last.values.push(result.value);
        continue;
      }
      groups.push({
        keys: [[result.key, result.id]],
        values: [result.value],
        groupKey
      });
    }

    results = [];
    for (const group of groups) {
      const reduceTry = tryReduce(view.sourceDB, reduceFun, group.keys, group.values, false);
      if (reduceTry.error && reduceTry.error instanceof BuiltInError) {
        // CouchDB returns an error if a built-in errors out
        throw reduceTry.error;
      }
      results.push({
        // CouchDB just sets the value to null if a non-built-in errors out
        value: reduceTry.error ? null : reduceTry.output,
        key: group.groupKey
      });
    }
    // no total_rows/offset when reducing
    return { rows: sliceResults(results, options.limit, options.skip) };
  }

  function queryView(view, opts) {
    return sequentialize(getQueue(view), function () {
      return queryViewInQueue(view, opts);
    })();
  }

  async function queryViewInQueue(view, opts) {
    let totalRows;
    const shouldReduce = view.reduceFun && opts.reduce !== false;
    const skip = opts.skip || 0;
    if (typeof opts.keys !== 'undefined' && !opts.keys.length) {
      // equivalent query
      opts.limit = 0;
      delete opts.keys;
    }

    async function fetchFromView(viewOpts) {
      viewOpts.include_docs = true;
      const res = await view.db.allDocs(viewOpts);
      totalRows = res.total_rows;

      return res.rows.map(function (result) {
        // implicit migration - in older versions of PouchDB,
        // we explicitly stored the doc as {id: ..., key: ..., value: ...}
        // this is tested in a migration test
        /* istanbul ignore next */
        if ('value' in result.doc && typeof result.doc.value === 'object' &&
          result.doc.value !== null) {
          const keys = Object.keys(result.doc.value).sort();
          // this detection method is not perfect, but it's unlikely the user
          // emitted a value which was an object with these 3 exact keys
          const expectedKeys = ['id', 'key', 'value'];
          if (!(keys < expectedKeys || keys > expectedKeys)) {
            return result.doc.value;
          }
        }

        const parsedKeyAndDocId = parseIndexableString(result.doc._id);
        return {
          key: parsedKeyAndDocId[0],
          id: parsedKeyAndDocId[1],
          value: ('value' in result.doc ? result.doc.value : null)
        };
      });
    }

    async function onMapResultsReady(rows) {
      let finalResults;
      if (shouldReduce) {
        finalResults = reduceView(view, rows, opts);
      } else if (typeof opts.keys === 'undefined') {
        finalResults = {
          total_rows: totalRows,
          offset: skip,
          rows
        };
      } else {
        // support limit, skip for keys query
        finalResults = {
          total_rows: totalRows,
          offset: skip,
          rows: sliceResults(rows,opts.limit,opts.skip)
        };
      }
      /* istanbul ignore if */
      if (opts.update_seq) {
        finalResults.update_seq = view.seq;
      }
      if (opts.include_docs) {
        const docIds = uniq(rows.map(rowToDocId));

        const allDocsRes = await view.sourceDB.allDocs({
          keys: docIds,
          include_docs: true,
          conflicts: opts.conflicts,
          attachments: opts.attachments,
          binary: opts.binary
        });
        const docIdsToDocs = new Map();
        for (const row of allDocsRes.rows) {
          docIdsToDocs.set(row.id, row.doc);
        }
        for (const row of rows) {
          const docId = rowToDocId(row);
          const doc = docIdsToDocs.get(docId);
          if (doc) {
            row.doc = doc;
          }
        }
      }
      return finalResults;
    }

    if (typeof opts.keys !== 'undefined') {
      const keys = opts.keys;
      const fetchPromises = keys.map(function (key) {
        const viewOpts = {
          startkey : toIndexableString([key]),
          endkey   : toIndexableString([key, {}])
        };
        /* istanbul ignore if */
        if (opts.update_seq) {
          viewOpts.update_seq = true;
        }
        return fetchFromView(viewOpts);
      });
      const result = await Promise.all(fetchPromises);
      const flattenedResult = result.flat();
      return onMapResultsReady(flattenedResult);
    } else { // normal query, no 'keys'
      const viewOpts = {
        descending : opts.descending
      };
      /* istanbul ignore if */
      if (opts.update_seq) {
        viewOpts.update_seq = true;
      }
      let startkey;
      let endkey;
      if ('start_key' in opts) {
        startkey = opts.start_key;
      }
      if ('startkey' in opts) {
        startkey = opts.startkey;
      }
      if ('end_key' in opts) {
        endkey = opts.end_key;
      }
      if ('endkey' in opts) {
        endkey = opts.endkey;
      }
      if (typeof startkey !== 'undefined') {
        viewOpts.startkey = opts.descending ?
          toIndexableString([startkey, {}]) :
          toIndexableString([startkey]);
      }
      if (typeof endkey !== 'undefined') {
        let inclusiveEnd = opts.inclusive_end !== false;
        if (opts.descending) {
          inclusiveEnd = !inclusiveEnd;
        }

        viewOpts.endkey = toIndexableString(
          inclusiveEnd ? [endkey, {}] : [endkey]);
      }
      if (typeof opts.key !== 'undefined') {
        const keyStart = toIndexableString([opts.key]);
        const keyEnd = toIndexableString([opts.key, {}]);
        if (viewOpts.descending) {
          viewOpts.endkey = keyStart;
          viewOpts.startkey = keyEnd;
        } else {
          viewOpts.startkey = keyStart;
          viewOpts.endkey = keyEnd;
        }
      }
      if (!shouldReduce) {
        if (typeof opts.limit === 'number') {
          viewOpts.limit = opts.limit;
        }
        viewOpts.skip = skip;
      }

      const result = await fetchFromView(viewOpts);
      return onMapResultsReady(result);
    }
  }

  async function httpViewCleanup(db) {
    const response = await db.fetch('_view_cleanup', {
      headers: new h({'Content-Type': 'application/json'}),
      method: 'POST'
    });
    return response.json();
  }

  async function localViewCleanup(db) {
    try {
      const metaDoc = await db.get('_local/' + localDocName);
      const docsToViews = new Map();

      for (const fullViewName of Object.keys(metaDoc.views)) {
        const parts = parseViewName(fullViewName);
        const designDocName = '_design/' + parts[0];
        const viewName = parts[1];
        let views = docsToViews.get(designDocName);
        if (!views) {
          views = new Set();
          docsToViews.set(designDocName, views);
        }
        views.add(viewName);
      }
      const opts = {
        keys : mapToKeysArray(docsToViews),
        include_docs : true
      };

      const res = await db.allDocs(opts);
      const viewsToStatus = {};
      for (const row of res.rows) {
        const ddocName = row.key.substring(8); // cuts off '_design/'
        for (const viewName of docsToViews.get(row.key)) {
          let fullViewName = ddocName + '/' + viewName;
          /* istanbul ignore if */
          if (!metaDoc.views[fullViewName]) {
            // new format, without slashes, to support PouchDB 2.2.0
            // migration test in pouchdb's browser.migration.js verifies this
            fullViewName = viewName;
          }
          const viewDBNames = Object.keys(metaDoc.views[fullViewName]);
          // design doc deleted, or view function nonexistent
          const statusIsGood = row.doc && row.doc.views &&
            row.doc.views[viewName];
          for (const viewDBName of viewDBNames) {
            viewsToStatus[viewDBName] = viewsToStatus[viewDBName] || statusIsGood;
          }
        }
      }

      const dbsToDelete = Object.keys(viewsToStatus)
        .filter(function (viewDBName) { return !viewsToStatus[viewDBName]; });

      const destroyPromises = dbsToDelete.map(function (viewDBName) {
        return sequentialize(getQueue(viewDBName), function () {
          return new db.constructor(viewDBName, db.__opts).destroy();
        })();
      });

      return Promise.all(destroyPromises).then(function () {
        return {ok: true};
      });
    } catch (err) {
      if (err.status === 404) {
        return {ok: true};
      } else {
        throw err;
      }
    }
  }

  async function queryPromised(db, fun, opts) {
    /* istanbul ignore next */
    if (typeof db._query === 'function') {
      return customQuery(db, fun, opts);
    }
    if (isRemote(db)) {
      return httpQuery(db, fun, opts);
    }

    const updateViewOpts = {
      changes_batch_size: db.__opts.view_update_changes_batch_size || CHANGES_BATCH_SIZE$1
    };

    if (typeof fun !== 'string') {
      // temp_view
      checkQueryParseError(opts, fun);

      tempViewQueue.add(async function () {
        const view = await createView(
          /* sourceDB */ db,
          /* viewName */ 'temp_view/temp_view',
          /* mapFun */ fun.map,
          /* reduceFun */ fun.reduce,
          /* temporary */ true,
          /* localDocName */ localDocName);

        return fin(updateView(view, updateViewOpts).then(
          function () { return queryView(view, opts); }),
          function () { return view.db.destroy(); }
        );
      });
      return tempViewQueue.finish();
    } else {
      // persistent view
      const fullViewName = fun;
      const parts = parseViewName(fullViewName);
      const designDocName = parts[0];
      const viewName = parts[1];

      const doc = await db.get('_design/' + designDocName);
      fun = doc.views && doc.views[viewName];

      if (!fun) {
        // basic validator; it's assumed that every subclass would want this
        throw new NotFoundError(`ddoc ${doc._id} has no view named ${viewName}`);
      }

      ddocValidator(doc, viewName);
      checkQueryParseError(opts, fun);

      const view = await createView(
        /* sourceDB */ db,
        /* viewName */ fullViewName,
        /* mapFun */ fun.map,
        /* reduceFun */ fun.reduce,
        /* temporary */ false,
        /* localDocName */ localDocName);

      if (opts.stale === 'ok' || opts.stale === 'update_after') {
        if (opts.stale === 'update_after') {
          nextTick(function () {
            updateView(view, updateViewOpts);
          });
        }
        return queryView(view, opts);
      } else { // stale not ok
        await updateView(view, updateViewOpts);
        return queryView(view, opts);
      }
    }
  }

  function abstractQuery(fun, opts, callback) {
    const db = this;
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = opts ? coerceOptions(opts) : {};

    if (typeof fun === 'function') {
      fun = {map : fun};
    }

    const promise = Promise.resolve().then(function () {
      return queryPromised(db, fun, opts);
    });
    promisedCallback(promise, callback);
    return promise;
  }

  const abstractViewCleanup = callbackify(function () {
    const db = this;
    /* istanbul ignore next */
    if (typeof db._viewCleanup === 'function') {
      return customViewCleanup(db);
    }
    if (isRemote(db)) {
      return httpViewCleanup(db);
    }
    return localViewCleanup(db);
  });

  return {
    query: abstractQuery,
    viewCleanup: abstractViewCleanup
  };
}

var builtInReduce = {
  _sum: function (keys, values) {
    return sum(values);
  },

  _count: function (keys, values) {
    return values.length;
  },

  _stats: function (keys, values) {
    // no need to implement rereduce=true, because Pouch
    // will never call it
    function sumsqr(values) {
      var _sumsqr = 0;
      for (var i = 0, len = values.length; i < len; i++) {
        var num = values[i];
        _sumsqr += (num * num);
      }
      return _sumsqr;
    }
    return {
      sum     : sum(values),
      min     : Math.min.apply(null, values),
      max     : Math.max.apply(null, values),
      count   : values.length,
      sumsqr : sumsqr(values)
    };
  }
};

function getBuiltIn(reduceFunString) {
  if (/^_sum/.test(reduceFunString)) {
    return builtInReduce._sum;
  } else if (/^_count/.test(reduceFunString)) {
    return builtInReduce._count;
  } else if (/^_stats/.test(reduceFunString)) {
    return builtInReduce._stats;
  } else if (/^_/.test(reduceFunString)) {
    throw new Error(reduceFunString + ' is not a supported reduce function.');
  }
}

function mapper(mapFun, emit) {
  // for temp_views one can use emit(doc, emit), see #38
  if (typeof mapFun === "function" && mapFun.length === 2) {
    var origMap = mapFun;
    return function (doc) {
      return origMap(doc, emit);
    };
  } else {
    return evalFunctionWithEval(mapFun.toString(), emit);
  }
}

function reducer(reduceFun) {
  var reduceFunString = reduceFun.toString();
  var builtIn = getBuiltIn(reduceFunString);
  if (builtIn) {
    return builtIn;
  } else {
    return evalFunctionWithEval(reduceFunString);
  }
}

function ddocValidator(ddoc, viewName) {
  var fun = ddoc.views && ddoc.views[viewName];
  if (typeof fun.map !== 'string') {
    throw new NotFoundError('ddoc ' + ddoc._id + ' has no string view named ' +
      viewName + ', instead found object of type: ' + typeof fun.map);
  }
}

var localDocName = 'mrviews';
var abstract = createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator);

function query(fun, opts, callback) {
  return abstract.query.call(this, fun, opts, callback);
}

function viewCleanup(callback) {
  return abstract.viewCleanup.call(this, callback);
}

var mapreduce = {
  query,
  viewCleanup
};

function fileHasChanged(localDoc, remoteDoc, filename) {
  return !localDoc._attachments ||
         !localDoc._attachments[filename] ||
         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;
}

function getDocAttachments(db, doc) {
  var filenames = Object.keys(doc._attachments);
  return Promise.all(filenames.map(function (filename) {
    return db.getAttachment(doc._id, filename, {rev: doc._rev});
  }));
}

function getDocAttachmentsFromTargetOrSource(target, src, doc) {
  var doCheckForLocalAttachments = isRemote(src) && !isRemote(target);
  var filenames = Object.keys(doc._attachments);

  if (!doCheckForLocalAttachments) {
    return getDocAttachments(src, doc);
  }

  return target.get(doc._id).then(function (localDoc) {
    return Promise.all(filenames.map(function (filename) {
      if (fileHasChanged(localDoc, doc, filename)) {
        return src.getAttachment(doc._id, filename);
      }

      return target.getAttachment(localDoc._id, filename);
    }));
  }).catch(function (error) {
    /* istanbul ignore if */
    if (error.status !== 404) {
      throw error;
    }

    return getDocAttachments(src, doc);
  });
}

function createBulkGetOpts(diffs) {
  var requests = [];
  Object.keys(diffs).forEach(function (id) {
    var missingRevs = diffs[id].missing;
    missingRevs.forEach(function (missingRev) {
      requests.push({
        id,
        rev: missingRev
      });
    });
  });

  return {
    docs: requests,
    revs: true,
    latest: true
  };
}

//
// Fetch all the documents from the src as described in the "diffs",
// which is a mapping of docs IDs to revisions. If the state ever
// changes to "cancelled", then the returned promise will be rejected.
// Else it will be resolved with a list of fetched documents.
//
function getDocs(src, target, diffs, state) {
  diffs = clone(diffs); // we do not need to modify this

  var resultDocs = [],
      ok = true;

  function getAllDocs() {

    var bulkGetOpts = createBulkGetOpts(diffs);

    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests
      return;
    }

    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {
      /* istanbul ignore if */
      if (state.cancelled) {
        throw new Error('cancelled');
      }
      return Promise.all(bulkGetResponse.results.map(function (bulkGetInfo) {
        return Promise.all(bulkGetInfo.docs.map(function (doc) {
          var remoteDoc = doc.ok;

          if (doc.error) {
            // when AUTO_COMPACTION is set, docs can be returned which look
            // like this: {"missing":"1-7c3ac256b693c462af8442f992b83696"}
            ok = false;
          }

          if (!remoteDoc || !remoteDoc._attachments) {
            return remoteDoc;
          }

          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc).then((attachments) => {
            var filenames = Object.keys(remoteDoc._attachments);
            attachments.forEach(function (attachment, i) {
              var att = remoteDoc._attachments[filenames[i]];
              delete att.stub;
              delete att.length;
              att.data = attachment;
            });

            return remoteDoc;
          });
        }));
      }))

      .then(function (results) {
        resultDocs = resultDocs.concat(results.flat().filter(Boolean));
      });
    });
  }

  function returnResult() {
    return { ok, docs:resultDocs };
  }

  return Promise.resolve()
    .then(getAllDocs)
    .then(returnResult);
}

var CHECKPOINT_VERSION = 1;
var REPLICATOR = "pouchdb";
// This is an arbitrary number to limit the
// amount of replication history we save in the checkpoint.
// If we save too much, the checkpoint docs will become very big,
// if we save fewer, we'll run a greater risk of having to
// read all the changes from 0 when checkpoint PUTs fail
// CouchDB 2.0 has a more involved history pruning,
// but let's go for the simple version for now.
var CHECKPOINT_HISTORY_SIZE = 5;
var LOWEST_SEQ = 0;

function updateCheckpoint(db, id, checkpoint, session, returnValue) {
  return db.get(id).catch(function (err) {
    if (err.status === 404) {
      if (db.adapter === 'http' || db.adapter === 'https') {
        explainError(
          404, 'PouchDB is just checking if a remote checkpoint exists.'
        );
      }
      return {
        session_id: session,
        _id: id,
        history: [],
        replicator: REPLICATOR,
        version: CHECKPOINT_VERSION
      };
    }
    throw err;
  }).then(function (doc) {
    if (returnValue.cancelled) {
      return;
    }

    // if the checkpoint has not changed, do not update
    if (doc.last_seq === checkpoint) {
      return;
    }

    // Filter out current entry for this replication
    doc.history = (doc.history || []).filter(function (item) {
      return item.session_id !== session;
    });

    // Add the latest checkpoint to history
    doc.history.unshift({
      last_seq: checkpoint,
      session_id: session
    });

    // Just take the last pieces in history, to
    // avoid really big checkpoint docs.
    // see comment on history size above
    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);

    doc.version = CHECKPOINT_VERSION;
    doc.replicator = REPLICATOR;

    doc.session_id = session;
    doc.last_seq = checkpoint;

    return db.put(doc).catch(function (err) {
      if (err.status === 409) {
        // retry; someone is trying to write a checkpoint simultaneously
        return updateCheckpoint(db, id, checkpoint, session, returnValue);
      }
      throw err;
    });
  });
}

class CheckpointerInternal {
  constructor(src, target, id, returnValue, opts = {
    writeSourceCheckpoint: true,
    writeTargetCheckpoint: true,
  }) {
    this.src = src;
    this.target = target;
    this.id = id;
    this.returnValue = returnValue;
    this.opts = opts;

    if (typeof opts.writeSourceCheckpoint === "undefined") {
      opts.writeSourceCheckpoint = true;
    }

    if (typeof opts.writeTargetCheckpoint === "undefined") {
      opts.writeTargetCheckpoint = true;
    }
  }

  writeCheckpoint(checkpoint, session) {
    var self = this;
    return this.updateTarget(checkpoint, session).then(function () {
      return self.updateSource(checkpoint, session);
    });
  }

  updateTarget(checkpoint, session) {
    if (this.opts.writeTargetCheckpoint) {
      return updateCheckpoint(this.target, this.id, checkpoint,
        session, this.returnValue);
    } else {
      return Promise.resolve(true);
    }
  }

  updateSource(checkpoint, session) {
    if (this.opts.writeSourceCheckpoint) {
      var self = this;
      return updateCheckpoint(this.src, this.id, checkpoint,
        session, this.returnValue)
        .catch(function (err) {
          if (isForbiddenError(err)) {
            self.opts.writeSourceCheckpoint = false;
            return true;
          }
          throw err;
        });
    } else {
      return Promise.resolve(true);
    }
  }

  getCheckpoint() {
    var self = this;

    if (!self.opts.writeSourceCheckpoint && !self.opts.writeTargetCheckpoint) {
      return Promise.resolve(LOWEST_SEQ);
    }

    if (self.opts && self.opts.writeSourceCheckpoint && !self.opts.writeTargetCheckpoint) {
      return self.src.get(self.id).then(function (sourceDoc) {
        return sourceDoc.last_seq || LOWEST_SEQ;
      }).catch(function (err) {
        /* istanbul ignore if */
        if (err.status !== 404) {
          throw err;
        }
        return LOWEST_SEQ;
      });
    }

    return self.target.get(self.id).then(function (targetDoc) {
      if (self.opts && self.opts.writeTargetCheckpoint && !self.opts.writeSourceCheckpoint) {
        return targetDoc.last_seq || LOWEST_SEQ;
      }

      return self.src.get(self.id).then(function (sourceDoc) {
        // Since we can't migrate an old version doc to a new one
        // (no session id), we just go with the lowest seq in this case
        /* istanbul ignore if */
        if (targetDoc.version !== sourceDoc.version) {
          return LOWEST_SEQ;
        }

        var version;
        if (targetDoc.version) {
          version = targetDoc.version.toString();
        } else {
          version = "undefined";
        }

        if (version in comparisons) {
          return comparisons[version](targetDoc, sourceDoc);
        }
        /* istanbul ignore next */
        return LOWEST_SEQ;
      }, function (err) {
        if (err.status === 404 && targetDoc.last_seq) {
          return self.src.put({
            _id: self.id,
            last_seq: LOWEST_SEQ
          }).then(function () {
            return LOWEST_SEQ;
          }, function (err) {
            if (isForbiddenError(err)) {
              self.opts.writeSourceCheckpoint = false;
              return targetDoc.last_seq;
            }
            /* istanbul ignore next */
            return LOWEST_SEQ;
          });
        }
        throw err;
      });
    }).catch(function (err) {
      if (err.status !== 404) {
        throw err;
      }
      return LOWEST_SEQ;
    });
  }
}

var comparisons = {
  "undefined": function (targetDoc, sourceDoc) {
    // This is the previous comparison function
    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {
      return sourceDoc.last_seq;
    }
    /* istanbul ignore next */
    return 0;
  },
  "1": function (targetDoc, sourceDoc) {
    // This is the comparison function ported from CouchDB
    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;
  }
};

// This checkpoint comparison is ported from CouchDBs source
// they come from here:
// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906

function compareReplicationLogs(srcDoc, tgtDoc) {
  if (srcDoc.session_id === tgtDoc.session_id) {
    return {
      last_seq: srcDoc.last_seq,
      history: srcDoc.history
    };
  }

  return compareReplicationHistory(srcDoc.history, tgtDoc.history);
}

function compareReplicationHistory(sourceHistory, targetHistory) {
  // the erlang loop via function arguments is not so easy to repeat in JS
  // therefore, doing this as recursion
  var S = sourceHistory[0];
  var sourceRest = sourceHistory.slice(1);
  var T = targetHistory[0];
  var targetRest = targetHistory.slice(1);

  if (!S || targetHistory.length === 0) {
    return {
      last_seq: LOWEST_SEQ,
      history: []
    };
  }

  var sourceId = S.session_id;
  /* istanbul ignore if */
  if (hasSessionId(sourceId, targetHistory)) {
    return {
      last_seq: S.last_seq,
      history: sourceHistory
    };
  }

  var targetId = T.session_id;
  if (hasSessionId(targetId, sourceRest)) {
    return {
      last_seq: T.last_seq,
      history: targetRest
    };
  }

  return compareReplicationHistory(sourceRest, targetRest);
}

function hasSessionId(sessionId, history) {
  var props = history[0];
  var rest = history.slice(1);

  if (!sessionId || history.length === 0) {
    return false;
  }

  if (sessionId === props.session_id) {
    return true;
  }

  return hasSessionId(sessionId, rest);
}

function isForbiddenError(err) {
  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;
}

function Checkpointer(src, target, id, returnValue, opts) {
  if (!(this instanceof CheckpointerInternal)) {
    return new CheckpointerInternal(src, target, id, returnValue, opts);
  }
  return Checkpointer;
}

var STARTING_BACK_OFF = 0;

function backOff(opts, returnValue, error, callback) {
  if (opts.retry === false) {
    returnValue.emit('error', error);
    returnValue.removeAllListeners();
    return;
  }
  /* istanbul ignore if */
  if (typeof opts.back_off_function !== 'function') {
    opts.back_off_function = defaultBackOff;
  }
  returnValue.emit('requestError', error);
  if (returnValue.state === 'active' || returnValue.state === 'pending') {
    returnValue.emit('paused', error);
    returnValue.state = 'stopped';
    var backOffSet = function backoffTimeSet() {
      opts.current_back_off = STARTING_BACK_OFF;
    };
    var removeBackOffSetter = function removeBackOffTimeSet() {
      returnValue.removeListener('active', backOffSet);
    };
    returnValue.once('paused', removeBackOffSetter);
    returnValue.once('active', backOffSet);
  }

  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;
  opts.current_back_off = opts.back_off_function(opts.current_back_off);
  setTimeout(callback, opts.current_back_off);
}

function sortObjectPropertiesByKey(queryParams) {
  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {
    result[key] = queryParams[key];
    return result;
  }, {});
}

// Generate a unique id particular to this replication.
// Not guaranteed to align perfectly with CouchDB's rep ids.
function generateReplicationId(src, target, opts) {
  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';
  var filterFun = opts.filter ? opts.filter.toString() : '';
  var queryParams = '';
  var filterViewName =  '';
  var selector = '';

  // possibility for checkpoints to be lost here as behaviour of
  // JSON.stringify is not stable (see #6226)
  /* istanbul ignore if */
  if (opts.selector) {
    selector = JSON.stringify(opts.selector);
  }

  if (opts.filter && opts.query_params) {
    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));
  }

  if (opts.filter && opts.filter === '_view') {
    filterViewName = opts.view.toString();
  }

  return Promise.all([src.id(), target.id()]).then(function (res) {
    var queryData = res[0] + res[1] + filterFun + filterViewName +
      queryParams + docIds + selector;
    return new Promise(function (resolve) {
      binaryMd5(queryData, resolve);
    });
  }).then(function (md5sum) {
    // can't use straight-up md5 alphabet, because
    // the char '/' is interpreted as being for attachments,
    // and + is also not url-safe
    md5sum = md5sum.replace(/\//g, '.').replace(/\+/g, '_');
    return '_local/' + md5sum;
  });
}

function replicate(src, target, opts, returnValue, result) {
  var batches = [];               // list of batches to be processed
  var currentBatch;               // the batch currently being processed
  var pendingBatch = {
    seq: 0,
    changes: [],
    docs: []
  }; // next batch, not yet ready to be processed
  var writingCheckpoint = false;  // true while checkpoint is being written
  var changesCompleted = false;   // true when all changes received
  var replicationCompleted = false; // true when replication has completed
  // initial_last_seq is the state of the source db before
  // replication started, and it is _not_ updated during
  // replication or used anywhere else, as opposed to last_seq
  var initial_last_seq = 0;
  var last_seq = 0;
  var continuous = opts.continuous || opts.live || false;
  var batch_size = opts.batch_size || 100;
  var batches_limit = opts.batches_limit || 10;
  var style = opts.style || 'all_docs';
  var changesPending = false;     // true while src.changes is running
  var doc_ids = opts.doc_ids;
  var selector = opts.selector;
  var repId;
  var checkpointer;
  var changedDocs = [];
  // Like couchdb, every replication gets a unique session id
  var session = uuid();
  var taskId;

  result = result || {
    ok: true,
    start_time: new Date().toISOString(),
    docs_read: 0,
    docs_written: 0,
    doc_write_failures: 0,
    errors: []
  };

  var changesOpts = {};
  returnValue.ready(src, target);

  function initCheckpointer() {
    if (checkpointer) {
      return Promise.resolve();
    }
    return generateReplicationId(src, target, opts).then(function (res) {
      repId = res;

      var checkpointOpts = {};
      if (opts.checkpoint === false) {
        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: false };
      } else if (opts.checkpoint === 'source') {
        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: false };
      } else if (opts.checkpoint === 'target') {
        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: true };
      } else {
        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: true };
      }

      checkpointer = new Checkpointer(src, target, repId, returnValue, checkpointOpts);
    });
  }

  function writeDocs() {
    changedDocs = [];

    if (currentBatch.docs.length === 0) {
      return;
    }
    var docs = currentBatch.docs;
    var bulkOpts = {timeout: opts.timeout};
    return target.bulkDocs({docs, new_edits: false}, bulkOpts).then(function (res) {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }

      // `res` doesn't include full documents (which live in `docs`), so we create a map of
      // (id -> error), and check for errors while iterating over `docs`
      var errorsById = Object.create(null);
      res.forEach(function (res) {
        if (res.error) {
          errorsById[res.id] = res;
        }
      });

      var errorsNo = Object.keys(errorsById).length;
      result.doc_write_failures += errorsNo;
      result.docs_written += docs.length - errorsNo;

      docs.forEach(function (doc) {
        var error = errorsById[doc._id];
        if (error) {
          result.errors.push(error);
          // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
          var errorName = (error.name || '').toLowerCase();
          if (errorName === 'unauthorized' || errorName === 'forbidden') {
            returnValue.emit('denied', clone(error));
          } else {
            throw error;
          }
        } else {
          changedDocs.push(doc);
        }
      });

    }, function (err) {
      result.doc_write_failures += docs.length;
      throw err;
    });
  }

  function finishBatch() {
    if (currentBatch.error) {
      throw new Error('There was a problem getting docs.');
    }
    result.last_seq = last_seq = currentBatch.seq;
    var outResult = clone(result);
    if (changedDocs.length) {
      outResult.docs = changedDocs;
      // Attach 'pending' property if server supports it (CouchDB 2.0+)
      /* istanbul ignore if */
      if (typeof currentBatch.pending === 'number') {
        outResult.pending = currentBatch.pending;
        delete currentBatch.pending;
      }
      returnValue.emit('change', outResult);
    }
    writingCheckpoint = true;

    src.info().then(function (info) {
      var task = src.activeTasks.get(taskId);
      if (!currentBatch || !task) {
        return;
      }

      var completed = task.completed_items || 0;
      var total_items = parseInt(info.update_seq, 10) - parseInt(initial_last_seq, 10);
      src.activeTasks.update(taskId, {
        completed_items: completed + currentBatch.changes.length,
        total_items
      });
    });

    return checkpointer.writeCheckpoint(currentBatch.seq,
        session).then(function () {
      returnValue.emit('checkpoint', { 'checkpoint': currentBatch.seq });
      writingCheckpoint = false;
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }
      currentBatch = undefined;
      getChanges();
    }).catch(function (err) {
      onCheckpointError(err);
      throw err;
    });
  }

  function getDiffs() {
    var diff = {};
    currentBatch.changes.forEach(function (change) {
      returnValue.emit('checkpoint', { 'revs_diff': change });
      // Couchbase Sync Gateway emits these, but we can ignore them
      /* istanbul ignore if */
      if (change.id === "_user/") {
        return;
      }
      diff[change.id] = change.changes.map(function (x) {
        return x.rev;
      });
    });
    return target.revsDiff(diff).then(function (diffs) {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }
      // currentBatch.diffs elements are deleted as the documents are written
      currentBatch.diffs = diffs;
    });
  }

  function getBatchDocs() {
    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {
      currentBatch.error = !got.ok;
      got.docs.forEach(function (doc) {
        delete currentBatch.diffs[doc._id];
        result.docs_read++;
        currentBatch.docs.push(doc);
      });
    });
  }

  function startNextBatch() {
    if (returnValue.cancelled || currentBatch) {
      return;
    }
    if (batches.length === 0) {
      processPendingBatch(true);
      return;
    }
    currentBatch = batches.shift();
    returnValue.emit('checkpoint', { 'start_next_batch': currentBatch.seq });
    getDiffs()
      .then(getBatchDocs)
      .then(writeDocs)
      .then(finishBatch)
      .then(startNextBatch)
      .catch(function (err) {
        abortReplication('batch processing terminated with error', err);
      });
  }


  function processPendingBatch(immediate) {
    if (pendingBatch.changes.length === 0) {
      if (batches.length === 0 && !currentBatch) {
        if ((continuous && changesOpts.live) || changesCompleted) {
          returnValue.state = 'pending';
          returnValue.emit('paused');
        }
        if (changesCompleted) {
          completeReplication();
        }
      }
      return;
    }
    if (
      immediate ||
      changesCompleted ||
      pendingBatch.changes.length >= batch_size
    ) {
      batches.push(pendingBatch);
      pendingBatch = {
        seq: 0,
        changes: [],
        docs: []
      };
      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {
        returnValue.state = 'active';
        returnValue.emit('active');
      }
      startNextBatch();
    }
  }


  function abortReplication(reason, err) {
    if (replicationCompleted) {
      return;
    }
    if (!err.message) {
      err.message = reason;
    }
    result.ok = false;
    result.status = 'aborting';
    batches = [];
    pendingBatch = {
      seq: 0,
      changes: [],
      docs: []
    };
    completeReplication(err);
  }


  function completeReplication(fatalError) {
    if (replicationCompleted) {
      return;
    }
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      result.status = 'cancelled';
      if (writingCheckpoint) {
        return;
      }
    }
    result.status = result.status || 'complete';
    result.end_time = new Date().toISOString();
    result.last_seq = last_seq;
    replicationCompleted = true;

    src.activeTasks.remove(taskId, fatalError);

    if (fatalError) {
      // need to extend the error because Firefox considers ".result" read-only
      fatalError = createError(fatalError);
      fatalError.result = result;

      // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
      var errorName = (fatalError.name || '').toLowerCase();
      if (errorName === 'unauthorized' || errorName === 'forbidden') {
        returnValue.emit('error', fatalError);
        returnValue.removeAllListeners();
      } else {
        backOff(opts, returnValue, fatalError, function () {
          replicate(src, target, opts, returnValue);
        });
      }
    } else {
      returnValue.emit('complete', result);
      returnValue.removeAllListeners();
    }
  }

  function onChange(change, pending, lastSeq) {
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }
    // Attach 'pending' property if server supports it (CouchDB 2.0+)
    /* istanbul ignore if */
    if (typeof pending === 'number') {
      pendingBatch.pending = pending;
    }

    var filter = filterChange(opts)(change);
    if (!filter) {
      // update processed items count by 1
      var task = src.activeTasks.get(taskId);
      if (task) {
        // we can assume that task exists here? shouldn't be deleted by here.
        var completed = task.completed_items || 0;
        src.activeTasks.update(taskId, {completed_items: ++completed});
      }
      return;
    }
    pendingBatch.seq = change.seq || lastSeq;
    pendingBatch.changes.push(change);
    returnValue.emit('checkpoint', { 'pending_batch': pendingBatch.seq });
    nextTick(function () {
      processPendingBatch(batches.length === 0 && changesOpts.live);
    });
  }


  function onChangesComplete(changes) {
    changesPending = false;
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }

    // if no results were returned then we're done,
    // else fetch more
    if (changes.results.length > 0) {
      changesOpts.since = changes.results[changes.results.length - 1].seq;
      getChanges();
      processPendingBatch(true);
    } else {

      var complete = function () {
        if (continuous) {
          changesOpts.live = true;
          getChanges();
        } else {
          changesCompleted = true;
        }
        processPendingBatch(true);
      };

      // update the checkpoint so we start from the right seq next time
      if (!currentBatch && changes.results.length === 0) {
        writingCheckpoint = true;
        checkpointer.writeCheckpoint(changes.last_seq,
            session).then(function () {
          writingCheckpoint = false;
          result.last_seq = last_seq = changes.last_seq;
          if (returnValue.cancelled) {
            completeReplication();
            throw new Error('cancelled');
          } else {
            complete();
          }
        })
        .catch(onCheckpointError);
      } else {
        complete();
      }
    }
  }


  function onChangesError(err) {
    changesPending = false;
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }
    abortReplication('changes rejected', err);
  }


  function getChanges() {
    if (!(
      !changesPending &&
      !changesCompleted &&
      batches.length < batches_limit
      )) {
      return;
    }
    changesPending = true;
    function abortChanges() {
      changes.cancel();
    }
    function removeListener() {
      returnValue.removeListener('cancel', abortChanges);
    }

    if (returnValue._changes) { // remove old changes() and listeners
      returnValue.removeListener('cancel', returnValue._abortChanges);
      returnValue._changes.cancel();
    }
    returnValue.once('cancel', abortChanges);

    var changes = src.changes(changesOpts)
      .on('change', onChange);
    changes.then(removeListener, removeListener);
    changes.then(onChangesComplete)
      .catch(onChangesError);

    if (opts.retry) {
      // save for later so we can cancel if necessary
      returnValue._changes = changes;
      returnValue._abortChanges = abortChanges;
    }
  }

  function createTask(checkpoint) {
    return src.info().then(function (info) {
      var total_items = typeof opts.since === 'undefined' ?
        parseInt(info.update_seq, 10) - parseInt(checkpoint, 10) :
        parseInt(info.update_seq, 10);

      taskId = src.activeTasks.add({
        name: `${continuous ? 'continuous ' : ''}replication from ${info.db_name}` ,
        total_items,
      });

      return checkpoint;
    });
  }

  function startChanges() {
    initCheckpointer().then(function () {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        return;
      }
      return checkpointer.getCheckpoint().then(createTask).then(function (checkpoint) {
        last_seq = checkpoint;
        initial_last_seq = checkpoint;
        changesOpts = {
          since: last_seq,
          limit: batch_size,
          batch_size,
          style,
          doc_ids,
          selector,
          return_docs: true // required so we know when we're done
        };
        if (opts.filter) {
          if (typeof opts.filter !== 'string') {
            // required for the client-side filter in onChange
            changesOpts.include_docs = true;
          } else { // ddoc filter
            changesOpts.filter = opts.filter;
          }
        }
        if ('heartbeat' in opts) {
          changesOpts.heartbeat = opts.heartbeat;
        }
        if ('timeout' in opts) {
          changesOpts.timeout = opts.timeout;
        }
        if (opts.query_params) {
          changesOpts.query_params = opts.query_params;
        }
        if (opts.view) {
          changesOpts.view = opts.view;
        }
        getChanges();
      });
    }).catch(function (err) {
      abortReplication('getCheckpoint rejected with ', err);
    });
  }

  /* istanbul ignore next */
  function onCheckpointError(err) {
    writingCheckpoint = false;
    abortReplication('writeCheckpoint completed with error', err);
  }

  /* istanbul ignore if */
  if (returnValue.cancelled) { // cancelled immediately
    completeReplication();
    return;
  }

  if (!returnValue._addedListeners) {
    returnValue.once('cancel', completeReplication);

    if (typeof opts.complete === 'function') {
      returnValue.once('error', opts.complete);
      returnValue.once('complete', function (result) {
        opts.complete(null, result);
      });
    }
    returnValue._addedListeners = true;
  }

  if (typeof opts.since === 'undefined') {
    startChanges();
  } else {
    initCheckpointer().then(function () {
      writingCheckpoint = true;
      return checkpointer.writeCheckpoint(opts.since, session);
    }).then(function () {
      writingCheckpoint = false;
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        return;
      }
      last_seq = opts.since;
      startChanges();
    }).catch(onCheckpointError);
  }
}

// We create a basic promise so the caller can cancel the replication possibly
// before we have actually started listening to changes etc
class Replication extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {
  constructor() {
    super();
    this.cancelled = false;
    this.state = 'pending';
    const promise = new Promise((fulfill, reject) => {
      this.once('complete', fulfill);
      this.once('error', reject);
    });
    this.then = function (resolve, reject) {
      return promise.then(resolve, reject);
    };
    this.catch = function (reject) {
      return promise.catch(reject);
    };
    // As we allow error handling via "error" event as well,
    // put a stub in here so that rejecting never throws UnhandledError.
    this.catch(function () {});
  }

  cancel() {
    this.cancelled = true;
    this.state = 'cancelled';
    this.emit('cancel');
  }

  ready(src, target) {
    if (this._readyCalled) {
      return;
    }
    this._readyCalled = true;

    const onDestroy = () => {
      this.cancel();
    };
    src.once('destroyed', onDestroy);
    target.once('destroyed', onDestroy);
    function cleanup() {
      src.removeListener('destroyed', onDestroy);
      target.removeListener('destroyed', onDestroy);
    }
    this.once('complete', cleanup);
    this.once('error', cleanup);
  }
}

function toPouch(db, opts) {
  var PouchConstructor = opts.PouchConstructor;
  if (typeof db === 'string') {
    return new PouchConstructor(db, opts);
  } else {
    return db;
  }
}

function replicateWrapper(src, target, opts, callback) {

  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  if (typeof opts === 'undefined') {
    opts = {};
  }

  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {
    throw createError(BAD_REQUEST,
                       "`doc_ids` filter parameter is not a list.");
  }

  opts.complete = callback;
  opts = clone(opts);
  opts.continuous = opts.continuous || opts.live;
  opts.retry = ('retry' in opts) ? opts.retry : false;
  opts.PouchConstructor = opts.PouchConstructor || this;
  var replicateRet = new Replication(opts);
  var srcPouch = toPouch(src, opts);
  var targetPouch = toPouch(target, opts);
  replicate(srcPouch, targetPouch, opts, replicateRet);
  return replicateRet;
}

function sync(src, target, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  if (typeof opts === 'undefined') {
    opts = {};
  }
  opts = clone(opts);
  opts.PouchConstructor = opts.PouchConstructor || this;
  src = toPouch(src, opts);
  target = toPouch(target, opts);
  return new Sync(src, target, opts, callback);
}

class Sync extends (events__WEBPACK_IMPORTED_MODULE_2___default()) {
  constructor(src, target, opts, callback) {
    super();
    this.canceled = false;

    const optsPush = opts.push ? Object.assign({}, opts, opts.push) : opts;
    const optsPull = opts.pull ? Object.assign({}, opts, opts.pull) : opts;

    this.push = replicateWrapper(src, target, optsPush);
    this.pull = replicateWrapper(target, src, optsPull);

    this.pushPaused = true;
    this.pullPaused = true;

    const pullChange = (change) => {
      this.emit('change', {
        direction: 'pull',
        change
      });
    };
    const pushChange = (change) => {
      this.emit('change', {
        direction: 'push',
        change
      });
    };
    const pushDenied = (doc) => {
      this.emit('denied', {
        direction: 'push',
        doc
      });
    };
    const pullDenied = (doc) => {
      this.emit('denied', {
        direction: 'pull',
        doc
      });
    };
    const pushPaused = () => {
      this.pushPaused = true;
      /* istanbul ignore if */
      if (this.pullPaused) {
        this.emit('paused');
      }
    };
    const pullPaused = () => {
      this.pullPaused = true;
      /* istanbul ignore if */
      if (this.pushPaused) {
        this.emit('paused');
      }
    };
    const pushActive = () => {
      this.pushPaused = false;
      /* istanbul ignore if */
      if (this.pullPaused) {
        this.emit('active', {
          direction: 'push'
        });
      }
    };
    const pullActive = () => {
      this.pullPaused = false;
      /* istanbul ignore if */
      if (this.pushPaused) {
        this.emit('active', {
          direction: 'pull'
        });
      }
    };

    let removed = {};

    const removeAll = (type) => { // type is 'push' or 'pull'
      return (event, func) => {
        const isChange = event === 'change' &&
          (func === pullChange || func === pushChange);
        const isDenied = event === 'denied' &&
          (func === pullDenied || func === pushDenied);
        const isPaused = event === 'paused' &&
          (func === pullPaused || func === pushPaused);
        const isActive = event === 'active' &&
          (func === pullActive || func === pushActive);

        if (isChange || isDenied || isPaused || isActive) {
          if (!(event in removed)) {
            removed[event] = {};
          }
          removed[event][type] = true;
          if (Object.keys(removed[event]).length === 2) {
            // both push and pull have asked to be removed
            this.removeAllListeners(event);
          }
        }
      };
    };

    if (opts.live) {
      this.push.on('complete', this.pull.cancel.bind(this.pull));
      this.pull.on('complete', this.push.cancel.bind(this.push));
    }

    function addOneListener(ee, event, listener) {
      if (ee.listeners(event).indexOf(listener) == -1) {
        ee.on(event, listener);
      }
    }

    this.on('newListener', function (event) {
      if (event === 'change') {
        addOneListener(this.pull, 'change', pullChange);
        addOneListener(this.push, 'change', pushChange);
      } else if (event === 'denied') {
        addOneListener(this.pull, 'denied', pullDenied);
        addOneListener(this.push, 'denied', pushDenied);
      } else if (event === 'active') {
        addOneListener(this.pull, 'active', pullActive);
        addOneListener(this.push, 'active', pushActive);
      } else if (event === 'paused') {
        addOneListener(this.pull, 'paused', pullPaused);
        addOneListener(this.push, 'paused', pushPaused);
      }
    });

    this.on('removeListener', function (event) {
      if (event === 'change') {
        this.pull.removeListener('change', pullChange);
        this.push.removeListener('change', pushChange);
      } else if (event === 'denied') {
        this.pull.removeListener('denied', pullDenied);
        this.push.removeListener('denied', pushDenied);
      } else if (event === 'active') {
        this.pull.removeListener('active', pullActive);
        this.push.removeListener('active', pushActive);
      } else if (event === 'paused') {
        this.pull.removeListener('paused', pullPaused);
        this.push.removeListener('paused', pushPaused);
      }
    });

    this.pull.on('removeListener', removeAll('pull'));
    this.push.on('removeListener', removeAll('push'));

    const promise = Promise.all([
      this.push,
      this.pull
    ]).then((resp) => {
      const out = {
        push: resp[0],
        pull: resp[1]
      };
      this.emit('complete', out);
      if (callback) {
        callback(null, out);
      }
      this.removeAllListeners();
      return out;
    }, (err) => {
      this.cancel();
      if (callback) {
        // if there's a callback, then the callback can receive
        // the error event
        callback(err);
      } else {
        // if there's no callback, then we're safe to emit an error
        // event, which would otherwise throw an unhandled error
        // due to 'error' being a special event in EventEmitters
        this.emit('error', err);
      }
      this.removeAllListeners();
      if (callback) {
        // no sense throwing if we're already emitting an 'error' event
        throw err;
      }
    });

    this.then = function (success, err) {
      return promise.then(success, err);
    };

    this.catch = function (err) {
      return promise.catch(err);
    };
  }

  cancel() {
    if (!this.canceled) {
      this.canceled = true;
      this.push.cancel();
      this.pull.cancel();
    }
  }
}

function replication(PouchDB) {
  PouchDB.replicate = replicateWrapper;
  PouchDB.sync = sync;

  Object.defineProperty(PouchDB.prototype, 'replicate', {
    get: function () {
      var self = this;
      if (typeof this.replicateMethods === 'undefined') {
        this.replicateMethods = {
          from: function (other, opts, callback) {
            return self.constructor.replicate(other, self, opts, callback);
          },
          to: function (other, opts, callback) {
            return self.constructor.replicate(self, other, opts, callback);
          }
        };
      }
      return this.replicateMethods;
    }
  });

  PouchDB.prototype.sync = function (dbName, opts, callback) {
    return this.constructor.sync(this, dbName, opts, callback);
  };
}

PouchDB.plugin(IDBPouch)
  .plugin(HttpPouch$1)
  .plugin(mapreduce)
  .plugin(replication);

// Pull from src because pouchdb-node/pouchdb-browser themselves

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PouchDB);


/***/ }),

/***/ "../node_modules/spark-md5/spark-md5.js":
/*!**********************************************!*\
  !*** ../node_modules/spark-md5/spark-md5.js ***!
  \**********************************************/
/***/ ((module) => {

(function (factory) {
    if (true) {
        // Node/CommonJS
        module.exports = factory();
    } else { var glob; }
}(function (undefined) {

    'use strict';

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },
        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


    function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    }

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));


/***/ }),

/***/ "./a1sauce/Error/Style/style.css":
/*!***************************************!*\
  !*** ./a1sauce/Error/Style/style.css ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../node_modules/css-loader/dist/cjs.js!./style.css */ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Error/Style/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./a1sauce/Patches/Style/style.css":
/*!*****************************************!*\
  !*** ./a1sauce/Patches/Style/style.css ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../node_modules/css-loader/dist/cjs.js!./style.css */ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Patches/Style/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./a1sauce/Settings/Library/Styles/alarm.css":
/*!***************************************************!*\
  !*** ./a1sauce/Settings/Library/Styles/alarm.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_alarm_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!./alarm.css */ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/alarm.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_alarm_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_alarm_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_alarm_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_alarm_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./a1sauce/Settings/Library/Styles/file.css":
/*!**************************************************!*\
  !*** ./a1sauce/Settings/Library/Styles/file.css ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_file_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!./file.css */ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/file.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_file_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_file_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_file_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_file_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./a1sauce/Settings/Library/Styles/range.css":
/*!***************************************************!*\
  !*** ./a1sauce/Settings/Library/Styles/range.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_range_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!./range.css */ "../node_modules/css-loader/dist/cjs.js!./a1sauce/Settings/Library/Styles/range.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_range_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_range_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_range_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_range_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./css/styles.css":
/*!************************!*\
  !*** ./css/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "../node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "../node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "../node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "../node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./styles.css */ "../node_modules/css-loader/dist/cjs.js!./css/styles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!*********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!***********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!****************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!**********************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./a1sauce/Error/logError.ts":
/*!***********************************!*\
  !*** ./a1sauce/Error/logError.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LogError: () => (/* binding */ LogError)
/* harmony export */ });
/* harmony import */ var _Style_style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Style/style.css */ "./a1sauce/Error/Style/style.css");

class LogError {
    createErrorContainer = () => {
        const container = document.createElement('div');
        container.id = 'Error';
        return container;
    };
    createErrorHeader = (error) => {
        const headerContainer = document.createElement('div');
        headerContainer.classList.add('title-row');
        let header = document.createElement('h2');
        header.innerText = error.title;
        let closeButton = document.createElement('button');
        closeButton.innerText = 'Close Error';
        closeButton.title = 'Close error window';
        closeButton.classList.add('nisbutton');
        closeButton.classList.add('close-button');
        headerContainer.appendChild(header);
        headerContainer.appendChild(closeButton);
        return headerContainer;
    };
    createErrorMessage = (error) => {
        const msg = document.createElement('div');
        msg.innerHTML = error.message;
        return msg;
    };
    showError = async (error) => {
        let activeError = document.getElementById('Error');
        if (activeError && activeError.title === error.title)
            return;
        const container = this.createErrorContainer();
        const headerContainer = this.createErrorHeader(error);
        /*
         * Null check is suppressed because headerContainer is created above using createErrorHeader
         * which appends a .close-button element meaning it can't possibly be null
         */
        headerContainer
            .querySelector('.close-button')
            .addEventListener('click', () => {
            container.remove();
        });
        container.appendChild(headerContainer);
        container.appendChild(this.createErrorMessage(error));
        document.body.appendChild(container);
    };
}


/***/ }),

/***/ "./a1sauce/Patches/patchNotes.ts":
/*!***************************************!*\
  !*** ./a1sauce/Patches/patchNotes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Patches: () => (/* binding */ Patches)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ "./a1sauce/index.ts");
/* harmony import */ var _Settings_Storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* harmony import */ var _Utils_tempTooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/tempTooltip */ "./a1sauce/Utils/tempTooltip.ts");
/* harmony import */ var _Style_style_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Style/style.css */ "./a1sauce/Patches/Style/style.css");




const sauce = ___WEBPACK_IMPORTED_MODULE_0__.A1Sauce.instance;
class Patches {
    _notes = [];
    checkForNewVersion = () => {
        // [0] = Major ; [1] = Minor ; [2] = Patch
        const lastKnownVersion = (0,_Settings_Storage__WEBPACK_IMPORTED_MODULE_1__.getSetting)('lastKnownVersion');
        const currentVersion = sauce.getVersion();
        (0,_Settings_Storage__WEBPACK_IMPORTED_MODULE_1__.updateSetting)('lastKnownVersion', currentVersion);
        const isNewVersion = lastKnownVersion !== currentVersion;
        if (isNewVersion) {
            (0,_Utils_tempTooltip__WEBPACK_IMPORTED_MODULE_2__.tempTooltip)(`New update! See ${sauce.getPublicName()} window for patch notes.`, 5000);
        }
        return isNewVersion;
    };
    setNotes = (notes) => {
        this._notes = notes;
        return this;
    };
    getNotes = () => {
        return this._notes;
    };
    createPatchContainer = () => {
        const container = document.createElement('div');
        container.id = 'PatchNotes';
        return container;
    };
    createPatchHeader = () => {
        const headerContainer = document.createElement('div');
        headerContainer.classList.add('title-row');
        const header = document.createElement('h2');
        header.innerText = 'Patch Notes';
        const closeButton = document.createElement('button');
        closeButton.innerText = 'Close Patch Notes';
        closeButton.title = 'Close patch notes';
        closeButton.classList.add('nisbutton');
        closeButton.classList.add('close-button');
        headerContainer.appendChild(header);
        headerContainer.appendChild(closeButton);
        return headerContainer;
    };
    addNotesToContainer = (notes, container) => {
        const noteContainer = document.createElement('div');
        noteContainer.classList.add('patch-notes');
        for (const note of notes) {
            const noteDate = document.createElement('h3');
            noteDate.innerText = note.date;
            const notesList = document.createElement('ul');
            notesList.classList.add('note');
            for (const details of note.note) {
                const noteText = document.createElement('li');
                noteText.innerText = details;
                notesList.appendChild(noteText);
            }
            noteContainer.appendChild(noteDate);
            noteContainer.appendChild(notesList);
            container.appendChild(noteContainer);
        }
    };
    showPatchNotes = () => {
        const container = this.createPatchContainer();
        const headerContainer = this.createPatchHeader();
        headerContainer
            .querySelector('.close-button')
            ?.addEventListener('click', () => {
            container.remove();
        });
        container.appendChild(headerContainer);
        const notes = this.getNotes();
        this.addNotesToContainer(notes, container);
        document.body.appendChild(container);
    };
}


/***/ }),

/***/ "./a1sauce/Patches/serverCheck.ts":
/*!****************************************!*\
  !*** ./a1sauce/Patches/serverCheck.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getVersion: () => (/* binding */ getVersion),
/* harmony export */   startVersionChecking: () => (/* binding */ startVersionChecking),
/* harmony export */   updateTooltip: () => (/* binding */ updateTooltip)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ "./a1sauce/index.ts");
/* harmony import */ var _Utils_tempTooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/tempTooltip */ "./a1sauce/Utils/tempTooltip.ts");


const getVersion = async (versionUrl) => {
    let latest = await fetch(versionUrl, {
        method: 'GET',
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        },
    })
        .then((res) => {
        let latestVersion = res.json();
        return latestVersion;
    })
        .then((latestVersion) => {
        return latestVersion;
    });
    return latest;
};
const startVersionChecking = async (versionUrl) => {
    let version = await getVersion(versionUrl);
    updateTooltip(version);
    setInterval(async () => {
        let version = await getVersion(versionUrl);
        updateTooltip(version);
    }, 1000 * 60 * 15);
};
const updateTooltip = (version) => {
    const sauce = ___WEBPACK_IMPORTED_MODULE_0__.A1Sauce.instance;
    if (version === sauce.getVersion()) {
        (0,_Utils_tempTooltip__WEBPACK_IMPORTED_MODULE_1__.tempTooltip)(`A new update for ${sauce.getPublicName()} is available! Reload ${sauce.getPublicName()} for update.`, 3000);
    }
};


/***/ }),

/***/ "./a1sauce/Settings/Components/Builders/container.ts":
/*!***********************************************************!*\
  !*** ./a1sauce/Settings/Components/Builders/container.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFlexContainer: () => (/* binding */ createFlexContainer),
/* harmony export */   createOutput: () => (/* binding */ createOutput)
/* harmony export */ });
const createFlexContainer = (classes) => {
    const container = document.createElement('div');
    container.classList.add('flex');
    container.classList.add('setting');
    if (classes !== undefined && classes.length) {
        for (let i = 0; i < classes.length; i++) {
            container.classList.add(classes[i]);
        }
    }
    return container;
};
const createOutput = () => {
    const output = document.createElement('output');
    return output;
};


/***/ }),

/***/ "./a1sauce/Settings/Components/Builders/input.ts":
/*!*******************************************************!*\
  !*** ./a1sauce/Settings/Components/Builders/input.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCheckboxInput: () => (/* binding */ createCheckboxInput),
/* harmony export */   createDropdown: () => (/* binding */ createDropdown),
/* harmony export */   createInput: () => (/* binding */ createInput),
/* harmony export */   createLabel: () => (/* binding */ createLabel)
/* harmony export */ });
/* harmony import */ var _Storage_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Storage/index */ "./a1sauce/Settings/Storage/index.ts");

const createLabel = (name, description) => {
    const label = document.createElement('label');
    label.setAttribute('for', name);
    label.innerHTML = description;
    return label;
};
const createInput = (type, name, defaultValue) => {
    const input = document.createElement('input');
    input.id = name;
    input.type = type;
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue?.toString();
    input.value = String(input.dataset.defaultValue);
    if (_Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name)) {
        input.value = _Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name) ?? input.dataset.defaultValue;
    }
    else {
        _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, input.dataset.defaultValue);
    }
    input.addEventListener('change', () => {
        if (type == 'text') {
            _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, input.value);
        }
        else if (type == 'number' || type == 'range') {
            _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, parseInt(input.value, 10));
        }
    });
    return input;
};
const createCheckboxInput = (name, defaultValue) => {
    const input = document.createElement('input');
    input.id = name;
    input.type = 'checkbox';
    input.dataset.setting = name;
    input.dataset.defaultValue = defaultValue?.toString();
    input.checked = Boolean(defaultValue);
    if (_Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name)) {
        input.checked = _Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name);
    }
    else {
        _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, input.checked);
    }
    input.addEventListener('change', () => {
        _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, input.checked);
    });
    return input;
};
const createDropdown = (name, defaultValue, options) => {
    const select = document.createElement('select');
    select.id = name;
    select.dataset.setting = name;
    select.dataset.defaultValue = defaultValue?.toString();
    select.value = String(defaultValue);
    if (_Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name)) {
        select.value = _Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name);
    }
    for (let i = 0; i < options.length; i++) {
        const option = document.createElement('option');
        option.value = options[i].value;
        option.text = options[i].name;
        select.appendChild(option);
    }
    if (_Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name)) {
        select.value = _Storage_index__WEBPACK_IMPORTED_MODULE_0__.getSetting(name);
    }
    else {
        _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, select.value);
    }
    select.addEventListener('change', () => {
        _Storage_index__WEBPACK_IMPORTED_MODULE_0__.updateSetting(name, select.value);
    });
    return select;
};


/***/ }),

/***/ "./a1sauce/Settings/Components/index.ts":
/*!**********************************************!*\
  !*** ./a1sauce/Settings/Components/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCheckboxInput: () => (/* reexport safe */ _Builders_input__WEBPACK_IMPORTED_MODULE_2__.createCheckboxInput),
/* harmony export */   createDropdown: () => (/* reexport safe */ _Builders_input__WEBPACK_IMPORTED_MODULE_2__.createDropdown),
/* harmony export */   createFlexContainer: () => (/* reexport safe */ _Builders_container__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer),
/* harmony export */   createInput: () => (/* reexport safe */ _Builders_input__WEBPACK_IMPORTED_MODULE_2__.createInput),
/* harmony export */   createLabel: () => (/* reexport safe */ _Builders_input__WEBPACK_IMPORTED_MODULE_2__.createLabel),
/* harmony export */   createOutput: () => (/* reexport safe */ _Builders_container__WEBPACK_IMPORTED_MODULE_0__.createOutput),
/* harmony export */   createSeperator: () => (/* reexport safe */ _Library_Controls_seperator__WEBPACK_IMPORTED_MODULE_1__.createSeperator)
/* harmony export */ });
/* harmony import */ var _Builders_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Builders/container */ "./a1sauce/Settings/Components/Builders/container.ts");
/* harmony import */ var _Library_Controls_seperator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Library/Controls/seperator */ "./a1sauce/Settings/Library/Controls/seperator.ts");
/* harmony import */ var _Builders_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Builders/input */ "./a1sauce/Settings/Components/Builders/input.ts");
/*
 *
 * Builders are building blocks used to create Controls in Library/Controls
 *
 */





/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/alarm.ts":
/*!****************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/alarm.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAlarmSetting: () => (/* binding */ createAlarmSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");
/* harmony import */ var _checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkbox */ "./a1sauce/Settings/Library/Controls/checkbox.ts");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range */ "./a1sauce/Settings/Library/Controls/range.ts");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text */ "./a1sauce/Settings/Library/Controls/text.ts");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../data/constants */ "./data/constants.ts");
/* harmony import */ var _Styles_alarm_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Styles/alarm.css */ "./a1sauce/Settings/Library/Styles/alarm.css");
/* harmony import */ var pouchdb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pouchdb */ "../node_modules/pouchdb/lib/index-browser.es.js");







const db = new pouchdb__WEBPACK_IMPORTED_MODULE_6__["default"](_data_constants__WEBPACK_IMPORTED_MODULE_4__.appName);
let alarms = [
    { name: 'alarm2', value: './a1sauce/Settings/Library/Controls/Alarms/alarm2.wav' },
    { name: 'notification1', value: './a1sauce/Settings/Library/Controls/Alarms/notification1.wav' },
    { name: 'notification2', value: './a1sauce/Settings/Library/Controls/Alarms/notification2.wav' },
    { name: 'notification3', value: './a1sauce/Settings/Library/Controls/Alarms/notification3.wav' },
    { name: 'bell', value: './a1sauce/Settings/Library/Controls/Alarms/bell.wav' },
    { name: 'elevator', value: './a1sauce/Settings/Library/Controls/Alarms/elevator.wav' },
    { name: 'nuclear', value: './a1sauce/Settings/Library/Controls/Alarms/nuclear.wav' },
];
const createAlarmSetting = (name, description, options = {}) => {
    const { classes = options.classes ?? '' } = options;
    const shortDescription = (0,_text__WEBPACK_IMPORTED_MODULE_3__.createText)(description);
    const activeCheckbox = (0,_checkbox__WEBPACK_IMPORTED_MODULE_1__.createCheckboxSetting)(name + 'Active', 'Active', false);
    activeCheckbox.classList.add('alarm-active');
    activeCheckbox.style.marginRight = '20px';
    const alertDropdown = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createDropdown)(name + 'AlertSound', '', alarms);
    alertDropdown.classList.add('alarm-dropdown');
    alertDropdown.classList.add('full');
    alertDropdown.style.marginBottom = '5px';
    const loopCheckbox = (0,_checkbox__WEBPACK_IMPORTED_MODULE_1__.createCheckboxSetting)(name + 'Loop', 'Loop', false);
    loopCheckbox.classList.add('alarm-looping');
    const volumeSlider = (0,_range__WEBPACK_IMPORTED_MODULE_2__.createRangeSetting)(name + 'Volume', '', {
        defaultValue: '100',
        unit: '%',
        min: 0,
        max: 100,
    });
    volumeSlider.classList.add('half');
    volumeSlider.classList.add('alarm-volume');
    const alarmSoundText = (0,_text__WEBPACK_IMPORTED_MODULE_3__.createText)('Alarm Sound');
    alarmSoundText.classList.add('full');
    alarmSoundText.classList.add('alarm-sound');
    alarmSoundText.style.paddingTop = '0px';
    alarmSoundText.style.marginTop = '0px';
    const volumeText = (0,_text__WEBPACK_IMPORTED_MODULE_3__.createText)('Volume');
    volumeText.style.marginTop = '-1px';
    volumeText.style.marginRight = '5px';
    volumeText.classList.add('half');
    volumeText.style.paddingTop = '0px';
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)(['flex-wrap']);
    container.classList.add('alarm-setting');
    if (classes.length) {
        for (let i = classes.length; i--; i >= 0) {
            container.classList.add(classes[i]);
        }
    }
    container.appendChild(shortDescription);
    const innerContainer = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)();
    innerContainer.appendChild(activeCheckbox);
    innerContainer.appendChild(loopCheckbox);
    innerContainer.classList.remove('setting');
    container.appendChild(innerContainer);
    container.appendChild(alarmSoundText);
    container.appendChild(alertDropdown);
    container.appendChild(volumeText);
    container.appendChild(volumeSlider);
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/button.ts":
/*!*****************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/button.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createButton: () => (/* binding */ createButton)
/* harmony export */ });
const createButton = (name, content, 
// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
fn, options) => {
    const { classes = options.classes } = options;
    const button = document.createElement('button');
    button.id = name;
    button.innerHTML = content;
    if (classes.length) {
        for (let i = classes.length; i--; i >= 0) {
            button.classList.add(classes[i]);
        }
    }
    button.addEventListener('click', () => {
        fn();
    });
    return button;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/checkbox.ts":
/*!*******************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/checkbox.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCheckboxSetting: () => (/* binding */ createCheckboxSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");
/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Storage */ "./a1sauce/Settings/Storage/index.ts");


const createCheckboxSetting = (name, description, defaultValue) => {
    const input = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createCheckboxInput)(name, defaultValue);
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, description);
    const checkboxLabel = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, '');
    const checkbox = document.createElement('span');
    checkbox.classList.add('checkbox');
    checkbox.id = name;
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)(['reverse-setting']);
    checkboxLabel.appendChild(input);
    checkboxLabel.appendChild(checkbox);
    container.appendChild(checkboxLabel);
    container.appendChild(label);
    container.addEventListener('click', (e) => {
        if (e.target == container) {
            input.checked = !input.checked;
            input.dispatchEvent(new CustomEvent('change', { bubbles: true }));
            (0,_Storage__WEBPACK_IMPORTED_MODULE_1__.updateSetting)(name, input.checked);
        }
    });
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/dropdown.ts":
/*!*******************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/dropdown.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDropdownSetting: () => (/* binding */ createDropdownSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");

const createDropdownSetting = (name, description, defaultValue, options) => {
    const select = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createDropdown)(name, defaultValue, options);
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, description);
    select.id = name;
    if (typeof defaultValue === 'number')
        select.selectedIndex = defaultValue;
    if (typeof defaultValue === 'string') {
        for (var i = 0; i < select.options.length; i++) {
            if (select.options[i].value === defaultValue) {
                select.selectedIndex = i;
                break;
            }
        }
    }
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)(['reverse-setting']);
    container.appendChild(select);
    container.appendChild(label);
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/file.ts":
/*!***************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/file.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFileSetting: () => (/* binding */ createFileSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");
/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! nanoid */ "../node_modules/nanoid/index.browser.js");
/* harmony import */ var pouchdb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pouchdb */ "../node_modules/pouchdb/lib/index-browser.es.js");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../data/constants */ "./data/constants.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./button */ "./a1sauce/Settings/Library/Controls/button.ts");
/* harmony import */ var _Styles_file_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Styles/file.css */ "./a1sauce/Settings/Library/Styles/file.css");






const db = new pouchdb__WEBPACK_IMPORTED_MODULE_1__["default"](_data_constants__WEBPACK_IMPORTED_MODULE_2__.appName);
const createFileSetting = (name, description, defaultValue) => {
    function uploadAlarm() {
        const file = input.files?.[0];
        if (!file) {
            throw Error(`Failed to find file when uploading alarm.`);
        }
        db.put({
            _id: (0,nanoid__WEBPACK_IMPORTED_MODULE_5__.nanoid)(),
            _attachments: {
                filename: {
                    content_type: file.type,
                    data: file,
                },
            },
            name: file.name,
        })
            .then(() => {
            console.log('File Uploaded');
        })
            .catch((err) => {
            console.log(err);
        });
    }
    const input = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createInput)('file', name, defaultValue);
    input.addEventListener('change', () => {
        const button = innerContainer.querySelector('button');
        if (!button) {
            throw Error(`Failed to find button for file settings.`);
        }
        button.innerText = 'Uploading file...';
        const file = input.files?.[0];
        if (!file) {
            throw Error(`File settings contained no files.`);
        }
        db.put({
            _id: (0,nanoid__WEBPACK_IMPORTED_MODULE_5__.nanoid)(),
            _attachments: {
                filename: {
                    content_type: file.type,
                    data: file,
                },
            },
            name: file.name,
        })
            .then(() => {
            button.innerText = 'File Uploaded!';
            setTimeout(() => {
                const fileInput = (container.querySelector('input[type="file"]'));
                fileInput.value = '';
                button.innerText = 'Upload File';
            }, 6000);
        })
            .catch((err) => {
            console.log(err);
        });
    });
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, description);
    label.setAttribute('for', name);
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)();
    container.classList.add('upload-alarm');
    container.appendChild(label);
    const innerContainer = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)();
    innerContainer.appendChild(input);
    innerContainer.appendChild((0,_button__WEBPACK_IMPORTED_MODULE_3__.createButton)('FileUpload', 'Upload File', uploadAlarm, { classes: [] }));
    container.appendChild(innerContainer);
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/input.ts":
/*!****************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/input.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTextSetting: () => (/* binding */ createTextSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");

const createTextSetting = (name, description, defaultValue) => {
    const input = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createInput)('text', name, defaultValue);
    input.id = name;
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, description);
    label.setAttribute('for', name);
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)();
    container.appendChild(input);
    container.appendChild(label);
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/number.ts":
/*!*****************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/number.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNumberSetting: () => (/* binding */ createNumberSetting)
/* harmony export */ });
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");

const createNumberSetting = (name, description, options = {}) => {
    const { defaultValue = options.defaultValue ?? 10, min = options.min ?? 1, max = options.max ?? 20, } = options;
    const input = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createInput)('number', name, defaultValue);
    input.id = name;
    input.setAttribute('min', min.toString());
    input.setAttribute('max', max.toString());
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createLabel)(name, description);
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_0__.createFlexContainer)(['reverse-setting']);
    container.appendChild(input);
    container.appendChild(label);
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/range.ts":
/*!****************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/range.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRangeSetting: () => (/* binding */ createRangeSetting)
/* harmony export */ });
/* harmony import */ var _Utils_timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/timeout */ "./a1sauce/Utils/timeout.ts");
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Components */ "./a1sauce/Settings/Components/index.ts");
/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Storage */ "./a1sauce/Settings/Storage/index.ts");
/* harmony import */ var _Styles_range_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Styles/range.css */ "./a1sauce/Settings/Library/Styles/range.css");




let isMouseDown = false;
async function updateRangeValue(rangeInput, add) {
    if (add) {
        rangeInput.value = String(parseInt(rangeInput.value, 10) + 1);
    }
    else {
        rangeInput.value = String(parseInt(rangeInput.value, 10) - 1);
    }
    rangeInput.dispatchEvent(new Event('input', { bubbles: true }));
    (0,_Storage__WEBPACK_IMPORTED_MODULE_2__.updateSetting)(rangeInput.id, rangeInput.value);
    await (0,_Utils_timeout__WEBPACK_IMPORTED_MODULE_0__.timeout)(50);
    if (isMouseDown)
        updateRangeValue(rangeInput, add);
}
const createRangeSetting = (name, description, options = {}) => {
    const { classes = options.classes ?? '', defaultValue = options.defaultValue ?? '100', min = options.min ?? 0, max = options.max ?? 100, unit = options.unit ?? '%', } = options;
    const rangeInput = (0,_Components__WEBPACK_IMPORTED_MODULE_1__.createInput)('range', name, defaultValue);
    rangeInput.setAttribute('min', min.toString());
    rangeInput.setAttribute('max', max.toString());
    const value = ((parseInt(rangeInput.value, 10) - parseInt(rangeInput.min, 10)) /
        (parseInt(rangeInput.max, 10) - parseInt(rangeInput.min))) *
        100;
    rangeInput.style.background =
        'linear-gradient(to right, #3e5765 0%, #3e5765 ' +
            value +
            '%, #0d1c24 ' +
            value +
            '%, #0d1c24 100%)';
    rangeInput.oninput = function () {
        const value = ((parseInt(rangeInput.value, 10) - parseInt(rangeInput.min, 10)) /
            (parseInt(rangeInput.max, 10) - parseInt(rangeInput.min))) *
            100;
        rangeInput.style.background =
            'linear-gradient(to right, #3e5765 0%, #3e5765 ' +
                value +
                '%, #0d1c24 ' +
                value +
                '%, #0d1c24 100%)';
    };
    const minusButton = document.createElement('div');
    minusButton.classList.add('minus-btn');
    minusButton.classList.add('nis-btn');
    minusButton.addEventListener('mousedown', () => {
        isMouseDown = true;
        updateRangeValue(rangeInput, false);
    });
    const plusButton = document.createElement('div');
    plusButton.classList.add('plus-btn');
    plusButton.classList.add('nis-btn');
    plusButton.addEventListener('mousedown', () => {
        isMouseDown = true;
        updateRangeValue(rangeInput, true);
    });
    minusButton.addEventListener('mouseleave', () => {
        isMouseDown = false;
    });
    plusButton.addEventListener('mouseleave', () => {
        isMouseDown = false;
    });
    document.addEventListener('mouseleave', () => {
        isMouseDown = false;
    });
    minusButton.onmouseup = () => {
        isMouseDown = false;
    };
    plusButton.onmouseup = () => {
        isMouseDown = false;
    };
    document.addEventListener('mouseup', () => {
        isMouseDown = false;
    });
    const flexcontainer = document.createElement('div');
    flexcontainer.classList.add('flex');
    flexcontainer.classList.add('flex-between-center');
    const label = (0,_Components__WEBPACK_IMPORTED_MODULE_1__.createLabel)(name, description);
    label.classList.add('full');
    if ((0,_Storage__WEBPACK_IMPORTED_MODULE_2__.getSetting)(name) != undefined) {
        rangeInput.value = (0,_Storage__WEBPACK_IMPORTED_MODULE_2__.getSetting)(name);
    }
    const output = (0,_Components__WEBPACK_IMPORTED_MODULE_1__.createOutput)();
    output.setAttribute('id', `${name}Output`);
    output.setAttribute('for', name);
    output.innerHTML = rangeInput.value + unit;
    output.after(unit);
    const container = (0,_Components__WEBPACK_IMPORTED_MODULE_1__.createFlexContainer)();
    if (classes.length) {
        for (let i = classes.length; i--; i >= 0) {
            container.classList.add(classes[i]);
        }
    }
    container.classList.add('flex-wrap');
    container.appendChild(label);
    flexcontainer.appendChild(minusButton);
    flexcontainer.appendChild(rangeInput);
    flexcontainer.appendChild(plusButton);
    container.appendChild(flexcontainer);
    container.appendChild(output);
    rangeInput.addEventListener('input', () => {
        output.innerHTML = rangeInput.value + unit;
    });
    return container;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/seperator.ts":
/*!********************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/seperator.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSeperator: () => (/* binding */ createSeperator)
/* harmony export */ });
const createSeperator = () => {
    return document.createElement('hr');
};


/***/ }),

/***/ "./a1sauce/Settings/Library/Controls/text.ts":
/*!***************************************************!*\
  !*** ./a1sauce/Settings/Library/Controls/text.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createHeading: () => (/* binding */ createHeading),
/* harmony export */   createSmallText: () => (/* binding */ createSmallText),
/* harmony export */   createText: () => (/* binding */ createText)
/* harmony export */ });
const createHeading = (size, content) => {
    const header = document.createElement(size);
    header.innerHTML = content;
    return header;
};
const createText = (content) => {
    const text = document.createElement('p');
    text.innerHTML = content;
    return text;
};
const createSmallText = (content) => {
    const text = document.createElement('small');
    text.innerHTML = content;
    return text;
};


/***/ }),

/***/ "./a1sauce/Settings/Library/index.ts":
/*!*******************************************!*\
  !*** ./a1sauce/Settings/Library/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAlarmSetting: () => (/* reexport safe */ _Controls_alarm__WEBPACK_IMPORTED_MODULE_0__.createAlarmSetting),
/* harmony export */   createButton: () => (/* reexport safe */ _Controls_button__WEBPACK_IMPORTED_MODULE_1__.createButton),
/* harmony export */   createCheckboxSetting: () => (/* reexport safe */ _Controls_checkbox__WEBPACK_IMPORTED_MODULE_2__.createCheckboxSetting),
/* harmony export */   createDropdownSetting: () => (/* reexport safe */ _Controls_dropdown__WEBPACK_IMPORTED_MODULE_3__.createDropdownSetting),
/* harmony export */   createFileSetting: () => (/* reexport safe */ _Controls_file__WEBPACK_IMPORTED_MODULE_5__.createFileSetting),
/* harmony export */   createHeading: () => (/* reexport safe */ _Controls_text__WEBPACK_IMPORTED_MODULE_9__.createHeading),
/* harmony export */   createNumberSetting: () => (/* reexport safe */ _Controls_number__WEBPACK_IMPORTED_MODULE_6__.createNumberSetting),
/* harmony export */   createRangeSetting: () => (/* reexport safe */ _Controls_range__WEBPACK_IMPORTED_MODULE_7__.createRangeSetting),
/* harmony export */   createSeperator: () => (/* reexport safe */ _Controls_seperator__WEBPACK_IMPORTED_MODULE_8__.createSeperator),
/* harmony export */   createSmallText: () => (/* reexport safe */ _Controls_text__WEBPACK_IMPORTED_MODULE_9__.createSmallText),
/* harmony export */   createText: () => (/* reexport safe */ _Controls_text__WEBPACK_IMPORTED_MODULE_9__.createText),
/* harmony export */   createTextSetting: () => (/* reexport safe */ _Controls_input__WEBPACK_IMPORTED_MODULE_4__.createTextSetting)
/* harmony export */ });
/* harmony import */ var _Controls_alarm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Controls/alarm */ "./a1sauce/Settings/Library/Controls/alarm.ts");
/* harmony import */ var _Controls_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Controls/button */ "./a1sauce/Settings/Library/Controls/button.ts");
/* harmony import */ var _Controls_checkbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Controls/checkbox */ "./a1sauce/Settings/Library/Controls/checkbox.ts");
/* harmony import */ var _Controls_dropdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Controls/dropdown */ "./a1sauce/Settings/Library/Controls/dropdown.ts");
/* harmony import */ var _Controls_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Controls/input */ "./a1sauce/Settings/Library/Controls/input.ts");
/* harmony import */ var _Controls_file__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Controls/file */ "./a1sauce/Settings/Library/Controls/file.ts");
/* harmony import */ var _Controls_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Controls/number */ "./a1sauce/Settings/Library/Controls/number.ts");
/* harmony import */ var _Controls_range__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Controls/range */ "./a1sauce/Settings/Library/Controls/range.ts");
/* harmony import */ var _Controls_seperator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Controls/seperator */ "./a1sauce/Settings/Library/Controls/seperator.ts");
/* harmony import */ var _Controls_text__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Controls/text */ "./a1sauce/Settings/Library/Controls/text.ts");







//export * from './Controls/profile';





/***/ }),

/***/ "./a1sauce/Settings/Storage/index.ts":
/*!*******************************************!*\
  !*** ./a1sauce/Settings/Storage/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSetting: () => (/* binding */ getSetting),
/* harmony export */   loadSettings: () => (/* binding */ loadSettings),
/* harmony export */   setDefaultCheckbox: () => (/* binding */ setDefaultCheckbox),
/* harmony export */   setDefaultNumberOrRange: () => (/* binding */ setDefaultNumberOrRange),
/* harmony export */   setDefaultOther: () => (/* binding */ setDefaultOther),
/* harmony export */   setDefaultSettings: () => (/* binding */ setDefaultSettings),
/* harmony export */   settingsExist: () => (/* binding */ settingsExist),
/* harmony export */   updateSetting: () => (/* binding */ updateSetting)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./a1sauce/index.ts");

const setDefaultSettings = () => {
    const settings = document.querySelectorAll('[data-setting]');
    for (const setting of settings) {
        if (setting.dataset.setting === undefined)
            throw Error(`Setting (${setting.id}) is missing a data-setting`);
        switch (setting.type) {
            case 'number':
            case 'range':
                setDefaultNumberOrRange(setting);
                break;
            case 'checkbox':
                setDefaultCheckbox(setting);
                break;
            default:
                setDefaultOther(setting);
        }
    }
};
const setDefaultNumberOrRange = (setting) => {
    if (setting.dataset.defaultValue === undefined)
        throw Error('Range input value is undefined');
    updateSetting(setting.dataset.setting, parseInt(setting.dataset.defaultValue, 10));
};
const setDefaultCheckbox = (setting) => {
    if (setting.dataset.defaultValue == 'false') {
        updateSetting(setting.dataset.setting, false);
    }
    else {
        updateSetting(setting.dataset.setting, true);
    }
};
const setDefaultOther = (setting) => {
    updateSetting(setting.dataset.setting, setting.dataset.defaultValue);
};
const loadSettings = () => {
    const settings = document.querySelectorAll('[data-setting]');
    for (const dataSetting of settings) {
        if (dataSetting.dataset.setting === undefined)
            throw Error(`Setting (${dataSetting.id}) is missing a data-setting`);
        const { setting, defaultValue } = dataSetting.dataset;
        switch (dataSetting.type) {
            case 'number':
            case 'range':
                dataSetting.value = getSetting(setting) ?? defaultValue;
                break;
            case 'checkbox':
                dataSetting.checked = getSetting(setting) || defaultValue;
                break;
            default:
                dataSetting.value = getSetting(setting) || defaultValue;
        }
    }
};
const settingsExist = () => {
    const sauce = _index__WEBPACK_IMPORTED_MODULE_0__.A1Sauce.instance;
    if (!localStorage[sauce.getName()]) {
        setDefaultSettings();
    }
    else {
        loadSettings();
    }
};
const getSetting = (setting) => {
    const sauce = _index__WEBPACK_IMPORTED_MODULE_0__.A1Sauce.instance;
    if (!localStorage[sauce.getName()]) {
        localStorage.setItem(sauce.getName(), JSON.stringify({}));
        setDefaultSettings();
    }
    return JSON.parse(localStorage[sauce.getName()])[setting];
};
const updateSetting = (setting, value) => {
    if (!setting) {
        throw Error(`Failed to updating setting as it's invalid.`);
    }
    const sauce = _index__WEBPACK_IMPORTED_MODULE_0__.A1Sauce.instance;
    if (!localStorage.getItem(sauce.getName())) {
        localStorage.setItem(sauce.getName(), JSON.stringify({}));
    }
    const save_data = JSON.parse(localStorage[sauce.getName()]);
    save_data[setting] = value;
    localStorage.setItem(sauce.getName(), JSON.stringify(save_data));
};


/***/ }),

/***/ "./a1sauce/Settings/index.ts":
/*!***********************************!*\
  !*** ./a1sauce/Settings/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Settings: () => (/* binding */ Settings),
/* harmony export */   SettingsManager: () => (/* binding */ SettingsManager),
/* harmony export */   SettingsType: () => (/* binding */ SettingsType)
/* harmony export */ });
/* harmony import */ var _Library_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Library/index */ "./a1sauce/Settings/Library/index.ts");

const SettingsType = {
    Alarm: 'alarm',
    Button: 'button',
    Checkbox: 'checkbox',
    Dropdown: 'dropdown',
    Input: 'input',
    Number: 'number',
    Profile: 'profile',
    Range: 'range',
};
/*
 *
 * Settings Manager is your access point to localStorage and building your Settings UI.
 *
 */
class SettingsManager {
    static #instance;
    name = '';
    majorVersion = 0;
    minorVersion = 0;
    patchVersion = 0;
    settings = [];
    constructor() { }
    static get instance() {
        if (!SettingsManager.#instance) {
            SettingsManager.#instance = new SettingsManager();
        }
        return SettingsManager.#instance;
    }
    setName = (name) => {
        this.name = name;
        return this;
    };
    getName = () => {
        return this.name;
    };
    addAlarmSetting = (name, description, options) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createAlarmSetting(name, description, options));
        return this;
    };
    addButton = (name, content, 
    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    fn, options) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createButton(name, content, fn, options));
        return this;
    };
    addCheckboxSetting = (name, description, defaultValue) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createCheckboxSetting(name, description, defaultValue));
        return this;
    };
    addDropdownSetting = (name, description, defaultValue, options) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createDropdownSetting(name, description, defaultValue, options));
        return this;
    };
    addHeader = (size, content) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createHeading(size, content));
        return this;
    };
    addText = (content) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createText(content));
        return this;
    };
    addSmallText = (content) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createSmallText(content));
        return this;
    };
    addSeperator = () => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createSeperator());
        return this;
    };
    addTextSetting = (name, description, defaultValue) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createTextSetting(name, description, defaultValue));
        return this;
    };
    addFileSetting = (name, description, defaultValue) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createFileSetting(name, description, defaultValue));
        return this;
    };
    addNumberSetting = (name, description, options = {}) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createNumberSetting(name, description, options));
        return this;
    };
    addRangeSetting = (name, description, options = {}) => {
        this.settings?.push(_Library_index__WEBPACK_IMPORTED_MODULE_0__.createRangeSetting(name, description, options));
        return this;
    };
    getSettings = () => {
        return this.settings;
    };
    build = () => {
        const settings = this.getSettings();
        if (settings === null)
            throw new Error('Settings are empty - add settings before calling build()');
        const container = document.createElement('div');
        container.id = 'Settings';
        for (let i = 0; i < settings.length; i++) {
            container.append(settings[i]);
        }
        document.body.append(container);
    };
}
const Settings = SettingsManager.instance;


/***/ }),

/***/ "./a1sauce/Utils/capitalizeName.ts":
/*!*****************************************!*\
  !*** ./a1sauce/Utils/capitalizeName.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   capitalizeAppName: () => (/* binding */ capitalizeAppName)
/* harmony export */ });
const capitalizeAppName = (str) => {
    let split_str = [];
    if (str.includes('-') && str.includes(')')) {
        throw new Error('AppName must use either a hyphen or underscore as seperator - not both!');
    }
    if (str.includes('-')) {
        // 'job-gauges'
        split_str = str.split('-');
    }
    // 'job_gauges'
    else if (str.includes('_')) {
        split_str = str.split('_');
    }
    // 'JobGauges'
    else {
        split_str = str.split(/(?=[A-Z])/);
    }
    for (let i = 0; i < split_str.length; i++) {
        split_str[i] = split_str[i][0].toUpperCase() + split_str[i].substr(1);
    }
    return split_str.join(' ');
};


/***/ }),

/***/ "./a1sauce/Utils/getById.ts":
/*!**********************************!*\
  !*** ./a1sauce/Utils/getById.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getById: () => (/* binding */ getById)
/* harmony export */ });
const getById = (id) => {
    return document.getElementById(id);
};


/***/ }),

/***/ "./a1sauce/Utils/tempTooltip.ts":
/*!**************************************!*\
  !*** ./a1sauce/Utils/tempTooltip.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tempTooltip: () => (/* binding */ tempTooltip)
/* harmony export */ });
/* harmony import */ var _timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeout */ "./a1sauce/Utils/timeout.ts");

/* Must only be called after `window.onload` checks for `window.alt1` */
const tempTooltip = (msg, time) => {
    if (window.alt1 === undefined)
        throw new Error('Alt1 not detected in window object');
    /*
     * It isn't possible to mock the alt1 call and since window.alt1 must exist
     * for apps to work the below code is guaranteed to work if we get past the above check
     */
    /* c8 ignore start */
    alt1.setTooltip(msg);
    (0,_timeout__WEBPACK_IMPORTED_MODULE_0__.timeout)(time).then(() => {
        alt1.clearTooltip();
    });
    /* c8 ignore end */
};


/***/ }),

/***/ "./a1sauce/Utils/timeout.ts":
/*!**********************************!*\
  !*** ./a1sauce/Utils/timeout.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   timeout: () => (/* binding */ timeout)
/* harmony export */ });
const timeout = async (millis) => {
    return new Promise(function (resolve) {
        setTimeout(resolve, millis);
    });
};


/***/ }),

/***/ "./a1sauce/index.ts":
/*!**************************!*\
  !*** ./a1sauce/index.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A1Sauce: () => (/* binding */ A1Sauce)
/* harmony export */ });
/* harmony import */ var _Settings_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Settings/index */ "./a1sauce/Settings/index.ts");
/* harmony import */ var _Utils_capitalizeName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/capitalizeName */ "./a1sauce/Utils/capitalizeName.ts");


class A1Sauce {
    static #instance;
    Settings = _Settings_index__WEBPACK_IMPORTED_MODULE_0__.SettingsManager.instance;
    publicName;
    constructor() { }
    static get instance() {
        if (!A1Sauce.#instance) {
            A1Sauce.#instance = new A1Sauce();
            A1Sauce.#instance.Settings = _Settings_index__WEBPACK_IMPORTED_MODULE_0__.SettingsManager.instance;
        }
        return A1Sauce.#instance;
    }
    createSettings = () => {
        this.Settings = _Settings_index__WEBPACK_IMPORTED_MODULE_0__.SettingsManager.instance;
        return this.Settings;
    };
    setName = (name) => {
        this.Settings.setName(name);
        this.setPublicName(name);
        return this;
    };
    setPublicName = (name) => {
        this.publicName = (0,_Utils_capitalizeName__WEBPACK_IMPORTED_MODULE_1__.capitalizeAppName)(name);
        return this;
    };
    getName = () => {
        return this.Settings.getName();
    };
    getPublicName = () => {
        return this.publicName;
    };
    setVersion = (major, minor, patch) => {
        this.Settings.majorVersion = major;
        this.Settings.minorVersion = minor;
        this.Settings.patchVersion = patch;
        return this;
    };
    getVersion = () => {
        const major = this.Settings.majorVersion;
        const minor = this.Settings.minorVersion;
        const patch = this.Settings.patchVersion;
        return `${major}.${minor}.${patch}`;
    };
}


/***/ }),

/***/ "./data/constants.ts":
/*!***************************!*\
  !*** ./data/constants.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appName: () => (/* binding */ appName),
/* harmony export */   majorVersion: () => (/* binding */ majorVersion),
/* harmony export */   minorVersion: () => (/* binding */ minorVersion),
/* harmony export */   patchVersion: () => (/* binding */ patchVersion),
/* harmony export */   versionUrl: () => (/* binding */ versionUrl)
/* harmony export */ });
const appName = 'job-gauges';
const versionUrl = 'https://nadyanayme.github.io/job-gauges/dist/version.json';
const majorVersion = 1;
const minorVersion = 1;
const patchVersion = 4;


/***/ }),

/***/ "./data/magicGauge.ts":
/*!****************************!*\
  !*** ./data/magicGauge.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   magic_gauge: () => (/* binding */ magic_gauge)
/* harmony export */ });
const magic_gauge = {
    isInCombat: false,
    position: {
        x: 50,
        y: 50,
    },
    spells: {
        isActiveOverlay: true,
        activeSpell: 0,
        bloodTithe: {
            name: 'Blood_Tithe',
            isActiveOverlay: true,
            active: true,
            stacks: 0,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 68,
                    y: 12,
                },
                split: {
                    x: 68,
                    y: 12,
                },
                reverse_split: {
                    x: 68,
                    y: 12,
                },
            },
        },
        glacialEmbrace: {
            name: 'Glacial_Embrace',
            isActiveOverlay: true,
            active: true,
            stacks: 0,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 68,
                    y: 12,
                },
                split: {
                    x: 68,
                    y: 12,
                },
                reverse_split: {
                    x: 68,
                    y: 12,
                },
            },
        },
    },
    instability: {
        isActiveOverlay: true,
        active: true,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 30,
                y: 5,
            },
            split: {
                x: 30,
                y: 5,
            },
            reverse_split: {
                x: 30,
                y: 5,
            },
        },
    },
    odeToDeceit: {
        isActiveOverlay: true,
        active: false,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: -3,
                y: 5,
            },
            split: {
                x: -3,
                y: 5,
            },
            reverse_split: {
                x: -3,
                y: 5,
            },
        },
    },
    tsunami: {
        isActiveOverlay: true,
        active: true,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 55,
                y: 45,
            },
            split: {
                x: 55,
                y: 45,
            },
            reverse_split: {
                x: 55,
                y: 45,
            },
        },
    },
    sunshine: {
        isActiveOverlay: true,
        active: true,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 10,
                y: 45,
            },
            split: {
                x: 10,
                y: 45,
            },
            reverse_split: {
                x: 10,
                y: 45,
            },
        },
    },
};


/***/ }),

/***/ "./data/meleeGauge.ts":
/*!****************************!*\
  !*** ./data/meleeGauge.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   melee_gauge: () => (/* binding */ melee_gauge)
/* harmony export */ });
const melee_gauge = {
    isInCombat: false,
    position: {
        x: 50,
        y: 50,
    },
    berserk: {
        isActiveOverlay: false,
        active: false,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 0,
                y: 0,
            },
            split: {
                x: 0,
                y: 0,
            },
            reverse_split: {
                x: 0,
                y: 0,
            },
        },
    },
};


/***/ }),

/***/ "./data/necromancyGauge.ts":
/*!*********************************!*\
  !*** ./data/necromancyGauge.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   necromancy_gauge: () => (/* binding */ necromancy_gauge)
/* harmony export */ });
const necromancy_gauge = {
    isInCombat: false,
    position: {
        x: 50,
        y: 50,
    },
    stacks: {
        souls: {
            name: 'Residual_Souls',
            isActiveOverlay: true,
            active: true,
            stacks: 0,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: -10,
                    y: 50,
                },
                split: {
                    x: -10,
                    y: 50,
                },
                reverse_split: {
                    x: -10,
                    y: 50,
                },
            },
            alarm: {
                isActive: false,
                isLooping: false,
                volume: 100,
                sound: './resource/alarms/alarm2.wav',
                threshold: 5,
            },
        },
        necrosis: {
            name: 'Necrosis_Stacks',
            isActiveOverlay: true,
            active: true,
            stacks: 0,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: -10,
                    y: 99,
                },
                split: {
                    x: -10,
                    y: 99,
                },
                reverse_split: {
                    x: -10,
                    y: 99,
                },
            },
            alarm: {
                isActive: false,
                isLooping: false,
                volume: 100,
                sound: './resource/alarms/alarm2.wav',
                threshold: 12,
            },
        },
        pre95Souls: false,
        duplicateNecrosisRow: false,
        useColoredNecrosis: false,
    },
    conjures: {
        active: false,
        isActiveOverlay: true,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: -12,
                y: 5,
            },
            split: {
                x: 15,
                y: 5,
            },
            reverse_split: {
                x: -12,
                y: 5,
            },
        },
        skeleton: {
            name: 'Skeleton_Warrior',
            isActiveOverlay: true,
            time: 0,
            active: false,
        },
        zombie: {
            name: 'Putrid_Zombie',
            isActiveOverlay: true,
            time: 0,
            active: false,
        },
        ghost: {
            name: 'Vengeful_Ghost',
            isActiveOverlay: true,
            time: 0,
            active: false,
        },
        phantom: {
            name: 'Phantom_Guardian',
            isActiveOverlay: true,
            time: 0,
            active: false,
        },
    },
    incantations: {
        active: [false, false, true, true],
        isActiveOverlay: true,
        invokeDeath: {
            isActiveOverlay: true,
            time: 0,
            active: false,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 72,
                    y: 5,
                },
                split: {
                    x: -9,
                    y: 0,
                },
                reverse_split: {
                    x: 29,
                    y: 0,
                },
            },
        },
        darkness: {
            name: 'Darkness',
            isActiveOverlay: true,
            time: 0,
            active: false,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 72,
                    y: 24,
                },
                split: {
                    x: -9,
                    y: 24,
                },
                reverse_split: {
                    x: 29,
                    y: 24,
                },
            },
        },
        splitSoul: {
            isActiveOverlay: true,
            active: false,
            time: 0,
            isOnCooldown: false,
            cooldownDuration: 41,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 50,
                    y: 24,
                },
                split: {
                    x: 49,
                    y: 24,
                },
                reverse_split: {
                    x: 28,
                    y: 24,
                },
            },
        },
        threads: {
            isActiveOverlay: true,
            active: false,
            time: 0,
            isOnCooldown: false,
            cooldownDuration: 40,
            position: {
                active_orientation: {
                    x: 0,
                    y: 0,
                },
                grouped: {
                    x: 50,
                    y: 0,
                },
                split: {
                    x: 49,
                    y: 0,
                },
                reverse_split: {
                    x: 28,
                    y: 0,
                },
            },
        },
    },
    livingDeath: {
        isActiveOverlay: true,
        active: false,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 60,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 30,
                y: 5,
            },
            split: {
                x: 58,
                y: 5,
            },
            reverse_split: {
                x: 81,
                y: 5,
            },
        },
    },
    bloat: {
        isActiveOverlay: true,
        active: false,
        time: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: -10,
                y: 74,
            },
            split: {
                x: -10,
                y: 74,
            },
            reverse_split: {
                x: -10,
                y: 74,
            },
        },
    },
};


/***/ }),

/***/ "./data/rangedGauge.ts":
/*!*****************************!*\
  !*** ./data/rangedGauge.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ranged_gauge: () => (/* binding */ ranged_gauge)
/* harmony export */ });
const ranged_gauge = {
    isInCombat: false,
    position: {
        x: 50,
        y: 50,
    },
    ammo: {
        isActiveOverlay: true,
        activeAmmo: '',
    },
    balanceByForce: false,
    deathsSwiftness: {
        isActiveOverlay: true,
        active: true,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 10,
                y: 45,
            },
            split: {
                x: 10,
                y: 45,
            },
            reverse_split: {
                x: 10,
                y: 45,
            },
        },
    },
    crystalRain: {
        isActiveOverlay: true,
        active: false,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 35,
                y: 5,
            },
            split: {
                x: 35,
                y: 5,
            },
            reverse_split: {
                x: 35,
                y: 5,
            },
        },
    },
    splitSoul: {
        isActiveOverlay: true,
        active: false,
        time: 0,
        isOnCooldown: false,
        cooldownDuration: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: -3,
                y: 5,
            },
            split: {
                x: -3,
                y: 5,
            },
            reverse_split: {
                x: -3,
                y: 5,
            },
        },
    },
    perfectEquilibrium: {
        name: 'Perfect_Equilibrium',
        isActiveOverlay: true,
        active: true,
        stacks: 0,
        position: {
            active_orientation: {
                x: 0,
                y: 0,
            },
            grouped: {
                x: 55,
                y: 45,
            },
            split: {
                x: 55,
                y: 45,
            },
            reverse_split: {
                x: 55,
                y: 45,
            },
        },
    },
};


/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   beginRendering: () => (/* binding */ beginRendering),
/* harmony export */   findBuffAndDebuffBars: () => (/* binding */ findBuffAndDebuffBars),
/* harmony export */   resetPositionsAndFindBuffAndDebuffBars: () => (/* binding */ resetPositionsAndFindBuffAndDebuffBars),
/* harmony export */   startApp: () => (/* binding */ startApp)
/* harmony export */ });
/* harmony import */ var _lib_utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/utility */ "./lib/utility.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./types/index.ts");
/* harmony import */ var _lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/readBuffs */ "./lib/readBuffs.ts");
/* harmony import */ var _lib_readEnemy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/readEnemy */ "./lib/readEnemy.ts");
/* harmony import */ var _data_necromancyGauge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/necromancyGauge */ "./data/necromancyGauge.ts");
/* harmony import */ var _lib_necromancy_conjures__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/necromancy/conjures */ "./lib/necromancy/conjures.ts");
/* harmony import */ var _lib_necromancy_soul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/necromancy/soul */ "./lib/necromancy/soul.ts");
/* harmony import */ var _lib_necromancy_necrosis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/necromancy/necrosis */ "./lib/necromancy/necrosis.ts");
/* harmony import */ var _lib_necromancy_incantations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/necromancy/incantations */ "./lib/necromancy/incantations.ts");
/* harmony import */ var _lib_necromancy_livingDeath__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/necromancy/livingDeath */ "./lib/necromancy/livingDeath.ts");
/* harmony import */ var _lib_necromancy_bloat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/necromancy/bloat */ "./lib/necromancy/bloat.ts");
/* harmony import */ var _data_magicGauge__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./data/magicGauge */ "./data/magicGauge.ts");
/* harmony import */ var _data_rangedGauge__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./data/rangedGauge */ "./data/rangedGauge.ts");
/* harmony import */ var _data_meleeGauge__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./data/meleeGauge */ "./data/meleeGauge.ts");
/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index.html */ "./index.html");
/* harmony import */ var _appconfig_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./appconfig.json */ "./appconfig.json");
/* harmony import */ var _version_json__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./version.json */ "./version.json");
/* harmony import */ var _icon_png__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./icon.png */ "./icon.png");
/* harmony import */ var _css_styles_css__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./css/styles.css */ "./css/styles.css");
/* harmony import */ var _a1sauce__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./a1sauce */ "./a1sauce/index.ts");
/* harmony import */ var _a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./a1sauce/Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* harmony import */ var _a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./a1sauce/Utils/getById */ "./a1sauce/Utils/getById.ts");
/* harmony import */ var _lib_settings__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./lib/settings */ "./lib/settings/index.ts");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./data/constants */ "./data/constants.ts");
/* harmony import */ var _a1sauce_Patches_patchNotes__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./a1sauce/Patches/patchNotes */ "./a1sauce/Patches/patchNotes.ts");
/* harmony import */ var _patchnotes__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./patchnotes */ "./patchnotes.ts");
/* harmony import */ var _a1sauce_Patches_serverCheck__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./a1sauce/Patches/serverCheck */ "./a1sauce/Patches/serverCheck.ts");
/* harmony import */ var _lib_magic_sunshine__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./lib/magic/sunshine */ "./lib/magic/sunshine.ts");
/* harmony import */ var _lib_magic_activeSpell__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./lib/magic/activeSpell */ "./lib/magic/activeSpell.ts");
/* harmony import */ var _lib_magic_instability__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./lib/magic/instability */ "./lib/magic/instability.ts");
/* harmony import */ var _lib_magic_tsunami__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./lib/magic/tsunami */ "./lib/magic/tsunami.ts");
/* harmony import */ var _lib_ranged_deathsSwiftness__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./lib/ranged/deathsSwiftness */ "./lib/ranged/deathsSwiftness.ts");
/* harmony import */ var _lib_ranged_crystalRain__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./lib/ranged/crystalRain */ "./lib/ranged/crystalRain.ts");
/* harmony import */ var _lib_ranged_perfectEquilibrium__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./lib/ranged/perfectEquilibrium */ "./lib/ranged/perfectEquilibrium.ts");
/* harmony import */ var _lib_magic_odeToDeceit__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./lib/magic/odeToDeceit */ "./lib/magic/odeToDeceit.ts");
/* harmony import */ var _lib_ranged_splitSoul__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./lib/ranged/splitSoul */ "./lib/ranged/splitSoul.ts");
/* harmony import */ var _a1sauce_Error_logError__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./a1sauce/Error/logError */ "./a1sauce/Error/logError.ts");


// General Purpose


// Necromancy Gauge







// Magic Gauge

// Ranged Gauge

// Melee Gauge

























const sauce = _a1sauce__WEBPACK_IMPORTED_MODULE_19__.A1Sauce.instance;
sauce.setName(_data_constants__WEBPACK_IMPORTED_MODULE_23__.appName);
sauce.setVersion(_data_constants__WEBPACK_IMPORTED_MODULE_23__.majorVersion, _data_constants__WEBPACK_IMPORTED_MODULE_23__.minorVersion, _data_constants__WEBPACK_IMPORTED_MODULE_23__.patchVersion);
sauce.createSettings();
const errorLogger = new _a1sauce_Error_logError__WEBPACK_IMPORTED_MODULE_36__.LogError();
const gauges = {
    isInCombat: false,
    checkCombatStatus: false,
    hasBeenOutOfCombat: 10,
    scaleFactor: 1,
    combatStyle: 3,
    automaticSwapping: false,
    necromancy: _data_necromancyGauge__WEBPACK_IMPORTED_MODULE_4__.necromancy_gauge,
    magic: _data_magicGauge__WEBPACK_IMPORTED_MODULE_11__.magic_gauge,
    ranged: _data_rangedGauge__WEBPACK_IMPORTED_MODULE_12__.ranged_gauge,
    melee: _data_meleeGauge__WEBPACK_IMPORTED_MODULE_13__.melee_gauge,
};
async function renderOverlays() {
    await (0,_lib_readEnemy__WEBPACK_IMPORTED_MODULE_3__.readEnemy)(gauges);
    if (!gauges.isInCombat && !(0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('updatingOverlayPosition')) {
        return _lib_utility__WEBPACK_IMPORTED_MODULE_0__.clearTextOverlays();
    }
    await (0,_lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__.readBuffs)(gauges);
    switch (gauges.combatStyle) {
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.necro:
            await (0,_lib_necromancy_livingDeath__WEBPACK_IMPORTED_MODULE_9__.livingDeathOverlay)(gauges);
            await (0,_lib_necromancy_conjures__WEBPACK_IMPORTED_MODULE_5__.conjureOverlay)(gauges);
            await (0,_lib_necromancy_soul__WEBPACK_IMPORTED_MODULE_6__.soulsOverlay)(gauges);
            await (0,_lib_necromancy_necrosis__WEBPACK_IMPORTED_MODULE_7__.necrosisOverlay)(gauges);
            await (0,_lib_necromancy_incantations__WEBPACK_IMPORTED_MODULE_8__.incantationsOverlay)(gauges);
            await (0,_lib_necromancy_bloat__WEBPACK_IMPORTED_MODULE_10__.bloatOverlay)(gauges);
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.mage:
            await (0,_lib_magic_sunshine__WEBPACK_IMPORTED_MODULE_27__.sunshineOverlay)(gauges);
            await (0,_lib_magic_activeSpell__WEBPACK_IMPORTED_MODULE_28__.spellsOverlay)(gauges);
            await (0,_lib_magic_instability__WEBPACK_IMPORTED_MODULE_29__.fsoaOverlay)(gauges);
            await (0,_lib_magic_tsunami__WEBPACK_IMPORTED_MODULE_30__.tsunamiOverlay)(gauges);
            await (0,_lib_magic_odeToDeceit__WEBPACK_IMPORTED_MODULE_34__.odeToDeceitOverlay)(gauges);
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.ranged:
            await (0,_lib_ranged_deathsSwiftness__WEBPACK_IMPORTED_MODULE_31__.deathsSwiftnessOverlay)(gauges);
            await (0,_lib_ranged_crystalRain__WEBPACK_IMPORTED_MODULE_32__.crystalRainOverlay)(gauges);
            await (0,_lib_ranged_perfectEquilibrium__WEBPACK_IMPORTED_MODULE_33__.peOverlay)(gauges);
            await (0,_lib_ranged_splitSoul__WEBPACK_IMPORTED_MODULE_35__.rangedSplitSoulOverlay)(gauges);
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.melee:
            break;
    }
}
async function startApp() {
    if (!window.alt1) {
        return errorLogger.showError({
            title: 'Missing Alt1',
            message: `<p>You need to run this page in Alt1 to be able to capture the screen.</p>`,
        });
    }
    if (!alt1.permissionPixel) {
        return errorLogger.showError({
            title: 'Missing Screen Reading Permissions',
            message: `<p>This app does not have permissions to capture your screen. Please adjust the app's settings in Alt1.</p>`,
        });
    }
    if (!alt1.permissionOverlay) {
        return errorLogger.showError({
            title: 'Missing Overlay Permissions',
            message: `<p>This app does not have permissions to create overlays. Please adjust the app's settings in Alt1.</p>`,
        });
    }
    const patchNotes = new _a1sauce_Patches_patchNotes__WEBPACK_IMPORTED_MODULE_24__.Patches();
    patchNotes.setNotes(_patchnotes__WEBPACK_IMPORTED_MODULE_25__.notes);
    if (patchNotes.checkForNewVersion())
        patchNotes.showPatchNotes();
    document.addEventListener('keydown', function (event) {
        if (event.ctrlKey && event.key === 'p') {
            event.preventDefault(); // Prevent the default print dialog
            patchNotes.showPatchNotes();
        }
    });
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('buffsPosition') == undefined) {
        calibrationWarning();
    }
    setNecromancyGaugeData(gauges);
    updateActiveOrientationFromLocalStorage();
    // Apparently setting GroupZIndex is a pretty expensive call to do in the loop - so let's only do it once
    alt1.overLaySetGroupZIndex('Undead_Army_Text', 1);
    alt1.overLaySetGroupZIndex('LivingDeath_Text', 1);
    alt1.overLaySetGroupZIndex('LivingDeath_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('Sunshine_Text', 1);
    alt1.overLaySetGroupZIndex('Sunshine_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('Instability_Text', 1);
    alt1.overLaySetGroupZIndex('Instability_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('Tsunami_Text', 1);
    alt1.overLaySetGroupZIndex('Tsunami_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('OdeToDeceit_Text', 1);
    alt1.overLaySetGroupZIndex('OdeToDeceit_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('DeathsSwiftness_Text', 1);
    alt1.overLaySetGroupZIndex('DeathsSwiftness_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('CrystalRain_Text', 1);
    alt1.overLaySetGroupZIndex('CrystalRain_Cooldown_Text', 1);
    alt1.overLaySetGroupZIndex('PerfectEquilibrium_Text', 1);
    alt1.overLaySetGroupZIndex('SplitSoul_Text', 1);
    findBuffAndDebuffBars();
    beginRendering();
}
function findBuffAndDebuffBars() {
    (0,_lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__.findBuffsBar)();
    (0,_lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__.findDebuffsBar)();
}
function resetPositionsAndFindBuffAndDebuffBars() {
    (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.updateSetting)('buffsPosition', undefined);
    (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.updateSetting)('debuffsPosition', undefined);
    findBuffAndDebuffBars();
}
function beginRendering() {
    setInterval(() => renderOverlays(), 80);
}
function calibrationWarning() {
    alt1.setTooltip('[JG] Use a Defensive ability such as Freedom or Anticipate to capture buffs location.');
    setTimeout(() => {
        alt1.clearTooltip();
        (0,_lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__.findBuffsBar)();
    }, 3000);
    setTimeout(() => {
        alt1.setTooltip('[JG] Toggle Prayer on for a few seconds to capture debuffs location.');
    }, 4000);
    setTimeout(() => {
        alt1.clearTooltip();
        (0,_lib_readBuffs__WEBPACK_IMPORTED_MODULE_2__.findDebuffsBar)();
    }, 8000);
}
function updateActiveOrientationFromLocalStorage() {
    // Retrieve selected orientation from localStorage
    let selectedOrientation = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('selectedOrientation');
    if (!selectedOrientation) {
        selectedOrientation = 'reverse_split';
    }
    (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.updateSetting)('selectedOrientation', selectedOrientation);
    function isOrientation(obj, key) {
        return key === 'active_orientation' && !!obj.active_orientation;
    }
    // Function to recursively update orientations in an object
    function updateActiveOrientation(obj) {
        for (const key in obj) {
            // TODO: Fix types here. This code works w/o issues as-is and I'm not sure how to make it happy
            if (typeof obj[key] === 'object') {
                if (isOrientation(obj, key)) {
                    obj['active_orientation'].x = obj[selectedOrientation].x;
                    obj['active_orientation'].y = obj[selectedOrientation].y;
                }
                else {
                    updateActiveOrientation(obj[key]);
                }
            }
        }
        _lib_utility__WEBPACK_IMPORTED_MODULE_0__.freezeOverlays();
        _lib_utility__WEBPACK_IMPORTED_MODULE_0__.continueOverlays();
    }
    updateActiveOrientation(gauges);
}
// TODO: Get rid of this crap
// Null suppressions are used as these items
// are added via A1Sauce.Settings and thus will always exist
function addEventListeners() {
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('selectedOrientation').addEventListener('change', () => {
        updateActiveOrientationFromLocalStorage();
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('showNecrosis').addEventListener('change', () => {
        gauges.necromancy.stacks.duplicateNecrosisRow = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('dupeRow');
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('defaultCombatStyle').addEventListener('change', () => {
        gauges.combatStyle = parseInt((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('defaultCombatStyle'), 10);
        // Clear all overlays, this gives a snappier feeling in the UI.
        (0,_lib_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlays)();
    });
    // For some reason this one calculates incorrectly on load so we override the initial styles here
    const scaleRange = (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('scale');
    const scaleRangevalue = ((parseInt(scaleRange.value, 10) - parseInt(scaleRange.min, 10)) /
        (parseInt(scaleRange.max, 10) - parseInt(scaleRange.min))) *
        100;
    scaleRange.style.background =
        'linear-gradient(to right, #3e5765 0%, #3e5765 ' +
            scaleRangevalue +
            '%, #0d1c24 ' +
            scaleRangevalue +
            '%, #0d1c24 100%)';
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('scale').addEventListener('change', () => {
        location.reload();
    });
    const combatTimerRange = (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('combatTimer');
    const combatTimervalue = ((parseInt(combatTimerRange.value, 10) -
        parseInt(combatTimerRange.min, 10)) /
        (parseInt(combatTimerRange.max, 10) -
            parseInt(combatTimerRange.min))) *
        100;
    combatTimerRange.style.background =
        'linear-gradient(to right, #3e5765 0%, #3e5765 ' +
            combatTimervalue +
            '%, #0d1c24 ' +
            combatTimervalue +
            '%, #0d1c24 100%)';
    document.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
        checkbox.addEventListener('change', () => {
            setNecromancyGaugeData(gauges);
            _lib_utility__WEBPACK_IMPORTED_MODULE_0__.freezeAndContinueOverlays(); // Force an instant redraw
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.updateSetting)('gaugedata', JSON.stringify(gauges));
        });
    });
    /* Update Alarm Thresholds */
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmSoulsThreshold').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.souls.alarm.threshold = parseInt(target.value, 10);
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmNecrosisThreshold').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.necrosis.alarm.threshold = parseInt(target.value, 10);
    });
    /* Update Active Alarms */
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmSoulsActive').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.souls.alarm.isActive = target.checked;
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmNecrosisActive').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.necrosis.alarm.isActive = target.checked;
    });
    /* Update Looping Alarms */
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmNecrosisLoop').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.necrosis.alarm.isLooping = target.checked;
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmSoulsLoop').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.souls.alarm.isLooping = target.checked;
    });
    /* Update Alarm Volumes */
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmNecrosisVolume').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.necrosis.alarm.volume = parseInt(target.value, 10);
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmSoulsVolume').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.souls.alarm.volume = parseInt(target.value, 10);
    });
    /* Update Alarm Sounds */
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmNecrosisAlertSound').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.necrosis.alarm.sound = target.value;
    });
    (0,_a1sauce_Utils_getById__WEBPACK_IMPORTED_MODULE_21__.getById)('alarmSoulsAlertSound').addEventListener('change', (e) => {
        const target = e.target;
        gauges.necromancy.stacks.souls.alarm.sound = target.value;
    });
}
// TODO: Get rid of this crap
function setNecromancyGaugeData(gauges) {
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('overlayPosition') !== undefined) {
        //TODO: Each gauge should be able to be positioned separately
        gauges.necromancy.position = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('overlayPosition');
        gauges.magic.position = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('overlayPosition');
        gauges.ranged.position = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('overlayPosition');
        gauges.melee.position = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('overlayPosition');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('hideOutsideCombat') !== undefined) {
        gauges.checkCombatStatus = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('hideOutsideCombat');
        gauges.isInCombat = false;
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('scale') !== undefined) {
        gauges.scaleFactor = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('scale') / 100;
    }
    else {
        gauges.scaleFactor = 1;
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showConjures') !== undefined) {
        gauges.necromancy.conjures.isActiveOverlay = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showConjures');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showLivingDeath') !== undefined) {
        gauges.necromancy.livingDeath.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showLivingDeath');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showIncantations') !== undefined) {
        gauges.necromancy.incantations.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showIncantations');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showInvokeDeath') !== undefined) {
        gauges.necromancy.incantations.invokeDeath.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showInvokeDeath');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showDarkness') !== undefined) {
        gauges.necromancy.incantations.darkness.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showDarkness');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showThreads') !== undefined) {
        gauges.necromancy.incantations.threads.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showThreads');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showSplitSoul') !== undefined) {
        gauges.necromancy.incantations.splitSoul.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showSplitSoul');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showSouls') !== undefined) {
        gauges.necromancy.stacks.souls.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showSouls');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('pre95Souls') !== undefined) {
        gauges.necromancy.stacks.pre95Souls = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('pre95Souls');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showNecrosis') !== undefined) {
        gauges.necromancy.stacks.necrosis.isActiveOverlay =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showNecrosis');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('useColoredNecrosis') !== undefined) {
        gauges.necromancy.stacks.useColoredNecrosis =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('useColoredNecrosis');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('dupeRow') !== undefined) {
        gauges.necromancy.stacks.duplicateNecrosisRow = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('dupeRow');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showBloat') !== undefined) {
        gauges.necromancy.bloat.isActiveOverlay = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('showBloat');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisActive') !== undefined) {
        gauges.necromancy.stacks.necrosis.alarm.isActive = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisActive');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisAlertSound') !== undefined) {
        gauges.necromancy.stacks.necrosis.alarm.sound = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisAlertSound');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisLoop') !== undefined) {
        gauges.necromancy.stacks.necrosis.alarm.isLooping =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisLoop');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisThreshold') !== undefined) {
        gauges.necromancy.stacks.necrosis.alarm.threshold = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisThreshold');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisVolume') !== undefined) {
        gauges.necromancy.stacks.necrosis.alarm.volume = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmNecrosisVolume');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsActive') !== undefined) {
        gauges.necromancy.stacks.souls.alarm.isActive =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsActive');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsAlertSound') !== undefined) {
        gauges.necromancy.stacks.souls.alarm.sound = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsAlertSound');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsLoop') !== undefined) {
        gauges.necromancy.stacks.souls.alarm.isLooping =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsLoop');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsThreshold') !== undefined) {
        gauges.necromancy.stacks.souls.alarm.threshold = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsThreshold');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsVolume') !== undefined) {
        gauges.necromancy.stacks.souls.alarm.volume =
            (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('alarmSoulsVolume');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('automaticSwapping') !== undefined) {
        gauges.automaticSwapping = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('automaticSwapping');
    }
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('defaultCombatStyle') !== undefined) {
        const input = (document.getElementById('defaultCombatStyle'));
        input.value = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('defaultCombatStyle');
        gauges.combatStyle = parseInt((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('defaultCombatStyle'), 10);
    }
}
// TODO: For Gauge Settings I should be able to store the entire gauge in localStorage
// TODO: and recover it instead of setting each property individually from a different setting
// TODO: Just need to figure out why my earlier attempt with setGaugeData() wasn't saving values properly
function getGaugeData(gauges) {
    const gaugeData = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('gaugedata');
    if (gaugeData !== undefined) {
        gauges = gaugeData;
        return JSON.parse(gaugeData);
    }
}
window.onload = function () {
    if (window.alt1) {
        alt1.identifyAppUrl('./appconfig.json');
        if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_20__.getSetting)('checkForUpdates'))
            (0,_a1sauce_Patches_serverCheck__WEBPACK_IMPORTED_MODULE_26__.startVersionChecking)(_data_constants__WEBPACK_IMPORTED_MODULE_23__.versionUrl);
        (0,_lib_settings__WEBPACK_IMPORTED_MODULE_22__.renderSettings)(gauges);
        addEventListeners();
        startApp();
    }
    else {
        const addappurl = `alt1://addapp/${new URL('./appconfig.json', document.location.href).href}`;
        errorLogger.showError({
            title: 'Alt1 Not Detected',
            message: `<p>Click <a href="${addappurl}">here</a> to add this app to Alt1</p>`,
        });
    }
};


/***/ }),

/***/ "./lib/magic/activeSpell.ts":
/*!**********************************!*\
  !*** ./lib/magic/activeSpell.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   spellsOverlay: () => (/* binding */ spellsOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var alt1_chatbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! alt1/chatbox */ "../node_modules/alt1/dist/chatbox/index.js");
/* harmony import */ var alt1_chatbox__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(alt1_chatbox__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types */ "./types/index.ts");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");




const spellImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    bloodTithe: __webpack_require__(/*! ../.././asset/gauge-ui/magic/active-spell/blood-tithe.data.png */ "./asset/gauge-ui/magic/active-spell/blood-tithe.data.png"),
    glacialEmbrace: __webpack_require__(/*! ../.././asset/gauge-ui/magic/active-spell/glacial-embrace.data.png */ "./asset/gauge-ui/magic/active-spell/glacial-embrace.data.png"),
    iceBarrage: __webpack_require__(/*! ../.././asset/gauge-ui/magic/active-spell/ice-barrage.data.png */ "./asset/gauge-ui/magic/active-spell/ice-barrage.data.png"),
    noSpell: __webpack_require__(/*! ../.././asset/gauge-ui/magic/active-spell/no-spell.data.png */ "./asset/gauge-ui/magic/active-spell/no-spell.data.png"),
});
const chat = new (alt1_chatbox__WEBPACK_IMPORTED_MODULE_3___default());
chat.diffRead = true;
chat.diffReadUseTimestamps = true;
chat.readargs = {
    colors: [
        alt1__WEBPACK_IMPORTED_MODULE_2__.mixColor(255, 255, 255),
        alt1__WEBPACK_IMPORTED_MODULE_2__.mixColor(127, 169, 255),
        alt1__WEBPACK_IMPORTED_MODULE_2__.mixColor(132, 212, 119),
    ],
};
const SPELL_TEXT = {
    'Main-hand spell set to: Exsanguinate.': 'Exsanguinate',
    'Main-hand and off-hand spells set to: Exsanguinate.': 'Exsanguinate',
    'Main-hand spell set to: Incite Fear.': 'Incite_Fear',
    'Main-hand and off-hand spells set to: Incite Fear.': 'Incite_Fear',
    'Main-hand spell set to: Ice Barrage.': 'Ice_Barrage',
    'Main-hand and off-hand spells set to: Ice Barrage.': 'Ice_Barrage',
};
const getChat = () => {
    if (!chat.pos) {
        chat.find();
    }
};
let scaledOnce = false;
async function spellsOverlay(gauges) {
    getChat();
    readChatbox(gauges);
    const { spells } = gauges.magic;
    if (!spells.isActiveOverlay) {
        return;
    }
    await spellImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_1__.handleResizingImages)(spellImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const { position } = spells.bloodTithe;
    const { x, y } = position.active_orientation;
    alt1.overLaySetGroup('Spells');
    switch (spells.activeSpell) {
        case 1:
            displaySpellImage(spellImages.bloodTithe);
            displaySpellStacks(gauges.magic.spells.bloodTithe);
            break;
        case 2:
            displaySpellImage(spellImages.glacialEmbrace);
            displaySpellStacks(gauges.magic.spells.glacialEmbrace);
            break;
        case 3:
            displaySpellImage(spellImages.iceBarrage);
            break;
        default:
            displaySpellImage(spellImages.noSpell);
            break;
    }
    function displaySpellImage(image) {
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(gauges.magic.position.x + x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(gauges.magic.position.y + y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_2__.encodeImageString(image.toDrawableData()), image.width, 1000);
    }
    function displaySpellStacks(spell) {
        if (isNaN(spell.stacks))
            return;
        alt1.overLaySetGroup(`Spell_Text`);
        alt1.overLayFreezeGroup(`Spell_Text`);
        alt1.overLayClearGroup(`Spell_Text`);
        alt1.overLayTextEx(`${spell.stacks || ''}`, _utility__WEBPACK_IMPORTED_MODULE_1__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(gauges.magic.position.x + x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(gauges.magic.position.y + y + 23, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('Spell_Text');
    }
    function readChatbox(gauges) {
        if (!chat.pos || !chat.pos.boxes[0]) {
            return;
        }
        // alt1.overLayRect(
        // 	red,
        // 	chat.pos.mainbox.rect.x,
        // 	chat.pos.mainbox.rect.y,
        // 	chat.pos.mainbox.rect.width,
        // 	chat.pos.mainbox.rect.height,
        // 	10000,
        // 	2
        // );
        const chatLines = chat.read();
        const pocketMessages = Object.keys(SPELL_TEXT);
        for (const line of chatLines ?? []) {
            const match = pocketMessages.find((m) => line.text.includes(m));
            if (!match)
                continue;
            gauges.magic.spells.activeSpell = _types__WEBPACK_IMPORTED_MODULE_0__.ActiveSpells[SPELL_TEXT[match]];
            resetSpellText();
        }
    }
}
function resetSpellText() {
    alt1.overLayFreezeGroup(`Spell_Text`);
    alt1.overLayClearGroup(`Spell_Text`);
    alt1.overLayRefreshGroup('Spell_Text');
}


/***/ }),

/***/ "./lib/magic/instability.ts":
/*!**********************************!*\
  !*** ./lib/magic/instability.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fsoaOverlay: () => (/* binding */ fsoaOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/magic/instability/active.data.png */ "./asset/gauge-ui/magic/instability/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/magic/instability/inactive.data.png */ "./asset/gauge-ui/magic/instability/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function fsoaOverlay(gauges) {
    const { magic } = gauges;
    const { instability } = magic;
    const { active_orientation } = instability.position;
    if (!instability.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('Instability');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: instability,
        position: magic.position,
    };
    // If Instability is not Active and is not on cooldown it should appear as able to be activated
    if (!instability.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'Instability', !instability.isOnCooldown);
        alt1.overLayRefreshGroup('Instability_Text');
        alt1.overLayClearGroup('Instability_Text');
        return (lastValue = instability.time);
    }
    instability.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Instability_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'Instability', true);
    if (lastValue !== instability.time) {
        instability.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Instability_Cooldown_Text');
        alt1.overLaySetGroup('Instability_Text');
        alt1.overLayFreezeGroup('Instability_Text');
        alt1.overLayClearGroup('Instability_Text');
        alt1.overLayTextEx(`${instability.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.y + active_orientation.y + 30, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('Instability_Text');
    }
    lastValue = instability.time;
}


/***/ }),

/***/ "./lib/magic/odeToDeceit.ts":
/*!**********************************!*\
  !*** ./lib/magic/odeToDeceit.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   odeToDeceitOverlay: () => (/* binding */ odeToDeceitOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/magic/ode-to-deceit/active.data.png */ "./asset/gauge-ui/magic/ode-to-deceit/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/magic/ode-to-deceit/inactive.data.png */ "./asset/gauge-ui/magic/ode-to-deceit/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function odeToDeceitOverlay(gauges) {
    const { magic } = gauges;
    const { odeToDeceit } = magic;
    const { active_orientation } = odeToDeceit.position;
    if (!odeToDeceit.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('OdeToDeceit');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: odeToDeceit,
        position: magic.position,
    };
    // If Crystal Rain Debuff is not active then it is available
    if (!odeToDeceit.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'OdeToDeceit', true);
        alt1.overLayRefreshGroup('OdeToDeceit_Text');
        alt1.overLayClearGroup('OdeToDeceit_Text');
        return (lastValue = odeToDeceit.time);
    }
    odeToDeceit.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('OdeToDeceit_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'OdeToDeceit', false);
    if (lastValue !== odeToDeceit.time) {
        odeToDeceit.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('OdeToDeceit_Cooldown_Text');
        alt1.overLaySetGroup('OdeToDeceit_Text');
        alt1.overLayFreezeGroup('OdeToDeceit_Text');
        alt1.overLayClearGroup('OdeToDeceit_Text');
        alt1.overLayTextEx(`${odeToDeceit.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.y + active_orientation.y + 30, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('OdeToDeceit_Text');
    }
    lastValue = odeToDeceit.time;
}


/***/ }),

/***/ "./lib/magic/sunshine.ts":
/*!*******************************!*\
  !*** ./lib/magic/sunshine.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sunshineOverlay: () => (/* binding */ sunshineOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types */ "./types/index.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");




const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_3__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/magic/sunshine/active.data.png */ "./asset/gauge-ui/magic/sunshine/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/magic/sunshine/inactive.data.png */ "./asset/gauge-ui/magic/sunshine/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function sunshineOverlay(gauges) {
    const { magic } = gauges;
    const { sunshine } = magic;
    const { position: { active_orientation }, } = sunshine;
    if (!sunshine.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.clearAbilityOverlays)('Sunshine');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: sunshine,
        position: magic.position,
    };
    // If Sunshine is not Active and is not on cooldown it should appear as able to be activated
    if (!sunshine.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.handleAbilityActiveState)(abilityData, 'Sunshine', !sunshine.isOnCooldown);
        alt1.overLayRefreshGroup('Sunshine_Text');
        alt1.overLayClearGroup('Sunshine_Text');
        return (lastValue = sunshine.time);
    }
    sunshine.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Sunshine_Cooldown_Text');
    if (gauges.automaticSwapping) {
        gauges.combatStyle = _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.mage;
    }
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.handleAbilityActiveState)(abilityData, 'Sunshine', true);
    if (lastValue !== sunshine.time) {
        sunshine.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Sunshine_Cooldown_Text');
        alt1.overLaySetGroup('Sunshine_Text');
        alt1.overLayFreezeGroup('Sunshine_Text');
        alt1.overLayClearGroup('Sunshine_Text');
        alt1.overLayTextEx(`${sunshine.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('Sunshine_Text');
    }
    lastValue = sunshine.time;
}


/***/ }),

/***/ "./lib/magic/tsunami.ts":
/*!******************************!*\
  !*** ./lib/magic/tsunami.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tsunamiOverlay: () => (/* binding */ tsunamiOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../.././asset/gauge-ui/magic/tsunami/active.data.png */ "./asset/gauge-ui/magic/tsunami/active.data.png"),
    inactive: __webpack_require__(/*! ../.././asset/gauge-ui/magic/tsunami/inactive.data.png */ "./asset/gauge-ui/magic/tsunami/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function tsunamiOverlay(gauges) {
    const { magic } = gauges;
    const { tsunami } = magic;
    const { active_orientation } = tsunami.position;
    if (!tsunami.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('Tsunami');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: tsunami,
        position: magic.position,
    };
    // If tsunami is not Active and is not on cooldown it should appear as able to be activated
    if (!tsunami.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'Tsunami', !tsunami.isOnCooldown);
        alt1.overLayRefreshGroup('Tsunami_Text');
        alt1.overLayClearGroup('Tsunami_Text');
        return (lastValue = tsunami.time);
    }
    tsunami.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Tsunami_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'Tsunami', true);
    if (lastValue !== tsunami.time) {
        tsunami.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('Tsunami_Cooldown_Text');
        alt1.overLaySetGroup('Tsunami_Text');
        alt1.overLayFreezeGroup('Tsunami_Text');
        alt1.overLayClearGroup('Tsunami_Text');
        alt1.overLayTextEx(`${tsunami.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(magic.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('Tsunami_Text');
    }
    lastValue = tsunami.time;
}


/***/ }),

/***/ "./lib/necromancy/bloat.ts":
/*!*********************************!*\
  !*** ./lib/necromancy/bloat.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bloatOverlay: () => (/* binding */ bloatOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const bloatImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    bloat_100: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/100.data.png */ "./asset/gauge-ui/necromancy/bloat/100.data.png"),
    bloat_90: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/90.data.png */ "./asset/gauge-ui/necromancy/bloat/90.data.png"),
    bloat_80: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/80.data.png */ "./asset/gauge-ui/necromancy/bloat/80.data.png"),
    bloat_70: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/70.data.png */ "./asset/gauge-ui/necromancy/bloat/70.data.png"),
    bloat_60: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/60.data.png */ "./asset/gauge-ui/necromancy/bloat/60.data.png"),
    bloat_50: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/50.data.png */ "./asset/gauge-ui/necromancy/bloat/50.data.png"),
    bloat_40: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/40.data.png */ "./asset/gauge-ui/necromancy/bloat/40.data.png"),
    bloat_30: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/30.data.png */ "./asset/gauge-ui/necromancy/bloat/30.data.png"),
    bloat_20: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/20.data.png */ "./asset/gauge-ui/necromancy/bloat/20.data.png"),
    bloat_10: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/10.data.png */ "./asset/gauge-ui/necromancy/bloat/10.data.png"),
    bloat_0: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/0.data.png */ "./asset/gauge-ui/necromancy/bloat/0.data.png"),
    bloat_expired: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/bloat/expired.data.png */ "./asset/gauge-ui/necromancy/bloat/expired.data.png"),
});
let scaledOnce = false;
async function bloatOverlay(gauges) {
    const { bloat } = gauges.necromancy;
    if (!bloat.isActiveOverlay) {
        return;
    }
    await bloatImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(bloatImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const value = bloat.time;
    let image = bloatImages.bloat_expired;
    if (bloat.active) {
        if (value < 2.4) {
            image = bloatImages.bloat_0;
        }
        else if (value < 3.6) {
            image = bloatImages.bloat_10;
        }
        else if (value < 5.4) {
            image = bloatImages.bloat_20;
        }
        else if (value < 7.2) {
            image = bloatImages.bloat_30;
        }
        else if (value < 9.0) {
            image = bloatImages.bloat_40;
        }
        else if (value < 10.8) {
            image = bloatImages.bloat_50;
        }
        else if (value < 12.6) {
            image = bloatImages.bloat_60;
        }
        else if (value < 14.4) {
            image = bloatImages.bloat_70;
        }
        else if (value < 16.2) {
            image = bloatImages.bloat_80;
        }
        else if (value < 18.0) {
            image = bloatImages.bloat_90;
        }
        else {
            image = bloatImages.bloat_100;
        }
    }
    else {
        image = bloatImages.bloat_expired;
    }
    alt1.overLaySetGroup('Bloat');
    alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x + bloat.position.active_orientation.x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y + bloat.position.active_orientation.y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(image), image.width, 1000);
    alt1.overLayRefreshGroup('Bloat');
}


/***/ }),

/***/ "./lib/necromancy/conjures.ts":
/*!************************************!*\
  !*** ./lib/necromancy/conjures.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conjureOverlay: () => (/* binding */ conjureOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const conjureImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/conjure-undead-army/active.data.png */ "./asset/gauge-ui/necromancy/conjure-undead-army/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/conjure-undead-army/inactive.data.png */ "./asset/gauge-ui/necromancy/conjure-undead-army/inactive.data.png"),
});
const white = alt1__WEBPACK_IMPORTED_MODULE_1__.mixColor(255, 255, 255);
let lastMinValue = 0;
let scaledOnce = false;
async function conjureOverlay(gauges) {
    if (!gauges.necromancy.conjures.isActiveOverlay) {
        return;
    }
    await conjureImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(conjureImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    alt1.overLaySetGroup('Undead_Army');
    if (gauges.necromancy.conjures.active) {
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x +
            gauges.necromancy.conjures.position.active_orientation.x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y +
            gauges.necromancy.conjures.position.active_orientation.y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(conjureImages.active.toDrawableData()), conjureImages.active.width, 1000);
    }
    else {
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x +
            gauges.necromancy.conjures.position.active_orientation.x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y +
            gauges.necromancy.conjures.position.active_orientation.y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(conjureImages.inactive.toDrawableData()), conjureImages.inactive.width, 1000);
    }
    const earliest_conjure = [
        gauges.necromancy.conjures.skeleton.time,
        gauges.necromancy.conjures.zombie.time,
        gauges.necromancy.conjures.ghost.time,
        gauges.necromancy.conjures.phantom.time,
    ];
    const minValue = Math.min.apply(null, earliest_conjure.filter(Boolean));
    if (minValue !== Infinity && minValue !== lastMinValue) {
        alt1.overLaySetGroup('Undead_Army_Text');
        alt1.overLayFreezeGroup('Undead_Army_Text');
        alt1.overLayClearGroup('Undead_Army_Text');
        alt1.overLayTextEx(`${minValue}`, white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x +
            26 +
            gauges.necromancy.conjures.position.active_orientation.x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y + 32, gauges.scaleFactor), 10000, '', true, true);
        lastMinValue = minValue;
    }
    alt1.overLayRefreshGroup('Undead_Army_Text');
}


/***/ }),

/***/ "./lib/necromancy/incantations.ts":
/*!****************************************!*\
  !*** ./lib/necromancy/incantations.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   incantationsOverlay: () => (/* binding */ incantationsOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const incantationImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    invoke_death: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/invoke-death/active.data.png */ "./asset/gauge-ui/necromancy/incantations/invoke-death/active.data.png"),
    invoke_death_inactive: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/invoke-death/inactive.data.png */ "./asset/gauge-ui/necromancy/incantations/invoke-death/inactive.data.png"),
    darkness: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/darkness/active.data.png */ "./asset/gauge-ui/necromancy/incantations/darkness/active.data.png"),
    darkness_inactive: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/darkness/inactive.data.png */ "./asset/gauge-ui/necromancy/incantations/darkness/inactive.data.png"),
    threads: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/threads-of-fate/active.data.png */ "./asset/gauge-ui/necromancy/incantations/threads-of-fate/active.data.png"),
    threads_inactive: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/threads-of-fate/inactive.data.png */ "./asset/gauge-ui/necromancy/incantations/threads-of-fate/inactive.data.png"),
    split_soul: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/split-soul/active.data.png */ "./asset/gauge-ui/necromancy/incantations/split-soul/active.data.png"),
    split_soul_inactive: __webpack_require__(/*! ../.././asset/gauge-ui/necromancy/incantations/split-soul/inactive.data.png */ "./asset/gauge-ui/necromancy/incantations/split-soul/inactive.data.png"),
});
let scaledOnce = false;
async function incantationsOverlay(gauges) {
    const { necromancy, scaleFactor } = gauges;
    const { incantations, position } = necromancy;
    const { invokeDeath, darkness: darknessBuff, threads: threadsAbility, splitSoul, } = incantations;
    if (!incantations.isActiveOverlay) {
        return;
    }
    await incantationImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(incantationImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const isInvokeDeathVisible = invokeDeath.isActiveOverlay && incantations.isActiveOverlay;
    const isInvokeDeathActive = incantations.active[0];
    const invokeDeathImage = isInvokeDeathActive
        ? incantationImages.invoke_death
        : incantationImages.invoke_death_inactive;
    if (isInvokeDeathVisible) {
        handleIncantationOverlays('Invoke_Death', invokeDeath.position.active_orientation.x, 0, invokeDeathImage);
    }
    const isDarknessVisible = darknessBuff.isActiveOverlay && incantations.isActiveOverlay;
    const isDarknessActive = incantations.active[1];
    const darknessImage = isDarknessActive
        ? incantationImages.darkness
        : incantationImages.darkness_inactive;
    if (isDarknessVisible) {
        handleIncantationOverlays('Darkness', darknessBuff.position.active_orientation.x, darknessBuff.position.active_orientation.y, darknessImage);
    }
    const isThreadsVisible = threadsAbility.isActiveOverlay && incantations.isActiveOverlay;
    const isThreadsActive = incantations.active[2];
    const threadsImage = isThreadsActive
        ? incantationImages.threads_inactive
        : incantationImages.threads;
    if (isThreadsVisible) {
        handleIncantationOverlays('Threads', threadsAbility.position.active_orientation.x * 2, 0, threadsImage);
    }
    const isSplitSoulVisible = splitSoul.isActiveOverlay && incantations.isActiveOverlay;
    const isSplitSoulActive = incantations.active[3];
    const splitSoulImage = isSplitSoulActive
        ? incantationImages.split_soul_inactive
        : incantationImages.split_soul;
    if (isSplitSoulVisible) {
        handleIncantationOverlays('SplitSoul', splitSoul.position.active_orientation.x * 2, splitSoul.position.active_orientation.y, splitSoulImage);
    }
    function handleIncantationOverlays(name, xOffset, yOffset, image) {
        alt1.overLaySetGroup(name);
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(position.x + xOffset, scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(position.y + yOffset, scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(image.toDrawableData()), image.width, 1000);
    }
}


/***/ }),

/***/ "./lib/necromancy/livingDeath.ts":
/*!***************************************!*\
  !*** ./lib/necromancy/livingDeath.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   livingDeathOverlay: () => (/* binding */ livingDeathOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types */ "./types/index.ts");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");




const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_3__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/living-death/active.data.png */ "./asset/gauge-ui/necromancy/living-death/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/living-death/inactive.data.png */ "./asset/gauge-ui/necromancy/living-death/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function livingDeathOverlay(gauges) {
    const { necromancy } = gauges;
    const { livingDeath } = necromancy;
    const { active_orientation } = livingDeath.position;
    if (!livingDeath.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.clearAbilityOverlays)('LivingDeath');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_1__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: livingDeath,
        position: necromancy.position,
    };
    // If Living Death is not Active and is not on cooldown it should appear as able to be activated
    if (!livingDeath.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.handleAbilityActiveState)(abilityData, 'LivingDeath', !livingDeath.isOnCooldown);
        alt1.overLayRefreshGroup('LivingDeath_Text');
        alt1.overLayClearGroup('LivingDeath_Text');
        return (lastValue = livingDeath.time);
    }
    livingDeath.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_1__.forceClearOverlay)('LivingDeath_Cooldown_Text');
    if (gauges.automaticSwapping) {
        gauges.combatStyle = _types__WEBPACK_IMPORTED_MODULE_0__.CombatStyle.necro;
    }
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_2__.handleAbilityActiveState)(abilityData, 'LivingDeath', true);
    if (lastValue !== livingDeath.time) {
        livingDeath.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_1__.forceClearOverlay)('LivingDeath_Cooldown_Text');
        alt1.overLaySetGroup('LivingDeath_Text');
        alt1.overLayFreezeGroup('LivingDeath_Text');
        alt1.overLayClearGroup('LivingDeath_Text');
        alt1.overLayTextEx(`${livingDeath.time}`, _utility__WEBPACK_IMPORTED_MODULE_1__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(necromancy.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_1__.adjustPositionForScale)(necromancy.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('LivingDeath_Text');
    }
    lastValue = livingDeath.time;
}


/***/ }),

/***/ "./lib/necromancy/necrosis.ts":
/*!************************************!*\
  !*** ./lib/necromancy/necrosis.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   necrosisOverlay: () => (/* binding */ necrosisOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const necrosisImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    necrosis_0: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/0.data.png */ "./asset/gauge-ui/necromancy/necrosis/0.data.png"),
    necrosis_2: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/2.data.png */ "./asset/gauge-ui/necromancy/necrosis/2.data.png"),
    necrosis_4: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/4.data.png */ "./asset/gauge-ui/necromancy/necrosis/4.data.png"),
    necrosis_6: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/6.data.png */ "./asset/gauge-ui/necromancy/necrosis/6.data.png"),
    necrosis_8: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/8.data.png */ "./asset/gauge-ui/necromancy/necrosis/8.data.png"),
    necrosis_10: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/10.data.png */ "./asset/gauge-ui/necromancy/necrosis/10.data.png"),
    necrosis_12: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/12.data.png */ "./asset/gauge-ui/necromancy/necrosis/12.data.png"),
});
const necrosisColoredImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    necrosis_6: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/colored/6-warning.data.png */ "./asset/gauge-ui/necromancy/necrosis/colored/6-warning.data.png"),
    necrosis_8: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/colored/8-warning.data.png */ "./asset/gauge-ui/necromancy/necrosis/colored/8-warning.data.png"),
    necrosis_10: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/colored/10-warning.data.png */ "./asset/gauge-ui/necromancy/necrosis/colored/10-warning.data.png"),
    necrosis_12: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/necrosis/colored/12-danger.data.png */ "./asset/gauge-ui/necromancy/necrosis/colored/12-danger.data.png"),
});
let scaledOnce = false;
let playingAlert = false;
const necrosisAlert = new Audio();
necrosisAlert.id = 'alarmNecrosis';
document.body.appendChild(necrosisAlert);
async function necrosisOverlay(gauges) {
    const { necrosis } = gauges.necromancy.stacks;
    if (!necrosis.isActiveOverlay) {
        return;
    }
    await necrosisImages.promise;
    if (gauges.necromancy.stacks.useColoredNecrosis && !scaledOnce) {
        await necrosisColoredImages.promise;
        necrosisImages.necrosis_6 = necrosisColoredImages.necrosis_6;
        necrosisImages.necrosis_8 = necrosisColoredImages.necrosis_8;
        necrosisImages.necrosis_10 = necrosisColoredImages.necrosis_10;
        necrosisImages.necrosis_12 = necrosisColoredImages.necrosis_12;
    }
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(necrosisImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const { position, stacks } = necrosis;
    const { x, y } = position.active_orientation;
    const bloatVisible = !gauges.necromancy.bloat.isActiveOverlay;
    let bloatSpace = 0;
    if (bloatVisible) {
        bloatSpace = -23;
    }
    alt1.overLaySetGroup('Necrosis');
    displayNecrosisImage(stacks);
    if (stacks >= necrosis.alarm.threshold && necrosis.alarm.isActive) {
        if (!playingAlert) {
            (0,_utility__WEBPACK_IMPORTED_MODULE_0__.playAlert)(necrosisAlert);
            playingAlert = true;
        }
    }
    else if (playingAlert) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.pauseAlert)(necrosisAlert);
        playingAlert = false;
    }
    if (gauges.necromancy.stacks.duplicateNecrosisRow) {
        // @ts-ignore Don't want to mess with Alt1's typings. This will be a rare case.
        const necrosisImage = necrosisImages[`necrosis_${stacks}`];
        alt1.overLaySetGroup('Necrosis_Row2');
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x + x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y + y + bloatSpace, gauges.scaleFactor) + necrosisImages.necrosis_0.height, alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(necrosisImage.toDrawableData()), necrosisImage.width, 1000);
    }
    function displayNecrosisImage(stacks) {
        // @ts-expect-error Don't want to mess with Alt1's typings. This will be a rare case.
        const necrosisImage = necrosisImages[`necrosis_${stacks}`];
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x + x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y + y + bloatSpace, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(necrosisImage.toDrawableData()), necrosisImage.width, 1000);
    }
}


/***/ }),

/***/ "./lib/necromancy/soul.ts":
/*!********************************!*\
  !*** ./lib/necromancy/soul.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   soulsOverlay: () => (/* binding */ soulsOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const soulImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    souls_0: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/0.data.png */ "./asset/gauge-ui/necromancy/residual-souls/0.data.png"),
    souls_1: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/1.data.png */ "./asset/gauge-ui/necromancy/residual-souls/1.data.png"),
    souls_2: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/2.data.png */ "./asset/gauge-ui/necromancy/residual-souls/2.data.png"),
    souls_3: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/3.data.png */ "./asset/gauge-ui/necromancy/residual-souls/3.data.png"),
    souls_4: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/4.data.png */ "./asset/gauge-ui/necromancy/residual-souls/4.data.png"),
    souls_5: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/5.data.png */ "./asset/gauge-ui/necromancy/residual-souls/5.data.png"),
});
const pre95SoulImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    souls_0: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/pre95/0.data.png */ "./asset/gauge-ui/necromancy/residual-souls/pre95/0.data.png"),
    souls_1: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/pre95/1.data.png */ "./asset/gauge-ui/necromancy/residual-souls/pre95/1.data.png"),
    souls_2: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/pre95/2.data.png */ "./asset/gauge-ui/necromancy/residual-souls/pre95/2.data.png"),
    souls_3: __webpack_require__(/*! ../../asset/gauge-ui/necromancy/residual-souls/pre95/3.data.png */ "./asset/gauge-ui/necromancy/residual-souls/pre95/3.data.png"),
});
let scaledOnce = false;
let playingAlert = false;
const soulsAlert = new Audio();
soulsAlert.id = 'alarmSouls';
document.body.appendChild(soulsAlert);
async function soulsOverlay(gauges) {
    const { souls } = gauges.necromancy.stacks;
    if (!souls.isActiveOverlay) {
        return;
    }
    await soulImages.promise;
    if (gauges.necromancy.stacks.pre95Souls && !scaledOnce) {
        await pre95SoulImages.promise;
        soulImages.souls_0 = pre95SoulImages.souls_0;
        soulImages.souls_1 = pre95SoulImages.souls_1;
        soulImages.souls_2 = pre95SoulImages.souls_2;
        soulImages.souls_3 = pre95SoulImages.souls_3;
    }
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(soulImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const { position } = souls;
    const { x, y } = position.active_orientation;
    alt1.overLaySetGroup('Souls');
    const displaySoulImage = (image) => {
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.x + x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.necromancy.position.y + y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(image.toDrawableData()), image.width, 1000);
    };
    switch (souls.stacks) {
        case 0:
            displaySoulImage(soulImages.souls_0);
            break;
        case 1:
            displaySoulImage(soulImages.souls_1);
            break;
        case 2:
            displaySoulImage(soulImages.souls_2);
            break;
        case 3:
            displaySoulImage(soulImages.souls_3);
            break;
        case 4:
            displaySoulImage(soulImages.souls_4);
            break;
        case 5:
            displaySoulImage(soulImages.souls_5);
            break;
        default:
            // Handle cases beyond 5 if needed
            break;
    }
    if (souls.stacks >= souls.alarm.threshold && souls.alarm.isActive) {
        if (!playingAlert) {
            await (0,_utility__WEBPACK_IMPORTED_MODULE_0__.playAlert)(soulsAlert);
            playingAlert = true;
        }
    }
    else if (playingAlert) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.pauseAlert)(soulsAlert);
        playingAlert = false;
    }
}


/***/ }),

/***/ "./lib/ranged/activeAmmo.ts":
/*!**********************************!*\
  !*** ./lib/ranged/activeAmmo.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findAmmo: () => (/* binding */ findAmmo)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const quiverImages = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    bik: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/bik.data.png */ "./asset/data/buffs/ranged/ammo/bik.data.png"),
    ful: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/ful.data.png */ "./asset/data/buffs/ranged/ammo/ful.data.png"),
    jas_dragonbane: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/jas-dragonbane.data.png */ "./asset/data/buffs/ranged/ammo/jas-dragonbane.data.png"),
    wen: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/wen.data.png */ "./asset/data/buffs/ranged/ammo/wen.data.png"),
    blackstone: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/blackstone.data.png */ "./asset/data/buffs/ranged/ammo/blackstone.data.png"),
    deathspore: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/deathspores.data.png */ "./asset/data/buffs/ranged/ammo/deathspores.data.png"),
    diamond_bak: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/diamond-bak.data.png */ "./asset/data/buffs/ranged/ammo/diamond-bak.data.png"),
    hydrix_bak: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/hydrix-bak.data.png */ "./asset/data/buffs/ranged/ammo/hydrix-bak.data.png"),
    ruby_bak: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/ruby-bak.data.png */ "./asset/data/buffs/ranged/ammo/ruby-bak.data.png"),
    onyx_bak: __webpack_require__(/*! ../../asset/data/buffs/ranged/ammo/onyx-bak.data.png */ "./asset/data/buffs/ranged/ammo/onyx-bak.data.png"),
});
let lastAmmo;
async function findAmmo(gauges, buffs) {
    if (!buffs) {
        return;
    }
    let ammoActive = 0;
    let currentAmmo = '';
    for (let [_key, value] of Object.entries(buffs)) {
        const checkBik = value.countMatch(quiverImages.bik, false);
        const checkFul = value.countMatch(quiverImages.ful, false);
        const checkWen = value.countMatch(quiverImages.wen, false);
        const checkJas = value.countMatch(quiverImages.jas_dragonbane, false);
        const checkBlackstone = value.countMatch(quiverImages.blackstone, false);
        const checkDeathspores = value.countMatch(quiverImages.deathspore, false);
        const checkDiamond = value.countMatch(quiverImages.diamond_bak, false);
        const checkHydrix = value.countMatch(quiverImages.hydrix_bak, false);
        const checkRuby = value.countMatch(quiverImages.ruby_bak, false);
        const checkOnyx = value.countMatch(quiverImages.onyx_bak, false);
        if (checkBik.failed == 0 || checkBik.passed > 28) {
            currentAmmo = 'BIK';
            ammoActive++;
        }
        if (checkFul.failed == 0 || checkFul.passed > 28) {
            currentAmmo = 'FUL';
            ammoActive++;
        }
        if (checkWen.failed == 0 || checkWen.passed > 28) {
            currentAmmo = 'WEN';
            ammoActive++;
        }
        if (checkJas.failed == 0 || checkJas.passed > 28) {
            currentAmmo = 'JAS';
            ammoActive++;
        }
        if (checkBlackstone.failed == 0 || checkBlackstone.passed > 28) {
            currentAmmo = 'BSD';
            ammoActive++;
        }
        if (checkDeathspores.failed == 0 || checkDeathspores.passed > 28) {
            currentAmmo = 'DSP';
            ammoActive++;
        }
        if (checkDiamond.failed == 0 || checkDiamond.passed > 180) {
            currentAmmo = 'BAK (D)';
            ammoActive++;
        }
        if (checkHydrix.failed == 0 || checkHydrix.passed > 180) {
            currentAmmo = 'BAK (H)';
            ammoActive++;
        }
        if (checkRuby.failed == 0 || checkRuby.passed > 180) {
            currentAmmo = 'BAK (R)';
            ammoActive++;
        }
        if (checkOnyx.failed == 0 || checkOnyx.passed > 180) {
            currentAmmo = 'BAK (O)';
            ammoActive++;
        }
    }
    if (ammoActive === 0) {
        gauges.ranged.ammo.activeAmmo = '';
    }
    else {
        gauges.ranged.ammo.activeAmmo = currentAmmo;
        if (lastAmmo !== currentAmmo) {
            lastAmmo = currentAmmo;
        }
    }
    displayAmmoName(gauges, currentAmmo);
}
function displayAmmoName(gauges, ammo) {
    alt1.overLaySetGroup(`Ammo_Text`);
    alt1.overLayFreezeGroup(`Ammo_Text`);
    alt1.overLayClearGroup(`Ammo_Text`);
    alt1.overLayTextEx(gauges.ranged.ammo.activeAmmo, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.x + 96, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.y + 24, gauges.scaleFactor), 3000, '', true, true);
    alt1.overLayRefreshGroup('Ammo_Text');
}


/***/ }),

/***/ "./lib/ranged/crystalRain.ts":
/*!***********************************!*\
  !*** ./lib/ranged/crystalRain.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   crystalRainOverlay: () => (/* binding */ crystalRainOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/ranged/crystal-rain/active.data.png */ "./asset/gauge-ui/ranged/crystal-rain/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/ranged/crystal-rain/inactive.data.png */ "./asset/gauge-ui/ranged/crystal-rain/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function crystalRainOverlay(gauges) {
    const { ranged } = gauges;
    const { crystalRain } = ranged;
    const { active_orientation } = crystalRain.position;
    if (!crystalRain.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('CrystalRain');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: crystalRain,
        position: ranged.position,
    };
    // If Crystal Rain Debuff is not active then it is available
    if (!crystalRain.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'CrystalRain', true);
        alt1.overLayRefreshGroup('CrystalRain_Text');
        alt1.overLayClearGroup('CrystalRain_Text');
        return (lastValue = crystalRain.time);
    }
    crystalRain.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('CrystalRain_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'CrystalRain', false);
    if (lastValue !== crystalRain.time) {
        crystalRain.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('CrystalRain_Cooldown_Text');
        alt1.overLaySetGroup('CrystalRain_Text');
        alt1.overLayFreezeGroup('CrystalRain_Text');
        alt1.overLayClearGroup('CrystalRain_Text');
        alt1.overLayTextEx(`${crystalRain.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('CrystalRain_Text');
    }
    lastValue = crystalRain.time;
}


/***/ }),

/***/ "./lib/ranged/deathsSwiftness.ts":
/*!***************************************!*\
  !*** ./lib/ranged/deathsSwiftness.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deathsSwiftnessOverlay: () => (/* binding */ deathsSwiftnessOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/ranged/deaths-swiftness/active.data.png */ "./asset/gauge-ui/ranged/deaths-swiftness/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/ranged/deaths-swiftness/inactive.data.png */ "./asset/gauge-ui/ranged/deaths-swiftness/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function deathsSwiftnessOverlay(gauges) {
    const { ranged } = gauges;
    const { deathsSwiftness } = ranged;
    const { active_orientation } = ranged.deathsSwiftness.position;
    if (!deathsSwiftness.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('DeathsSwiftness');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: deathsSwiftness,
        position: ranged.position,
    };
    // If DeathsSwiftness is not Active and is not on cooldown it should appear as able to be activated
    if (!deathsSwiftness.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'DeathsSwiftness', !deathsSwiftness.isOnCooldown);
        alt1.overLayRefreshGroup('DeathsSwiftness_Text');
        alt1.overLayClearGroup('DeathsSwiftness_Text');
        return (lastValue = deathsSwiftness.time);
    }
    deathsSwiftness.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('DeathsSwiftness_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'DeathsSwiftness', true);
    if (lastValue !== deathsSwiftness.time) {
        deathsSwiftness.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('DeathsSwiftness_Cooldown_Text');
        alt1.overLaySetGroup('DeathsSwiftness_Text');
        alt1.overLayFreezeGroup('DeathsSwiftness_Text');
        alt1.overLayClearGroup('DeathsSwiftness_Text');
        alt1.overLayTextEx(`${deathsSwiftness.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('DeathsSwiftness_Text');
    }
    lastValue = deathsSwiftness.time;
}


/***/ }),

/***/ "./lib/ranged/perfectEquilibrium.ts":
/*!******************************************!*\
  !*** ./lib/ranged/perfectEquilibrium.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   peOverlay: () => (/* binding */ peOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const bolgImage = alt1__WEBPACK_IMPORTED_MODULE_1__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/ranged/perfect-equilibrium/active.data.png */ "./asset/gauge-ui/ranged/perfect-equilibrium/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/ranged/perfect-equilibrium/inactive.data.png */ "./asset/gauge-ui/ranged/perfect-equilibrium/inactive.data.png"),
});
let scaledOnce = false;
let lastStacks = 0;
async function peOverlay(gauges) {
    const { perfectEquilibrium } = gauges.ranged;
    const { stacks } = gauges.ranged.perfectEquilibrium;
    if (!perfectEquilibrium.isActiveOverlay) {
        return;
    }
    await bolgImage.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(bolgImage, gauges.scaleFactor);
        scaledOnce = true;
    }
    const { position } = perfectEquilibrium;
    const { x, y } = position.active_orientation;
    alt1.overLaySetGroup('PerfectEquilibrium');
    if (gauges.ranged.balanceByForce) {
        displayBuffImage(bolgImage.active);
    }
    else {
        displayBuffImage(bolgImage.inactive);
    }
    if (stacks !== lastStacks) {
        displayStacks(stacks);
        lastStacks = stacks;
    }
    function displayBuffImage(image) {
        alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.x + x, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.y + y, gauges.scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(image.toDrawableData()), image.width, 1000);
    }
    function displayStacks(stacks) {
        alt1.overLaySetGroup(`PerfectEquilibrium_Text`);
        alt1.overLayFreezeGroup(`PerfectEquilibrium_Text`);
        alt1.overLayClearGroup(`PerfectEquilibrium_Text`);
        alt1.overLayTextEx(`${stacks}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.x + x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(gauges.ranged.position.y + y + 26, gauges.scaleFactor), 30000, '', true, true);
        alt1.overLayRefreshGroup('PerfectEquilibrium_Text');
    }
}


/***/ }),

/***/ "./lib/ranged/splitSoul.ts":
/*!*********************************!*\
  !*** ./lib/ranged/splitSoul.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rangedSplitSoulOverlay: () => (/* binding */ rangedSplitSoulOverlay)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ability-helpers */ "./lib/util/ability-helpers.ts");



const ultimateImages = alt1__WEBPACK_IMPORTED_MODULE_2__.webpackImages({
    active: __webpack_require__(/*! ../../asset/gauge-ui/ranged/split-soul/active.data.png */ "./asset/gauge-ui/ranged/split-soul/active.data.png"),
    inactive: __webpack_require__(/*! ../../asset/gauge-ui/ranged/split-soul/inactive.data.png */ "./asset/gauge-ui/ranged/split-soul/inactive.data.png"),
});
let lastValue;
let scaledOnce = false;
async function rangedSplitSoulOverlay(gauges) {
    const { ranged } = gauges;
    const { splitSoul } = ranged;
    const { active_orientation } = ranged.splitSoul.position;
    if (!splitSoul.isActiveOverlay) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.clearAbilityOverlays)('SplitSoul');
        return;
    }
    await ultimateImages.promise;
    if (!scaledOnce) {
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.handleResizingImages)(ultimateImages, gauges.scaleFactor);
        scaledOnce = true;
    }
    const abilityData = {
        images: ultimateImages,
        scaleFactor: gauges.scaleFactor,
        ability: splitSoul,
        position: ranged.position,
    };
    // If Split Soul is not Active and is not on cooldown it should appear as able to be activated
    if (!splitSoul.active) {
        (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'SplitSoul', false);
        alt1.overLayRefreshGroup('SplitSoul_Text');
        alt1.overLayClearGroup('SplitSoul_Text');
        return (lastValue = splitSoul.time);
    }
    splitSoul.isOnCooldown = false;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('SplitSoul_Cooldown_Text');
    (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_1__.handleAbilityActiveState)(abilityData, 'SplitSoul', true);
    if (lastValue !== splitSoul.time) {
        splitSoul.cooldownDuration = 0;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)('SplitSoul_Cooldown_Text');
        alt1.overLaySetGroup('SplitSoul_Text');
        alt1.overLayFreezeGroup('SplitSoul_Text');
        alt1.overLayClearGroup('SplitSoul_Text');
        alt1.overLayTextEx(`${splitSoul.time || ''}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.x + active_orientation.x + 26, gauges.scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(ranged.position.y + active_orientation.y + 26, gauges.scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup('SplitSoul_Text');
    }
    lastValue = splitSoul.time;
}


/***/ }),

/***/ "./lib/readBuffs.ts":
/*!**************************!*\
  !*** ./lib/readBuffs.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findBuffsBar: () => (/* binding */ findBuffsBar),
/* harmony export */   findDebuffsBar: () => (/* binding */ findDebuffsBar),
/* harmony export */   readBuffs: () => (/* binding */ readBuffs),
/* harmony export */   testBuffSizes: () => (/* binding */ testBuffSizes)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! alt1/buffs */ "../node_modules/alt1/dist/buffs/index.js");
/* harmony import */ var alt1_buffs__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(alt1_buffs__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ "./lib/utility.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ "./types/index.ts");
/* harmony import */ var _ranged_activeAmmo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ranged/activeAmmo */ "./lib/ranged/activeAmmo.ts");
/* harmony import */ var _a1sauce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../a1sauce */ "./a1sauce/index.ts");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/constants */ "./data/constants.ts");
/* harmony import */ var _a1sauce_Error_logError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../a1sauce/Error/logError */ "./a1sauce/Error/logError.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! .. */ "./index.ts");
/* harmony import */ var _util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/ability-helpers */ "./lib/util/ability-helpers.ts");
/* harmony import */ var _a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../a1sauce/Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* eslint-disable @typescript-eslint/no-require-imports */











const sauce = _a1sauce__WEBPACK_IMPORTED_MODULE_3__.A1Sauce.instance;
sauce.setName(_data_constants__WEBPACK_IMPORTED_MODULE_4__.appName);
const buffReader = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_9___default())();
const debuffReader = new (alt1_buffs__WEBPACK_IMPORTED_MODULE_9___default())();
debuffReader.debuffs = true;
const errorLogger = new _a1sauce_Error_logError__WEBPACK_IMPORTED_MODULE_5__.LogError();
const buffsImages = alt1__WEBPACK_IMPORTED_MODULE_10__.webpackImages({
    /* Necromancy */
    darkness: __webpack_require__(/*! ../asset/data/buffs/necro/darkness.data.png */ "./asset/data/buffs/necro/darkness.data.png"),
    living_death: __webpack_require__(/*! ../asset/data/buffs/necro/living-death.data.png */ "./asset/data/buffs/necro/living-death.data.png"),
    split_soul: __webpack_require__(/*! ../asset/data/buffs/necro/split-soul.data.png */ "./asset/data/buffs/necro/split-soul.data.png"),
    threads: __webpack_require__(/*! ../asset/data/buffs/necro/threads-of-date.data.png */ "./asset/data/buffs/necro/threads-of-date.data.png"),
    necrosis: __webpack_require__(/*! ../asset/data/buffs/necro/Necrosis.data.png */ "./asset/data/buffs/necro/Necrosis.data.png"),
    soul: __webpack_require__(/*! ../asset/data/buffs/necro/residual-soul.data.png */ "./asset/data/buffs/necro/residual-soul.data.png"),
    skeleton: __webpack_require__(/*! ../asset/data/buffs/necro/skeleton-warrior.data.png */ "./asset/data/buffs/necro/skeleton-warrior.data.png"),
    zombie: __webpack_require__(/*! ../asset/data/buffs/necro/putrid-zombie.data.png */ "./asset/data/buffs/necro/putrid-zombie.data.png"),
    ghost: __webpack_require__(/*! ../asset/data/buffs/necro/vengeful-ghost.data.png */ "./asset/data/buffs/necro/vengeful-ghost.data.png"),
    phantom: __webpack_require__(/*! ../asset/data/buffs/necro/phantom-guardian.data.png */ "./asset/data/buffs/necro/phantom-guardian.data.png"),
    /* Magic */
    sunshine: __webpack_require__(/*! ../asset/data/buffs/magic/sunshine.data.png */ "./asset/data/buffs/magic/sunshine.data.png"),
    greaterSunshine: __webpack_require__(/*! ../asset/data/buffs/magic/greater-sunshine.data.png */ "./asset/data/buffs/magic/greater-sunshine.data.png"),
    bloodTithe: __webpack_require__(/*! ../asset/data/buffs/magic/blood-tithe.data.png */ "./asset/data/buffs/magic/blood-tithe.data.png"),
    glacialEmbrace: __webpack_require__(/*! ../asset/data/buffs/magic/glacial-embrace.data.png */ "./asset/data/buffs/magic/glacial-embrace.data.png"),
    instability: __webpack_require__(/*! ../asset/data/buffs/magic/instability.data.png */ "./asset/data/buffs/magic/instability.data.png"),
    odeToDeceit: __webpack_require__(/*! ../asset/data/debuffs/ode-to-deceit.data.png */ "./asset/data/debuffs/ode-to-deceit.data.png"),
    tsunami: __webpack_require__(/*! ../asset/data/buffs/magic/critical-strike.data.png */ "./asset/data/buffs/magic/critical-strike.data.png"),
    /* Ranged */
    deathsSwiftness: __webpack_require__(/*! ../asset/data/buffs/ranged/deaths-swiftness.data.png */ "./asset/data/buffs/ranged/deaths-swiftness.data.png"),
    greaterDeathsSwiftness: __webpack_require__(/*! ../asset/data/buffs/ranged/greater-deaths-swiftness.data.png */ "./asset/data/buffs/ranged/greater-deaths-swiftness.data.png"),
    crystalRain: __webpack_require__(/*! ../asset/data/debuffs/crystal-rain.data.png */ "./asset/data/debuffs/crystal-rain.data.png"),
    perfectEquilibrium: __webpack_require__(/*! ../asset/data/buffs/ranged/perfect-equilibrium.data.png */ "./asset/data/buffs/ranged/perfect-equilibrium.data.png"),
    balanaceByForce: __webpack_require__(/*! ../asset/data/buffs/ranged/balance-by-force.data.png */ "./asset/data/buffs/ranged/balance-by-force.data.png"),
    rangedSplitSoul: __webpack_require__(/*! ../asset/data/buffs/ranged/split-soul.data.png */ "./asset/data/buffs/ranged/split-soul.data.png"),
    // TODO: Move this into A1 Sauce properly
    /* Troubleshooting */
    mediumBuffs: __webpack_require__(/*! ../a1sauce/DataImages/ErrorHandling/medium_buffs.data.png */ "./a1sauce/DataImages/ErrorHandling/medium_buffs.data.png"),
    largeBuffs: __webpack_require__(/*! ../a1sauce/DataImages/ErrorHandling/large_buffs.data.png */ "./a1sauce/DataImages/ErrorHandling/large_buffs.data.png"),
});
async function retryOperation(operation, maxRetries, delay, attempt = 0) {
    try {
        return operation();
    }
    catch (error) {
        if (attempt >= maxRetries) {
            throw error;
        }
        await new Promise((resolve) => setTimeout(resolve, delay));
        return retryOperation(operation, maxRetries, delay, attempt + 1);
    }
}
function findBuffsBar() {
    console.info('Attempting to find buffs bar...');
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('rememberUiPosition') &&
        (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('buffsPosition')) {
        buffReader.pos = JSON.parse((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('buffsPosition'));
        return;
    }
    if (!buffReader.find()) {
        console.log(`Failed to find those buffs`);
        errorLogger.showError({
            title: 'No Buffs Found',
            message: `<p>Job Gauges could not locate your buffs bar. Please use a defensive ability or some other way of obtaining a buff and Job Gauges will attempt to search again shortly or click the button below.</p>`,
        });
        throw new Error('BuffsBarSearchError: Failed to find buff bar');
    }
}
function findDebuffsBar() {
    console.info('Attempting to find debuffs bar...');
    if ((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('rememberUiPosition') && (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('debuffsPosition')) {
        debuffReader.pos = JSON.parse((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.getSetting)('debuffsPosition'));
        return;
    }
    if (!debuffReader.pos && !debuffReader.find()) {
        errorLogger.showError({
            title: 'No Debuffs Found',
            message: `<p>Job Gauges could not locate your debuffs bar. Please toggle on your Prayer or some other way of obtaining a debuff and Job Gauges will attempt to search again shortly or click the button below.</p>`,
        });
        throw new Error('BuffsBarSearchError: Failed to find debuff bar');
    }
}
function testBuffSizes() {
    console.info('Unable to find buffs. Checking to see if Buffs are set to "Medium" or "Large"');
    const screen = alt1__WEBPACK_IMPORTED_MODULE_10__.captureHoldFullRs();
    const mediumBuffPositions = screen.findSubimage(buffsImages.mediumBuffs);
    const largeBuffPositions = screen.findSubimage(buffsImages.largeBuffs);
    const message = `<p>Alt1 only supports reading Small Buffs.<br><br>Please update your Buffs Bar settings.<br> Interfaces > Buff Bar > Icon Size </p><img src="./a1sauce/Error/Images/BuffIconSize.png">`;
    if (mediumBuffPositions.length) {
        errorLogger.showError({
            title: 'Medium Buffs Detected',
            message,
        });
        return true;
    }
    if (largeBuffPositions.length) {
        errorLogger.showError({
            title: 'Large Buffs Detected',
            message,
        });
        return true;
    }
    return false;
}
retryOperation(findBuffsBar, 3, 10000)
    .then(() => {
    console.info('Success! Found Buffs.');
    if (document.getElementById('#Error') !== undefined) {
        let err = document.querySelectorAll('#Error');
        for (let i = 0; i < err.length; i++) {
            const errHeader = err[i].querySelector('h2')?.innerText;
            if (errHeader === 'No Buffs Found') {
                err[i].remove();
            }
        }
    }
})
    .catch(() => {
    const wrongBuffSize = testBuffSizes();
    if (!wrongBuffSize) {
        errorLogger.showError({
            title: 'Failed to find Buffs',
            message: `<p>Job Gauges could not locate your buffs bar. Please ensure that Alt1 is able to read your screen (Alt1 Settings -> Capture tab). If it cannot you may need to adjust your Scaling or DPI settings. Further troubleshooting instructions are available in the <a href="https://discord.gg/KJ2SgWyJFF">Discord server</a>.</p>`,
        });
        console.warn('Please make sure you have at least 1 buff on your buffs bar and then reload the app. The easiest way is to use a Defensive ability (Freedom, Anticipate) or toggle on Bone Shield.');
    }
});
retryOperation(findDebuffsBar, 3, 10000)
    .then(() => {
    console.info('Success! Found Debuffs.');
    if (document.getElementById('#Error') !== undefined) {
        let err = document.querySelectorAll('#Error');
        for (let i = 0; i < err.length; i++) {
            let errHeader = err[i].querySelector('h2')?.innerText;
            if (errHeader === 'No Debuffs Found') {
                err[i].remove();
            }
        }
    }
    if (buffReader.pos && debuffReader.pos) {
        (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.updateSetting)('buffsPosition', JSON.stringify(buffReader.pos));
        (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_8__.updateSetting)('debuffsPosition', JSON.stringify(debuffReader.pos));
        (0,___WEBPACK_IMPORTED_MODULE_6__.beginRendering)();
    }
})
    .catch(() => {
    let wrongBuffSize = testBuffSizes();
    if (!wrongBuffSize) {
        errorLogger.showError({
            title: 'Failed to find Debuffs',
            message: `<p>Job Gauges could not locate your debuffs bar. Please ensure that Alt1 is able to read your screen (Alt1 Settings -> Capture tab). If it cannot you may need to adjust your Scaling or DPI settings. Further troubleshooting instructions are available in the <a href="https://discord.gg/KJ2SgWyJFF">Discord server</a>.</p>`,
        });
        console.warn('Please make sure you have at least 1 debuff on your debuffs bar and then reload the app. The easiest way is to toggle a Prayer on.');
    }
});
async function readBuffs(gauges) {
    if (!buffReader.pos) {
        return;
    }
    updateBuffData(buffReader, gauges, buffsImages.deathsSwiftness, 125, updateDeathsSwiftness, false);
    updateBuffData(buffReader, gauges, buffsImages.greaterDeathsSwiftness, 350, updateDeathsSwiftness, true);
    updateBuffData(buffReader, gauges, buffsImages.sunshine, 300, updateSunshine, false);
    updateBuffData(buffReader, gauges, buffsImages.greaterSunshine, 100, updateSunshine, true);
    if (gauges.necromancy.livingDeath.isActiveOverlay) {
        updateBuffData(buffReader, gauges, buffsImages.living_death, 400, updateLivingDeath, false);
    }
    switch (gauges.combatStyle) {
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.necro:
            updateBuffData(buffReader, gauges, buffsImages.soul, 200, updateSoulCount, false);
            updateBuffData(buffReader, gauges, buffsImages.necrosis, 200, updateNecrosisCount, false);
            updateConjures(gauges);
            updateBuffData(buffReader, gauges, buffsImages.darkness, 300, updateDarkness, false);
            if (!disableThreadsCheck) {
                updateBuffData(buffReader, gauges, buffsImages.threads, 300, updateThreads, false);
            }
            if (!disableSplitCheck) {
                updateBuffData(buffReader, gauges, buffsImages.split_soul, 350, updateSplitSoul, false);
            }
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.mage:
            updateBuffData(buffReader, gauges, buffsImages.instability, 60, updateFsoa, false);
            updateBuffData(buffReader, gauges, buffsImages.tsunami, 200, updateTsunami, false);
            updateStackData(gauges, buffsImages.bloodTithe, 30, updateBloodTithe);
            updateStackData(gauges, buffsImages.glacialEmbrace, 30, updateGlacialEmbrace);
            updateBuffData(debuffReader, gauges, buffsImages.odeToDeceit, 9, updateOdeToDeceit, false);
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.ranged:
            updateBuffData(debuffReader, gauges, buffsImages.crystalRain, 60, updateCrystalRain, false);
            (0,_ranged_activeAmmo__WEBPACK_IMPORTED_MODULE_2__.findAmmo)(gauges, buffReader.read());
            updateSimpleStackData(gauges, buffsImages.perfectEquilibrium, 300, updatePeCount);
            updateBuffData(buffReader, gauges, buffsImages.balanaceByForce, 20, updateBalanceByForce, false);
            updateBuffData(buffReader, gauges, buffsImages.rangedSplitSoul, 300, updateRangedSplitSoul, false);
            break;
        case _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.melee:
            break;
    }
    return buffReader;
}
async function updateBuffData(buffReader, gauges, buffImage, threshold, updateCallbackFn, greater) {
    const buffs = buffReader.read();
    if (!buffs) {
        throw Error('Failed to read buffs for updateBuffData.');
    }
    let foundBuff = false;
    for (const buff of buffs) {
        const match = buff.countMatch(buffImage, false);
        /**
         * "THIS IS A HACK"
         * Issues with Ode to Deceit false positives
         */
        if (buffImage === buffsImages.odeToDeceit &&
            buff.readArg('timearg').time >= 46) {
            return false;
        }
        if (match.passed > threshold) {
            foundBuff = true;
            updateCallbackFn(gauges, buff.readArg('timearg').time, greater);
        }
    }
    if (!foundBuff) {
        updateCallbackFn(gauges, 0, greater);
    }
    return foundBuff;
}
async function updateStackData(gauges, buffImage, threshold, updateCallbackFn) {
    const buffs = buffReader.read();
    if (!buffs) {
        throw Error('Failed to read buffs for updateStackData.');
    }
    let foundBuff = false;
    for (const buff of buffs) {
        const match = buff.countMatch(buffImage, false);
        if (match.passed > threshold) {
            foundBuff = true;
            updateCallbackFn(gauges, parseInt(buff
                .readArg('timearg')
                .arg.substring(1, buff.readArg('timearg').arg.length - 1), 10));
        }
    }
    if (!foundBuff) {
        updateCallbackFn(gauges, 0);
    }
    return foundBuff;
}
async function updateSimpleStackData(gauges, buffImage, threshold, updateCallbackFn) {
    const buffs = buffReader.read();
    if (!buffs) {
        throw Error('Failed to read buffs for updateSimpleStackData.');
    }
    let foundBuff = false;
    for (const buff of buffs) {
        const match = buff.countMatch(buffImage, false);
        if (match.passed > threshold) {
            foundBuff = true;
            updateCallbackFn(gauges, buff.readTime());
        }
    }
    if (!foundBuff) {
        updateCallbackFn(gauges, 0);
    }
    return foundBuff;
}
// TODO: Figure out a cleaner way to update values.
// There shouldn't be any reason the below functions can't be done via updateBuffData
// without passing an updateCallbackfn()
// Passing data = ['necromancy]['stacks']['souls]['count'] and trying
// to update gauges.data doesn't work because somehow ['souls'] is undefined?
async function updateSoulCount(gauges, value) {
    gauges.necromancy.stacks.souls.stacks = value;
}
async function updateNecrosisCount(gauges, value) {
    gauges.necromancy.stacks.necrosis.stacks = value;
}
async function updateLivingDeath(gauges, value) {
    // If Living Death has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.necromancy.livingDeath.isOnCooldown = false;
        gauges.necromancy.livingDeath.cooldownDuration = 0;
        gauges.necromancy.livingDeath.active = true;
        gauges.necromancy.livingDeath.time = value;
        changeCombatStyles(gauges, _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.necro);
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.necromancy.livingDeath.active) {
        // Make sure to update the text one final time
        gauges.necromancy.livingDeath.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - LD is now on Cooldown so is not active
        setTimeout(() => {
            gauges.necromancy.livingDeath.time = 0;
            gauges.necromancy.livingDeath.active = false;
            gauges.necromancy.livingDeath.isOnCooldown = true;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.necromancy.livingDeath,
                position: gauges.necromancy.position,
                scaleFactor: gauges.scaleFactor,
            }, 'LivingDeath', false);
        }, 1050);
    }
}
async function updateSkeleton(gauges, value) {
    gauges.necromancy.conjures.skeleton.time = value;
    gauges.necromancy.conjures.skeleton.active = Boolean(value);
}
async function updateZombie(gauges, value) {
    gauges.necromancy.conjures.zombie.time = value;
    gauges.necromancy.conjures.zombie.active = Boolean(value);
}
async function updateGhost(gauges, value) {
    gauges.necromancy.conjures.ghost.time = value;
    gauges.necromancy.conjures.ghost.active = Boolean(value);
}
async function updatePhantom(gauges, value) {
    gauges.necromancy.conjures.phantom.time = value;
    gauges.necromancy.conjures.phantom.active = Boolean(value);
}
async function updateDarkness(gauges, value) {
    gauges.necromancy.incantations.active[1] = Boolean(value);
}
let disableThreadsCheck = false;
async function updateThreads(gauges, value) {
    gauges.necromancy.incantations.active[2] = false;
    if (value > 1) {
        gauges.necromancy.incantations.active[2] = true;
    }
    if (value == 1) {
        gauges.necromancy.incantations.active[2] = true;
        disableThreadsCheck = true;
        setTimeout(() => {
            gauges.necromancy.incantations.active[2] = false;
            disableThreadsCheck = false;
        }, gauges.necromancy.incantations.threads.cooldownDuration * 1000);
    }
}
let disableSplitCheck = false;
async function updateSplitSoul(gauges, value) {
    gauges.necromancy.incantations.active[3] = false;
    if (value > 1) {
        gauges.necromancy.incantations.active[3] = true;
    }
    if (value == 1) {
        gauges.necromancy.incantations.active[3] = true;
        disableSplitCheck = true;
        setTimeout(() => {
            gauges.necromancy.incantations.active[3] = false;
            disableSplitCheck = false;
        }, gauges.necromancy.incantations.splitSoul.cooldownDuration * 1000);
    }
}
async function updateConjures(gauges) {
    const hasSkeleton = await updateBuffData(buffReader, gauges, buffsImages.skeleton, 150, updateSkeleton, false);
    const hasZombie = await updateBuffData(buffReader, gauges, buffsImages.zombie, 150, updateZombie, false);
    const hasGhost = await updateBuffData(buffReader, gauges, buffsImages.ghost, 200, updateGhost, false);
    const hasPhantom = await updateBuffData(buffReader, gauges, buffsImages.phantom, 200, updatePhantom, false);
    if (hasSkeleton || hasZombie || hasGhost || hasPhantom) {
        gauges.necromancy.conjures.active = true;
    }
    else {
        gauges.necromancy.conjures.active = false;
    }
}
async function updateSunshine(gauges, value, greater) {
    // If Sunshine has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.magic.sunshine.isOnCooldown = false;
        gauges.magic.sunshine.cooldownDuration = 0;
        gauges.magic.sunshine.active = true;
        gauges.magic.sunshine.time = value;
        changeCombatStyles(gauges, _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.mage);
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.magic.sunshine.active) {
        // Make sure to update the text one final time
        gauges.magic.sunshine.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - LD is now on Cooldown so is not active
        setTimeout(() => {
            gauges.magic.sunshine.time = 0;
            gauges.magic.sunshine.active = false;
            gauges.magic.sunshine.isOnCooldown = true;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.magic.sunshine,
                position: gauges.magic.position,
                scaleFactor: gauges.scaleFactor,
            }, 'Sunshine', greater);
        }, 1050);
    }
}
async function updateFsoa(gauges, value) {
    // If Instability has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.magic.instability.isOnCooldown = false;
        gauges.magic.instability.cooldownDuration = 0;
        gauges.magic.instability.active = true;
        gauges.magic.instability.time = value;
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.magic.instability.active) {
        // Make sure to update the text one final time
        gauges.magic.instability.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - LD is now on Cooldown so is not active
        setTimeout(() => {
            gauges.magic.instability.time = 0;
            gauges.magic.instability.active = false;
            gauges.magic.instability.isOnCooldown = true;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.magic.instability,
                position: gauges.magic.position,
                scaleFactor: gauges.scaleFactor,
            }, 'Instability', false);
        }, 1050);
    }
}
async function updateBloodTithe(gauges, value) {
    gauges.magic.spells.bloodTithe.stacks = value;
    gauges.magic.spells.bloodTithe.active = Boolean(value);
}
async function updateGlacialEmbrace(gauges, value) {
    gauges.magic.spells.glacialEmbrace.stacks = value;
    gauges.magic.spells.glacialEmbrace.active = Boolean(value);
}
async function updateTsunami(gauges, value) {
    // If Tsunami has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.magic.tsunami.isOnCooldown = false;
        gauges.magic.tsunami.cooldownDuration = 0;
        gauges.magic.tsunami.active = true;
        gauges.magic.tsunami.time = value;
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.magic.tsunami.active) {
        // Make sure to update the text one final time
        gauges.magic.tsunami.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - LD is now on Cooldown so is not active
        setTimeout(() => {
            gauges.magic.tsunami.time = 0;
            gauges.magic.tsunami.active = false;
            gauges.magic.tsunami.isOnCooldown = true;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.magic.tsunami,
                position: gauges.magic.position,
                scaleFactor: gauges.scaleFactor,
            }, 'Tsunami', false);
        }, 1050);
    }
}
function changeCombatStyles(gauges, style) {
    if (gauges.combatStyle !== style && gauges.automaticSwapping) {
        gauges.combatStyle = style;
        _utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlays();
        _utility__WEBPACK_IMPORTED_MODULE_0__.clearTextOverlays();
    }
}
async function updateDeathsSwiftness(gauges, value, greater) {
    // If Death Swiftness has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.ranged.deathsSwiftness.isOnCooldown = false;
        gauges.ranged.deathsSwiftness.cooldownDuration = 0;
        gauges.ranged.deathsSwiftness.active = true;
        gauges.ranged.deathsSwiftness.time = value;
        changeCombatStyles(gauges, _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.ranged);
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.ranged.deathsSwiftness.active) {
        // Make sure to update the text one final time
        gauges.ranged.deathsSwiftness.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - DS is now on Cooldown so is not active
        setTimeout(() => {
            gauges.ranged.deathsSwiftness.time = 0;
            gauges.ranged.deathsSwiftness.active = false;
            gauges.ranged.deathsSwiftness.isOnCooldown = true;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.ranged.deathsSwiftness,
                position: gauges.ranged.position,
                scaleFactor: gauges.scaleFactor,
            }, 'DeathsSwiftness', greater);
        }, 1050);
    }
}
async function updateCrystalRain(gauges, value) {
    // If Crystal Rain has an active buff and a timer:
    //   - it is on cooldown
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.ranged.crystalRain.isOnCooldown = true;
        gauges.ranged.crystalRain.active = true;
        gauges.ranged.crystalRain.time = value;
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.ranged.crystalRain.active) {
        // Make sure to update the text one final time
        gauges.ranged.crystalRain.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - CR is now available again
        setTimeout(() => {
            gauges.ranged.crystalRain.time = 0;
            gauges.ranged.crystalRain.active = false;
            gauges.ranged.crystalRain.isOnCooldown = false;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.ranged.crystalRain,
                position: gauges.ranged.position,
                scaleFactor: gauges.scaleFactor,
            }, 'CrystalRain', false);
        }, 1050);
    }
}
async function updatePeCount(gauges, value) {
    gauges.ranged.perfectEquilibrium.stacks = value;
}
async function updateOdeToDeceit(gauges, value) {
    // If Ode to Deceit has an active buff and a timer:
    //   - it is on cooldown
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.magic.odeToDeceit.isOnCooldown = true;
        gauges.magic.odeToDeceit.active = true;
        gauges.magic.odeToDeceit.time = value;
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.magic.odeToDeceit.active) {
        // Make sure to update the text one final time
        gauges.magic.odeToDeceit.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - CR is now available again
        setTimeout(() => {
            gauges.magic.odeToDeceit.time = 0;
            gauges.magic.odeToDeceit.active = false;
            gauges.magic.odeToDeceit.isOnCooldown = false;
            (0,_util_ability_helpers__WEBPACK_IMPORTED_MODULE_7__.startAbilityCooldown)({
                ability: gauges.magic.odeToDeceit,
                position: gauges.magic.position,
                scaleFactor: gauges.scaleFactor,
            }, 'OdeToDeceit', false);
        }, 1050);
    }
}
async function updateBalanceByForce(gauges, value) {
    gauges.ranged.balanceByForce = Boolean(value);
}
async function updateRangedSplitSoul(gauges, value) {
    // If Split Soul has an active buff and a timer:
    //   - it cannot be on cooldown
    //   - it must be active
    //   - The remaining time is its timer
    if (value > 1) {
        gauges.ranged.splitSoul.isOnCooldown = false;
        gauges.ranged.splitSoul.cooldownDuration = 0;
        gauges.ranged.splitSoul.active = true;
        gauges.ranged.splitSoul.time = value;
        changeCombatStyles(gauges, _types__WEBPACK_IMPORTED_MODULE_1__.CombatStyle.ranged);
    }
    // When only 1 second of the buff exists
    if (value == 1 && gauges.ranged.splitSoul.active) {
        // Make sure to update the text one final time
        gauges.ranged.splitSoul.time = value;
        // Then start a timer to wait just past the last second
        //  - Clear the timer
        //  - DS is now on Cooldown so is not active
        setTimeout(() => {
            gauges.ranged.splitSoul.time = 0;
            gauges.ranged.splitSoul.active = false;
            gauges.ranged.splitSoul.isOnCooldown = true;
            startRangedSplitSoul(gauges);
        }, 1050);
    }
}
async function startRangedSplitSoul(gauges) {
    if (!gauges.ranged.splitSoul.isActiveOverlay) {
        return;
    }
    // If the buff is active we don't need to do a cooldown and can clear the Cooldown text and exit early
    if (gauges.ranged.splitSoul.active) {
        endRangedSoulSplit(gauges);
        return;
    }
    // Otherwise cooldown has started and we can clear the Active text
    _utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay('SplitSoul_Text');
}
async function endRangedSoulSplit(gauges) {
    gauges.ranged.splitSoul.isOnCooldown = false;
    gauges.ranged.splitSoul.cooldownDuration = 0;
    _utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay('SplitSoul_Text');
}


/***/ }),

/***/ "./lib/readEnemy.ts":
/*!**************************!*\
  !*** ./lib/readEnemy.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   readEnemy: () => (/* binding */ readEnemy)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alt1/targetmob */ "../node_modules/alt1/dist/targetmob/index.js");
/* harmony import */ var alt1_targetmob__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alt1_targetmob__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ "./lib/utility.ts");
/* harmony import */ var _a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../a1sauce/Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* eslint-disable @typescript-eslint/no-require-imports */




const targetDisplay = new (alt1_targetmob__WEBPACK_IMPORTED_MODULE_2___default())();
const enemyDebuffImages = alt1__WEBPACK_IMPORTED_MODULE_3__.webpackImages({
    invokeDeath: __webpack_require__(/*! ../asset/data/enemyDebuffs/death-mark.data.png */ "./asset/data/enemyDebuffs/death-mark.data.png"),
    bloat: __webpack_require__(/*! ../asset/data/enemyDebuffs/bloated.data.png */ "./asset/data/enemyDebuffs/bloated.data.png"),
});
// Thanks to rodultra97 for PR to previous repo
const bloatInterval = new Map();
const bloat = 'bloat';
const combatInterval = new Map();
const outOfCombat = 'isInCombat';
let combatTimer = -1;
async function readEnemy(gauges) {
    //TODO: Store LastPos and detect when to rescan to avoid spamming CHFRS in loop
    const targetData = targetDisplay.read();
    if (combatTimer < 0) {
        combatTimer = parseInt((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_1__.getSetting)('combatTimer'), 10);
    }
    if (gauges.checkCombatStatus) {
        if (targetData) {
            gauges.isInCombat = true;
            if (combatInterval.has(outOfCombat)) {
                clearInterval(combatInterval.get(outOfCombat));
                combatInterval.delete(outOfCombat);
            }
        }
        else if (!targetData && !combatInterval.has(outOfCombat)) {
            const intervalId = setInterval(() => {
                const currentTick = combatTimer;
                if (currentTick > 0) {
                    combatTimer = currentTick - 1;
                }
                else if (!targetData) {
                    gauges.isInCombat = false;
                    combatTimer = parseInt((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_1__.getSetting)('combatTimer'), 10);
                }
            }, 1000);
            combatInterval.set(outOfCombat, intervalId);
        }
    }
    else {
        gauges.isInCombat = true;
        if (combatInterval.has(outOfCombat)) {
            clearInterval(combatInterval.get(outOfCombat));
            combatInterval.delete(outOfCombat);
        }
    }
    if (targetData && gauges.isInCombat) {
        const target_display_loc = {
            x: (targetDisplay?.lastpos?.x ?? 0) - 120,
            y: (targetDisplay?.lastpos?.y ?? 0) + 20,
            w: 150,
            h: 60,
        };
        const targetDebuffs = alt1__WEBPACK_IMPORTED_MODULE_3__.captureHold(target_display_loc.x, target_display_loc.y, target_display_loc.w, target_display_loc.h);
        const targetIsDeathMarked = targetDebuffs.findSubimage(enemyDebuffImages.invokeDeath).length;
        if (targetIsDeathMarked) {
            gauges.necromancy.incantations.active[0] = true;
        }
        else if (!targetIsDeathMarked) {
            gauges.necromancy.incantations.active[0] = false;
        }
        const targetIsBloated = targetDebuffs.findSubimage(enemyDebuffImages.bloat).length;
        if (targetIsBloated && !bloatInterval.has(bloat)) {
            gauges.necromancy.bloat.time = 20.5;
            gauges.necromancy.bloat.active = true;
            const intervalId = setInterval(() => {
                const currentTick = gauges.necromancy.bloat.time;
                if (currentTick > 0) {
                    const nextTick = parseFloat((0,_utility__WEBPACK_IMPORTED_MODULE_0__.roundedToFixed)(currentTick - 0.6, 1));
                    gauges.necromancy.bloat.time = nextTick;
                }
                else {
                    clearInterval(bloatInterval.get(bloat));
                    bloatInterval.delete(bloat);
                    gauges.necromancy.bloat.time = 0;
                }
            }, 600);
            bloatInterval.set(bloat, intervalId);
        }
        else if (!targetIsBloated) {
            if (bloatInterval.has(bloat)) {
                clearInterval(bloatInterval.get(bloat));
                bloatInterval.delete(bloat);
            }
            gauges.necromancy.bloat.time = 0;
            gauges.necromancy.bloat.active = false;
        }
    }
    else {
        gauges.necromancy.incantations.active[0] = false;
        gauges.necromancy.bloat.time = 0;
        gauges.necromancy.bloat.active = false;
    }
}


/***/ }),

/***/ "./lib/settings/index.ts":
/*!*******************************!*\
  !*** ./lib/settings/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderSettings: () => (/* binding */ renderSettings)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../.. */ "./index.ts");
/* harmony import */ var _a1sauce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../a1sauce */ "./a1sauce/index.ts");
/* harmony import */ var _a1sauce_Patches_patchNotes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../a1sauce/Patches/patchNotes */ "./a1sauce/Patches/patchNotes.ts");
/* harmony import */ var _a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../a1sauce/Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../data/constants */ "./data/constants.ts");
/* harmony import */ var _patchnotes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../patchnotes */ "./patchnotes.ts");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");
/* harmony import */ var pouchdb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pouchdb */ "../node_modules/pouchdb/lib/index-browser.es.js");








const sauce = _a1sauce__WEBPACK_IMPORTED_MODULE_1__.A1Sauce.instance;
sauce.setName(_data_constants__WEBPACK_IMPORTED_MODULE_4__.appName);
sauce.setVersion(_data_constants__WEBPACK_IMPORTED_MODULE_4__.majorVersion, _data_constants__WEBPACK_IMPORTED_MODULE_4__.minorVersion, _data_constants__WEBPACK_IMPORTED_MODULE_4__.patchVersion);
const settings = sauce.createSettings();
const db = new pouchdb__WEBPACK_IMPORTED_MODULE_7__["default"](_data_constants__WEBPACK_IMPORTED_MODULE_4__.appName);
const patchNotes = new _a1sauce_Patches_patchNotes__WEBPACK_IMPORTED_MODULE_2__.Patches();
patchNotes.setNotes(_patchnotes__WEBPACK_IMPORTED_MODULE_5__.notes);
const renderSettings = async (gauges) => {
    settings
        .addHeader('h2', 'Job Gauges - v' + sauce.getVersion())
        .addText(`Please <a href="https://discord.gg/KJ2SgWyJFF" target="_blank" rel="nofollow">join the Discord</a> for any suggestions or support`)
        .addSeperator()
        .addHeader('h3', 'General')
        .addCheckboxSetting('checkForUpdates', 'Periodically check if a new update is available', false)
        .addCheckboxSetting('rememberUiPosition', 'Remember last known position of buff/debuff bars to avoid needing to scan on every app start', false)
        .addDropdownSetting('defaultCombatStyle', 'Select default combat style', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('defaultCombatStyle') ?? '4', [
        { value: '2', name: 'Ranged' },
        { value: '3', name: 'Magic' },
        { value: '4', name: 'Necromancy' },
    ])
        .addCheckboxSetting('automaticSwapping', 'Swap gauge automatically based on last used Ultimate Ability', false)
        .addCheckboxSetting('hideOutsideCombat', 'Show gauges only while "In Combat"', false)
        .addRangeSetting('combatTimer', 'Seconds until Player is no longer "In Combat" after Target Information goes away', { defaultValue: '5', min: 1, max: 600, unit: 's' })
        .addSeperator()
        .addButton('repositionOverlay', 'Reposition Overlay', () => (0,_utility__WEBPACK_IMPORTED_MODULE_6__.setOverlayPosition)(gauges), {
        classes: ['nisbutton'],
    })
        .addSeperator()
        .addHeader('h3', 'Scale')
        .addRangeSetting('scale', 'Adjusts the size of the overlay. You must reload and reposition the overlay after scaling.', { defaultValue: '100', min: 50, max: 300 })
        .addSeperator()
        .addHeader('h3', 'Incantation Placement')
        .addDropdownSetting('selectedOrientation', 'Select how to group Incantations', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('selectedOrientation') ?? 'reverse_split', [
        { value: 'grouped', name: 'Grouped' },
        { value: 'split', name: 'Split' },
        { value: 'reverse_split', name: 'Reverse Split' },
    ])
        .addSeperator()
        .addHeader('h3', 'Visible Components')
        .addText('Select which components of the overlay you wish to see.')
        .addCheckboxSetting('showConjures', 'Show Conjures', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showConjures') ?? true)
        .addCheckboxSetting('showLivingDeath', 'Show Living Death', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showLivingDeath') ?? true)
        .addCheckboxSetting('showIncantations', 'Show Incantations', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showIncantations') ?? true)
        .addCheckboxSetting('showInvokeDeath', 'Show Invoke Death', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showInvokeDeath') ?? true)
        .addCheckboxSetting('showDarkness', 'Show Darkness', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showDarkness') ?? true)
        .addCheckboxSetting('showThreads', 'Show Threads of Fate', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showThreads') ?? true)
        .addCheckboxSetting('showSplitSoul', 'Show Split Soul', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showSplitSoul') ?? true)
        .addCheckboxSetting('showSouls', 'Show Residual Souls', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showSouls') ?? true)
        .addCheckboxSetting('pre95Souls', 'Only show 3 Residual Souls / No Soulbound Lantern', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('pre95Souls') ?? false)
        .addCheckboxSetting('showNecrosis', 'Show Necrosis', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showNecrosis') ?? true)
        .addCheckboxSetting('dupeRow', 'Show 2nd row of Necrosis stacks', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('dupeRow') ?? false)
        .addCheckboxSetting('useColoredNecrosis', 'Use orange and red Necrosis Stacks when above certain thresholds', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('useColoredNecrosis') ?? false)
        .addCheckboxSetting('showBloat', 'Show Bloat', (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)('showBloat') ?? true)
        .addSeperator()
        .addHeader('h2', 'Alarms')
        .addFileSetting('customAlarms', 'Upload a custom alarm', '')
        .addHeader('h3', 'Residual Souls Alarm')
        .addRangeSetting('alarmSoulsThreshold', 'Alert when at or above this many souls', { defaultValue: '5', min: 2, max: 5, unit: ' souls' })
        .addAlarmSetting('alarmSouls', '')
        .addSeperator()
        .addHeader('h3', 'Necrosis Stacks Alarm')
        .addRangeSetting('alarmNecrosisThreshold', 'Alert when at or above this many stacks', { defaultValue: '12', min: 2, max: 12, unit: ' stacks' })
        .addAlarmSetting('alarmNecrosis', '')
        .addSeperator()
        .addButton('openPatchNotes', 'Open Patch Notes', patchNotes.showPatchNotes, { classes: ['nisbutton'] })
        .addButton('resetPositons', 'Scan for Buff and Debuff Bars', ___WEBPACK_IMPORTED_MODULE_0__.resetPositionsAndFindBuffAndDebuffBars, { classes: ['nisbutton'] })
        .addText('Use the above Scan button if you have adjusted your screen in any way and Job Gauges is no longer working.')
        .build();
    db.allDocs({ include_docs: true, attachments: true, binary: true })
        .then((result) => {
        result.rows.forEach((row) => {
            let alarmDropdowns = document.querySelectorAll('.alarm-dropdown');
            for (let i = 0; i < alarmDropdowns.length; i++) {
                let option = document.createElement('option');
                // @ts-ignore
                option.value = `Custom:${row.doc._id}`;
                // @ts-ignore
                option.innerText = `${row.doc.name}`;
                alarmDropdowns[i].appendChild(option);
            }
        });
    })
        .then(() => {
        let alarmDropdowns = document.querySelectorAll('.alarm-dropdown');
        alarmDropdowns.forEach((dropdown) => {
            dropdown.addEventListener('change', (e) => {
                let target = e.target;
                let settingName = target.id;
                (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.updateSetting)(settingName, target.value);
            });
            let dd = dropdown;
            dd.value = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_3__.getSetting)(dropdown.id);
        });
    });
};


/***/ }),

/***/ "./lib/util/ability-helpers.ts":
/*!*************************************!*\
  !*** ./lib/util/ability-helpers.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbilityCooldowns: () => (/* binding */ AbilityCooldowns),
/* harmony export */   clearAbilityOverlays: () => (/* binding */ clearAbilityOverlays),
/* harmony export */   endAbilityCooldown: () => (/* binding */ endAbilityCooldown),
/* harmony export */   handleAbilityActiveState: () => (/* binding */ handleAbilityActiveState),
/* harmony export */   startAbilityCooldown: () => (/* binding */ startAbilityCooldown)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utility */ "./lib/utility.ts");


const defaultCooldowns = {
    cooldownDefault: 29,
    cooldownWhenGreater: 29,
    positionX: 26,
    positionY: 26,
};
const AbilityCooldowns = new Map([
    ['Sunshine', { ...defaultCooldowns, cooldownWhenGreater: 22 }],
    ['DeathsSwiftness', { ...defaultCooldowns, cooldownWhenGreater: 22 }],
    ['Instability', { ...defaultCooldowns, positionY: 30 }],
    ['Tsunami', { ...defaultCooldowns }],
    ['CrystalRain', { ...defaultCooldowns }],
    ['OdeToDeceit', { ...defaultCooldowns }],
    ['LivingDeath', { ...defaultCooldowns }],
]);
/**
 * Keep track of which abilities are currently doing overlay countdowns for cooldowns.
 * This helps prevent flickering when this function is relentlessly called over and over
 * by the renderer.
 */
const AbilityCooldown = new Map();
/**
 * Handles ticking down an abilities cooldown and ending it when it's over or active.
 * @param abilityData Metadata about the ability to get positioning and ending cooldowns.
 * @param abilityName Strongly typed name for consistent overlay updating.
 * @param greater If the cooldown is great...er(?) (Ask Nyu)
 */
function startAbilityCooldown(abilityData, abilityName, greater) {
    const { scaleFactor, position, ability } = abilityData;
    if (!ability.isActiveOverlay) {
        return;
    }
    const isAbilityOnCooldown = AbilityCooldown.get(abilityName);
    // If the buff is active we don't need to do a cooldown and can clear the Cooldown text and exit early
    if (ability.active) {
        AbilityCooldown.set(abilityName, false);
        return endAbilityCooldown(abilityData.ability, abilityName);
    }
    // If there's already a timer active... no need to do anything else.
    if (isAbilityOnCooldown) {
        return;
    }
    // We're going to begin the cooldown, so set to true to prevent any extra operations for this ability.
    AbilityCooldown.set(abilityName, true);
    // Otherwise cooldown has started and we can clear the Active text
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)(`${abilityName}_Text`);
    alt1.overLaySetGroupZIndex(`${abilityName}_Cooldown_Text`, 1);
    const cooldowns = AbilityCooldowns.get(abilityName);
    if (!cooldowns) {
        throw Error(`Missing cooldown definitions for ability: ${abilityName}`);
    }
    const { positionX, positionY } = cooldowns;
    let cooldown = greater
        ? cooldowns.cooldownWhenGreater
        : cooldowns.cooldownDefault;
    const timer = setInterval(() => {
        if (ability.active || cooldown <= 0) {
            clearInterval(timer);
            AbilityCooldown.set(abilityName, false);
            return endAbilityCooldown(abilityData.ability, abilityName);
        }
        cooldown -= 1;
        const cooldownText = `${abilityName}_Cooldown_Text`;
        (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)(cooldownText);
        const xPositionAdjusted = position.x +
            (ability.position?.active_orientation.x ?? 0) +
            positionX;
        const yPositionAdjusted = position.y +
            (ability.position?.active_orientation.y ?? 0) +
            positionY;
        alt1.overLayTextEx(`${cooldown}`, _utility__WEBPACK_IMPORTED_MODULE_0__.white, 14, (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(xPositionAdjusted, scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(yPositionAdjusted, scaleFactor), 3000, '', true, true);
        alt1.overLayRefreshGroup(cooldownText);
    }, 1000);
}
/**
 * Clear the abilities cooldown and reset state.
 * @param ability The ability to update.
 * @param name Strongly typed name to clear overlay.
 */
function endAbilityCooldown(ability, name) {
    ability.isOnCooldown = false;
    ability.cooldownDuration = 0;
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)(`${name}_Cooldown_Text`);
}
/**
 * Handle drawing abilities that have an active or inactive state.
 * @param abilityData Required info to draw the ability image.
 * @param name Strongly typed name to draw to image group.
 * @param active If the ability is currently active.
 */
function handleAbilityActiveState(abilityData, name, active) {
    const { position, ability, scaleFactor, images } = abilityData;
    const image = active ? images.active : images.inactive;
    const xPosition = position.x + ability.position.active_orientation.x;
    const yPosition = position.y + ability.position.active_orientation.y;
    alt1.overLaySetGroup(name);
    alt1.overLayImage((0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(xPosition, scaleFactor), (0,_utility__WEBPACK_IMPORTED_MODULE_0__.adjustPositionForScale)(yPosition, scaleFactor), alt1__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(image.toDrawableData()), image.width, 1000);
}
/**
 * Clear an abilities cooldown text and normal text.
 * @param ability Strongly typed name of the ability to clear.
 */
function clearAbilityOverlays(ability) {
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)(`${ability}_Text`);
    (0,_utility__WEBPACK_IMPORTED_MODULE_0__.forceClearOverlay)(`${ability}_Cooldown_Text`);
    alt1.overLayClearGroup(ability);
}


/***/ }),

/***/ "./lib/utility.ts":
/*!************************!*\
  !*** ./lib/utility.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   adjustPositionForScale: () => (/* binding */ adjustPositionForScale),
/* harmony export */   adjustPositionWithoutScale: () => (/* binding */ adjustPositionWithoutScale),
/* harmony export */   black: () => (/* binding */ black),
/* harmony export */   blue: () => (/* binding */ blue),
/* harmony export */   clearTextOverlays: () => (/* binding */ clearTextOverlays),
/* harmony export */   continueOverlays: () => (/* binding */ continueOverlays),
/* harmony export */   forceClearOverlay: () => (/* binding */ forceClearOverlay),
/* harmony export */   forceClearOverlays: () => (/* binding */ forceClearOverlays),
/* harmony export */   freezeAndContinueOverlays: () => (/* binding */ freezeAndContinueOverlays),
/* harmony export */   freezeOverlays: () => (/* binding */ freezeOverlays),
/* harmony export */   getByID: () => (/* binding */ getByID),
/* harmony export */   green: () => (/* binding */ green),
/* harmony export */   handleResizingImages: () => (/* binding */ handleResizingImages),
/* harmony export */   helperItems: () => (/* binding */ helperItems),
/* harmony export */   pauseAlert: () => (/* binding */ pauseAlert),
/* harmony export */   playAlert: () => (/* binding */ playAlert),
/* harmony export */   red: () => (/* binding */ red),
/* harmony export */   resizeGaugesWithMousePosition: () => (/* binding */ resizeGaugesWithMousePosition),
/* harmony export */   resizeImageData: () => (/* binding */ resizeImageData),
/* harmony export */   roundedToFixed: () => (/* binding */ roundedToFixed),
/* harmony export */   setOverlayPosition: () => (/* binding */ setOverlayPosition),
/* harmony export */   updateLocation: () => (/* binding */ updateLocation),
/* harmony export */   white: () => (/* binding */ white)
/* harmony export */ });
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! alt1 */ "../node_modules/alt1/dist/base/index.js");
/* harmony import */ var alt1__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(alt1__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../a1sauce/Settings/Storage */ "./a1sauce/Settings/Storage/index.ts");
/* harmony import */ var _a1sauce_Utils_timeout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../a1sauce/Utils/timeout */ "./a1sauce/Utils/timeout.ts");
/* harmony import */ var pouchdb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pouchdb */ "../node_modules/pouchdb/lib/index-browser.es.js");
/* harmony import */ var _data_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/constants */ "./data/constants.ts");





const db = new pouchdb__WEBPACK_IMPORTED_MODULE_2__["default"](_data_constants__WEBPACK_IMPORTED_MODULE_3__.appName);
const white = alt1__WEBPACK_IMPORTED_MODULE_4__.mixColor(255, 255, 255);
const red = alt1__WEBPACK_IMPORTED_MODULE_4__.mixColor(255, 0, 0);
const green = alt1__WEBPACK_IMPORTED_MODULE_4__.mixColor(0, 255, 0);
const blue = alt1__WEBPACK_IMPORTED_MODULE_4__.mixColor(0, 0, 255);
const black = alt1__WEBPACK_IMPORTED_MODULE_4__.mixColor(1, 1, 1);
/*
 * Should only return null if a typo is made as elements
 * that are fetched are created by A1 Sauce
 */
function getByID(id) {
    return document.getElementById(id);
}
const helperItems = {
    Output: getByID('output'),
    settings: getByID('Settings'),
};
let updatingOverlayPosition = false;
async function setOverlayPosition(gauges) {
    updatingOverlayPosition = true;
    alt1__WEBPACK_IMPORTED_MODULE_4__.once('alt1pressed', updateLocation);
    alt1.setTooltip('Press Primary Keybind to save position (default keybind is alt+1)');
    setTimeout(() => {
        alt1.clearTooltip();
    }, 3000);
    while (updatingOverlayPosition) {
        await (0,_a1sauce_Utils_timeout__WEBPACK_IMPORTED_MODULE_1__.timeout)(1000);
        freezeOverlays();
        //TODO: Per-gauge repositioning will be needed here as well
        resizeGaugesWithMousePosition(gauges);
        continueOverlays();
    }
    (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__.updateSetting)('overlayPosition', {
        x: gauges.necromancy.position.x,
        y: gauges.necromancy.position.y,
    });
}
function updateLocation() {
    updatingOverlayPosition = false;
    alt1.overLayClearGroup('overlayPositionHelper');
    alt1.overLayRefreshGroup('overlayPositionHelper');
    alt1.clearTooltip();
}
function forceClearOverlay(overlay) {
    alt1.overLaySetGroup(overlay);
    alt1.overLayFreezeGroup(overlay);
    alt1.overLayClearGroup(overlay);
    alt1.overLayRefreshGroup(overlay);
}
// TODO: Overlays need to be able to add/remove themselves from this list
const overlays = [
    'Bloat',
    'Undead_Army',
    'Invoke_Death',
    'Darkness',
    'Threads',
    'SplitSoul',
    'LivingDeath',
    'Necrosis',
    'Necrosis_Row2',
    'Souls',
    'Sunshine',
    'Instability',
    'OdeToDeceit',
    'Tsunami',
    'DeathsSwiftness',
    'CrystalRain',
    'PerfectEquilibrium',
    'SplitSoul',
];
function freezeOverlays() {
    overlays.forEach((overlay) => {
        alt1.overLayFreezeGroup(overlay);
        alt1.overLayClearGroup(overlay);
        alt1.overLayRefreshGroup(overlay);
    });
}
function continueOverlays() {
    overlays.forEach((overlay) => {
        alt1.overLayContinueGroup(overlay);
    });
}
function freezeAndContinueOverlays() {
    freezeOverlays();
    continueOverlays();
}
function forceClearOverlays() {
    overlays.forEach((overlay) => {
        alt1.overLaySetGroup(overlay);
        alt1.overLayFreezeGroup(overlay);
        alt1.overLayClearGroup(overlay);
        alt1.overLayRefreshGroup(overlay);
        alt1.overLayContinueGroup(overlay);
        clearTextOverlays();
    });
}
function clearTextOverlays() {
    alt1.overLayClearGroup('Undead_Army_Text');
    alt1.overLayRefreshGroup('Undead_Army_Text');
    alt1.overLayClearGroup('LivingDeath_Text');
    alt1.overLayRefreshGroup('LivingDeath_Text');
    alt1.overLayClearGroup('LivingDeath_Cooldown_Text');
    alt1.overLayRefreshGroup('LivingDeath_Cooldown_Text');
    alt1.overLayClearGroup('Sunshine_Text');
    alt1.overLayRefreshGroup('Sunshine_Text');
    alt1.overLayClearGroup('Sunshine_Cooldown_Text');
    alt1.overLayRefreshGroup('Sunshine_Cooldown_Text');
    alt1.overLayClearGroup('Instability_Text');
    alt1.overLayRefreshGroup('Instability_Text');
    alt1.overLayClearGroup('Instability_Cooldown_Text');
    alt1.overLayRefreshGroup('Instability_Cooldown_Text');
    alt1.overLayClearGroup('OdeToDeceit_Text');
    alt1.overLayRefreshGroup('OdeToDeceit_Text');
    alt1.overLayClearGroup('OdeToDeceit_Cooldown_Text');
    alt1.overLayRefreshGroup('OdeToDeceit_Cooldown_Text');
    alt1.overLayClearGroup('Tsunami_Text');
    alt1.overLayRefreshGroup('Tsunami_Text');
    alt1.overLayClearGroup('Tsunami_Cooldown_Text');
    alt1.overLayRefreshGroup('Tsunami_Cooldown_Text');
    alt1.overLayClearGroup('Spell_Text');
    alt1.overLayRefreshGroup('Spell_Text');
    alt1.overLayClearGroup('DeathsSwifness_Text');
    alt1.overLayRefreshGroup('DeathsSwifness_Text');
    alt1.overLayClearGroup('DeathsSwifness_Cooldown_Text');
    alt1.overLayRefreshGroup('DeathsSwifness_Cooldown_Text');
    alt1.overLayClearGroup('CrystalRain_Text');
    alt1.overLayRefreshGroup('CrystalRain_Text');
    alt1.overLayClearGroup('CrystalRain_Cooldown_Text');
    alt1.overLayRefreshGroup('CrystalRain_Cooldown_Text');
    alt1.overLayClearGroup('SplitSoul_Text');
    alt1.overLayRefreshGroup('SplitSoul_Text');
    alt1.overLayClearGroup('Ammo_Text');
    alt1.overLayRefreshGroup('Ammo_Text');
}
function adjustPositionForScale(position, scaleFactor) {
    return parseInt(roundedToFixed(position * scaleFactor, 1), 10);
}
function adjustPositionWithoutScale(position, scaleFactor) {
    return parseInt(roundedToFixed(position * (1 / scaleFactor), 1), 10);
}
// TODO: Use future overlays[] to iterate over active overlays
/*
 * getMousePosition() can be null if the mouse is off the client screen
 * but the error is silent and doesn't cause problems so I'm going to
 * suppress the null checks to avoid adding lots of unnecessary noise
 */
function resizeGaugesWithMousePosition(gauges) {
    gauges.necromancy.position.x = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().x, gauges.scaleFactor);
    gauges.necromancy.position.y = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().y, gauges.scaleFactor);
    gauges.magic.position.x = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().x, gauges.scaleFactor);
    gauges.magic.position.y = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().y, gauges.scaleFactor);
    gauges.ranged.position.x = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().x, gauges.scaleFactor);
    gauges.ranged.position.y = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().y, gauges.scaleFactor);
    gauges.melee.position.x = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().x, gauges.scaleFactor);
    gauges.melee.position.y = adjustPositionWithoutScale(alt1__WEBPACK_IMPORTED_MODULE_4__.getMousePosition().y, gauges.scaleFactor);
}
function roundedToFixed(input, digits) {
    const rounder = Math.pow(10, digits);
    return (Math.round(input * rounder) / rounder).toFixed(digits);
}
function handleResizingImages(images, scaleFactor) {
    for (const key of Object.keys(images)) {
        if (images[key] instanceof ImageData) {
            const resize = resizeImageData(images[key], scaleFactor);
            if (resize) {
                images[key] = resize;
            }
        }
    }
}
function resizeImageData(imageData, scaleFactor) {
    // Create a new canvas element
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    // Calculate the dimensions of the new canvas
    const newWidth = Math.round(imageData.width * scaleFactor);
    const newHeight = Math.round(imageData.height * scaleFactor);
    // Set the canvas dimensions
    canvas.width = newWidth;
    canvas.height = newHeight;
    // Create a temporary canvas to draw the original image data
    const tempCanvas = document.createElement('canvas');
    const tempContext = tempCanvas.getContext('2d');
    tempCanvas.width = imageData.width;
    tempCanvas.height = imageData.height;
    // Draw the original image data onto the temporary canvas
    if (tempContext === null)
        return;
    tempContext.putImageData(imageData, 0, 0);
    // Draw the temporary canvas onto the new canvas with the desired scale
    if (context === null)
        return;
    context.drawImage(tempCanvas, 0, 0, imageData.width, imageData.height, 0, 0, newWidth, newHeight);
    // Extract the new image data from the resized canvas
    return context.getImageData(0, 0, newWidth, newHeight);
}
async function playAlert(alarm) {
    loadAlarm(alarm);
    alarm.loop = Boolean((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__.getSetting)(alarm.id + 'Loop'));
    alarm.volume = Number((0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__.getSetting)(alarm.id + 'Volume')) / 100;
    await (0,_a1sauce_Utils_timeout__WEBPACK_IMPORTED_MODULE_1__.timeout)(20).then(() => {
        alarm.pause();
        loadAlarm(alarm);
        alarm.play();
    });
}
function loadAlarm(alarm) {
    if (alarm.src.startsWith('custom:') || alarm.src.startsWith('Custom:')) {
        let customAudio = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__.getSetting)(alarm.id + 'AlertSound').substring(7);
        db.get(customAudio, { attachments: true })
            .then((doc) => {
            // @ts-ignore
            alarm.src = `data:${doc._attachments.filename.content_type};base64,${doc._attachments.filename.data}`;
        })
            .then(() => {
            alarm.load();
        })
            .catch((err) => {
            console.error(err);
        });
    }
    else if (!alarm.src.startsWith('data')) {
        alarm.src = (0,_a1sauce_Settings_Storage__WEBPACK_IMPORTED_MODULE_0__.getSetting)(alarm.id + 'AlertSound');
        alarm.load();
    }
}
function pauseAlert(alarm) {
    alarm.volume = 0;
    alarm.play().then(() => {
        alarm.currentTime = 0;
        alarm.pause();
    });
}


/***/ }),

/***/ "./patchnotes.ts":
/*!***********************!*\
  !*** ./patchnotes.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   notes: () => (/* binding */ notes)
/* harmony export */ });
const notes = [
    // Add patch notes to top
    {
        date: '09/19/2024 - Opt-in "Remember Buff/Debuff Positions" v.1.1.4',
        note: [
            `Added a setting to opt-in to the recently removed "remember buff/debuff bar position" functionality. The functionality was removed in a recent release because it made the plugin difficult to use on more than one account at a time. Please only enable the setting if you do not adjust your UI very often and only play on a single account.`,
        ],
    },
    {
        date: '09/15/2024 - Better Error Handling v.1.1.3',
        note: [
            `Error handling has been improved significantly. Errors now provide clearer messages to help with troubleshooting.`,
            `Job Gauges received its first contribution from another developer with @Panku making their first contribution. A large amount of refactoring some old copy/pasted junk code and adding additional type safety to the codebase. While these changes are invisible to users they are quite important for development.`,
        ],
    },
    {
        date: '09/08/2024 - Various Fixes v1.1.2',
        note: [
            `There is now an option to display 3 residual soul stacks for users who do not have a Soulbound Lantern. The setting is found under the visibility settings`,
            `The Ranged Gauge has been updated to match the Magic gauge aesthetic. None of the functionality was adjusted.`,
            `Any text overlays are now cleared when the gauge changes combat styles`,
            `Greater variants of Death's Swiftness and Sunshine should now have a more appropriate cooldown timer. Sorry, no Planted Feet support (yet)`,
            `Buff/Debuff Bar locations are now scanned for once before loading the last known position. This should reduce the need to reset locations after adjusting your interface.`,
            `Speaking of the "Reset Buffs and Debuffs Positions" please use that button if you move your buffs/debuffs or if Job Gauges seems to not be reading your buffs/debuffs then reload the app`,
            `Wording has been adjusted for some settings to be more clear as to what the setting does`,
            `Some old debug logging has been removed`,
            `The styles for the out of combat range slider have been fixed on initial load if you had set a value above 100`,
        ],
    },
    {
        date: '09/03/2024 - Magic Gauge cleanup v.1.1.1',
        note: [
            `Positioning of tracked items has been adjusted`,
            `Dual Wield spell tracking has been fixed (for real this time)`,
            `Some special handling of Sign of Life being a false positive for Ode of Deceit has been fixed. Unfortunately other false positives may still occur occasionally`,
            `Circles are out, hexagons are in`,
        ],
    },
    {
        date: '09/03/2024 - Ranged Gauge & Ode To Deceit v.1.1.0',
        note: [
            `Similar to the barebones Magic Gauge - a Ranged Gauge has been added. The Ranged Gauge tracks your active ammo (must be in quiver, not all types are tracked only the most "meta" options), Perfect Eqilibruim stacks, Death's Swiftness, and Seren Godbow's Crystal Rain special attack. Eldritch Crossbow's Split Soul tracking is expected to be added soon.`,
            `Ode to Deceit tracking has been added to the Magic Gauge`,
            `Crystal Rain and Ode to Deceit are tracked using the Debuffs bar - and in order to succesfully be tracked Job Gauges must know where your debuffs are located. When loading the app it is recommended to use a defensive ability and activate your prayer for a brief period of time so that Job Gauges can find your buffs & debuffs bars.`,
            `Phantom Guardian duration tracking has been added to Conjure Undead Army - Phantom's Valour stacks may be added in a future update`,
            `Future updates will add visibility toggles for each individual ranged/magic overlay similar to the Necromancy overlays.`,
        ],
    },
    {
        date: '08/30/2024 - Magic Gauge Fixes v.1.0.9',
        note: [
            `Spell is now tracked when Dual Wield weapons are used`,
            `Necromancy Incantation Placement no longer messes with Magic Gauge positioning`,
            `The Out of Combat timer is now tracked properly and should be more reliable and properly respect the setting for how long to wait to consider the player out of combat`,
            `Possibly fixed a bug with Custom Sound Necrosis Alamrm not triggering - although I wasn't able to replicate the issue so I am not 100% sure I fixed it`,
            `Several minor code improvements`,
        ],
    },
    {
        date: '08/25/2024 - Custom Alarm Sounds v.1.0.8',
        note: [
            `You can now upload Custom Alarms. These save locally to an IndexDB within your Alt1 Chromium Browser. IndexDB has limited storage space.`,
        ],
    },
    {
        date: '08/25/2024 - Magic Gauge & Better Errors v.1.0.7',
        note: [
            `Magic Gauge has been added! It currently tracks Sunshine, Tsunami, Instability (FSOA Spec), Blood Tithe (Exsanguinate) stacks, and Glacial Embrace (Incite Fear) stacks`,
            `The Magic Gauge is quite barebones! More functionality will be added over time. If there is something you'd like to see please join the Discord and let me know!`,
            `Gauge will automatically swap when an Ultimate is used (Sunshine for Magic, Living Death for Necromancy)`,
            `Settings to disable the automatic swapping and to select a default combat style have been added`,
            `A new setting to adjust how many seconds to wait before considering the player to be "Out of Combat" has been added`,
            `Added better error messages if Buff Size is set to Medium or Large as those sizes are not supported by Alt1`,
        ],
    },
    {
        date: '08/18/2024 - Hotfix v.1.0.6',
        note: [`Fixed patch notes styling`],
    },
    {
        date: '8/18/2024 - Bug Fixes & Testing v1.0.5',
        note: [
            `Changes Necrosis stacks threshold to match previous thresholds in NJG. The new thresholds are 0-4 Purple ; 6-10 Orange ; 12 Red`,
            `In response to feedback the Red Necrosis Stacks have been made brighter and more obvious`,
            `Fixed positioning of 2nd Necrosis Stacks row when scale was set to a non-100% value`,
            `Fixed the value of range inputs not saving to settings if the - / + buttons were used to set the final value`,
            `Began adding tests to A1 Sauce to catch and prevent feature regressions and broken behavior`,
            `v1.0.4 is being skipped as it was used to test the version checking option from v1.0.3 and had no patch notes`,
        ],
    },
    {
        date: '8/18/2024 - Version Checking v1.0.3',
        note: [
            `Added option to periodically check if a new update is available and alert the user to refresh at their convenience to receive the new update.`,
            `Fix Necrosis alarm as it was still broken in v1.0.2`,
        ],
    },
    {
        date: '8/18/2024 - Alarm Hotfix v1.0.2',
        note: [`Fixed alarm sounds not...alarming`],
    },
    {
        date: '8/17/2024 - Internal Rewrite v1.0.1',
        note: [
            `Added patch notes that will show when the user opens the app for the first time with a new version`,
            `Added setting to change Necrosis Stacks orange or red when above certain thresholds. Defalt value: Off`,
            `Toggling visibility of individuals components should no longer take 3s~ for the overlay to unrender`,
            `Repositioning the overlay updates position less frequently but no longer causes screen tearing`,
            `Massively refactored code to speed up future development`,
            `Improved look of range input settings`,
            `Improved look of Alarm settings`,
            `Added -/+ buttons for range settings`,
        ],
    },
];


/***/ }),

/***/ "./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveSpells: () => (/* reexport safe */ _magicGauge__WEBPACK_IMPORTED_MODULE_2__.ActiveSpells),
/* harmony export */   CombatStyle: () => (/* reexport safe */ _overlay__WEBPACK_IMPORTED_MODULE_0__.CombatStyle)
/* harmony export */ });
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overlay */ "./types/overlay.ts");
/* harmony import */ var _necromancyGauge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./necromancyGauge */ "./types/necromancyGauge.ts");
/* harmony import */ var _magicGauge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./magicGauge */ "./types/magicGauge.ts");
/* harmony import */ var _rangedGauge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rangedGauge */ "./types/rangedGauge.ts");
/* harmony import */ var _meleeGauge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./meleeGauge */ "./types/meleeGauge.ts");







/***/ }),

/***/ "./types/magicGauge.ts":
/*!*****************************!*\
  !*** ./types/magicGauge.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveSpells: () => (/* binding */ ActiveSpells)
/* harmony export */ });
var ActiveSpells;
(function (ActiveSpells) {
    ActiveSpells[ActiveSpells["Exsanguinate"] = 1] = "Exsanguinate";
    ActiveSpells[ActiveSpells["Incite_Fear"] = 2] = "Incite_Fear";
    ActiveSpells[ActiveSpells["Ice_Barrage"] = 3] = "Ice_Barrage";
})(ActiveSpells || (ActiveSpells = {}));


/***/ }),

/***/ "./types/meleeGauge.ts":
/*!*****************************!*\
  !*** ./types/meleeGauge.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./types/necromancyGauge.ts":
/*!**********************************!*\
  !*** ./types/necromancyGauge.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./types/overlay.ts":
/*!**************************!*\
  !*** ./types/overlay.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CombatStyle: () => (/* binding */ CombatStyle)
/* harmony export */ });
var CombatStyle;
(function (CombatStyle) {
    CombatStyle[CombatStyle["melee"] = 1] = "melee";
    CombatStyle[CombatStyle["ranged"] = 2] = "ranged";
    CombatStyle[CombatStyle["mage"] = 3] = "mage";
    CombatStyle[CombatStyle["necro"] = 4] = "necro";
})(CombatStyle || (CombatStyle = {}));


/***/ }),

/***/ "./types/rangedGauge.ts":
/*!******************************!*\
  !*** ./types/rangedGauge.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/regex.js":
/*!******************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/regex.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/rng.js":
/*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/rng.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/stringify.js":
/*!**********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/stringify.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v4.js":
/*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v4.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/validate.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/validate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "../node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "../node_modules/vuvuzela/index.js":
/*!*****************************************!*\
  !*** ../node_modules/vuvuzela/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Stringify/parse functions that don't operate
 * recursively, so they avoid call stack exceeded
 * errors.
 */
exports.stringify = function stringify(input) {
  var queue = [];
  queue.push({obj: input});

  var res = '';
  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;
  while ((next = queue.pop())) {
    obj = next.obj;
    prefix = next.prefix || '';
    val = next.val || '';
    res += prefix;
    if (val) {
      res += val;
    } else if (typeof obj !== 'object') {
      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);
    } else if (obj === null) {
      res += 'null';
    } else if (Array.isArray(obj)) {
      queue.push({val: ']'});
      for (i = obj.length - 1; i >= 0; i--) {
        arrayPrefix = i === 0 ? '' : ',';
        queue.push({obj: obj[i], prefix: arrayPrefix});
      }
      queue.push({val: '['});
    } else { // object
      keys = [];
      for (k in obj) {
        if (obj.hasOwnProperty(k)) {
          keys.push(k);
        }
      }
      queue.push({val: '}'});
      for (i = keys.length - 1; i >= 0; i--) {
        key = keys[i];
        value = obj[key];
        objPrefix = (i > 0 ? ',' : '');
        objPrefix += JSON.stringify(key) + ':';
        queue.push({obj: value, prefix: objPrefix});
      }
      queue.push({val: '{'});
    }
  }
  return res;
};

// Convenience function for the parse function.
// This pop function is basically copied from
// pouchCollate.parseIndexableString
function pop(obj, stack, metaStack) {
  var lastMetaElement = metaStack[metaStack.length - 1];
  if (obj === lastMetaElement.element) {
    // popping a meta-element, e.g. an object whose value is another object
    metaStack.pop();
    lastMetaElement = metaStack[metaStack.length - 1];
  }
  var element = lastMetaElement.element;
  var lastElementIndex = lastMetaElement.index;
  if (Array.isArray(element)) {
    element.push(obj);
  } else if (lastElementIndex === stack.length - 2) { // obj with key+value
    var key = stack.pop();
    element[key] = obj;
  } else {
    stack.push(obj); // obj with key only
  }
}

exports.parse = function (str) {
  var stack = [];
  var metaStack = []; // stack for arrays and objects
  var i = 0;
  var collationIndex,parsedNum,numChar;
  var parsedString,lastCh,numConsecutiveSlashes,ch;
  var arrayElement, objElement;
  while (true) {
    collationIndex = str[i++];
    if (collationIndex === '}' ||
        collationIndex === ']' ||
        typeof collationIndex === 'undefined') {
      if (stack.length === 1) {
        return stack.pop();
      } else {
        pop(stack.pop(), stack, metaStack);
        continue;
      }
    }
    switch (collationIndex) {
      case ' ':
      case '\t':
      case '\n':
      case ':':
      case ',':
        break;
      case 'n':
        i += 3; // 'ull'
        pop(null, stack, metaStack);
        break;
      case 't':
        i += 3; // 'rue'
        pop(true, stack, metaStack);
        break;
      case 'f':
        i += 4; // 'alse'
        pop(false, stack, metaStack);
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '-':
        parsedNum = '';
        i--;
        while (true) {
          numChar = str[i++];
          if (/[\d\.\-e\+]/.test(numChar)) {
            parsedNum += numChar;
          } else {
            i--;
            break;
          }
        }
        pop(parseFloat(parsedNum), stack, metaStack);
        break;
      case '"':
        parsedString = '';
        lastCh = void 0;
        numConsecutiveSlashes = 0;
        while (true) {
          ch = str[i++];
          if (ch !== '"' || (lastCh === '\\' &&
              numConsecutiveSlashes % 2 === 1)) {
            parsedString += ch;
            lastCh = ch;
            if (lastCh === '\\') {
              numConsecutiveSlashes++;
            } else {
              numConsecutiveSlashes = 0;
            }
          } else {
            break;
          }
        }
        pop(JSON.parse('"' + parsedString + '"'), stack, metaStack);
        break;
      case '[':
        arrayElement = { element: [], index: stack.length };
        stack.push(arrayElement.element);
        metaStack.push(arrayElement);
        break;
      case '{':
        objElement = { element: {}, index: stack.length };
        stack.push(objElement.element);
        metaStack.push(objElement);
        break;
      default:
        throw new Error(
          'unexpectedly reached end of input: ' + collationIndex);
    }
  }
};


/***/ }),

/***/ "data:font/opentype;base64,":

  !*** data:font/opentype;base64, ***!

/***/ ((module) => {

"use strict";
module.exports = "data:font/opentype;base64,";

/***/ }),

/***/ "./a1sauce/NIS/images/button.png":
/*!***************************************!*\
  !*** ./a1sauce/NIS/images/button.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "button.png";

/***/ }),

/***/ "./a1sauce/NIS/images/checkmark.png":
/*!******************************************!*\
  !*** ./a1sauce/NIS/images/checkmark.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "checkmark.png";

/***/ }),

/***/ "./a1sauce/NIS/images/imgbutton.png":
/*!******************************************!*\
  !*** ./a1sauce/NIS/images/imgbutton.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "imgbutton.png";

/***/ }),

/***/ "./a1sauce/NIS/images/nis-bg.png":
/*!***************************************!*\
  !*** ./a1sauce/NIS/images/nis-bg.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "nis-bg.png";

/***/ }),

/***/ "./a1sauce/NIS/images/nis-range-minus.png":
/*!************************************************!*\
  !*** ./a1sauce/NIS/images/nis-range-minus.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "nis-range-minus.png";

/***/ }),

/***/ "./a1sauce/NIS/images/nis-range-plus.png":
/*!***********************************************!*\
  !*** ./a1sauce/NIS/images/nis-range-plus.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "nis-range-plus.png";

/***/ }),

/***/ "./a1sauce/NIS/images/range-input-tab.png":
/*!************************************************!*\
  !*** ./a1sauce/NIS/images/range-input-tab.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "range-input-tab.png";

/***/ }),

/***/ "./a1sauce/NIS/images/scroll.png":
/*!***************************************!*\
  !*** ./a1sauce/NIS/images/scroll.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scroll.png";

/***/ }),

/***/ "./a1sauce/NIS/images/scrollhor.png":
/*!******************************************!*\
  !*** ./a1sauce/NIS/images/scrollhor.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "scrollhor.png";

/***/ }),

/***/ "./appconfig.json":
/*!************************!*\
  !*** ./appconfig.json ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "appconfig.json";

/***/ }),

/***/ "./icon.png":
/*!******************!*\
  !*** ./icon.png ***!
  \******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "icon.png";

/***/ }),

/***/ "./index.html":
/*!********************!*\
  !*** ./index.html ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "index.html";

/***/ }),

/***/ "./version.json":
/*!**********************!*\
  !*** ./version.json ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "version.json";

/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ }),

/***/ "../node_modules/alt1/dist/base/index.js":
/*!***********************************************!*\
  !*** ../node_modules/alt1/dist/base/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! sharp */ "sharp"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! canvas */ "canvas"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __webpack_require__(/*! electron/common */ "electron/common"); } catch(e) {} }()));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_canvas__, __WEBPACK_EXTERNAL_MODULE_electron_common__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/base/alt1api.ts":
/*!*****************************!*\
  !*** ./src/base/alt1api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/declarations.ts":
/*!**********************************!*\
  !*** ./src/base/declarations.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/base/imagedata-extensions.ts":
/*!******************************************!*\
  !*** ./src/base/imagedata-extensions.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2062__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageData = void 0;
const a1lib = __importStar(__nested_webpack_require_2062__(/*! ./index */ "./src/base/index.ts"));
const nodeimports = __importStar(__nested_webpack_require_2062__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
(function () {
    var globalvar = (typeof self != "undefined" ? self : (typeof __nested_webpack_require_2062__.g != "undefined" ? __nested_webpack_require_2062__.g : null));
    var filltype = typeof globalvar.ImageData == "undefined";
    var fillconstr = filltype;
    if (!filltype) {
        var oldconstr = globalvar.ImageData;
        try {
            let data = new Uint8ClampedArray(4);
            data[0] = 1;
            let a = new globalvar.ImageData(data, 1, 1);
            fillconstr = a.data[0] != 1;
        }
        catch (e) {
            fillconstr = true;
        }
    }
    if (fillconstr) {
        var constr = function ImageDataShim() {
            var i = 0;
            var data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);
            var width = arguments[i++];
            var height = arguments[i++];
            if (filltype) {
                if (!data) {
                    data = new Uint8ClampedArray(width * height * 4);
                }
                this.width = width;
                this.height = height;
                this.data = data;
            }
            else if (fillconstr) {
                //WARNING This branch of code does not use the same pixel data backing store
                //(problem with wasm, however all wasm browser have a native constructor (unless asm.js is used))
                var canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext("2d");
                var imageData = ctx.createImageData(width, height);
                if (data) {
                    imageData.data.set(data);
                }
                return imageData;
            }
            // else {
            // 	//oh no...
            // 	//we need this monstrocity in order to call the native constructor with variable number of args
            // 	//when es5 transpile is enable (that strips the spread operator)
            // 	return new (Function.prototype.bind.apply(oldconstr, [null,...arguments]));
            // }
        };
        if (!filltype) {
            constr.prototype = globalvar.ImageData.prototype;
        }
        globalvar.ImageData = constr;
        exports.ImageData = constr;
    }
    else {
        exports.ImageData = globalvar.ImageData;
    }
})();
//Recast into a drawable imagedata class on all platforms, into a normal browser ImageData on browsers or a node-canvas imagedata on nodejs
exports.ImageData.prototype.toDrawableData = function () {
    if (typeof document == "undefined") {
        return nodeimports.imageDataToDrawable(this);
    }
    else {
        return this;
    }
};
exports.ImageData.prototype.putImageData = function (buf, cx, cy) {
    for (var dx = 0; dx < buf.width; dx++) {
        for (var dy = 0; dy < buf.height; dy++) {
            var i1 = (dx + cx) * 4 + (dy + cy) * 4 * this.width;
            var i2 = dx * 4 + dy * 4 * buf.width;
            this.data[i1] = buf.data[i2];
            this.data[i1 + 1] = buf.data[i2 + 1];
            this.data[i1 + 2] = buf.data[i2 + 2];
            this.data[i1 + 3] = buf.data[i2 + 3];
        }
    }
};
exports.ImageData.prototype.pixelOffset = function (x, y) {
    return x * 4 + y * this.width * 4;
};
//creates a hash of a portion of the buffer used to check for changes
exports.ImageData.prototype.getPixelHash = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    var hash = 0;
    for (var x = rect.x; x < rect.x + rect.width; x++) {
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            var i = x * 4 + y * 4 * this.width;
            hash = (((hash << 5) - hash) + this.data[i]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 1]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 2]) | 0;
            hash = (((hash << 5) - hash) + this.data[i + 3]) | 0;
        }
    }
    return hash;
};
exports.ImageData.prototype.clone = function (rect) {
    let res = new exports.ImageData(rect.width, rect.height);
    this.copyTo(res, rect.x, rect.y, rect.width, rect.height, 0, 0);
    return res;
};
exports.ImageData.prototype.show = function (x = 5, y = 5, zoom = 1) {
    if (typeof document == "undefined") {
        console.error("need a document to show an imagedata object");
        return;
    }
    var imgs = document.getElementsByClassName("debugimage");
    while (imgs.length > exports.ImageData.prototype.show.maxImages) {
        imgs[0].remove();
    }
    var el = this.toImage();
    el.classList.add("debugimage");
    el.style.position = "absolute";
    el.style.zIndex = "1000";
    el.style.left = x / zoom + "px";
    el.style.top = y / zoom + "px";
    el.style.background = "purple";
    el.style.cursor = "pointer";
    el.style.imageRendering = "pixelated";
    el.style.outline = "1px solid #0f0";
    el.style.width = (this.width == 1 ? 100 : this.width) * zoom + "px";
    el.style.height = (this.height == 1 ? 100 : this.height) * zoom + "px";
    el.onclick = function () { el.remove(); };
    document.body.appendChild(el);
    return el;
};
exports.ImageData.prototype.show.maxImages = 10;
exports.ImageData.prototype.toImage = function (rect) {
    if (!rect) {
        rect = new a1lib.Rect(0, 0, this.width, this.height);
    }
    if (typeof document != "undefined") {
        var el = document.createElement("canvas");
        el.width = rect.width;
        el.height = rect.height;
    }
    else {
        el = nodeimports.createCanvas(rect.width, rect.height);
    }
    var ctx = el.getContext("2d");
    ctx.putImageData(this.toDrawableData(), -rect.x, -rect.y);
    return el;
};
exports.ImageData.prototype.getPixel = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];
};
exports.ImageData.prototype.getPixelValueSum = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return this.data[i] + this.data[i + 1] + this.data[i + 2];
};
exports.ImageData.prototype.getPixelInt = function (x, y) {
    var i = x * 4 + y * 4 * this.width;
    return (this.data[i + 3] << 24) + (this.data[i + 0] << 16) + (this.data[i + 1] << 8) + (this.data[i + 2] << 0);
};
exports.ImageData.prototype.getColorDifference = function (x, y, r, g, b, a = 255) {
    var i = x * 4 + y * 4 * this.width;
    return Math.abs(this.data[i] - r) + Math.abs(this.data[i + 1] - g) + Math.abs(this.data[i + 2] - b) * a / 255;
};
exports.ImageData.prototype.setPixel = function (x, y, ...color) {
    var r, g, b, a;
    var [r, g, b, a] = (Array.isArray(color[0]) ? color[0] : color);
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = r;
    this.data[i + 1] = g;
    this.data[i + 2] = b;
    this.data[i + 3] = a == undefined ? 255 : a;
};
exports.ImageData.prototype.setPixelInt = function (x, y, color) {
    var i = x * 4 + y * 4 * this.width;
    this.data[i] = (color >> 24) & 0xff;
    this.data[i + 1] = (color >> 16) & 0xff;
    this.data[i + 2] = (color >> 8) & 0xff;
    this.data[i + 3] = (color >> 0) & 0xff;
};
exports.ImageData.prototype.toFileBytes = function (format, quality) {
    if (typeof HTMLCanvasElement != "undefined") {
        return new Promise(d => this.toImage().toBlob(b => {
            var r = new FileReader();
            r.readAsArrayBuffer(b);
            r.onload = () => d(new Uint8Array(r.result));
        }, format, quality));
    }
    else {
        return nodeimports.imageDataToFileBytes(this, format, quality);
    }
};
exports.ImageData.prototype.toPngBase64 = function () {
    if (typeof HTMLCanvasElement != "undefined") {
        var str = this.toImage().toDataURL("image/png");
        return str.slice(str.indexOf(",") + 1);
    }
    else {
        throw new Error("synchronous image conversion not supported in nodejs, try using ImageData.prototype.toFileBytes");
    }
};
exports.ImageData.prototype.pixelCompare = function (buf, x = 0, y = 0, max) {
    return a1lib.ImageDetect.simpleCompare(this, buf, x, y, max);
};
exports.ImageData.prototype.copyTo = function (target, sourcex, sourcey, width, height, targetx, targety) {
    //convince v8 that these are 31bit uints
    const targetwidth = target.width | 0;
    const thiswidth = this.width | 0;
    const copywidth = width | 0;
    const fastwidth = Math.floor(width / 4) * 4;
    const thisdata = new Int32Array(this.data.buffer, this.data.byteOffset, this.data.byteLength / 4);
    const targetdata = new Int32Array(target.data.buffer, target.data.byteOffset, target.data.byteLength / 4);
    for (let cy = 0; cy < height; cy++) {
        let cx = 0;
        let it = (cx + targetx) + (cy + targety) * targetwidth;
        let is = (cx + sourcex) + (cy + sourcey) * thiswidth;
        //copy 4 pixels per iter (xmm)
        for (; cx < fastwidth; cx += 4) {
            targetdata[it] = thisdata[is];
            targetdata[it + 1] = thisdata[is + 1];
            targetdata[it + 2] = thisdata[is + 2];
            targetdata[it + 3] = thisdata[is + 3];
            it += 4;
            is += 4;
        }
        //copy remainder per pixel
        for (; cx < copywidth; cx++) {
            targetdata[it] = thisdata[is];
            it += 1;
            is += 1;
        }
    }
};


/***/ }),

/***/ "./src/base/imagedetect.ts":
/*!*********************************!*\
  !*** ./src/base/imagedetect.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_12931__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageDataSet = exports.webpackImages = exports.asyncMap = exports.coldif = exports.simpleCompareRMSE = exports.simpleCompare = exports.findSubbuffer = exports.findSubimage = exports.clearPngColorspace = exports.isPngBuffer = exports.imageDataFromFileBuffer = exports.imageDataFromBase64 = exports.imageDataFromUrl = void 0;
const imgref_1 = __nested_webpack_require_12931__(/*! ./imgref */ "./src/base/imgref.ts");
const wapper = __importStar(__nested_webpack_require_12931__(/*! ./wrapper */ "./src/base/wrapper.ts"));
const nodeimports = __importStar(__nested_webpack_require_12931__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
const _1 = __nested_webpack_require_12931__(/*! . */ "./src/base/index.ts");
/**
* Downloads an image and returns the ImageData.
* Cleans sRGB headers from downloaded png images. Assumes that data url's are already cleaned from sRGB and other headers
* @param url http(s) or data url to the image
*/
async function imageDataFromUrl(url) {
    var hdr = "data:image/png;base64,";
    var isdataurl = url.startsWith(hdr);
    if (typeof Image != "undefined") {
        if (isdataurl) {
            return loadImageDataFromUrl(url);
        }
        else {
            let res = await fetch(url);
            if (!res.ok) {
                throw new Error("failed to load image: " + url);
            }
            let file = new Uint8Array(await res.arrayBuffer());
            return imageDataFromFileBuffer(file);
        }
    }
    else {
        if (isdataurl) {
            return imageDataFromBase64(url.slice(hdr.length));
        }
        throw new Error("loading remote images in nodejs has been disabled, load the raw bytes and use imageDataFromNodeBuffer instead");
    }
}
exports.imageDataFromUrl = imageDataFromUrl;
function loadImageDataFromUrl(url) {
    if (typeof Image == "undefined") {
        throw new Error("Browser environment expected");
    }
    return new Promise((done, fail) => {
        var img = new Image();
        img.crossOrigin = "crossorigin";
        img.onload = function () { done(new imgref_1.ImgRefCtx(img).toData()); };
        img.onerror = fail;
        img.src = url;
    });
}
/**
* Loads an ImageData object from a base64 encoded png image
* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!
* @param data a base64 encoded png image
*/
async function imageDataFromBase64(data) {
    if (typeof Image != "undefined") {
        return imageDataFromUrl("data:image/png;base64," + data);
    }
    else {
        return nodeimports.imageDataFromBase64(data);
    }
}
exports.imageDataFromBase64 = imageDataFromBase64;
/**
 * Loads an ImageData object directly from a png encoded file buffer
 * This method ensures that png color space headers are taken care off
 * @param data The bytes of a png file
 */
async function imageDataFromFileBuffer(data) {
    if (isPngBuffer(data)) {
        clearPngColorspace(data);
    }
    if (typeof Image != "undefined") {
        let blob = new Blob([data], { type: "image/png" });
        let url = URL.createObjectURL(blob);
        let r = await loadImageDataFromUrl(url);
        URL.revokeObjectURL(url);
        return r;
    }
    else {
        return nodeimports.imageDataFromBuffer(data);
    }
}
exports.imageDataFromFileBuffer = imageDataFromFileBuffer;
/**
* Checks if a given byte array is a png file (by checking for ?PNG as first 4 bytes)
* @param bytes Raw bytes of the png file
*/
function isPngBuffer(bytes) {
    return bytes[0] == 137 && bytes[1] == 80 && bytes[2] == 78 && bytes[3] == 71;
}
exports.isPngBuffer = isPngBuffer;
/**
* Resets the colorspace data in the png file.
* This makes sure the browser renders the exact colors in the file instead of filtering it in order to obtain the best real life representation of
* what it looked like on the authors screen. (this feature is often broken and not supported)
* For example a round trip printscreen -> open in browser results in different colors than the original
* @param data Raw bytes of the png file
*/
function clearPngColorspace(data) {
    if (!isPngBuffer(data)) {
        throw new Error("non-png image received");
    }
    var i = 8;
    while (i < data.length) {
        var length = data[i++] * 0x1000000 + data[i++] * 0x10000 + data[i++] * 0x100 + data[i++];
        var ancillary = !!((data[i] >> 5) & 1);
        var chunkname = String.fromCharCode(data[i], data[i + 1], data[i + 2], data[i + 3]);
        var chunkid = chunkname.toLowerCase();
        if (chunkid != "trns" && ancillary) {
            data[i + 0] = "n".charCodeAt(0);
            data[i + 1] = "o".charCodeAt(0);
            data[i + 2] = "P".charCodeAt(0);
            data[i + 3] = "E".charCodeAt(0);
            //calculate new chunk checksum
            //http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html
            var end = i + 4 + length;
            var crc = 0xffffffff;
            //should be fast enough like this
            var bitcrc = function (bit) {
                for (var k = 0; k < 8; k++) {
                    if (bit & 1) {
                        bit = 0xedb88320 ^ (bit >>> 1);
                    }
                    else {
                        bit = bit >>> 1;
                    }
                }
                return bit;
            };
            for (var a = i; a < end; a++) {
                if (a >= i + 4) {
                    data[a] = 0;
                }
                var bit = data[a];
                crc = bitcrc((crc ^ bit) & 0xff) ^ (crc >>> 8);
            }
            crc = crc ^ 0xffffffff;
            //new chunk checksum
            data[i + 4 + length + 0] = (crc >> 24) & 0xff;
            data[i + 4 + length + 1] = (crc >> 16) & 0xff;
            data[i + 4 + length + 2] = (crc >> 8) & 0xff;
            data[i + 4 + length + 3] = (crc >> 0) & 0xff;
        }
        if (chunkname == "IEND") {
            break;
        }
        i += 4; //type
        i += length; //data
        i += 4; //crc
    }
}
exports.clearPngColorspace = clearPngColorspace;
/**
* finds the given needle ImageBuffer in the given haystack ImgRef this function uses the best optimized available
* code depending on the type of the haystack. It will use fast c# searching if the haystack is an ImgRefBind, js searching
* is used otherwise.
* the checklist argument is no longer used and should ignored or null/undefined
* The optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search the needle. The rectangle should be bigger than the needle
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubimage(haystackImgref, needleBuffer, sx = 0, sy = 0, sw = haystackImgref.width, sh = haystackImgref.height) {
    if (!haystackImgref) {
        throw new TypeError();
    }
    if (!needleBuffer) {
        throw new TypeError();
    }
    var max = 30;
    //check if we can do this in alt1
    if (haystackImgref instanceof imgref_1.ImgRefBind && wapper.hasAlt1 && alt1.bindFindSubImg) {
        var needlestr = wapper.encodeImageString(needleBuffer);
        var r = alt1.bindFindSubImg(haystackImgref.handle, needlestr, needleBuffer.width, sx, sy, sw, sh);
        if (!r) {
            throw new wapper.Alt1Error();
        }
        return JSON.parse(r);
    }
    return findSubbuffer(haystackImgref.read(), needleBuffer, sx, sy, sw, sh);
}
exports.findSubimage = findSubimage;
/**
* Uses js to find the given needle ImageBuffer in the given haystack ImageBuffer. It is better to use the alt1.bind- functions in
* combination with a1nxt.findsubimg.
* the optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search.
* @returns An array of points where the needle is found. The array is empty if none are found
*/
function findSubbuffer(haystack, needle, sx = 0, sy = 0, sw = haystack.width, sh = haystack.height) {
    var r = [];
    var maxdif = 30;
    var maxresults = 50;
    var needlestride = needle.width * 4;
    var heystackstride = haystack.width * 4;
    //built list of non trans pixel to check
    var checkList = [];
    for (var y = 0; y < needle.height; y++) {
        for (var x = 0; x < needle.width; x++) {
            var i = x * 4 + y * needlestride;
            if (needle.data[i + 3] == 255) {
                checkList.push({ x: x, y: y });
            }
            if (checkList.length == 10) {
                break;
            }
        }
        if (checkList.length == 10) {
            break;
        }
    }
    var cw = (sx + sw) - needle.width;
    var ch = (sy + sh) - needle.height;
    var checklength = checkList.length;
    for (var y = sy; y <= ch; y++) {
        outer: for (var x = sx; x <= cw; x++) {
            for (var a = 0; a < checklength; a++) {
                var i1 = (x + checkList[a].x) * 4 + (y + checkList[a].y) * heystackstride;
                var i2 = checkList[a].x * 4 + checkList[a].y * needlestride;
                var d = 0;
                d = d + Math.abs(haystack.data[i1 + 0] - needle.data[i2 + 0]) | 0;
                d = d + Math.abs(haystack.data[i1 + 1] - needle.data[i2 + 1]) | 0;
                d = d + Math.abs(haystack.data[i1 + 2] - needle.data[i2 + 2]) | 0;
                d *= 255 / needle.data[i2 + 3];
                if (d > maxdif) {
                    continue outer;
                }
            }
            if (simpleCompare(haystack, needle, x, y, maxdif) != Infinity) {
                r.push({ x, y });
                if (r.length > maxresults) {
                    return r;
                }
            }
        }
    }
    return r;
}
exports.findSubbuffer = findSubbuffer;
/**
* Compares two images and returns the average color difference per pixel between them
* @param max The max color difference at any point in the image before short circuiting the function and returning Infinity. set to -1 to always continue.
* @returns The average color difference per pixel or Infinity if the difference is more than max at any point in the image
*/
function simpleCompare(bigbuf, checkbuf, x, y, max = 30) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    if (max == -1) {
        max = 255 * 4;
    }
    var dif = 0;
    for (var step = 8; step >= 1; step /= 2) {
        for (var cx = 0; cx < checkbuf.width; cx += step) {
            for (var cy = 0; cy < checkbuf.height; cy += step) {
                var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
                var i2 = cx * 4 + cy * checkbuf.width * 4;
                var d = 0;
                d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
                d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
                d *= checkbuf.data[i2 + 3] / 255;
                if (step == 1) {
                    dif += d;
                }
                if (d > max) {
                    return Infinity;
                }
            }
        }
    }
    return dif / checkbuf.width / checkbuf.height;
}
exports.simpleCompare = simpleCompare;
/**
* Calculates the root mean square error between the two buffers at the given coordinate, this method can be used in situations with significant blur or
* transparency, it does not bail early on non-matching images like simpleCompare does so it can be expected to be much slower when called often.
* @returns The root mean square error beteen the images, high single pixel errors are penalized more than consisten low errors. return of 0 means perfect match.
*/
function simpleCompareRMSE(bigbuf, checkbuf, x, y) {
    if (x < 0 || y < 0) {
        throw new RangeError();
    }
    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {
        throw new RangeError();
    }
    var dif = 0;
    var numpix = 0;
    for (var cx = 0; cx < checkbuf.width; cx++) {
        for (var cy = 0; cy < checkbuf.height; cy++) {
            var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;
            var i2 = cx * 4 + cy * checkbuf.width * 4;
            var d = 0;
            d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;
            d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;
            var weight = checkbuf.data[i2 + 3] / 255;
            numpix += weight;
            dif += d * d * weight;
        }
    }
    return Math.sqrt(dif / numpix);
}
exports.simpleCompareRMSE = simpleCompareRMSE;
/**
* Returns the difference between two colors (scaled to the alpha of the second color)
*/
function coldif(r1, g1, b1, r2, g2, b2, a2) {
    return (Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2)) * a2 / 255; //only applies alpha for 2nd buffer!
}
exports.coldif = coldif;
/**
 * Turns map of promises into a map that contains the resolved values after loading.
 * @param input
 */
function asyncMap(input) {
    var raw = {};
    var promises = [];
    for (var a in input) {
        if (input.hasOwnProperty(a)) {
            raw[a] = null;
            promises.push(input[a].then(function (a, i) { raw[a] = i; r[a] = i; }.bind(null, a)));
        }
    }
    var r = {};
    var promise = Promise.all(promises).then(() => { r.loaded = true; return r; });
    Object.defineProperty(r, "loaded", { enumerable: false, value: false, writable: true });
    Object.defineProperty(r, "promise", { enumerable: false, value: promise });
    Object.defineProperty(r, "raw", { enumerable: false, value: raw });
    return Object.assign(r, raw);
}
exports.asyncMap = asyncMap;
/**
* Same as asyncMap, but casts the properties to ImageData in typescript
*/
function webpackImages(input) {
    return asyncMap(input);
}
exports.webpackImages = webpackImages;
class ImageDataSet {
    constructor() {
        this.buffers = [];
    }
    matchBest(img, x, y, max) {
        let best = null;
        let bestscore = max;
        for (let a = 0; a < this.buffers.length; a++) {
            let score = img.pixelCompare(this.buffers[a], x, y, bestscore);
            if (isFinite(score) && (bestscore == undefined || score < bestscore)) {
                bestscore = score;
                best = a;
            }
        }
        if (best == null) {
            return null;
        }
        return { index: best, score: bestscore };
    }
    static fromFilmStrip(baseimg, width) {
        if ((baseimg.width % width) != 0) {
            throw new Error("slice size does not fit in base img");
        }
        let r = new ImageDataSet();
        for (let x = 0; x < baseimg.width; x += width) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, width, baseimg.height)));
        }
        return r;
    }
    static fromFilmStripUneven(baseimg, widths) {
        let r = new ImageDataSet();
        let x = 0;
        for (let w of widths) {
            r.buffers.push(baseimg.clone(new _1.Rect(x, 0, w, baseimg.height)));
            x += w;
            if (x > baseimg.width) {
                throw new Error("sampling filmstrip outside bounds");
            }
        }
        if (x != baseimg.width) {
            throw new Error("unconsumed pixels left in film strip imagedata");
        }
        return r;
    }
    static fromAtlas(baseimg, slices) {
        let r = new ImageDataSet();
        for (let slice of slices) {
            r.buffers.push(baseimg.clone(slice));
        }
        return r;
    }
}
exports.ImageDataSet = ImageDataSet;


/***/ }),

/***/ "./src/base/imgref.ts":
/*!****************************!*\
  !*** ./src/base/imgref.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_29896__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImgRefData = exports.ImgRefBind = exports.ImgRefCtx = exports.ImgRef = void 0;
const index_1 = __nested_webpack_require_29896__(/*! ./index */ "./src/base/index.ts");
/**
 * Represents an image that might be in different types of memory
 * This is mostly used to represent images still in Alt1 memory that have
 * not been transfered to js yet. Various a1lib api's use this type and
 * choose the most efficient approach based on the memory type
 */
class ImgRef {
    constructor(x, y, w, h) {
        this.t = "none";
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        throw new Error("This imgref (" + this.t + ") does not support toData");
    }
    findSubimage(needle, sx = 0, sy = 0, w = this.width, h = this.height) {
        return index_1.ImageDetect.findSubimage(this, needle, sx, sy, w, h);
    }
    toData(x = this.x, y = this.y, w = this.width, h = this.height) {
        return this.read(x - this.x, y - this.y, w, h);
    }
    ;
    containsArea(rect) {
        return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + rect.width && this.y + this.height >= rect.y + rect.height;
    }
}
exports.ImgRef = ImgRef;
/**
 * Represents an image in js render memory (canvas/image tag)
 */
class ImgRefCtx extends ImgRef {
    constructor(img, x = 0, y = 0) {
        if (img instanceof CanvasRenderingContext2D) {
            super(x, y, img.canvas.width, img.canvas.height);
            this.ctx = img;
        }
        else {
            super(x, y, img.width, img.height);
            if (img instanceof HTMLCanvasElement) {
                this.ctx = img.getContext("2d", { willReadFrequently: true });
            }
            else {
                var cnv = document.createElement("canvas");
                cnv.width = img.width;
                cnv.height = img.height;
                this.ctx = cnv.getContext("2d", { willReadFrequently: true });
                this.ctx.drawImage(img, 0, 0);
            }
        }
        this.t = "ctx";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return this.ctx.getImageData(x, y, w, h);
    }
}
exports.ImgRefCtx = ImgRefCtx;
/**
 * Represents in image in Alt1 memory, This type of image can be searched for subimages
 * very efficiently and transfering the full image to js can be avoided this way
 */
class ImgRefBind extends ImgRef {
    constructor(handle, x = 0, y = 0, w = 0, h = 0) {
        super(x, y, w, h);
        this.handle = handle;
        this.t = "bind";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        return (0, index_1.transferImageData)(this.handle, x, y, w, h);
    }
}
exports.ImgRefBind = ImgRefBind;
/**
 * Represents an image in js memory
 */
class ImgRefData extends ImgRef {
    constructor(buf, x = 0, y = 0) {
        super(x, y, buf.width, buf.height);
        this.buf = buf;
        this.t = "data";
    }
    read(x = 0, y = 0, w = this.width, h = this.height) {
        if (x == 0 && y == 0 && w == this.width && h == this.height) {
            return this.buf;
        }
        var r = new ImageData(w, h);
        for (var b = y; b < y + h; b++) {
            for (var a = x; a < x + w; a++) {
                var i1 = (a - x) * 4 + (b - y) * w * 4;
                var i2 = a * 4 + b * 4 * this.buf.width;
                r.data[i1] = this.buf.data[i2];
                r.data[i1 + 1] = this.buf.data[i2 + 1];
                r.data[i1 + 2] = this.buf.data[i2 + 2];
                r.data[i1 + 3] = this.buf.data[i2 + 3];
            }
        }
        return r;
    }
}
exports.ImgRefData = ImgRefData;


/***/ }),

/***/ "./src/base/index.ts":
/*!***************************!*\
  !*** ./src/base/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_33868__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromUrl = exports.ImageDataSet = exports.findSubbuffer = exports.simpleCompare = exports.findSubimage = exports.webpackImages = exports.NodePolyfill = exports.ImageData = exports.Rect = exports.PasteInput = exports.ImageDetect = void 0;
__nested_webpack_require_33868__(/*! ./declarations */ "./src/base/declarations.ts");
exports.ImageDetect = __importStar(__nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
exports.PasteInput = __importStar(__nested_webpack_require_33868__(/*! ./pasteinput */ "./src/base/pasteinput.ts"));
var rect_1 = __nested_webpack_require_33868__(/*! ./rect */ "./src/base/rect.ts");
Object.defineProperty(exports, "Rect", ({ enumerable: true, get: function () { return __importDefault(rect_1).default; } }));
var imagedata_extensions_1 = __nested_webpack_require_33868__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
Object.defineProperty(exports, "ImageData", ({ enumerable: true, get: function () { return imagedata_extensions_1.ImageData; } }));
exports.NodePolyfill = __importStar(__nested_webpack_require_33868__(/*! ./nodepolyfill */ "./src/base/nodepolyfill.ts"));
__exportStar(__nested_webpack_require_33868__(/*! ./imgref */ "./src/base/imgref.ts"), exports);
__exportStar(__nested_webpack_require_33868__(/*! ./wrapper */ "./src/base/wrapper.ts"), exports);
var imagedetect_1 = __nested_webpack_require_33868__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
Object.defineProperty(exports, "webpackImages", ({ enumerable: true, get: function () { return imagedetect_1.webpackImages; } }));
Object.defineProperty(exports, "findSubimage", ({ enumerable: true, get: function () { return imagedetect_1.findSubimage; } }));
Object.defineProperty(exports, "simpleCompare", ({ enumerable: true, get: function () { return imagedetect_1.simpleCompare; } }));
Object.defineProperty(exports, "findSubbuffer", ({ enumerable: true, get: function () { return imagedetect_1.findSubbuffer; } }));
Object.defineProperty(exports, "ImageDataSet", ({ enumerable: true, get: function () { return imagedetect_1.ImageDataSet; } }));
Object.defineProperty(exports, "imageDataFromUrl", ({ enumerable: true, get: function () { return imagedetect_1.imageDataFromUrl; } }));


/***/ }),

/***/ "./src/base/nodepolyfill.ts":
/*!**********************************!*\
  !*** ./src/base/nodepolyfill.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_37680__) => {


//nodejs and electron polyfills for web api's
//commented out type info as that breaks webpack with optional dependencies
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageDataFromBuffer = exports.imageDataFromBase64 = exports.imageDataToFileBytes = exports.createCanvas = exports.imageDataToDrawable = exports.requireElectronCommon = exports.requireNodeCanvas = exports.requireSharp = exports.polyfillRequire = void 0;
const index_1 = __nested_webpack_require_37680__(/*! ./index */ "./src/base/index.ts");
const imagedetect_1 = __nested_webpack_require_37680__(/*! ./imagedetect */ "./src/base/imagedetect.ts");
var requirefunction = null;
/**
 * Call this function to let the libs require extra dependencies on nodejs in order
 * to polyfill some browser api's (mostly image compression/decompression)
 * `NodePolifill.polyfillRequire(require);` should solve most cases
 */
function polyfillRequire(requirefn) {
    requirefunction = requirefn;
}
exports.polyfillRequire = polyfillRequire;
function requireSharp() {
    try {
        if (requirefunction) {
            return requirefunction("sharp");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! sharp */ "sharp"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireSharp = requireSharp;
function requireNodeCanvas() {
    //attempt to require sharp first, after loading canvas the module sharp fails to load
    requireSharp();
    try {
        if (requirefunction) {
            return requirefunction("canvas");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! canvas */ "canvas"); // as typeof import("sharp");
        }
    }
    catch (e) { }
    return null;
}
exports.requireNodeCanvas = requireNodeCanvas;
function requireElectronCommon() {
    try {
        if (requirefunction) {
            return requirefunction("electron/common");
        }
        else {
            return __nested_webpack_require_37680__(/* webpackIgnore: true */ /*! electron/common */ "electron/common");
        }
    }
    catch (e) { }
    return null;
}
exports.requireElectronCommon = requireElectronCommon;
function imageDataToDrawable(buf) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return new nodecnv.ImageData(buf.data, buf.width, buf.height);
}
exports.imageDataToDrawable = imageDataToDrawable;
function createCanvas(w, h) {
    let nodecnv = requireNodeCanvas();
    if (!nodecnv) {
        throw new Error("couldn't find built-in canvas or the module 'canvas'");
    }
    return nodecnv.createCanvas(w, h);
}
exports.createCanvas = createCanvas;
function flipBGRAtoRGBA(data) {
    for (let i = 0; i < data.length; i += 4) {
        let tmp = data[i + 2];
        data[i + 2] = data[i + 0];
        data[i + 0] = tmp;
    }
}
async function imageDataToFileBytes(buf, format, quality) {
    //use the electron API if we're in electron
    var electronCommon;
    var sharp;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        //need to copy the buffer in order to flip it without destroying the original
        let bufcpy = Buffer.from(buf.data.slice(buf.data.byteOffset, buf.data.byteLength));
        flipBGRAtoRGBA(bufcpy);
        let nativeimg = nativeImage.createFromBitmap(bufcpy, { width: buf.width, height: buf.height });
        return nativeimg.toPNG();
    }
    else if (sharp = requireSharp()) {
        let img = sharp(Buffer.from(buf.data.buffer), { raw: { width: buf.width, height: buf.height, channels: 4 } });
        if (format == "image/png") {
            img.png();
        }
        else if (format == "image/webp") {
            var opts = { quality: 80 };
            if (typeof quality == "number") {
                opts.quality = quality * 100;
            }
            img.webp(opts);
        }
        else {
            throw new Error("unknown image format: " + format);
        }
        return await img.toBuffer({ resolveWithObject: false }).buffer;
    }
    throw new Error("coulnd't find build-in image compression methods or the module 'electron/common' or 'sharp'");
}
exports.imageDataToFileBytes = imageDataToFileBytes;
function imageDataFromBase64(base64) {
    return imageDataFromBuffer(Buffer.from(base64, "base64"));
}
exports.imageDataFromBase64 = imageDataFromBase64;
async function imageDataFromBuffer(buffer) {
    (0, imagedetect_1.clearPngColorspace)(buffer);
    //use the electron API if we're in electron
    var electronCommon;
    var nodecnv;
    if (electronCommon = requireElectronCommon()) {
        let nativeImage = electronCommon.nativeImage;
        let img = nativeImage.createFromBuffer(buffer);
        let pixels = img.toBitmap();
        let size = img.getSize();
        let pixbuf = new Uint8ClampedArray(pixels.buffer, pixels.byteOffset, pixels.byteLength);
        flipBGRAtoRGBA(pixbuf);
        return new index_1.ImageData(pixbuf, size.width, size.height);
    }
    else if (nodecnv = requireNodeCanvas()) {
        return new Promise((done, err) => {
            let img = new nodecnv.Image();
            img.onerror = err;
            img.onload = () => {
                var cnv = nodecnv.createCanvas(img.naturalWidth, img.naturalHeight);
                var ctx = cnv.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var data = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);
                //use our own class
                done(new index_1.ImageData(data.data, data.width, data.height));
            };
            img.src = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        });
    }
    throw new Error("couldn't find built-in canvas, module 'electron/common' or the module 'canvas'");
}
exports.imageDataFromBuffer = imageDataFromBuffer;


/***/ }),

/***/ "./src/base/pasteinput.ts":
/*!********************************!*\
  !*** ./src/base/pasteinput.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_43872__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileDialog = exports.start = exports.startDragNDrop = exports.triggerPaste = exports.unlisten = exports.listen = exports.lastref = void 0;
const index_1 = __nested_webpack_require_43872__(/*! ./index */ "./src/base/index.ts");
const ImageDetect = __importStar(__nested_webpack_require_43872__(/*! ./imagedetect */ "./src/base/imagedetect.ts"));
var listeners = [];
var started = false;
var dndStarted = false;
var pasting = false;
exports.lastref = null;
function listen(func, errorfunc, dragndrop) {
    listeners.push({ cb: func, error: errorfunc });
    if (!started) {
        start();
    }
    if (dragndrop && !dndStarted) {
        startDragNDrop();
    }
}
exports.listen = listen;
function unlisten(func) {
    let i = listeners.findIndex(c => c.cb == func);
    if (i != -1) {
        listeners.splice(i, 1);
    }
}
exports.unlisten = unlisten;
/**
 * currently used in multiple document situations (iframe), might be removed in the future
 */
function triggerPaste(img) {
    exports.lastref = img;
    for (var a in listeners) {
        listeners[a].cb(exports.lastref);
    }
}
exports.triggerPaste = triggerPaste;
function pasted(img) {
    pasting = false;
    triggerPaste(new index_1.ImgRefCtx(img));
}
function error(error, mes) {
    var _a, _b;
    pasting = false;
    for (var a in listeners) {
        (_b = (_a = listeners[a]).error) === null || _b === void 0 ? void 0 : _b.call(_a, mes, error);
    }
}
function startDragNDrop() {
    var getitem = function (items) {
        var foundimage = "";
        for (var a = 0; a < items.length; a++) {
            var item = items[a];
            var m = item.type.match(/^image\/(\w+)$/);
            if (m) {
                if (m[1] == "png") {
                    return item;
                }
                else {
                    foundimage = m[1];
                }
            }
        }
        if (foundimage) {
            error("notpng", "The image you uploaded is not a .png image. Other image type have compression noise and can't be used for image detection.");
        }
        return null;
    };
    window.addEventListener("dragover", function (e) {
        e.preventDefault();
    });
    window.addEventListener("drop", function (e) {
        if (!e.dataTransfer) {
            return;
        }
        var item = getitem(e.dataTransfer.items);
        e.preventDefault();
        if (!item) {
            return;
        }
        fromFile(item.getAsFile());
    });
}
exports.startDragNDrop = startDragNDrop;
function start() {
    if (started) {
        return;
    }
    started = true;
    //determine if we have a clipboard api
    //try{a=new Event("clipboard"); a="clipboardData" in a;}
    //catch(e){a=false;}
    var ischrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/);
    //old method breaks after chrome 41, revert to good old user agent sniffing
    //nvm, internet explorer (edge) decided that it wants to be chrome, however fails at delivering
    //turns out this one is interesting, edge is a hybrid between the paste api's
    var apipasted = function (e) {
        if (!e.clipboardData) {
            return;
        }
        for (var a = 0; a < e.clipboardData.items.length; a++) { //loop all data types
            if (e.clipboardData.items[a].type.indexOf("image") != -1) {
                var file = e.clipboardData.items[a].getAsFile();
                if (file) {
                    var img = new Image();
                    img.src = (window.URL || window.webkitURL).createObjectURL(file);
                    if (img.width > 0) {
                        pasted(img);
                    }
                    else {
                        img.onload = function () { pasted(img); };
                    }
                }
            }
        }
    };
    if (ischrome) {
        document.addEventListener("paste", apipasted);
    }
    else {
        var catcher = document.createElement("div");
        catcher.setAttribute("contenteditable", "");
        catcher.className = "forcehidden"; //retarded ie safety/bug, cant apply styles using js//TODO i don't even know what's going on
        catcher.onpaste = function (e) {
            if (e.clipboardData && e.clipboardData.items) {
                apipasted(e);
                return;
            }
            setTimeout(function () {
                var b = catcher.children[0];
                if (!b || b.tagName != "IMG") {
                    return;
                }
                var img = new Image();
                img.src = b.src;
                var a = img.src.match(/^data:([\w\/]+);/);
                if (img.width > 0) {
                    pasted(img);
                }
                else {
                    img.onload = function () { pasted(img); };
                }
                catcher.innerHTML = "";
            }, 1);
        };
        document.body.appendChild(catcher);
    }
    //detect if ctrl-v is pressed and focus catcher if needed
    document.addEventListener("keydown", function (e) {
        if (e.target.tagName == "INPUT") {
            return;
        }
        if (e.keyCode != "V".charCodeAt(0) || !e.ctrlKey) {
            return;
        }
        pasting = true;
        setTimeout(function () {
            if (pasting) {
                error("noimg", "You pressed Ctrl+V, but no image was pasted by your browser, make sure your clipboard contains an image, and not a link to an image.");
            }
        }, 1000);
        if (catcher) {
            catcher.focus();
        }
    });
}
exports.start = start;
function fileDialog() {
    var fileinput = document.createElement("input");
    fileinput.type = "file";
    fileinput.accept = "image/png";
    fileinput.onchange = function () { if (fileinput.files && fileinput.files[0]) {
        fromFile(fileinput.files[0]);
    } };
    fileinput.click();
    return fileinput;
}
exports.fileDialog = fileDialog;
function fromFile(file) {
    if (!file) {
        return;
    }
    var reader = new FileReader();
    reader.onload = function () {
        var bytearray = new Uint8Array(reader.result);
        if (ImageDetect.isPngBuffer(bytearray)) {
            ImageDetect.clearPngColorspace(bytearray);
        }
        var blob = new Blob([bytearray], { type: "image/png" });
        var img = new Image();
        var bloburl = URL.createObjectURL(blob);
        img.onerror = () => {
            URL.revokeObjectURL(bloburl);
            error("invalidfile", "The file you uploaded could not be opened as an image.");
        };
        img.src = bloburl;
        if (img.width > 0) {
            pasted(img);
            URL.revokeObjectURL(bloburl);
        }
        else {
            img.onload = function () {
                pasted(img);
                URL.revokeObjectURL(bloburl);
            };
        }
    };
    reader.readAsArrayBuffer(file);
}


/***/ }),

/***/ "./src/base/rect.ts":
/*!**************************!*\
  !*** ./src/base/rect.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {


//util class for rectangle maths
//TODO shit this sucks can we remove it again?
//more of a shorthand to get {x,y,width,height} than a class
//kinda starting to like it again
//TODO remove rant
Object.defineProperty(exports, "__esModule", ({ value: true }));
;
/**
 * Simple rectangle class with some util functions
 */
class Rect {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    static fromArgs(...args) {
        if (typeof args[0] == "object") {
            return new Rect(args[0].x, args[0].y, args[0].width, args[0].height);
        }
        else if (typeof args[0] == "number" && args.length >= 4) {
            return new Rect(args[0], args[1], args[2], args[3]);
        }
        else {
            throw new Error("invalid rect args");
        }
    }
    /**
     * Resizes this Rect to include the full size of a given second rectangle
     */
    union(r2) {
        var x = Math.min(this.x, r2.x);
        var y = Math.min(this.y, r2.y);
        this.width = Math.max(this.x + this.width, r2.x + r2.width) - x;
        this.height = Math.max(this.y + this.height, r2.y + r2.height) - y;
        this.x = x;
        this.y = y;
        return this;
    }
    /**
     * Resizes this Rect to include a given point
     */
    includePoint(x, y) {
        this.union(new Rect(x, y, 0, 0));
    }
    /**
     * Grows the rectangle with the given dimensions
     */
    inflate(w, h) {
        this.x -= w;
        this.y -= h;
        this.width += 2 * w;
        this.height += 2 * h;
    }
    /**
     * Resizes this Rect to the area that overlaps a given Rect
     * width and height will be set to 0 if the intersection does not exist
     */
    intersect(r2) {
        if (this.x < r2.x) {
            this.width -= r2.x - this.x;
            this.x = r2.x;
        }
        if (this.y < r2.y) {
            this.height -= r2.y - this.y;
            this.y = r2.y;
        }
        this.width = Math.min(this.x + this.width, r2.x + r2.width) - this.x;
        this.height = Math.min(this.y + this.height, r2.y + r2.height) - this.y;
        if (this.width <= 0 || this.height <= 0) {
            this.width = 0;
            this.height = 0;
        }
    }
    /**
     * Returns wether this Rect has at least one pixel overlap with a given Rect
     */
    overlaps(r2) {
        return this.x < r2.x + r2.width && this.x + this.width > r2.x && this.y < r2.y + r2.height && this.y + this.height > r2.y;
    }
    /**
     * Returns wether a given Rect fits completely inside this Rect
     * @param r2
     */
    contains(r2) {
        return this.x <= r2.x && this.x + this.width >= r2.x + r2.width && this.y <= r2.y && this.y + this.height >= r2.y + r2.height;
    }
    /**
     * Returns wether a given point lies inside this Rect
     */
    containsPoint(x, y) {
        return this.x <= x && this.x + this.width > x && this.y <= y && this.y + this.height > y;
    }
}
exports["default"] = Rect;


/***/ }),

/***/ "./src/base/wrapper.ts":
/*!*****************************!*\
  !*** ./src/base/wrapper.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_55275__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.captureStream = exports.captureMultiAsync = exports.captureAsync = exports.ImageStreamReader = exports.once = exports.removeListener = exports.on = exports.addResizeElement = exports.getMousePosition = exports.hasAlt1Version = exports.resetEnvironment = exports.identifyApp = exports.unmixColor = exports.mixColor = exports.encodeImageString = exports.decodeImageString = exports.transferImageData = exports.captureHoldFullRs = exports.captureHoldScreen = exports.captureHold = exports.capture = exports.getdisplaybounds = exports.requireAlt1 = exports.openbrowser = exports.skinName = exports.hasAlt1 = exports.newestversion = exports.Alt1Error = exports.NoAlt1Error = void 0;
const rect_1 = __importDefault(__nested_webpack_require_55275__(/*! ./rect */ "./src/base/rect.ts"));
const imgref_1 = __nested_webpack_require_55275__(/*! ./imgref */ "./src/base/imgref.ts");
const imagedata_extensions_1 = __nested_webpack_require_55275__(/*! ./imagedata-extensions */ "./src/base/imagedata-extensions.ts");
__nested_webpack_require_55275__(/*! ./alt1api */ "./src/base/alt1api.ts");
/**
 * Thrown when a method is called that can not be used outside of Alt1
 */
class NoAlt1Error extends Error {
    constructor() {
        super();
        this.message = "This method can not be ran outside of Alt1";
    }
}
exports.NoAlt1Error = NoAlt1Error;
;
/**
 * Thrown when the Alt1 API returns an invalid result
 * Errors of a different type are throw when internal Alt1 errors occur
 */
class Alt1Error extends Error {
}
exports.Alt1Error = Alt1Error;
/**
 * The latest Alt1 version
 */
exports.newestversion = "1.5.5";
/**
 * Whether the Alt1 API is available
 */
exports.hasAlt1 = (typeof alt1 != "undefined");
/**
 * The name of the Alt1 interface skin. (Always "default" if running in a browser)
 */
exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
/**
 * Max number of bytes that can be sent by alt1 in one function
 * Not completely sure why this number is different than window.alt1.maxtranfer
 */
var maxtransfer = 4000000;
/**
 * Open a link in the default browser
 * @deprecated use window.open instead
 */
function openbrowser(url) {
    if (exports.hasAlt1) {
        alt1.openBrowser(url);
    }
    else {
        window.open(url, '_blank');
    }
}
exports.openbrowser = openbrowser;
/**
 * Throw if Alt1 API is not available
 */
function requireAlt1() {
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
}
exports.requireAlt1 = requireAlt1;
/**
 * Returns an object with a rectangle that spans all screens
 */
function getdisplaybounds() {
    if (!exports.hasAlt1) {
        return false;
    }
    return new rect_1.default(alt1.screenX, alt1.screenY, alt1.screenWidth, alt1.screenHeight);
}
exports.getdisplaybounds = getdisplaybounds;
/**
 * gets an imagebuffer with pixel data about the requested region
 */
function capture(...args) {
    //TODO change null return on error into throw instead (x3)
    if (!exports.hasAlt1) {
        throw new NoAlt1Error();
    }
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.capture) {
        return new imagedata_extensions_1.ImageData(alt1.capture(rect.x, rect.y, rect.width, rect.height), rect.width, rect.height);
    }
    var buf = new imagedata_extensions_1.ImageData(rect.width, rect.height);
    if (rect.width * rect.height * 4 <= maxtransfer) {
        var data = alt1.getRegion(rect.x, rect.y, rect.width, rect.height);
        if (!data) {
            return null;
        }
        decodeImageString(data, buf, 0, 0, rect.width, rect.height);
    }
    else {
        //split up the request to to exceed the single transfer limit (for now)
        var x1 = rect.x;
        var ref = alt1.bindRegion(rect.x, rect.y, rect.width, rect.height);
        if (ref <= 0) {
            return null;
        }
        while (x1 < rect.x + rect.width) {
            var x2 = Math.min(rect.x + rect.width, Math.floor(x1 + (maxtransfer / 4 / rect.height)));
            var data = alt1.bindGetRegion(ref, x1, rect.y, x2 - x1, rect.height);
            if (!data) {
                return null;
            }
            decodeImageString(data, buf, x1 - rect.x, 0, x2 - x1, rect.height);
            x1 = x2;
        }
    }
    return buf;
}
exports.capture = capture;
/**
 * Makes alt1 bind an area of the rs client in memory without sending it to the js client
 * returns an imgref object which can be used to get pixel data using the imgreftobuf function
 * currently only one bind can exist per app and the ref in (v) will always be 1
 */
function captureHold(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindRegion(x, y, w, h);
    if (r <= 0) {
        throw new Alt1Error("capturehold failed");
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHold = captureHold;
/**
 * Same as captureHoldRegion, but captures the screen instead of the rs client. it also uses screen coordinates instead and can capture outside of the rs client
 */
function captureHoldScreen(x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    var r = alt1.bindScreenRegion(x, y, w, h);
    if (r <= 0) {
        return false;
    }
    return new imgref_1.ImgRefBind(r, x, y, w, h);
}
exports.captureHoldScreen = captureHoldScreen;
/**
 * bind the full rs window
 */
function captureHoldFullRs() {
    return captureHold(0, 0, alt1.rsWidth, alt1.rsHeight);
}
exports.captureHoldFullRs = captureHoldFullRs;
/**
 * returns a subregion from a bound image
 * used internally in imgreftobuf if imgref is a bound image
 * @deprecated This should be handled internall by the imgrefbind.toData method
 */
function transferImageData(handle, x, y, w, h) {
    x = Math.round(x);
    y = Math.round(y);
    w = Math.round(w);
    h = Math.round(h);
    requireAlt1();
    if (alt1.bindGetRegionBuffer) {
        return new imagedata_extensions_1.ImageData(alt1.bindGetRegionBuffer(handle, x, y, w, h), w, h);
    }
    var r = new imagedata_extensions_1.ImageData(w, h);
    var x1 = x;
    while (true) { //split up the request to to exceed the single transfer limit (for now)
        var x2 = Math.min(x + w, Math.floor(x1 + (maxtransfer / 4 / h)));
        var a = alt1.bindGetRegion(handle, x1, y, x2 - x1, h);
        if (!a) {
            throw new Alt1Error();
        }
        decodeImageString(a, r, x1 - x, 0, x2 - x1, h);
        x1 = x2;
        if (x1 == x + w) {
            break;
        }
        ;
    }
    return r;
}
exports.transferImageData = transferImageData;
/**
 * decodes a returned string from alt1 to an imagebuffer. You generally never have to do this yourself
 */
function decodeImageString(imagestring, target, x, y, w, h) {
    var bin = atob(imagestring);
    var bytes = target.data;
    w |= 0;
    h |= 0;
    var offset = 4 * x + 4 * y * target.width;
    var target_width = target.width | 0;
    for (var a = 0; a < w; a++) {
        for (var b = 0; b < h; b++) {
            var i1 = (offset + (a * 4 | 0) + (b * target_width * 4 | 0)) | 0;
            var i2 = ((a * 4 | 0) + (b * 4 * w | 0)) | 0;
            bytes[i1 + 0 | 0] = bin.charCodeAt(i2 + 2 | 0); //fix weird red/blue swap in c#
            bytes[i1 + 1 | 0] = bin.charCodeAt(i2 + 1 | 0);
            bytes[i1 + 2 | 0] = bin.charCodeAt(i2 + 0 | 0);
            bytes[i1 + 3 | 0] = bin.charCodeAt(i2 + 3 | 0);
        }
    }
    return target;
}
exports.decodeImageString = decodeImageString;
/**
 * encodes an imagebuffer to a string
 */
function encodeImageString(buf, sx = 0, sy = 0, sw = buf.width, sh = buf.height) {
    var raw = "";
    for (var y = sy; y < sy + sh; y++) {
        for (var x = sx; x < sx + sw; x++) {
            var i = 4 * x + 4 * buf.width * y | 0;
            raw += String.fromCharCode(buf.data[i + 2 | 0]);
            raw += String.fromCharCode(buf.data[i + 1 | 0]);
            raw += String.fromCharCode(buf.data[i + 0 | 0]);
            raw += String.fromCharCode(buf.data[i + 3 | 0]);
        }
    }
    return btoa(raw);
}
exports.encodeImageString = encodeImageString;
/**
 * mixes the given color into a single int. This format is used by alt1
 */
function mixColor(r, g, b, a = 255) {
    return (b << 0) + (g << 8) + (r << 16) + (a << 24);
}
exports.mixColor = mixColor;
function unmixColor(col) {
    var r = (col >> 16) & 0xff;
    var g = (col >> 8) & 0xff;
    var b = (col >> 0) & 0xff;
    return [r, g, b];
}
exports.unmixColor = unmixColor;
function identifyApp(url) {
    if (exports.hasAlt1) {
        alt1.identifyAppUrl(url);
    }
}
exports.identifyApp = identifyApp;
function resetEnvironment() {
    exports.hasAlt1 = (typeof alt1 != "undefined");
    exports.skinName = exports.hasAlt1 ? alt1.skinName : "default";
}
exports.resetEnvironment = resetEnvironment;
function convertAlt1Version(str) {
    var a = str.match(/^(\d+)\.(\d+)\.(\d+)$/);
    if (!a) {
        throw new RangeError("Invalid version string");
    }
    return (+a[1]) * 1000 * 1000 + (+a[2]) * 1000 + (+a[3]) * 1;
}
var cachedVersionInt = -1;
/**
 * checks if alt1 is running and at least the given version. versionstr should be a string with the version eg: 1.3.2
 * @param versionstr
 */
function hasAlt1Version(versionstr) {
    if (!exports.hasAlt1) {
        return false;
    }
    if (cachedVersionInt == -1) {
        cachedVersionInt = alt1.versionint;
    }
    return cachedVersionInt >= convertAlt1Version(versionstr);
}
exports.hasAlt1Version = hasAlt1Version;
/**
 * Gets the current cursor position in the game, returns null if the rs window is not active (alt1.rsActive)
 */
function getMousePosition() {
    var pos = alt1.mousePosition;
    if (pos == -1) {
        return null;
    }
    return { x: pos >>> 16, y: pos & 0xFFFF };
}
exports.getMousePosition = getMousePosition;
/**
 * Registers a given HTML element as a frame border, when this element is dragged by the user the Alt1 frame will resize accordingly
 * Use the direction arguements to make a given direction stick to the mouse. eg. Only set left to true to make the element behave as the left border
 * Or set all to true to move the whole window. Not all combinations are permitted
 */
function addResizeElement(el, left, top, right, bot) {
    if (!exports.hasAlt1 || !alt1.userResize) {
        return;
    }
    el.addEventListener("mousedown", function (e) {
        alt1.userResize(left, top, right, bot);
        e.preventDefault();
    });
}
exports.addResizeElement = addResizeElement;
/**
 * Add an event listener
 */
function on(type, listener) {
    if (!exports.hasAlt1) {
        return;
    }
    if (!alt1.events) {
        alt1.events = {};
    }
    if (!alt1.events[type]) {
        alt1.events[type] = [];
    }
    alt1.events[type].push(listener);
}
exports.on = on;
/**
 * Removes an event listener
 */
function removeListener(type, listener) {
    var elist = exports.hasAlt1 && alt1.events && alt1.events[type];
    if (!elist) {
        return;
    }
    var i = elist.indexOf(listener);
    if (i == -1) {
        return;
    }
    elist.splice(i, 1);
}
exports.removeListener = removeListener;
/**
 * Listens for the event to fire once and then stops listening
 * @param event
 * @param cb
 */
function once(type, listener) {
    var fn = (e) => {
        removeListener(type, fn);
        listener(e);
    };
    on(type, fn);
}
exports.once = once;
;
/**
 * Used to read a set of images from a binary stream returned by the Alt1 API
 */
class ImageStreamReader {
    constructor(reader, ...args) {
        this.framebuffer = null;
        this.pos = 0;
        this.reading = false;
        this.closed = false;
        //paused state
        this.pausedindex = -1;
        this.pausedbuffer = null;
        this.streamreader = reader;
        if (args[0] instanceof imagedata_extensions_1.ImageData) {
            this.setFrameBuffer(args[0]);
        }
        else if (typeof args[0] == "number") {
            this.setFrameBuffer(new imagedata_extensions_1.ImageData(args[0], args[1]));
        }
    }
    /**
     *
     */
    setFrameBuffer(buffer) {
        if (this.reading) {
            throw new Error("can't change framebuffer while reading");
        }
        this.framebuffer = buffer;
    }
    /**
     * Closes the underlying stream and ends reading
     */
    close() {
        this.streamreader.cancel();
    }
    /**
     * Reads a single image from the stream
     */
    async nextImage() {
        if (this.reading) {
            throw new Error("already reading from this stream");
        }
        if (!this.framebuffer) {
            throw new Error("framebuffer not set");
        }
        this.reading = true;
        var synctime = -Date.now();
        var starttime = Date.now();
        var r = false;
        while (!r) {
            if (this.pausedindex != -1 && this.pausedbuffer) {
                r = this.readChunk(this.pausedindex, this.framebuffer.data, this.pausedbuffer);
            }
            else {
                synctime += Date.now();
                var res = await this.streamreader.read();
                synctime -= Date.now();
                if (res.done) {
                    throw new Error("Stream closed while reading");
                }
                var data = res.value;
                r = this.readChunk(0, this.framebuffer.data, data);
            }
        }
        synctime += Date.now();
        //console.log("Decoded async image, " + this.framebuffer.width + "x" + this.framebuffer.height + " time: " + (Date.now() - starttime) + "ms (" + synctime + "ms main thread)");
        this.reading = false;
        return this.framebuffer;
    }
    readChunk(i, framedata, buffer) {
        //very hot code, explicit int32 casting with |0 speeds it up by ~ x2
        i = i | 0;
        var framesize = framedata.length | 0;
        var pos = this.pos;
        var datalen = buffer.length | 0;
        //var data32 = new Float64Array(buffer.buffer);
        //var framedata32 = new Float64Array(framedata.buffer);
        //fix possible buffer misalignment
        //align to 16 for extra loop unrolling
        while (i < datalen) {
            //slow loop, fix alignment and other issues
            while (i < datalen && pos < framesize && (pos % 16 != 0 || !((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize))) {
                var rel = pos;
                if (pos % 4 == 0) {
                    rel = rel + 2 | 0;
                }
                if (pos % 4 == 2) {
                    rel = rel - 2 | 0;
                }
                framedata[rel | 0] = buffer[i | 0];
                i = i + 1 | 0;
                pos = pos + 1 | 0;
            }
            //fast unrolled loop for large chunks i wish js had some sort of memcpy
            if (pos % 16 == 0) {
                while ((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize) {
                    framedata[pos + 0 | 0] = buffer[i + 2 | 0];
                    framedata[pos + 1 | 0] = buffer[i + 1 | 0];
                    framedata[pos + 2 | 0] = buffer[i + 0 | 0];
                    framedata[pos + 3 | 0] = buffer[i + 3 | 0];
                    framedata[pos + 4 | 0] = buffer[i + 6 | 0];
                    framedata[pos + 5 | 0] = buffer[i + 5 | 0];
                    framedata[pos + 6 | 0] = buffer[i + 4 | 0];
                    framedata[pos + 7 | 0] = buffer[i + 7 | 0];
                    framedata[pos + 8 | 0] = buffer[i + 10 | 0];
                    framedata[pos + 9 | 0] = buffer[i + 9 | 0];
                    framedata[pos + 10 | 0] = buffer[i + 8 | 0];
                    framedata[pos + 11 | 0] = buffer[i + 11 | 0];
                    framedata[pos + 12 | 0] = buffer[i + 14 | 0];
                    framedata[pos + 13 | 0] = buffer[i + 13 | 0];
                    framedata[pos + 14 | 0] = buffer[i + 12 | 0];
                    framedata[pos + 15 | 0] = buffer[i + 15 | 0];
                    //could speed it up another x2 but wouldn't be able to swap r/b swap and possible alignment issues
                    //framedata32[pos / 8 + 0 | 0] = data32[i / 8 + 0 | 0];
                    //framedata32[pos / 8 + 1 | 0] = data32[i / 8 + 1 | 0];
                    //framedata32[pos / 4 + 2 | 0] = data32[i / 4 + 2 | 0];
                    //framedata32[pos / 4 + 3 | 0] = data32[i / 4 + 3 | 0];
                    pos = pos + 16 | 0;
                    i = i + 16 | 0;
                }
            }
            if (pos >= framesize) {
                this.pausedbuffer = null;
                this.pausedindex = -1;
                this.pos = 0;
                if (i != buffer.length - 1) {
                    this.pausedbuffer = buffer;
                    this.pausedindex = i;
                }
                return true;
            }
        }
        this.pos = pos;
        this.pausedbuffer = null;
        this.pausedindex = -1;
        return false;
    }
}
exports.ImageStreamReader = ImageStreamReader;
/**
 * Asynchronously captures a section of the game screen
 */
async function captureAsync(...args) {
    requireAlt1();
    var rect = rect_1.default.fromArgs(...args);
    if (alt1.captureAsync) {
        let img = await alt1.captureAsync(rect.x, rect.y, rect.width, rect.height);
        return new imagedata_extensions_1.ImageData(img, rect.width, rect.height);
    }
    if (!hasAlt1Version("1.4.6")) {
        return capture(rect.x, rect.y, rect.width, rect.height);
    }
    var url = "https://alt1api/pixel/getregion/" + encodeURIComponent(JSON.stringify(Object.assign(Object.assign({}, rect), { format: "raw", quality: 1 })));
    var res = await fetch(url);
    var imgreader = new ImageStreamReader(res.body.getReader(), rect.width, rect.height);
    return imgreader.nextImage();
}
exports.captureAsync = captureAsync;
/**
 * Asynchronously captures multple area's. This method captures the images in the same render frame if possible
 * @param areas
 */
async function captureMultiAsync(areas) {
    requireAlt1();
    var r = {};
    if (alt1.captureMultiAsync) {
        let bufs = await alt1.captureMultiAsync(areas);
        for (let a in areas) {
            if (!bufs[a]) {
                r[a] = null;
            }
            r[a] = new imagedata_extensions_1.ImageData(bufs[a], areas[a].width, areas[a].height);
        }
        return r;
    }
    var capts = [];
    var captids = [];
    for (var id in areas) {
        if (areas[id]) {
            capts.push(areas[id]);
            captids.push(id);
        }
        else {
            r[id] = null;
        }
    }
    if (capts.length == 0) {
        return r;
    }
    if (!hasAlt1Version("1.5.1")) {
        var proms = [];
        for (var a = 0; a < capts.length; a++) {
            proms.push(captureAsync(capts[a]));
        }
        var results = await Promise.all(proms);
        for (var a = 0; a < capts.length; a++) {
            r[captids[a]] = results[a];
        }
    }
    else {
        var res = await fetch("https://alt1api/pixel/getregionmulti/" + encodeURIComponent(JSON.stringify({ areas: capts, format: "raw", quality: 1 })));
        var imgreader = new ImageStreamReader(res.body.getReader());
        for (var a = 0; a < capts.length; a++) {
            var capt = capts[a];
            imgreader.setFrameBuffer(new imagedata_extensions_1.ImageData(capt.width, capt.height));
            r[captids[a]] = await imgreader.nextImage();
        }
    }
    return r;
}
exports.captureMultiAsync = captureMultiAsync;
/**
 * Starts capturing a realtime stream of the game. Make sure you keep reading the stream and close it when you're done or Alt1 WILL crash
 * @param framecb Called whenever a new frame is decoded
 * @param errorcb Called whenever an error occurs, the error is rethrown if not defined
 * @param fps Maximum fps of the stream
 */
function captureStream(x, y, width, height, fps, framecb, errorcb) {
    requireAlt1();
    if (!hasAlt1Version("1.4.6")) {
        throw new Alt1Error("This function is not supported in this version of Alt1");
    }
    var url = "https://alt1api/pixel/streamregion/" + encodeURIComponent(JSON.stringify({ x, y, width, height, fps, format: "raw" }));
    var res = fetch(url).then(async (res) => {
        var reader = new ImageStreamReader(res.body.getReader(), width, height);
        try {
            while (!reader.closed && !state.closed) {
                var img = await reader.nextImage();
                if (!state.closed) {
                    framecb(img);
                    state.framenr++;
                }
            }
        }
        catch (e) {
            if (!state.closed) {
                reader.close();
                if (errorcb) {
                    errorcb(e);
                }
                else {
                    throw e;
                }
            }
        }
        if (!reader.closed && state.closed) {
            reader.close();
        }
    });
    var state = {
        x, y, width, height,
        framenr: 0,
        close: () => { state.closed = true; },
        closed: false,
    };
    return state;
}
exports.captureStream = captureStream;


/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_canvas__ === 'undefined') { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_canvas__;

/***/ }),

/***/ "electron/common":
/*!**********************************!*\
  !*** external "electron/common" ***!
  \**********************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_electron_common__ === 'undefined') { var e = new Error("Cannot find module 'electron/common'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_electron_common__;

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

if(typeof __WEBPACK_EXTERNAL_MODULE_sharp__ === 'undefined') { var e = new Error("Cannot find module 'sharp'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_78005__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_78005__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__nested_webpack_require_78005__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_78005__("./src/base/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/buffs/index.js":
/*!************************************************!*\
  !*** ../node_modules/alt1/dist/buffs/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/buffs/imgs/buffborder.data.png":
/*!********************************************!*\
  !*** ./src/buffs/imgs/buffborder.data.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_885__) => {

module.exports=(__nested_webpack_require_885__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABCSURBVEhL7daxDQAgDANBwxasxmCsS4jECE8K5JdcX+s219iqKrGTXi+dfs2SjCEZQzKGZAzJGJIxJGNI/2KFj1gK6ntTCO2Nfp8AAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/imgs/debuffborder.data.png":
/*!**********************************************!*\
  !*** ./src/buffs/imgs/debuffborder.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_1504__) => {

module.exports=(__nested_webpack_require_1504__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABsAAAAbCAYAAACN1PRVAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAABFSURBVEhL7daxDQAgDANBm5XYfwOYyUgoI5gUyFc51bfhAoQmNzYl1v3MJjVqt0jMIjGLxCwSs0jMIjGLxCz+jTV+xMAB3/oJlYh5IBUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/buffs/index.ts":
/*!****************************!*\
  !*** ./src/buffs/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_2063__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuffInfo = exports.Buff = void 0;
const a1lib = __importStar(__nested_webpack_require_2063__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_2063__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_2063__(/*! alt1/base */ "alt1/base");
var imgs = (0, base_1.webpackImages)({
    buff: __nested_webpack_require_2063__(/*! ./imgs/buffborder.data.png */ "./src/buffs/imgs/buffborder.data.png"),
    debuff: __nested_webpack_require_2063__(/*! ./imgs/debuffborder.data.png */ "./src/buffs/imgs/debuffborder.data.png"),
});
var font = __nested_webpack_require_2063__(/*! ../fonts/pixel_8px_digits.fontmeta.json */ "./src/fonts/pixel_8px_digits.fontmeta.json");
function negmod(a, b) {
    return ((a % b) + b) % b;
}
class Buff {
    constructor(buffer, x, y, isdebuff) {
        this.buffer = buffer;
        this.bufferx = x;
        this.buffery = y;
        this.isdebuff = isdebuff;
    }
    readArg(type) {
        return BuffReader.readArg(this.buffer, this.bufferx + 2, this.buffery + 23, type);
    }
    readTime() {
        return BuffReader.readTime(this.buffer, this.bufferx + 2, this.buffery + 23);
    }
    compareBuffer(img) {
        return BuffReader.compareBuffer(this.buffer, this.bufferx + 1, this.buffery + 1, img);
    }
    countMatch(img, aggressive) {
        return BuffReader.countMatch(this.buffer, this.bufferx + 1, this.buffery + 1, img, aggressive);
    }
}
exports.Buff = Buff;
class BuffReader {
    constructor() {
        this.pos = null;
        this.debuffs = false;
    }
    find(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        if (!img) {
            return null;
        }
        var poslist = img.findSubimage(this.debuffs ? imgs.debuff : imgs.buff);
        if (poslist.length == 0) {
            return null;
        }
        var grids = [];
        for (var a in poslist) {
            var ongrid = false;
            for (var b in grids) {
                if (negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0 && negmod(grids[b].x - poslist[a].x, BuffReader.gridsize) == 0) {
                    grids[b].x = Math.min(grids[b].x, poslist[a].x);
                    grids[b].y = Math.min(grids[b].y, poslist[a].y);
                    grids[b].n++;
                    ongrid = true;
                    break;
                }
            }
            if (!ongrid) {
                grids.push({ x: poslist[a].x, y: poslist[a].y, n: 1 });
            }
        }
        var max = 0;
        var above2 = 0;
        var best = null;
        for (var a in grids) {
            console.log("buff grid [" + grids[a].x + "," + grids[a].y + "], n:" + grids[a].n);
            if (grids[a].n > max) {
                max = grids[a].n;
                best = grids[a];
            }
            if (grids[a].n >= 2) {
                above2++;
            }
        }
        if (above2 > 1) {
            console.log("Warning, more than one possible buff bar location");
        }
        if (!best) {
            return null;
        }
        this.pos = { x: best.x, y: best.y, maxhor: 5, maxver: 1 };
        return true;
    }
    getCaptRect() {
        if (!this.pos) {
            return null;
        }
        return new a1lib.Rect(this.pos.x, this.pos.y, (this.pos.maxhor + 1) * BuffReader.gridsize, (this.pos.maxver + 1) * BuffReader.gridsize);
    }
    read(buffer) {
        if (!this.pos) {
            throw new Error("no pos");
        }
        var r = [];
        var rect = this.getCaptRect();
        if (!rect) {
            return null;
        }
        if (!buffer) {
            buffer = a1lib.capture(rect.x, rect.y, rect.width, rect.height);
        }
        var maxhor = 0;
        var maxver = 0;
        for (var ix = 0; ix <= this.pos.maxhor; ix++) {
            for (var iy = 0; iy <= this.pos.maxver; iy++) {
                var x = ix * BuffReader.gridsize;
                var y = iy * BuffReader.gridsize;
                //Have to require exact match here as we get transparency bs otherwise
                var match = buffer.pixelCompare((this.debuffs ? imgs.debuff : imgs.buff), x, y) == 0;
                if (!match) {
                    break;
                }
                r.push(new Buff(buffer, x, y, this.debuffs));
                maxhor = Math.max(maxhor, ix);
                maxver = Math.max(maxver, iy);
            }
        }
        this.pos.maxhor = Math.max(5, maxhor + 2);
        this.pos.maxver = Math.max(1, maxver + 1);
        return r;
    }
    static compareBuffer(buffer, ox, oy, buffimg) {
        var r = BuffReader.countMatch(buffer, ox, oy, buffimg, true);
        if (r.failed > 0) {
            return false;
        }
        if (r.tested < 50) {
            return false;
        }
        return true;
    }
    static countMatch(buffer, ox, oy, buffimg, agressive) {
        var r = { tested: 0, failed: 0, skipped: 0, passed: 0 };
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    r.skipped++;
                    continue;
                } //transparent buff pixel
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255) {
                    r.skipped++;
                    continue;
                } //white pixel - part of buff time text
                if (data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    r.skipped++;
                    continue;
                } //black pixel - part of buff time text
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                r.tested++;
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 35) {
                    //qw(pixelschecked); debug.show();
                    r.failed++;
                    if (agressive) {
                        return r;
                    }
                }
                else {
                    r.passed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        return r;
    }
    static isolateBuffer(buffer, ox, oy, buffimg) {
        var count = BuffReader.countMatch(buffer, ox, oy, buffimg);
        if (count.passed < 50) {
            return;
        }
        var removed = 0;
        var data1 = buffer.data;
        var data2 = buffimg.data;
        //var debug = new ImageData(buffimg.width, buffimg.height);
        for (var y = 0; y < buffimg.height; y++) {
            for (var x = 0; x < buffimg.width; x++) {
                var i1 = buffer.pixelOffset(ox + x, oy + y);
                var i2 = buffimg.pixelOffset(x, y);
                //debug.data[i2] = 255; debug.data[i2 + 1] = debug.data[i2 + 2] = 0; debug.data[i2 + 3] = 255;
                if (data2[i2 + 3] != 255) {
                    continue;
                } //transparent buff pixel
                //==== new buffer has text on it ====
                if (data1[i1] == 255 && data1[i1 + 1] == 255 && data1[i1 + 2] == 255 || data1[i1] == 0 && data1[i1 + 1] == 0 && data1[i1 + 2] == 0) {
                    continue;
                }
                //==== old buf has text on it, use the new one ====
                if (data2[i2] == 255 && data2[i2 + 1] == 255 && data2[i2 + 2] == 255 || data2[i2] == 0 && data2[i2 + 1] == 0 && data2[i2 + 2] == 0) {
                    data2[i2 + 0] = data1[i1 + 0];
                    data2[i2 + 1] = data1[i1 + 1];
                    data2[i2 + 2] = data1[i1 + 2];
                    data2[i2 + 3] = data1[i1 + 3];
                    removed++;
                }
                var d = a1lib.ImageDetect.coldif(data1[i1], data1[i1 + 1], data1[i1 + 2], data2[i2], data2[i2 + 1], data2[i2 + 2], 255);
                //debug.data[i2] = debug.data[i2 + 1] = debug.data[i2 + 2] = d * 10;
                if (d > 5) {
                    //qw(pixelschecked); debug.show();
                    data2[i2 + 0] = data2[i2 + 1] = data2[i2 + 2] = data2[i2 + 3] = 0;
                    removed++;
                }
            }
        }
        //debug.show(); qw(pixelschecked);
        if (removed > 0) {
            console.log(removed + " pixels remove from buff template image");
        }
    }
    static readArg(buffer, ox, oy, type) {
        var lines = [];
        for (var dy = -10; dy < 10; dy += 10) { //the timer can be spread to a second line at certain times (229m)
            var result = OCR.readLine(buffer, font, [255, 255, 255], ox, oy + dy, true);
            if (result.text) {
                lines.push(result.text);
            }
        }
        var r = { time: 0, arg: "" };
        if (type == "timearg" && lines.length > 1) {
            r.arg = lines.pop();
        }
        var str = lines.join("");
        if (type == "arg") {
            r.arg = str;
        }
        else {
            var m;
            if (m = str.match(/^(\d+)hr($|\s?\()/i)) {
                r.time = +m[1] * 60 * 60;
            }
            else if (m = str.match(/^(\d+)m($|\s?\()/i)) {
                r.time = +m[1] * 60;
            }
            else if (m = str.match(/^(\d+)($|\s?\()/)) {
                r.time = +m[1];
            }
        }
        return r;
    }
    static readTime(buffer, ox, oy) {
        return this.readArg(buffer, ox, oy, "time").time;
    }
    static matchBuff(state, buffimg) {
        for (var a in state) {
            if (state[a].compareBuffer(buffimg)) {
                return state[a];
            }
        }
        return null;
    }
    static matchBuffMulti(state, buffinfo) {
        if (buffinfo.final) { //cheap way if we known exactly what we're searching for
            return BuffReader.matchBuff(state, buffinfo.imgdata);
        }
        else { //expensive way if we are not sure the template is final
            var bestindex = -1;
            var bestscore = 0;
            if (buffinfo.imgdata) {
                for (var a = 0; a < state.length; a++) {
                    var count = BuffReader.countMatch(state[a].buffer, state[a].bufferx + 1, state[a].buffery + 1, buffinfo.imgdata, false);
                    if (count.passed > bestscore) {
                        bestscore = count.passed;
                        bestindex = a;
                    }
                }
            }
            if (bestscore < 50) {
                return null;
            }
            //update the isolated buff
            if (buffinfo.canimprove) {
                BuffReader.isolateBuffer(state[bestindex].buffer, state[bestindex].bufferx + 1, state[bestindex].buffery + 1, buffinfo.imgdata);
            }
            return state[bestindex];
        }
    }
}
BuffReader.buffsize = 27;
BuffReader.gridsize = 30;
exports["default"] = BuffReader;
class BuffInfo {
    constructor(imgdata, debuff, id, canimprove) {
        this.imgdata = imgdata;
        this.isdebuff = debuff;
        this.buffid = id;
        this.final = !!id && !canimprove;
        this.canimprove = canimprove;
    }
}
exports.BuffInfo = BuffInfo;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/pixel_8px_digits.fontmeta.json":
/*!**************************************************!*\
  !*** ./src/fonts/pixel_8px_digits.fontmeta.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":120,"chr":"0","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,255,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,255,2,0,255,255,2,2,255,0,2,7,255,255,3,1,255,255,3,6,255,255,3,8,255,0,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,7,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0],"secondary":false},{"width":4,"bonus":95,"chr":"1","pixels":[0,1,255,255,0,7,255,255,1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,0,2,1,255,0,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,255,2,8,255,0],"secondary":false},{"width":7,"bonus":140,"chr":"2","pixels":[0,1,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,5,255,255,1,7,255,255,1,8,255,0,2,0,255,255,2,1,255,0,2,4,255,255,2,6,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,5,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,0,4,7,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,8,255,0],"secondary":false},{"width":6,"bonus":115,"chr":"3","pixels":[0,1,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,1,255,255,3,2,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,2,255,0,4,3,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":5,"bonus":110,"chr":"4","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,0,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,255,1,6,255,0,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,7,255,0,3,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"5","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,6,255,255,1,0,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,1,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":7,"bonus":160,"chr":"6","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,1,255,255,1,3,255,0,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,2,255,0,2,3,255,255,2,5,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":6,"bonus":105,"chr":"7","pixels":[0,0,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,1,255,0,1,4,255,255,1,5,255,255,1,7,255,0,1,8,255,0,2,0,255,255,2,1,255,0,2,2,255,255,2,3,255,255,2,5,255,0,2,6,255,0,3,0,255,255,3,1,255,255,3,3,255,0,3,4,255,0,4,1,255,0,4,2,255,0],"secondary":false},{"width":7,"bonus":170,"chr":"8","pixels":[0,1,255,255,0,2,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"9","pixels":[0,1,255,255,0,2,255,255,1,0,255,255,1,2,255,0,1,3,255,255,2,0,255,255,2,1,255,0,2,4,255,255,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,0,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"m","pixels":[0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,3,255,255,3,5,255,0,3,6,255,0,3,7,255,0,3,8,255,0,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":3,"bonus":80,"chr":"(","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,255,2,1,255,0],"secondary":false},{"width":2,"bonus":70,"chr":")","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"h","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,4,255,0,2,5,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0],"secondary":false},{"width":5,"bonus":65,"chr":"r","pixels":[0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,5,255,0,3,4,255,0],"secondary":false}],"width":7,"spacewidth":3,"shadow":true,"height":9,"basey":7}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_21006__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21006__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_21006__("./src/buffs/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/chatbox/index.js":
/*!**************************************************!*\
  !*** ../node_modules/alt1/dist/chatbox/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/chatbox/imgs/badge_broadcast_bronze.data.png":
/*!**********************************************************!*\
  !*** ./src/chatbox/imgs/badge_broadcast_bronze.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_945__) => {

module.exports=(__nested_webpack_require_945__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAzUExURQsICCEdHPN8c6ppYgAAAVg0VYpLRWAsKIZ/fn9ANUolG9CHhTAUEjElGzIwL/WkmQAAAEMXxE8AAAARdFJOU/////////////////////8AJa2ZYgAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAEpJREFUGFc9ygEKwDAIA8B0Oq3Wrv7/tXUdLGA4MMg/h/i6rl3UDvkmEVHUj4h7ZzEUncfgKOZ8Yq3wqC3M1PXdFmlOO0youyNzA+CIA80l09uxAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/badge_broadcast_gold.data.png":
/*!********************************************************!*\
  !*** ./src/chatbox/imgs/badge_broadcast_gold.data.png ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_1736__) => {

module.exports=(__nested_webpack_require_1736__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAzUExURQAAAAsICKyWbaCGWgAAAWtiTzAgF11CIIdmNjIrICEdHNukUc+cJXpWKUolG39ANQAAAPj2qJUAAAARdFJOU/////////////////////8AJa2ZYgAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAE5JREFUGFc9jEsWgDAIA/mkQFup3P+0oguzmuS9DNWfRhYR5Rehw8wDRRg2RedyEGTo3tEzcSD2lXCmco/MPKdvK63j65Xh5D3xebs0VD3I+wPSC+2UNgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/badge_broadcast_silver.data.png":
/*!**********************************************************!*\
  !*** ./src/chatbox/imgs/badge_broadcast_silver.data.png ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_2543__) => {

module.exports=(__nested_webpack_require_2543__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAwUExURQAAAAsICCEdHJaWlgAAAUZHR2ZmZlpVVzs8OoZ/fq2trdPT08bGxzAwL+Dg4AAAADwgKvoAAAAQdFJOU////////////////////wDgI10ZAAAACW5vUEUAAAAAAAAAAAChinLVAAAASklEQVQYVz3MSQ6AMAwDwOxJS03+/1tKJfBpZFmm/nPI/FFU5dA8IrKsycZkVRtpxBHzWupu1Ki6F0T2ljO9dnk4gHB+z6QAcPcD17YDp+hpqhwAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/chatbox/imgs/badgehcim.data.png":
/*!*********************************************!*\
  !*** ./src/chatbox/imgs/badgehcim.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_3286__) => {

module.exports=(__nested_webpack_require_3286__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAMAAACecocUAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAYUExURQAAAFwAAP8AAP99c9YAAAAAAf9bWwAAAKtA5IgAAAAIdFJOU/////////8A3oO9WQAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAEFJREFUGFdlzUEOADEIAkClUP7/46X1skn1MiaoZfeUXW6sBZDtalyfIZZC6Zh/k9iJxM4AzW5uJoJwfPvxPLb9AWP8AZpOsiu3AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/badgeironman.data.png":
/*!************************************************!*\
  !*** ./src/chatbox/imgs/badgeironman.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_3985__) => {

module.exports=(__nested_webpack_require_3985__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA0AAAAJCAMAAADepFZYAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAbUExURQAAAFpVVzIrIMbGxwAAATs8OiEdHDAwLwAAANYXi4cAAAAJdFJOU///////////AFNPeBIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAA9SURBVBhXXcxBDgAgCANBi7jy/xcL6sHYBNK5tMWbXzLtJlmqX/WSD8lVN+RHlSPym1kKb8G8K5NcAbaAWKaXAn7TGFt5AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/badgepmod.data.png":
/*!*********************************************!*\
  !*** ./src/chatbox/imgs/badgepmod.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_4672__) => {

module.exports=(__nested_webpack_require_4672__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA0AAAALCAMAAACTbPdTAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAASUExURZaWlgAAAODg4KKiogAAAQAAAJ/NAioAAAAGdFJOU///////ALO/pL8AAAAJbm9QRQAAAAAAAAAAAKGKctUAAAA3SURBVBhXbYxJDgAwCAKJy/+/XMT20FYwZOYikJW9sAJz7WcEc9e+JuyAz26jRtQR29TJcJK5AISjAaw7YIwNAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/badgepmodvip.data.png":
/*!************************************************!*\
  !*** ./src/chatbox/imgs/badgepmodvip.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_5347__) => {

module.exports=(__nested_webpack_require_5347__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA0AAAALCAMAAACTbPdTAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAPUExURQAAAJaWlq2trQAAAQAAAIuYQeUAAAAFdFJOU/////8A+7YOUwAAAAlub1BFAAAAAAAAAAAAoYpy1QAAAEJJREFUGFc1jYkNADEIwzB0/5kvjy5FFIsA8yL6ldhiCFFwiETWuHHnUFtOEOzZ6zkuz3Ndsl0Tp+qiSVWT6L/M8j52yAF52AYCBwAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/badgevip.data.png":
/*!********************************************!*\
  !*** ./src/chatbox/imgs/badgevip.data.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_6018__) => {

module.exports=(__nested_webpack_require_6018__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA0AAAALCAMAAACTbPdTAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAMUExURQAAACGI3iFR3gAAANRJuUMAAAAEdFJOU////wBAKqn0AAAACW5vUEUAAAAAAAAAAAChinLVAAAAPUlEQVQYVzWNgQ0AIAjDmPz/sxuFxajNilZPxAHpgUMyDZYmpqRSENc2F+Nmbs3M8QjVmVmYubGZ7mc99QddvAEtcdAPjgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/chatLegacyBorder.data.png":
/*!****************************************************!*\
  !*** ./src/chatbox/imgs/chatLegacyBorder.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_6709__) => {

module.exports=(__nested_webpack_require_6709__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAQAAAAPCAIAAABMVPnqAAAAIUlEQVQYV2P4jwRAnNk92RA0mDjzJuRCOUAWlAMF//8DAJmOfBu3Ydq7AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/chat_link.data.png":
/*!*********************************************!*\
  !*** ./src/chatbox/imgs/chat_link.data.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_7212__) => {

module.exports=(__nested_webpack_require_7212__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAZ0lEQVQY02NgwAOsbaz+gzADIeDm7v7f19Tnf4RJKH4NIIUgRTA+Xg3oikE2YCgGKQBhkGK8CmGeMTDQBysG0Vg9CBLwAZqA7IxwkxAwxlDoi6QQphhnWKL7HKdiZA0gG1zxKSQltgDRP03waXSEwgAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/chatbubble.data.png":
/*!**********************************************!*\
  !*** ./src/chatbox/imgs/chatbubble.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_7815__) => {

module.exports=(__nested_webpack_require_7815__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA0AAAAJCAYAAADpeqZqAAAAoElEQVQoU5WRwQ3DIAxF2Sg9t1KvySSM0d46AgNw55aukAzAAizADE6eIxCy1EMPH4z9nxHGiYjq835JCEG+69rF2Xsv87zIbZpO2+XtQM5ZSilSa1URo23btUGMsYOOThRGYARpZkGFKFjAQiil9D/EbQrxSBIYrCzQb3o873qggMkam3gP01SIaRCQHE00ItfMDdDpsTTwl/gS9ssr7gAl2lnMS+w6XAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/entertochat.data.png":
/*!***********************************************!*\
  !*** ./src/chatbox/imgs/entertochat.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_8498__) => {

module.exports=(__nested_webpack_require_8498__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABgAAAAJCAYAAAAo/ezGAAAAdElEQVQ4T62RSw7AIAhEOQTH8WCsXbvmuhRsTdQipqYmz88MJI4CM0tDB/zNPelipJT06Bee4oo9UbqV1+uDscLS5Zx163ulFN2OOiLWVxnEE1YpGq74FSISu/GsGy/hhDBBixgVecw9YYL6GQ+9uWPfI3ABK/Blt6d3IYgAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/chatbox/imgs/filterbutton.data.png":
/*!************************************************!*\
  !*** ./src/chatbox/imgs/filterbutton.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_9125__) => {

module.exports=(__nested_webpack_require_9125__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAPCAYAAADUFP50AAAAaElEQVQ4T9XLsQ2AMAxEUc+BxBysySTsQcEI7EF36JAcORdHoUMUv8jFz65jgXZuU2lf5zQD0OARonkg4+Eb6PcFMgc9GG8ryHpQ76qHp1D/WTOwCPXPS8fvINM/Lx1/CHWPpeMIAbAba/5W9dGOZAMAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/chatbox/imgs/gameall.data.png":
/*!*******************************************!*\
  !*** ./src/chatbox/imgs/gameall.data.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_9716__) => {

module.exports=(__nested_webpack_require_9716__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAo0lEQVQ4T6XMsQkCQRAF0KnA5DA0MDG3A2uwlQuN7cVY07vgAkPBTA3FAixA5esXvuyeC+O6Cw+Gv/PH7oc5Hsf/sGupjxx2289Ar2c51LNrNwX1FzzqRQc0e6ID580YxFCzJ9y1y3oIYphDPTutBiCGmj3hbvmB3XICYphDveiA5hQVRfnXge1i9KY8/A9p7zP0FzzqlR9o6wolrEmEv2rqCk/yGcSB9N78JQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/gamefilter.data.png":
/*!**********************************************!*\
  !*** ./src/chatbox/imgs/gamefilter.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_10399__) => {

module.exports=(__nested_webpack_require_10399__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAqUlEQVQ4T63MsQrCQBAE0P1LSzs7Sy3tBEvtFDFNwMYurVhY2lgKfkHyBXbJ6AQm3AnHcaeBB3ubnbGiaVE0XZZD3cI2jxd+MRR8Pkvxv4LVrQa5yxjeKucVaI7xChaXJ4jLFMp5BZpjvIJ5dQdxqTnGvbXZ6QriMoVyNi3PIC41E3+6bwVFe69gsq8QoqAMBaGDGOVsvD5mFzDbF7jUHPJ9b6PlDvm2eAMxAQErxoTm+QAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/gameoff.data.png":
/*!*******************************************!*\
  !*** ./src/chatbox/imgs/gameoff.data.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_11078__) => {

module.exports=(__nested_webpack_require_11078__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAdUlEQVQ4T62MsQrAIAxE/bwOhS7tkMHBLi79/zVthAvaCjZq4MFx5J6jePEI8wTPOQsq2M/YJcAuBQHlH/LfuQILVQFyi0Kw+cCClMgt8t9CYEEFK3kVINfAEKBPI0FK5BoYAvSFwIIKloNYeD+0+Ah6GRQQ30BWZJSYN2VIAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/legacyreport.data.png":
/*!************************************************!*\
  !*** ./src/chatbox/imgs/legacyreport.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_11705__) => {

module.exports=(__nested_webpack_require_11705__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAACEAAAALCAYAAADx0+Q/AAAAlElEQVQ4T72OCQ4AIQgD/f+nXYuUgGLiukeTQVq8Sp2F7FdQWi2GKmz6CEh6Mfq4DQf/FfaO1EFt1ocKRX+SQ35lD/ErPcOafICfgp7kEGe9tF6gwYKiK/GaLrjbOx/mwSiQ9Ty8uuCgJ5YFo0zeKc0W+30+3kkgmYyXpJ5oZt5lRpZn+4DszQYbpI+fkoY7vPeJWi767hYjK0Ud6gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/imgs/minusbutton.data.png":
/*!***********************************************!*\
  !*** ./src/chatbox/imgs/minusbutton.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_12372__) => {

module.exports=(__nested_webpack_require_12372__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAABL0lEQVQoU2PIzMk01hbUVGDDg4AKgMoYgFRLCPOOOtbdLWxAtLeTHYIgXKA4EAEVAJUxaMizbilju75E9u4mNUx0Y7UqUGp3MzdQGYOKLCuQ9XCH7qPdxg+2Gt3aYgQkgWw4AqoGKgAqQ1EKVIep9NY2LRSlt5ZrXV6tc3axNgRdXgbiQhDQ1J1VfDClNcJAuSBTJjjy1GNy1WSyUWI0kWa8PE8JRem9VcaYirRFGIAIaOHmIhEUpQ9X2D1e74WGgIK3ZhluzRWFKt1VKXNvjgYE3exVujNZFYiQGViUQuSudCkD0bkGJSAJVAckUZQC+demaMBJoDpktClVEqRUVY6jOYRvR5HsznoVILklUxpIQhCQDUE1LtxAZQw6JgZAHfKSLLLi2BFQCqhAx8QAACI62b/ivxHFAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/chatbox/imgs/plusbutton.data.png":
/*!**********************************************!*\
  !*** ./src/chatbox/imgs/plusbutton.data.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_13239__) => {

module.exports=(__nested_webpack_require_13239__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAABT0lEQVQoU2PIzMk01hbUVGDDg4AKgMoYgFRLCPOOOtbdLWxAtLeTHYIgXKA4EAEVAJUxaMizbilju75E9u4mNSC6sVoVguBcoNTuZm6gMgYVWVYg6+EO3Ue7jYHo3irjIFOmYAumWztBXCC6tVwLqACoDEXprS1GQARUCkQQdSDBbahKgVovr9Y5u1j78jItTz0mIAJyIQjohp1VfDClNcJwFa6a6OjyPCUUpUAnAkUd1BiByEYJBQEt3FwkgqL04Qq7x+u9gCRQ2kKOEc69NcsQoXRXpcy9ORoQdKVL2USaEYhu9irdmawKREDG1lxRdKVACaAZ2iIMQHS1UweoDYJQlAL516aAjAQqvTLJBogutBmca1CCoE2pkiClqnIczSF8O4pkd9arAMktmdJAEoKAKoBcIKpx4QYqY9AxMQDqkJdkkRXHjoBSQAU6JgYAwvDKbZkKUHAAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/chatbox/imgs/reportbutton.data.png":
/*!************************************************!*\
  !*** ./src/chatbox/imgs/reportbutton.data.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_14158__) => {

module.exports=(__nested_webpack_require_14158__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA8AAAAQCAYAAADJViUEAAABAElEQVQ4T6WSvwtBURTHj0V+FknyB6AMZCH8ATbxByijwb9gsFsMBrvJaFAGu00sJilltlp0+N7Xua7rySuvPr1z7z2f77m9Ht0PdQbPR9cm2P8G3TZlBli4yUCabd5kqUG/W+FmI+8aJtB1lWUAWWrIvXaSS8WsCpHA9cg5E1xlQQJOi5y6RToVVQHST8d5nAEWUguXpSNDAoOOswc+5P0sxgL2MNkUzV4lo3E7DaoNvAWIkbCfC5moYtIL6OCfcqsWUqDGVATZAVqwZbAeJ/QbVyfy8WyYesnm5G+gBwG4gUwG+iPZgs3OkATPshuEHwDYB16g86LKwD7wwh8y0wNntoLFjD8QsQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/chatbox/index.ts":
/*!******************************!*\
  !*** ./src/chatbox/index.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_14909__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultcolors = void 0;
const a1lib = __importStar(__nested_webpack_require_14909__(/*! alt1/base */ "alt1/base"));
const base_1 = __nested_webpack_require_14909__(/*! alt1/base */ "alt1/base");
const OCR = __importStar(__nested_webpack_require_14909__(/*! alt1/ocr */ "alt1/ocr"));
const base_2 = __nested_webpack_require_14909__(/*! alt1/base */ "alt1/base");
let chatfont = __nested_webpack_require_14909__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
let fonts = [
    { name: "10pt", lineheight: 14, badgey: -9, dy: 2, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/10pt.fontmeta.json */ "./src/fonts/chatbox/10pt.fontmeta.json") },
    { name: "12pt", lineheight: 16, badgey: -9, dy: -1, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/12pt.fontmeta.json */ "./src/fonts/chatbox/12pt.fontmeta.json") },
    { name: "14pt", lineheight: 18, badgey: -10, dy: -3, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/14pt.fontmeta.json */ "./src/fonts/chatbox/14pt.fontmeta.json") },
    { name: "16pt", lineheight: 21, badgey: -10, dy: -6, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/16pt.fontmeta.json */ "./src/fonts/chatbox/16pt.fontmeta.json") },
    { name: "18pt", lineheight: 23, badgey: -11, dy: -8, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/18pt.fontmeta.json */ "./src/fonts/chatbox/18pt.fontmeta.json") },
    { name: "20pt", lineheight: 25, badgey: -11, dy: -11, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/20pt.fontmeta.json */ "./src/fonts/chatbox/20pt.fontmeta.json") },
    { name: "22pt", lineheight: 27, badgey: -12, dy: -13, def: __nested_webpack_require_14909__(/*! ../fonts/chatbox/22pt.fontmeta.json */ "./src/fonts/chatbox/22pt.fontmeta.json") },
];
const imgs = (0, base_2.webpackImages)({
    plusbutton: __nested_webpack_require_14909__(/*! ./imgs/plusbutton.data.png */ "./src/chatbox/imgs/plusbutton.data.png"),
    minusbutton: __nested_webpack_require_14909__(/*! ./imgs/minusbutton.data.png */ "./src/chatbox/imgs/minusbutton.data.png"),
    filterbutton: __nested_webpack_require_14909__(/*! ./imgs/filterbutton.data.png */ "./src/chatbox/imgs/filterbutton.data.png"),
    chatbubble: __nested_webpack_require_14909__(/*! ./imgs/chatbubble.data.png */ "./src/chatbox/imgs/chatbubble.data.png"),
    chatLegacyBorder: __nested_webpack_require_14909__(/*! ./imgs/chatLegacyBorder.data.png */ "./src/chatbox/imgs/chatLegacyBorder.data.png"),
    entertochat: __nested_webpack_require_14909__(/*! ./imgs/entertochat.data.png */ "./src/chatbox/imgs/entertochat.data.png"),
    gameoff: __nested_webpack_require_14909__(/*! ./imgs/gameoff.data.png */ "./src/chatbox/imgs/gameoff.data.png"),
    gamefilter: __nested_webpack_require_14909__(/*! ./imgs/gamefilter.data.png */ "./src/chatbox/imgs/gamefilter.data.png"),
    gameall: __nested_webpack_require_14909__(/*! ./imgs/gameall.data.png */ "./src/chatbox/imgs/gameall.data.png"),
    legacyreport: __nested_webpack_require_14909__(/*! ./imgs/legacyreport.data.png */ "./src/chatbox/imgs/legacyreport.data.png"),
    reportbutton: __nested_webpack_require_14909__(/*! ./imgs/reportbutton.data.png */ "./src/chatbox/imgs/reportbutton.data.png"),
});
const chatbadges = (0, base_2.webpackImages)({
    vip: __nested_webpack_require_14909__(/*! ./imgs/badgevip.data.png */ "./src/chatbox/imgs/badgevip.data.png"),
    pmod: __nested_webpack_require_14909__(/*! ./imgs/badgepmod.data.png */ "./src/chatbox/imgs/badgepmod.data.png"),
    pmodvip: __nested_webpack_require_14909__(/*! ./imgs/badgepmodvip.data.png */ "./src/chatbox/imgs/badgepmodvip.data.png"),
    broadcast_gold: __nested_webpack_require_14909__(/*! ./imgs/badge_broadcast_gold.data.png */ "./src/chatbox/imgs/badge_broadcast_gold.data.png"),
    broadcast_silver: __nested_webpack_require_14909__(/*! ./imgs/badge_broadcast_silver.data.png */ "./src/chatbox/imgs/badge_broadcast_silver.data.png"),
    broadcast_bronze: __nested_webpack_require_14909__(/*! ./imgs/badge_broadcast_bronze.data.png */ "./src/chatbox/imgs/badge_broadcast_bronze.data.png"),
    ironman: __nested_webpack_require_14909__(/*! ./imgs/badgeironman.data.png */ "./src/chatbox/imgs/badgeironman.data.png"),
    hcim: __nested_webpack_require_14909__(/*! ./imgs/badgehcim.data.png */ "./src/chatbox/imgs/badgehcim.data.png"),
    chatlink: __nested_webpack_require_14909__(/*! ./imgs/chat_link.data.png */ "./src/chatbox/imgs/chat_link.data.png"),
});
const badgemap = {
    vip: "\u2730",
    pmod: "\u2655",
    pmodvip: "\u2655",
    broadcast_gold: "\u2746",
    broadcast_silver: "\u2746",
    broadcast_bronze: "\u2746",
    ironman: "\u26AF",
    hcim: "\u{1F480}",
    chatlink: "\u{1F517}", //LINK SYMBOL
};
exports.defaultcolors = [
    [0, 255, 0],
    [0, 255, 255],
    [0, 175, 255],
    [0, 0, 255],
    [255, 82, 86],
    [159, 255, 159],
    [0, 111, 0],
    [255, 143, 143],
    [255, 152, 31],
    [255, 111, 0],
    [255, 255, 0],
    //[239, 0, 0],//messes up broadcast detection [255,0,0]
    [239, 0, 175],
    [255, 79, 255],
    [175, 127, 255],
    //[48, 48, 48],//fuck this color, its unlegible for computers and people alike
    [191, 191, 191],
    [127, 255, 255],
    [128, 0, 0],
    [255, 255, 255],
    [127, 169, 255],
    [255, 140, 56],
    [255, 0, 0],
    [69, 178, 71],
    [164, 153, 125],
    [215, 195, 119] //interface preset color
];
class ChatBoxReader {
    constructor() {
        //settings
        this.readargs = {
            colors: exports.defaultcolors.map(c => a1lib.mixColor(c[0], c[1], c[2]))
        };
        this.minoverlap = 2;
        this.diffRead = true;
        this.diffReadUseTimestamps = true;
        this.forwardnudges = defaultforwardnudges.slice();
        this.backwardnudges = defaultbackwardnudges.slice();
        //state
        this.pos = null;
        this.debug = null;
        this.overlaplines = [];
        this.lastTimestamp = -1;
        this.lastTimestampUpdate = 0;
        this.addedLastread = false;
        this.font = null;
        this.lastReadBuffer = null;
    }
    readChatLine(box, imgdata, imgx, imgy, font, ocrcolors, linenr) {
        var liney = box.line0y - linenr * font.lineheight + font.dy;
        let ctx = {
            badgedy: font.badgey,
            baseliney: liney + box.rect.y - imgy,
            colors: ocrcolors,
            font: font.def,
            forward: true,
            imgdata,
            leftx: box.line0x + box.rect.x - imgx,
            rightx: box.line0x + box.rect.x - imgx,
            text: "",
            fragments: [],
            addfrag(frag) {
                if (this.forward) {
                    this.fragments.push(frag);
                    this.text += frag.text;
                    this.rightx = frag.xend;
                }
                else {
                    this.fragments.unshift(frag);
                    this.text = frag.text + this.text;
                    this.leftx = frag.xstart;
                }
            }
        };
        if (!box.leftfound) {
            let col = OCR.getChatColor(imgdata, { x: ctx.rightx - 5, y: ctx.baseliney - 10, width: 10, height: 10 }, ocrcolors);
            if (!col) {
                return { text: "", fragments: [], basey: liney };
            }
            let pos = OCR.findChar(imgdata, font.def, col, ctx.rightx - 5, ctx.baseliney, font.def.width, 1);
            if (!pos) {
                return { text: "", fragments: [], basey: liney };
            }
            ctx.rightx = pos.x;
            ctx.leftx = pos.x;
        }
        for (let dirforward of [false, true]) {
            if (box.leftfound && !dirforward) {
                continue;
            }
            ctx.forward = dirforward;
            let nudges = (dirforward ? this.forwardnudges : this.backwardnudges);
            retryloop: while (true) {
                for (let nudge of nudges) {
                    let m = ctx.text.match(nudge.match);
                    if (m) {
                        if (nudge.fn(ctx, m)) {
                            continue retryloop;
                        }
                    }
                }
                break;
            }
        }
        ctx.fragments.forEach(f => { f.xstart += imgx; f.xend += imgx; });
        if (!box.leftfound) {
            let found = false;
            let extraoffset = 0;
            //ignore lines with news in them since the preceeding news icon often doesn't match in backward reads
            if (ctx.text.match(/^(\[\w)/i) && ctx.text.indexOf("News") == -1) {
                found = true;
            }
            if (found) {
                let dx = ctx.fragments[0].xstart - box.rect.x - extraoffset;
                box.rect.x += dx;
                box.rect.width -= dx;
                box.leftfound = true;
                console.log("found box left because of chat contents", ctx.text);
            }
        }
        return { text: ctx.text, fragments: ctx.fragments, basey: ctx.baseliney + imgy };
    }
    read(img) {
        if (!this.pos) {
            return null;
        }
        var box = this.pos.mainbox;
        var leftmargin = (box.leftfound ? 0 : 300);
        let imgx = box.rect.x - leftmargin;
        let imgy = box.rect.y;
        let imgdata;
        if (img) {
            imgdata = img.toData(imgx, imgy, box.rect.width + leftmargin, box.rect.height);
        }
        else {
            imgdata = a1lib.capture(imgx, imgy, box.rect.width + leftmargin, box.rect.height);
        }
        this.lastReadBuffer = new base_1.ImgRefData(imgdata, imgx, imgy);
        //add timestamp colors if needed
        //TODO
        if (true) {
            var cols = [a1lib.mixColor(127, 169, 255), a1lib.mixColor(255, 255, 255)];
            for (var a in cols) {
                if (this.readargs.colors.indexOf(cols[a]) == -1) {
                    this.readargs.colors.push(cols[a]);
                }
            }
        }
        var ocrcolors = this.readargs.colors.map(c => a1lib.unmixColor(c));
        if (!this.font) {
            for (let font of fonts) {
                let line1 = this.readChatLine(box, imgdata, imgx, imgy, font, ocrcolors, 0);
                let line2 = this.readChatLine(box, imgdata, imgx, imgy, font, ocrcolors, 1);
                let m = (line1.text + line2.text).match(/\w/g);
                if (m && m.length > 10) {
                    this.font = font;
                    break;
                }
            }
        }
        if (!this.font) {
            return null;
        }
        var readlines = [];
        var newlines = [];
        let hadtimestampless = false;
        for (var line = 0; true; line++) {
            var liney = box.line0y - line * this.font.lineheight + this.font.dy;
            if (liney - this.font.lineheight < 0) {
                newlines = readlines;
                break;
            }
            let newline = this.readChatLine(box, imgdata, imgx, imgy, this.font, ocrcolors, line);
            readlines.unshift(newline);
            //combine with previous reads
            if (this.diffRead) {
                let time = ChatBoxReader.getMessageTime(newline.text);
                if (this.diffReadUseTimestamps && !this.addedLastread && !hadtimestampless && time != -1 && this.lastTimestamp != -1) {
                    //don't block messages in the same second as last update
                    if (Date.now() > this.lastTimestampUpdate + 1000) {
                        const maxtime = 24 * 60 * 60;
                        let diff = time - this.lastTimestamp;
                        //wrap around at 00:00:00
                        if (diff < -maxtime / 2) {
                            diff += maxtime;
                        }
                        //don't accept messages with older timestamp
                        if (diff <= 0) {
                            newlines = readlines.slice(1);
                            break;
                        }
                    }
                }
                else {
                    //can not use timestamps if there is a msg without timestamp in the same batch
                    hadtimestampless = true;
                }
                if (readlines.length >= this.overlaplines.length && this.overlaplines.length >= this.minoverlap) {
                    var matched = true;
                    for (let a = 0; a < this.overlaplines.length; a++) {
                        if (!this.matchLines(this.overlaplines[a].text, readlines[a].text)) {
                            matched = false;
                            break;
                        }
                    }
                    if (matched) {
                        newlines = readlines.slice(this.overlaplines.length, readlines.length);
                        break;
                    }
                }
            }
        }
        //update the last message timestamp
        this.addedLastread = newlines.length != 0;
        for (let a = newlines.length - 1; a >= 0; a--) {
            let time = ChatBoxReader.getMessageTime(newlines[a].text);
            if (time != -1) {
                this.lastTimestamp = time;
                this.lastTimestampUpdate = Date.now();
                break;
            }
        }
        //add new lines
        this.overlaplines = this.overlaplines.concat(newlines);
        if (this.overlaplines.length > this.minoverlap) {
            this.overlaplines.splice(0, this.overlaplines.length - this.minoverlap);
        }
        //console.log("Read chat attempt time: " + (Date.now() - t));
        //for (let a = 0; a < newlines.length; a++) { console.log(newlines[a]); }
        return newlines;
    }
    //convert some similar characters to prevent problems when a character is slightly misread
    simplifyLine(str) {
        str = str.replace(/[\[\]\.\':;,_ ]/g, "");
        str = str.replace(/[|!lIji]/g, "l");
        return str;
    }
    matchLines(line1, line2) {
        return this.simplifyLine(line1) == this.simplifyLine(line2);
    }
    checkLegacyBG(buf, x, y) {
        return buf.getColorDifference(x, y, 155, 140, 107) < 20;
    }
    find(imgornull) {
        if (!imgornull) {
            imgornull = a1lib.captureHoldFullRs();
        }
        if (!imgornull) {
            return null;
        }
        var img = imgornull;
        var toprights = [];
        img.findSubimage(imgs.plusbutton).forEach(loc => toprights.push({ x: loc.x + 5, y: loc.y + 21, type: "hidden" }));
        img.findSubimage(imgs.filterbutton).forEach(loc => toprights.push({ x: loc.x + 19, y: loc.y + 19, type: "hidden" }));
        img.findSubimage(imgs.minusbutton).forEach(loc => toprights.push({ x: loc.x + 5, y: loc.y + 21, type: "full" }));
        var botlefts = [];
        img.findSubimage(imgs.chatbubble).forEach(loc => {
            //107,2 press enter to chat
            //102,2 click here to chat
            var data = img.toData(loc.x + 102, loc.y + 1, 28 + (107 - 102), 10);
            if (data.pixelCompare(imgs.entertochat, 0, 1) != Infinity || data.pixelCompare(imgs.entertochat, (107 - 102), 1) != Infinity) {
                botlefts.push(loc);
            }
            //i don't even know anymore some times the bubble is 1px higher (i think it might be java related)
            else if (data.pixelCompare(imgs.entertochat, 0, 0) != Infinity || data.pixelCompare(imgs.entertochat, (107 - 102), 0) != Infinity) {
                loc.y -= 1;
                botlefts.push(loc);
            }
            else {
                var pixel = img.toData(loc.x, loc.y - 6, 1, 1);
                var pixel2 = img.toData(loc.x, loc.y - 5, 1, 1);
                if (pixel.data[0] == 255 && pixel.data[1] == 255 && pixel.data[2] == 255) {
                    botlefts.push(loc);
                }
                //the weird offset again
                else if (pixel2.data[0] == 255 && pixel2.data[1] == 255 && pixel2.data[2] == 255) {
                    loc.y -= 1;
                    botlefts.push(loc);
                }
                else {
                    //console.log("unlinked quickchat bubble " + JSON.stringify(loc));
                }
            }
        });
        img.findSubimage(imgs.chatLegacyBorder).forEach(loc => {
            botlefts.push({ x: loc.x, y: loc.y - 1 });
        });
        //check if we're in full-on legacy
        if (botlefts.length == 1 && toprights.length == 0) {
            //cheat in a topright without knowing it's actual height
            var pos = img.findSubimage(imgs.legacyreport);
            if (pos.length == 1) {
                toprights.push({ x: pos[0].x + 32, y: pos[0].y - 170, type: "legacy" });
            }
        }
        var groups = [];
        var groupcorners = function () {
            var done = true;
            for (var a in toprights) {
                if (groups.find(q => q.topright == toprights[a])) {
                    continue;
                }
                done = false;
                for (var b in botlefts) {
                    if (groups.find(q => q.botleft == botlefts[b])) {
                        continue;
                    }
                    var group = {
                        timestamp: false,
                        type: "main",
                        leftfound: false,
                        topright: toprights[a],
                        botleft: botlefts[b],
                        rect: new a1lib.Rect(botlefts[b].x, toprights[a].y, toprights[a].x - botlefts[b].x, botlefts[b].y - toprights[a].y),
                        line0x: 0,
                        line0y: 0
                    };
                    if (groups.find(q => q.rect.overlaps(group.rect))) {
                        continue;
                    }
                    groups[groups.length] = group;
                    if (groupcorners()) {
                        return true;
                    }
                    groups.splice(groups.length - 1, 1);
                }
            }
            return done;
        };
        if (!groupcorners()) {
            return null;
        }
        var mainbox = null;
        groups.forEach(group => {
            let buf = img.toData(group.rect.x - 110, group.rect.y + group.rect.height - 5, 150, 20);
            let nameread = OCR.readLine(buf, chatfont, [255, 255, 255], 110, 14, false, true);
            if (nameread) {
                var d = 0;
                if (nameread.text == "Clan Chat") {
                    group.type = "cc";
                    d = 62;
                }
                else if (nameread.text == "Friends Chat") {
                    group.type = "fc";
                    d = 76;
                }
                else if (nameread.text == "Group Chat") {
                    group.type = "gc";
                    d = 69;
                }
                else if (nameread.text == "Guest Clan Chat") {
                    group.type = "gcc";
                    d = 98;
                }
                if (d != 0) {
                    group.rect.x -= d;
                    group.rect.width += d;
                    group.leftfound = true;
                }
            }
            if (!group.leftfound && group.topright.type == "full") {
                var pos = [];
                if (pos.length == 0) {
                    pos = img.findSubimage(imgs.gameall, Math.max(0, group.rect.x - 300), group.rect.y - 22, 310, 16);
                }
                if (pos.length == 0) {
                    pos = img.findSubimage(imgs.gamefilter, Math.max(0, group.rect.x - 300), group.rect.y - 22, 310, 16);
                }
                if (pos.length == 0) {
                    pos = img.findSubimage(imgs.gameoff, Math.max(0, group.rect.x - 300), group.rect.y - 22, 310, 16);
                }
                if (pos.length != 0) {
                    group.leftfound = true;
                    var d = group.rect.x - pos[0].x;
                    group.rect.x -= d;
                    group.rect.width += d;
                }
            }
            //alt1.overLayRect(a1lib.mixcolor(255, 255, 255), group.rect.x, group.rect.y, group.rect.width, group.rect.height, 10000, 2);
            //alt1.overLayTextEx(group.type, a1lib.mixcolor(255, 255, 255), 20, group.rect.x + group.rect.width / 2 | 0, group.rect.y + group.rect.height / 2 | 0, 10000, "", true, true);
            group.line0x = 0;
            group.line0y = group.rect.height - 15; //12;//- 15;//-11//- 9;//-10 before mobile interface update
            if (group.leftfound) {
                group.timestamp = this.checkTimestamp(img, group);
            }
            if (mainbox == null || group.type == "main") {
                mainbox = group;
            }
        });
        if (groups.length == 0 || !mainbox) {
            return null;
        }
        var res = {
            mainbox: mainbox,
            boxes: groups
        };
        this.pos = res;
        return res;
    }
    checkTimestamp(img, pos) {
        //TODO replace this
        return false;
    }
    static getMessageTime(str) {
        let m = str.match(/^\[(\d{2}):(\d{2}):(\d{2})\]/);
        if (!m) {
            return -1;
        }
        return (+m[1]) * 60 * 60 + (+m[2]) * 60 + (+m[3]);
    }
    static getFontColor(buffer, x, y, w, h) {
        var bestscore = -Infinity;
        var bestx = 0, besty = 0;
        var data = buffer.data;
        for (var cx = x; cx < x + w - 1; cx++) {
            for (var cy = y; cy < y + h - 1; cy++) {
                var i1 = 4 * cx + 4 * buffer.width * cy;
                var i2 = 4 * (cx + 1) + 4 * buffer.width * (cy + 1);
                var colorness = data[i1] + data[i1 + 1] + data[i1 + 2];
                var blackness = data[i2] + data[i2 + 1] + data[i2 + 2];
                var score = Math.min(255, 255 + 20 - blackness) * colorness;
                if (score > bestscore) {
                    bestscore = score;
                    bestx = cx;
                    besty = cy;
                }
            }
        }
        return buffer.getPixel(bestx, besty);
    }
}
exports["default"] = ChatBoxReader;
let checkchatbadge = (ctx) => {
    let addspace = ctx.forward && ctx.text.length != 0 && ctx.text[ctx.text.length - 1] != " ";
    for (let badge in chatbadges.raw) {
        let bimg = chatbadges.raw[badge];
        let badgeleft = (ctx.forward ? ctx.rightx + (addspace ? ctx.font.spacewidth : 0) : ctx.leftx - bimg.width);
        let d = ctx.imgdata.pixelCompare(bimg, badgeleft, ctx.baseliney + ctx.badgedy);
        if (d < Infinity) {
            if (addspace) {
                ctx.addfrag({ color: [255, 255, 255], index: -1, xstart: ctx.rightx, xend: badgeleft, text: " " });
            }
            ctx.addfrag({ color: [255, 255, 255], index: -1, text: badgemap[badge], xstart: badgeleft, xend: badgeleft + bimg.width });
            return true;
        }
    }
};
let defaultforwardnudges = [
    {
        //fix for "[" first char
        match: /^$/,
        name: "timestampopen", fn: (ctx) => {
            let timestampopen = OCR.readChar(ctx.imgdata, ctx.font, [255, 255, 255], ctx.rightx, ctx.baseliney, false, false);
            if ((timestampopen === null || timestampopen === void 0 ? void 0 : timestampopen.chr) == "[") {
                ctx.addfrag({ color: [255, 255, 255], index: -1, text: "[", xstart: ctx.rightx, xend: ctx.rightx + timestampopen.basechar.width });
                return true;
            }
        }
    },
    {
        match: /(\] ?|news: ?|^)$/i,
        name: "badge", fn: checkchatbadge
    },
    {
        match: /.*/,
        name: "body", fn: ctx => {
            var data = OCR.readLine(ctx.imgdata, ctx.font, ctx.colors, ctx.rightx, ctx.baseliney, true, false);
            if (data.text) {
                data.fragments.forEach(f => ctx.addfrag(f));
                return true;
            }
        }
    },
    {
        match: /\[[\w: ]+$/,
        name: "timestampclose", fn: ctx => {
            let closebracket = OCR.readChar(ctx.imgdata, ctx.font, [255, 255, 255], ctx.rightx, ctx.baseliney, false, false);
            if ((closebracket === null || closebracket === void 0 ? void 0 : closebracket.chr) == "]") {
                ctx.addfrag({ color: [255, 255, 255], text: "] ", index: -1, xstart: ctx.rightx, xend: ctx.rightx + closebracket.basechar.width + ctx.font.spacewidth });
                return true;
            }
        }
    },
    {
        match: /(^|\]|:)( ?)$/i,
        name: "startline", fn: (ctx, match) => {
            let addspace = !match[2];
            let x = ctx.rightx + (addspace ? ctx.font.spacewidth : 0);
            let best = null;
            let bestcolor = null;
            for (let col of ctx.colors) {
                let chr = OCR.readChar(ctx.imgdata, ctx.font, col, x, ctx.baseliney, false, false);
                if (chr && (!best || chr.sizescore < best.sizescore)) {
                    best = chr;
                    bestcolor = col;
                }
            }
            if (bestcolor) {
                var data = OCR.readLine(ctx.imgdata, ctx.font, bestcolor, x, ctx.baseliney, true, false);
                if (data.text) {
                    if (addspace) {
                        ctx.addfrag({ color: [255, 255, 255], index: -1, text: " ", xstart: ctx.rightx, xend: x });
                    }
                    //console.log("hardrecol", text, data.text);
                    data.fragments.forEach(f => ctx.addfrag(f));
                    return true;
                }
            }
        }
    },
    {
        match: /\w$/,
        name: "whitecolon", fn: ctx => {
            let startx = ctx.rightx;
            let colonchar = OCR.readChar(ctx.imgdata, ctx.font, [255, 255, 255], startx, ctx.baseliney, false, true);
            if ((colonchar === null || colonchar === void 0 ? void 0 : colonchar.chr) == ":") {
                ctx.addfrag({ color: [255, 255, 255], index: -1, text: ": ", xstart: startx, xend: startx + colonchar.basechar.width + ctx.font.spacewidth });
                return true;
            }
        }
    }
];
let defaultbackwardnudges = [
    {
        match: /^(news: |[\w\-_]{1,12}: )/i,
        name: "badge", fn: checkchatbadge
    },
    {
        match: /.*/,
        name: "body", fn: ctx => {
            var data = OCR.readLine(ctx.imgdata, ctx.font, ctx.colors, ctx.leftx, ctx.baseliney, false, true);
            if (data.text) {
                data.fragments.reverse().forEach(f => ctx.addfrag(f));
                return true;
            }
        }
    },
    {
        match: /^\w/,
        name: "whitecolon", fn: ctx => {
            let startx = ctx.leftx - ctx.font.spacewidth;
            let colonchar = OCR.readChar(ctx.imgdata, ctx.font, [255, 255, 255], startx, ctx.baseliney, false, true);
            if ((colonchar === null || colonchar === void 0 ? void 0 : colonchar.chr) == ":") {
                startx -= colonchar.basechar.width;
                ctx.addfrag({ color: [255, 255, 255], index: -1, text: ": ", xstart: startx, xend: startx + colonchar.basechar.width + ctx.font.spacewidth });
                return true;
            }
        }
    }
];


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/aa_8px.fontmeta.json":
/*!****************************************!*\
  !*** ./src/fonts/aa_8px.fontmeta.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":140,"chr":"a","pixels":[0,7,187,255,1,3,221,255,1,6,169,255,1,7,164,132,1,8,255,255,2,3,255,255,2,4,221,0,2,5,196,243,2,7,170,0,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,5,255,255,3,6,187,0,3,8,221,255,3,9,255,0,4,4,254,239,4,5,255,255,4,6,254,204,4,7,255,255,4,8,240,253,4,9,221,0,5,5,240,36,5,6,255,34,5,7,211,41,5,8,255,34,5,9,238,0],"secondary":false},{"width":7,"bonus":175,"chr":"b","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,248,209,1,4,243,178,1,5,230,75,1,6,230,75,1,7,243,178,1,8,246,194,1,9,204,0,2,3,255,255,2,4,204,0,2,5,170,0,2,8,255,255,2,9,187,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,169,255,4,4,254,171,4,7,169,255,4,9,255,0,5,4,204,128,5,5,232,205,5,6,205,233,5,8,170,0,6,6,187,0,6,7,187,0],"secondary":false},{"width":7,"bonus":95,"chr":"c","pixels":[0,5,169,255,0,6,187,255,1,4,187,255,1,6,193,90,1,7,237,201,1,8,164,185,2,3,255,255,2,5,187,0,2,8,255,255,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,221,255,4,4,255,34,4,8,221,255,4,9,255,0,5,4,226,39,5,9,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"d","pixels":[0,5,187,255,0,6,187,255,1,4,169,255,1,6,205,85,1,7,232,187,1,8,203,213,2,3,255,255,2,5,170,0,2,8,255,255,2,9,170,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,203,255,4,4,254,171,4,7,169,255,4,8,187,255,4,9,255,0,5,1,203,255,5,2,225,251,5,3,225,251,5,4,248,227,5,5,244,231,5,6,230,245,5,7,230,245,5,8,237,219,5,9,187,0,6,2,204,0,6,3,221,0,6,4,221,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":7,"bonus":135,"chr":"e","pixels":[0,5,187,255,0,6,169,255,1,4,187,255,1,5,255,255,1,6,209,104,1,7,237,219,2,3,255,255,2,5,255,255,2,6,255,0,2,8,255,255,3,3,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,3,187,255,4,4,255,119,4,5,255,255,4,6,255,0,4,8,221,255,4,9,255,0,5,4,224,155,5,5,227,229,5,6,255,0,5,9,221,0,6,6,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"f","pixels":[0,3,203,255,1,2,221,255,1,3,255,255,1,4,248,227,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,2,1,255,255,2,3,255,255,2,4,255,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0,3,2,255,0,3,4,255,0],"secondary":false},{"width":7,"bonus":200,"chr":"g","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,232,187,1,8,184,189,1,11,153,255,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,11,245,247,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,3,11,221,255,4,3,221,255,4,4,255,136,4,7,153,255,4,8,221,255,4,9,255,85,4,10,203,255,5,3,203,255,5,4,250,226,5,5,239,236,5,6,230,245,5,7,230,245,5,8,241,234,5,9,243,178,5,11,204,0,6,4,204,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,221,0,6,10,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"h","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,243,178,1,4,248,209,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,170,0,2,5,204,0,3,3,255,255,3,4,255,0,4,3,169,255,4,4,255,221,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,175,25,5,5,226,39,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[0,1,237,255,0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,238,0,1,4,211,41,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"j","pixels":[0,11,153,255,1,11,169,255,2,1,203,255,2,3,203,255,2,4,225,251,2,5,225,251,2,6,225,251,2,7,225,251,2,8,225,251,2,9,225,251,3,2,204,0,3,4,204,0,3,5,221,0,3,6,221,0,3,7,221,0,3,8,221,0,3,9,221,0,3,10,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,166,235,2,5,255,255,2,6,255,221,3,3,203,255,3,5,153,0,3,6,255,51,3,7,250,226,3,8,160,217,4,4,204,0,4,8,239,145],"secondary":false},{"width":3,"bonus":75,"chr":"l","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,2,9,255,0],"secondary":false},{"width":10,"bonus":210,"chr":"m","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,153,255,4,4,255,255,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,228,209,5,5,255,68,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0,6,3,255,255,6,5,187,0,7,3,237,255,7,4,255,85,8,4,249,174,8,5,232,243,8,6,225,251,8,7,225,251,8,8,210,247,9,5,170,0,9,6,221,0,9,7,221,0,9,8,221,0,9,9,204,0],"secondary":false},{"width":7,"bonus":140,"chr":"n","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,237,255,4,4,255,85,5,4,249,174,5,5,232,243,5,6,225,251,5,7,225,251,5,8,210,247,6,5,170,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":8,"bonus":120,"chr":"o","pixels":[0,5,187,255,0,6,169,255,1,4,203,255,1,6,209,104,1,7,244,231,2,3,237,255,2,5,204,0,2,8,252,241,3,3,255,255,3,4,238,0,3,8,255,255,3,9,238,0,4,3,237,255,4,4,255,0,4,8,255,255,4,9,255,0,5,4,251,207,5,7,221,255,5,9,255,0,6,5,237,183,6,6,192,225,6,8,221,0,7,6,170,0,7,7,170,0],"secondary":false},{"width":6,"bonus":170,"chr":"p","pixels":[0,3,237,255,0,4,255,255,0,5,187,255,0,6,203,255,0,7,255,255,0,8,221,255,0,9,221,255,0,10,221,255,1,3,255,255,1,4,240,36,1,5,255,0,1,6,187,0,1,7,211,41,1,8,254,239,1,9,221,0,1,10,221,0,1,11,221,0,2,3,255,255,2,4,255,0,2,8,255,255,2,9,238,0,3,3,237,255,3,4,255,34,3,8,237,255,3,9,255,0,4,4,253,240,4,5,255,255,4,6,255,255,4,7,237,255,4,9,238,0,5,5,239,18,5,6,255,17,5,7,255,0,5,8,238,0],"secondary":false},{"width":7,"bonus":165,"chr":"q","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,228,171,1,8,209,207,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,9,170,0,3,3,237,255,3,4,255,17,3,8,237,255,3,9,255,0,4,3,255,255,4,4,255,255,4,5,191,250,4,6,187,255,4,7,255,255,4,8,239,254,4,9,253,223,4,10,221,255,5,4,255,34,5,5,255,34,5,6,196,45,5,7,196,45,5,8,255,34,5,9,240,36,5,10,226,39,5,11,221,0],"secondary":false},{"width":4,"bonus":85,"chr":"r","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,3,187,255,1,4,244,213,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,187,0,2,5,204,0,3,4,255,0],"secondary":false},{"width":6,"bonus":100,"chr":"s","pixels":[0,4,187,255,1,3,255,255,1,5,250,243,1,8,255,255,2,3,255,255,2,4,255,0,2,5,155,196,2,6,246,123,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,6,245,247,3,7,164,132,3,8,255,255,3,9,255,0,4,4,255,17,4,7,250,191,4,9,255,0,5,8,187,0],"secondary":false},{"width":5,"bonus":80,"chr":"t","pixels":[1,2,221,255,1,3,255,255,1,4,235,240,1,5,221,255,1,6,221,255,1,7,169,255,2,3,255,255,2,4,255,34,2,5,226,39,2,6,226,39,2,7,232,93,2,8,249,243,3,4,255,0,3,8,187,209,3,9,238,0,4,9,153,0],"secondary":false},{"width":6,"bonus":135,"chr":"u","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,169,255,1,4,211,41,1,5,226,39,1,6,226,39,1,7,232,93,1,8,249,243,2,8,255,255,2,9,238,0,3,8,203,255,3,9,255,0,4,3,203,255,4,4,221,255,4,5,221,255,4,6,203,255,4,7,255,255,4,8,228,247,4,9,204,0,5,4,211,41,5,5,226,39,5,6,226,39,5,7,211,41,5,8,255,34,5,9,221,0],"secondary":false},{"width":6,"bonus":95,"chr":"v","pixels":[0,3,237,255,1,4,247,141,1,5,245,247,1,6,203,255,2,6,241,54,2,7,255,255,2,8,255,255,3,5,153,255,3,6,255,255,3,7,173,226,3,8,255,51,3,9,255,0,4,3,237,255,4,4,203,255,4,6,153,0,4,7,255,0,4,8,153,0,5,4,238,0,5,5,204,0],"secondary":false},{"width":10,"bonus":170,"chr":"w","pixels":[1,3,153,255,1,4,243,249,1,5,187,255,2,4,153,0,2,5,243,71,2,6,228,171,2,7,243,249,2,8,187,255,3,6,217,239,3,7,248,244,3,8,248,157,3,9,187,0,4,3,169,255,4,4,255,255,4,7,204,0,4,8,238,0,4,9,153,0,5,4,244,231,5,5,255,221,5,6,191,159,6,5,223,19,6,6,237,128,6,7,255,255,6,8,223,253,7,6,239,254,7,7,227,229,7,8,255,119,7,9,221,0,8,3,237,255,8,4,203,255,8,7,238,0,8,8,204,0,9,4,238,0,9,5,204,0],"secondary":false},{"width":6,"bonus":95,"chr":"x","pixels":[0,8,169,255,1,3,169,255,1,4,224,232,1,7,221,255,1,9,170,0,2,4,193,90,2,5,255,255,2,6,240,253,2,8,221,0,3,4,255,255,3,5,155,196,3,6,255,187,3,7,250,191,4,3,221,255,4,5,255,0,4,7,209,104,4,8,255,255,5,4,221,0,5,9,255,0],"secondary":false},{"width":6,"bonus":110,"chr":"y","pixels":[0,3,255,255,0,4,153,255,0,11,221,255,1,4,255,85,1,5,234,222,1,6,228,247,1,11,196,243,2,6,207,21,2,7,246,194,2,8,255,255,2,9,237,255,3,6,237,255,3,7,191,250,3,8,205,85,3,9,255,0,3,10,238,0,4,3,203,255,4,4,221,255,4,7,238,0,4,8,187,0,5,4,204,0,5,5,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"z","pixels":[0,3,153,255,0,8,203,255,1,3,255,255,1,4,153,0,1,7,221,255,1,8,255,255,1,9,204,0,2,3,255,255,2,4,255,0,2,6,255,255,2,8,255,255,2,9,255,0,3,3,255,255,3,4,254,171,3,5,169,255,3,7,255,0,3,8,255,255,3,9,255,0,4,3,255,255,4,4,255,119,4,5,170,0,4,6,170,0,4,8,255,255,4,9,255,0,5,4,255,0,5,9,255,0],"secondary":false},{"width":8,"bonus":155,"chr":"A","pixels":[0,8,153,255,1,6,221,255,1,7,237,255,1,9,153,0,2,3,169,255,2,4,255,255,2,5,187,255,2,6,255,255,2,7,221,0,2,8,238,0,3,1,255,255,3,2,255,255,3,4,170,0,3,5,255,0,3,6,255,255,3,7,255,0,4,2,255,255,4,3,254,239,4,4,184,189,4,6,255,255,4,7,255,0,5,3,255,34,5,4,247,141,5,5,255,255,5,6,255,255,5,7,255,102,6,6,255,85,6,7,255,187,6,8,255,255,7,8,187,0,7,9,255,0],"secondary":false},{"width":7,"bonus":225,"chr":"B","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,4,255,255,2,5,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,1,221,255,4,2,255,85,4,4,255,255,4,5,254,171,4,8,203,255,4,9,255,0,5,2,243,178,5,3,198,219,5,5,255,102,5,6,232,205,5,7,180,217,5,9,204,0,6,3,170,0,6,4,170,0,6,7,187,0,6,8,153,0],"secondary":false},{"width":9,"bonus":155,"chr":"C","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,3,153,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,224,232,2,1,169,255,2,3,221,0,2,4,153,0,2,7,194,135,2,8,237,183,3,1,255,255,3,2,170,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,169,255,6,2,255,102,6,8,169,255,6,9,255,0,7,2,181,48,7,9,170,0],"secondary":false},{"width":8,"bonus":200,"chr":"D","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,8,255,255,3,9,255,0,4,1,203,255,4,2,255,68,4,8,203,255,4,9,255,0,5,2,248,227,5,3,168,207,5,7,221,255,5,9,204,0,6,3,237,128,6,4,223,214,6,5,205,233,6,6,155,196,6,8,221,0,7,5,187,0,7,6,187,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,1,153,255,4,2,255,0,4,6,255,0,4,8,221,255,4,9,255,0,5,2,153,0,5,9,221,0],"secondary":false},{"width":6,"bonus":135,"chr":"F","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,2,255,0,4,6,255,0],"secondary":false},{"width":9,"bonus":200,"chr":"G","pixels":[0,4,169,255,0,5,187,255,1,2,203,255,1,3,153,255,1,5,193,90,1,6,224,155,1,7,237,238,2,1,169,255,2,3,204,0,2,4,153,0,2,7,175,124,2,8,246,194,3,1,255,255,3,2,170,0,3,8,255,255,3,9,187,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,237,255,5,9,255,0,6,1,169,255,6,2,255,85,6,5,255,255,6,7,153,255,6,8,169,255,6,9,238,0,7,2,175,25,7,5,153,255,7,6,255,221,7,7,225,251,7,8,234,222,7,9,170,0,8,6,153,0,8,7,221,0,8,8,221,0,8,9,204,0],"secondary":false},{"width":8,"bonus":200,"chr":"H","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,5,255,255,2,6,255,0,3,5,255,255,3,6,255,0,4,5,255,255,4,6,255,0,5,5,255,255,5,6,255,34,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,255,221,6,7,225,251,6,8,210,247,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[0,1,191,255,0,8,191,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,191,0,2,1,191,255,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,0,2,8,255,191,2,9,255,0,3,2,192,0,3,9,191,0],"secondary":false},{"width":6,"bonus":130,"chr":"J","pixels":[0,6,153,255,0,7,153,255,1,7,194,135,1,8,234,222,2,1,221,255,2,8,255,255,2,9,204,0,3,1,255,255,3,2,226,39,3,8,203,255,3,9,255,0,4,1,203,255,4,2,255,221,4,3,225,251,4,4,225,251,4,5,225,251,4,6,225,251,4,7,166,235,4,9,204,0,5,2,204,0,5,3,221,0,5,4,221,0,5,5,221,0,5,6,221,0,5,7,221,0,5,8,153,0],"secondary":false},{"width":7,"bonus":155,"chr":"K","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,255,255,2,5,255,102,3,3,221,255,3,5,254,171,3,6,224,232,4,1,203,255,4,2,153,255,4,4,221,0,4,6,193,90,4,7,251,242,4,8,173,226,5,2,204,0,5,3,153,0,5,8,247,141,5,9,153,0],"secondary":false},{"width":6,"bonus":115,"chr":"L","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,8,255,255,2,9,255,0,3,8,255,255,3,9,255,0,4,8,255,255,4,9,255,0,5,9,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"M","pixels":[0,1,245,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,0,8,255,255,1,2,251,173,1,3,255,225,1,4,255,85,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,1,9,255,0,2,3,191,83,2,4,249,212,2,5,212,229,3,5,226,119,3,6,249,237,3,7,165,227,4,6,241,245,4,7,245,155,4,8,155,32,5,4,207,255,5,5,191,254,5,7,232,0,6,2,169,255,6,3,223,255,6,5,207,0,6,6,190,0,7,1,245,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,8,2,245,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"N","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,255,255,1,3,235,111,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,221,2,4,163,160,3,4,246,194,3,5,214,223,4,5,214,122,4,6,246,229,5,6,163,160,5,7,255,255,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,225,251,6,7,235,240,6,8,254,204,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":10,"bonus":200,"chr":"O","pixels":[0,4,187,255,0,5,169,255,1,2,203,255,1,3,153,255,1,5,205,85,1,6,226,192,1,7,224,232,2,1,153,255,2,3,204,0,2,4,153,0,2,7,209,145,2,8,234,167,3,1,255,255,3,2,153,0,3,8,255,255,3,9,153,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,153,255,6,2,255,102,6,8,153,255,6,9,255,0,7,2,234,222,7,3,194,201,7,6,169,255,7,7,203,255,7,9,153,0,8,3,225,116,8,4,228,209,8,5,192,225,8,7,170,0,8,8,204,0,9,5,187,0,9,6,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"P","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,1,187,255,4,2,255,136,4,5,187,255,4,6,255,0,5,2,224,155,5,3,239,236,5,6,187,0,6,4,221,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,235,240,2,1,187,255,2,3,221,0,2,7,187,116,2,8,243,178,3,1,255,255,3,2,187,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,237,255,5,2,255,0,5,8,237,255,5,9,255,0,6,2,251,207,6,7,255,255,6,9,238,0,7,3,255,255,7,4,203,255,7,5,221,255,7,6,255,255,7,7,155,196,7,8,254,204,8,4,255,17,8,5,207,21,8,6,221,0,8,7,255,0,8,9,204,0],"secondary":false},{"width":7,"bonus":180,"chr":"R","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,187,4,2,254,239,4,3,203,255,4,4,255,255,4,6,255,68,4,7,250,243,4,8,181,239,5,3,239,18,5,4,204,0,5,5,255,0,5,8,245,107,5,9,170,0],"secondary":false},{"width":6,"bonus":130,"chr":"S","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,1,255,255,2,2,204,0,2,4,198,219,2,5,232,93,2,8,255,255,2,9,238,0,3,1,255,255,3,2,255,0,3,5,255,255,3,8,255,255,3,9,255,0,4,1,169,255,4,2,255,68,4,5,160,217,4,6,255,221,4,7,237,255,4,9,255,0,5,2,170,0,5,7,223,19,5,8,238,0],"secondary":false},{"width":8,"bonus":125,"chr":"T","pixels":[0,1,255,255,1,1,255,255,1,2,255,0,2,1,255,255,2,2,255,34,3,1,255,255,3,2,255,221,3,3,225,251,3,4,225,251,3,5,225,251,3,6,225,251,3,7,225,251,3,8,210,247,4,1,255,255,4,2,255,0,4,3,221,0,4,4,221,0,4,5,221,0,4,6,221,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,255,255,5,2,255,0,6,2,255,0],"secondary":false},{"width":8,"bonus":165,"chr":"U","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,187,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,230,75,1,7,232,187,1,8,184,189,2,8,255,255,3,8,255,255,3,9,255,0,4,8,221,255,4,9,255,0,5,1,203,255,5,2,221,255,5,3,221,255,5,4,221,255,5,5,221,255,5,6,255,255,5,7,237,255,5,9,221,0,6,2,211,41,6,3,226,39,6,4,226,39,6,5,226,39,6,6,223,19,6,7,255,0,6,8,238,0],"secondary":false},{"width":7,"bonus":125,"chr":"V","pixels":[0,1,255,255,0,2,187,255,1,2,255,68,1,3,228,171,1,4,255,255,1,5,153,255,2,4,153,0,2,5,255,85,2,6,228,209,2,7,242,251,3,6,164,185,3,7,255,255,3,8,251,207,4,4,203,255,4,5,237,255,4,8,255,0,4,9,204,0,5,1,169,255,5,2,255,255,5,3,153,255,5,5,204,0,5,6,238,0,6,2,170,0,6,3,255,0,6,4,153,0],"secondary":false},{"width":10,"bonus":245,"chr":"W","pixels":[0,1,255,255,0,2,221,255,1,2,255,17,1,3,237,128,1,4,223,214,1,5,255,255,1,6,203,255,2,5,191,23,2,6,255,136,2,7,255,255,2,8,255,255,3,3,153,255,3,4,237,255,3,5,221,255,3,7,168,103,3,8,255,0,3,9,255,0,4,1,255,255,4,2,255,255,4,3,187,209,4,4,153,0,4,5,238,0,4,6,221,0,5,2,255,102,5,3,254,171,5,4,248,244,5,5,203,255,6,4,170,0,6,5,241,54,6,6,231,150,6,7,255,255,6,8,255,255,7,4,153,255,7,5,237,255,7,6,241,252,7,7,207,188,7,8,255,85,7,9,255,0,8,1,237,255,8,2,237,255,8,3,153,255,8,4,153,171,8,5,153,0,8,6,238,0,8,7,238,0,8,8,153,0,9,2,238,0,9,3,238,0,9,4,153,0],"secondary":false},{"width":7,"bonus":130,"chr":"X","pixels":[0,8,169,255,1,1,187,255,1,2,220,236,1,7,237,255,1,9,170,0,2,2,205,85,2,3,248,227,2,4,166,235,2,5,255,255,2,6,153,255,2,8,238,0,3,3,155,196,3,4,255,255,3,5,248,244,3,6,255,51,3,7,153,0,4,2,237,255,4,5,255,51,4,6,251,207,4,7,186,233,5,1,203,255,5,3,238,0,5,7,225,116,5,8,255,255,6,2,204,0,6,9,255,0],"secondary":false},{"width":7,"bonus":90,"chr":"Y","pixels":[0,1,169,255,1,2,249,243,2,3,248,157,2,4,255,255,3,4,241,234,3,5,254,204,3,6,232,243,3,7,225,251,3,8,210,247,4,3,255,255,4,5,221,0,4,6,204,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,237,255,5,4,255,0,6,2,238,0],"secondary":false},{"width":7,"bonus":140,"chr":"Z","pixels":[0,8,187,255,1,1,255,255,1,7,221,255,1,8,255,255,1,9,187,0,2,1,255,255,2,2,255,0,2,5,203,255,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,203,255,3,6,204,0,3,8,255,255,3,9,255,0,4,1,255,255,4,2,255,221,4,5,204,0,4,8,255,255,4,9,255,0,5,1,187,255,5,2,255,34,5,3,221,0,5,8,153,255,5,9,255,0,6,2,187,0,6,9,153,0],"secondary":false},{"width":7,"bonus":170,"chr":"0","pixels":[0,2,153,255,0,3,221,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,169,255,1,1,187,255,1,3,153,0,1,4,221,0,1,5,255,0,1,6,255,0,1,7,243,71,1,8,237,219,2,1,187,255,2,2,187,0,2,8,205,233,2,9,211,41,3,1,221,255,3,2,205,85,3,8,203,255,3,9,187,0,4,2,243,178,4,3,255,255,4,4,187,255,4,5,187,255,4,6,237,255,4,7,169,255,4,9,204,0,5,3,170,0,5,4,255,0,5,5,187,0,5,6,187,0,5,7,238,0,5,8,170,0],"secondary":false},{"width":7,"bonus":100,"chr":"1","pixels":[1,8,187,255,2,1,203,255,2,2,224,232,2,3,219,218,2,4,187,255,2,5,187,255,2,6,187,255,2,7,187,255,2,8,237,255,2,9,187,0,3,2,218,80,3,3,218,80,3,4,205,85,3,5,205,85,3,6,205,85,3,7,205,85,3,8,241,215,3,9,238,0,4,8,168,207,4,9,204,0],"secondary":false},{"width":7,"bonus":105,"chr":"2","pixels":[1,8,255,255,2,1,187,255,2,6,153,255,2,8,223,214,2,9,255,0,3,1,203,255,3,2,187,0,3,5,153,255,3,7,153,0,3,8,219,218,3,9,187,0,4,1,187,255,4,2,234,167,4,4,203,255,4,6,153,0,4,8,187,255,4,9,187,0,5,2,214,122,5,3,200,152,5,5,204,0,5,9,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"3","pixels":[0,8,203,255,1,1,187,255,1,8,191,250,1,9,204,0,2,1,187,255,2,2,196,45,2,4,187,255,2,5,174,150,2,8,203,255,2,9,187,0,3,2,246,229,3,3,210,247,3,5,241,215,3,6,173,175,3,7,169,255,3,9,204,0,4,3,227,57,4,4,204,0,4,6,228,133,4,7,174,150,4,8,170,0],"secondary":false},{"width":7,"bonus":150,"chr":"4","pixels":[0,6,237,255,1,4,187,255,1,6,219,218,1,7,238,0,2,3,169,255,2,5,187,0,2,6,219,218,2,7,187,0,3,1,187,255,3,2,153,255,3,3,155,112,3,4,193,90,3,6,203,255,3,7,205,85,4,1,187,255,4,2,237,201,4,3,228,209,4,4,205,233,4,5,205,233,4,6,242,251,4,7,241,198,4,8,205,233,5,2,187,0,5,3,187,0,5,4,187,0,5,5,187,0,5,6,224,155,5,7,238,0,5,8,187,0,5,9,187,0],"secondary":false},{"width":7,"bonus":130,"chr":"5","pixels":[1,1,237,255,1,2,187,255,1,3,187,255,1,4,187,255,1,8,207,251,2,1,187,255,2,2,238,0,2,3,187,0,2,4,237,201,2,5,187,0,2,8,187,255,2,9,204,0,3,1,187,255,3,2,187,0,3,4,203,255,3,5,191,23,3,8,203,255,3,9,187,0,4,2,187,0,4,5,251,242,4,6,191,250,4,7,221,255,4,9,204,0,5,6,243,71,5,7,191,23,5,8,221,0],"secondary":false},{"width":7,"bonus":150,"chr":"6","pixels":[0,3,169,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,153,255,1,2,187,255,1,4,209,145,1,5,255,68,1,6,255,0,1,7,246,123,1,8,228,209,2,1,203,255,2,3,187,0,2,4,200,238,2,8,219,218,2,9,187,0,3,1,187,255,3,2,204,0,3,4,203,255,3,5,205,85,3,8,187,255,3,9,187,0,4,2,187,0,4,5,248,227,4,6,255,255,4,7,187,255,4,9,187,0,5,6,221,0,5,7,255,0,5,8,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"7","pixels":[0,1,187,255,1,1,187,255,1,2,187,0,1,8,203,255,2,1,187,255,2,2,187,0,2,6,237,255,2,7,153,255,2,9,204,0,3,1,187,255,3,2,205,85,3,3,153,255,3,4,221,255,3,7,238,0,3,8,153,0,4,1,255,255,4,2,237,201,4,4,153,0,4,5,221,0,5,2,255,0,5,3,187,0],"secondary":false},{"width":7,"bonus":165,"chr":"8","pixels":[1,2,237,255,1,3,221,255,1,6,203,255,1,7,228,247,2,1,203,255,2,3,241,54,2,4,248,209,2,5,186,233,2,7,207,21,2,8,250,226,3,1,187,255,3,2,204,0,3,4,186,233,3,5,221,98,3,6,170,0,3,8,191,250,3,9,221,0,4,1,221,255,4,2,209,104,4,4,169,255,4,5,237,219,4,8,187,255,4,9,187,0,5,2,243,178,5,3,187,209,5,5,204,128,5,6,251,242,5,7,240,253,5,9,187,0,6,3,170,0,6,4,153,0,6,7,238,0,6,8,238,0],"secondary":false},{"width":7,"bonus":160,"chr":"9","pixels":[1,2,221,255,1,3,191,250,1,4,242,251,1,8,153,255,2,1,203,255,2,3,221,0,2,4,191,23,2,5,253,223,2,8,191,250,2,9,153,0,3,1,187,255,3,2,204,0,3,5,191,250,3,6,221,0,3,8,203,255,3,9,187,0,4,1,187,255,4,2,218,139,4,6,200,65,4,7,169,255,4,9,204,0,5,2,228,171,5,3,245,247,5,4,255,255,5,5,255,255,5,6,223,214,5,8,170,0,6,3,153,0,6,4,238,0,6,5,255,0,6,6,255,0,6,7,187,0],"secondary":false},{"width":8,"bonus":130,"chr":"%","pixels":[0,3,255,255,0,8,255,255,1,2,255,255,1,4,255,255,1,7,255,255,1,9,255,0,2,3,255,255,2,5,255,41,2,6,255,255,2,8,255,0,3,4,255,41,3,5,255,255,3,7,255,0,4,4,255,255,4,6,255,92,4,7,255,255,5,3,255,255,5,5,255,0,5,6,255,255,5,8,255,255,6,2,255,255,6,4,255,0,6,7,255,255,6,9,255,0,7,3,255,0,7,8,255,0],"secondary":false},{"width":4,"bonus":80,"chr":"/","pixels":[0,7,153,255,0,8,237,255,0,9,221,255,1,4,187,255,1,5,237,255,1,6,169,255,1,8,153,0,1,9,238,0,1,10,221,0,2,1,221,255,2,2,221,255,2,5,187,0,2,6,238,0,2,7,170,0,3,2,221,0,3,3,221,0],"secondary":false},{"width":7,"bonus":110,"chr":"+","pixels":[0,5,221,255,1,5,255,255,1,6,221,0,2,5,255,255,2,6,255,34,3,2,153,255,3,3,223,253,3,4,225,251,3,5,255,255,3,6,255,221,3,7,225,251,3,8,210,247,4,3,153,0,4,4,221,0,4,5,255,255,4,6,255,0,4,7,221,0,4,8,221,0,4,9,204,0,5,5,255,255,5,6,255,0,6,6,255,0],"secondary":false},{"width":5,"bonus":75,"chr":"?","pixels":[0,1,169,255,1,1,255,255,1,2,170,0,1,6,221,255,1,8,255,255,2,1,255,255,2,2,255,0,2,5,169,255,2,7,221,0,2,9,255,0,3,2,255,255,3,3,221,255,3,6,170,0,4,3,255,17,4,4,221,0],"secondary":false},{"width":2,"bonus":70,"chr":"!","pixels":[0,1,169,255,0,2,187,255,0,3,187,255,0,4,187,255,0,5,187,255,0,6,169,255,0,8,255,255,1,2,181,48,1,3,196,45,1,4,196,45,1,5,196,45,1,6,196,45,1,7,170,0,1,9,255,0],"secondary":false},{"width":8,"bonus":230,"chr":"@","pixels":[0,4,255,255,0,5,255,255,0,6,221,255,0,7,255,255,0,8,187,255,1,3,221,255,1,5,255,0,1,6,255,34,1,7,221,0,1,8,255,68,1,9,250,243,2,2,221,255,2,4,232,93,2,5,255,255,2,6,237,255,2,7,255,255,2,10,248,157,3,2,255,255,3,3,221,0,3,4,255,255,3,6,255,0,3,7,241,54,3,8,254,204,3,10,214,223,3,11,153,0,4,2,237,255,4,3,255,0,4,4,255,255,4,5,255,0,4,8,255,255,4,9,204,0,4,11,187,0,5,3,253,240,5,4,255,255,5,5,255,221,5,6,221,255,5,7,221,255,5,8,237,255,5,9,255,0,6,4,240,36,6,5,255,34,6,6,226,39,6,7,226,39,6,8,250,226,6,9,238,0,7,9,221,0],"secondary":false},{"width":8,"bonus":200,"chr":"#","pixels":[0,6,255,255,1,3,255,255,1,6,255,255,1,7,254,171,1,8,237,255,2,1,169,255,2,2,237,255,2,3,255,255,2,4,255,221,2,5,175,247,2,6,255,255,2,7,255,85,2,8,170,0,2,9,238,0,3,2,170,0,3,3,255,255,3,4,255,0,3,5,221,0,3,6,255,255,3,7,255,0,4,3,255,255,4,4,255,153,4,5,203,255,4,6,255,255,4,7,254,239,4,8,187,255,5,1,255,255,5,2,187,255,5,3,255,255,5,4,255,85,5,5,159,27,5,6,255,255,5,7,255,0,5,8,238,0,5,9,187,0,6,2,255,0,6,3,255,255,6,4,255,0,6,7,255,0,7,4,255,0],"secondary":false},{"width":6,"bonus":130,"chr":"$","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,0,203,255,2,1,237,255,2,2,204,0,2,4,176,197,2,5,237,128,2,8,240,253,2,9,251,207,3,1,251,242,3,2,239,18,3,5,247,245,3,6,164,132,3,8,255,255,3,9,240,36,3,10,204,0,4,2,240,36,4,6,249,174,4,7,198,219,4,9,255,0,5,7,170,0,5,8,170,0],"secondary":false},{"width":6,"bonus":75,"chr":"^","pixels":[0,4,153,255,0,5,237,255,1,2,203,255,1,3,221,255,1,5,153,0,1,6,238,0,2,1,221,255,2,2,230,245,2,3,218,80,2,4,221,0,3,2,227,57,3,3,246,194,3,4,230,245,4,4,187,0,4,5,239,145],"secondary":false},{"width":6,"bonus":35,"chr":"~","pixels":[1,5,255,255,2,5,221,255,2,6,255,51,3,6,250,226,4,5,203,255,4,7,221,0,5,6,204,0],"secondary":false},{"width":7,"bonus":175,"chr":"&","pixels":[0,6,187,255,1,2,237,255,1,3,255,255,1,4,191,250,1,5,187,255,1,7,224,155,1,8,223,214,2,1,255,255,2,3,238,0,2,4,255,255,2,5,191,23,2,6,187,0,2,8,255,255,2,9,187,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,2,255,0,4,4,255,255,4,5,255,34,4,8,187,255,4,9,255,0,5,3,203,255,5,4,255,255,5,5,255,221,5,6,196,243,5,7,155,196,5,9,187,0,6,4,234,167,6,5,255,0,6,6,221,0,6,7,187,0],"secondary":false},{"width":6,"bonus":70,"chr":"*","pixels":[0,2,169,255,1,2,169,255,1,3,237,219,1,4,255,255,2,1,203,255,2,2,240,253,2,3,255,255,2,4,228,133,2,5,255,0,3,2,237,183,3,3,245,107,3,4,255,153,4,3,170,0,4,5,153,0],"secondary":false},{"width":4,"bonus":100,"chr":"(","pixels":[0,3,173,255,0,4,239,255,0,5,253,255,0,6,229,255,0,7,171,255,1,1,193,255,1,2,203,255,1,4,188,64,1,5,241,25,1,6,252,46,1,7,240,112,1,8,238,218,1,9,210,232,2,0,209,255,2,2,194,2,2,3,204,0,2,9,223,111,2,10,245,224,3,1,210,0,3,11,216,0],"secondary":false},{"width":4,"bonus":75,"chr":")","pixels":[1,0,211,255,1,10,215,255,2,1,244,203,2,2,222,234,2,8,203,255,2,9,191,255,2,11,216,0,3,2,213,94,3,3,238,186,3,4,246,248,3,5,253,255,3,6,231,253,3,7,186,234,3,9,203,1,3,10,191,0],"secondary":false},{"width":7,"bonus":60,"chr":"_","pixels":[0,9,153,255,1,9,255,255,1,10,153,0,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,255,255,5,10,255,0,6,10,255,0],"secondary":false},{"width":4,"bonus":30,"chr":"-","pixels":[0,5,255,255,1,5,255,255,1,6,255,0,2,5,255,255,2,6,255,0,3,6,255,0],"secondary":true},{"width":8,"bonus":100,"chr":"=","pixels":[0,4,255,255,0,6,255,255,1,4,255,255,1,5,255,0,1,6,255,255,1,7,255,0,2,4,255,255,2,5,255,0,2,6,255,255,2,7,255,0,3,4,255,255,3,5,255,0,3,6,255,255,3,7,255,0,4,4,255,255,4,5,255,0,4,6,255,255,4,7,255,0,5,5,255,0,5,7,255,0],"secondary":false},{"width":3,"bonus":105,"chr":"[","pixels":[0,0,203,255,0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,0,237,255,1,1,211,41,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,252,241,1,9,204,0,2,1,238,0,2,9,238,0],"secondary":false},{"width":3,"bonus":105,"chr":"]","pixels":[0,0,237,255,0,8,237,255,1,0,203,255,1,1,253,223,1,2,225,251,1,3,225,251,1,4,225,251,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,1,9,238,0,2,1,204,0,2,2,221,0,2,3,221,0,2,4,221,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0],"secondary":false},{"width":5,"bonus":90,"chr":"{","pixels":[0,5,153,255,1,2,169,255,1,3,221,255,1,4,221,255,1,5,203,255,1,6,255,255,1,7,221,255,1,8,169,255,2,1,237,255,2,3,181,48,2,4,223,19,2,5,221,0,2,6,207,21,2,7,255,34,2,8,232,93,2,9,249,243,3,2,238,0,3,10,238,0],"secondary":false},{"width":5,"bonus":90,"chr":"}","pixels":[1,1,237,255,1,9,237,255,2,2,249,174,2,3,232,243,2,4,225,251,2,5,207,251,2,6,255,255,2,7,223,253,2,8,181,239,2,10,238,0,3,3,170,0,3,4,221,0,3,5,241,162,3,6,204,0,3,7,255,0,3,8,221,0,3,9,170,0,4,6,153,0],"secondary":false},{"width":3,"bonus":20,"chr":":","pixels":[1,3,255,255,1,7,255,255,2,4,255,0,2,8,255,0],"secondary":true},{"width":3,"bonus":40,"chr":";","pixels":[0,9,201,255,1,3,255,255,1,7,241,255,1,8,255,255,1,10,201,0,2,4,255,0,2,8,241,0,2,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":"\\"","pixels":[0,1,255,255,0,2,255,255,1,2,255,0,1,3,255,0,2,1,255,255,2,2,255,255],"secondary":true},{"width":2,"bonus":20,"chr":"\'","pixels":[0,1,255,255,0,2,177,255,1,2,255,30,1,3,177,0],"secondary":true},{"width":7,"bonus":70,"chr":"<","pixels":[0,5,203,255,1,5,255,255,1,6,228,133,2,4,237,255,2,6,254,239,3,4,169,255,3,5,238,0,3,6,175,247,3,7,243,89,4,3,221,255,4,5,170,0,4,7,244,231,5,4,221,0,5,8,221,0],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[0,3,203,255,0,7,203,255,1,4,228,133,1,7,187,255,1,8,204,0,2,4,247,245,2,6,255,255,2,8,187,0,3,4,175,247,3,5,248,157,3,6,203,255,3,7,255,0,4,5,255,255,4,6,173,75,4,7,204,0,5,6,255,0],"secondary":false},{"width":5,"bonus":70,"chr":"\\\\","pixels":[1,1,153,255,1,2,255,255,1,3,203,255,2,2,153,0,2,3,255,51,2,4,231,150,2,5,255,255,2,6,203,255,3,6,255,34,3,7,231,150,3,8,255,255,3,9,207,251,4,9,255,0,4,10,204,0],"secondary":false},{"width":2,"bonus":10,"chr":".","pixels":[0,8,255,255,1,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":",","pixels":[0,9,205,255,1,7,205,255,1,8,255,255,1,10,205,0,2,8,205,0,2,9,255,0],"secondary":true},{"width":3,"bonus":100,"chr":"|","pixels":[0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,221,255,0,9,221,255,0,10,203,255,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,226,39,1,10,226,39,1,11,204,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":8}');

/***/ }),

/***/ "./src/fonts/chatbox/10pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/10pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":5,"bonus":115,"chr":"a","pixels":[0,5,217,255,0,6,227,255,1,2,197,255,1,4,200,254,1,6,219,17,1,7,250,220,2,2,223,255,2,3,199,13,2,4,209,255,2,5,199,0,2,7,158,246,2,8,216,0,3,3,250,226,3,4,242,254,3,5,251,239,3,6,243,255,3,7,208,239,3,8,152,0,4,4,222,0,4,5,241,0,4,6,236,0,4,7,244,0,4,8,195,0],"secondary":false},{"width":7,"bonus":165,"chr":"b","pixels":[1,0,231,255,1,1,231,255,1,2,225,255,1,3,243,255,1,4,239,255,1,5,239,255,1,6,243,255,1,7,197,255,2,1,232,0,2,2,244,150,2,3,233,76,2,4,244,1,2,5,240,2,2,6,244,78,2,7,250,150,2,8,198,0,3,2,203,255,3,3,144,0,3,7,218,238,3,8,147,0,4,2,197,255,4,3,220,93,4,7,197,255,4,8,204,0,5,3,236,187,5,4,234,245,5,5,225,255,5,6,174,254,5,8,197,0,6,4,173,0,6,5,225,0,6,6,225,0,6,7,173,0],"secondary":false},{"width":5,"bonus":95,"chr":"c","pixels":[0,3,163,255,0,4,223,255,0,5,223,255,0,6,167,255,1,2,179,255,1,4,165,6,1,5,224,5,1,6,235,99,1,7,231,203,2,2,207,255,2,3,179,0,2,7,225,236,2,8,184,0,3,2,207,255,3,3,207,4,3,7,208,255,3,8,208,0,4,3,207,0,4,8,208,0],"secondary":false},{"width":6,"bonus":170,"chr":"d","pixels":[0,3,173,255,0,4,225,255,0,5,227,255,0,6,175,255,1,2,197,255,1,4,175,6,1,5,226,3,1,6,236,91,1,7,237,213,2,2,205,255,2,3,198,0,2,7,220,236,2,8,198,0,3,2,145,255,3,3,221,92,3,7,143,255,3,8,203,0,4,0,231,255,4,1,231,255,4,2,229,255,4,3,250,249,4,4,245,251,4,5,239,255,4,6,244,255,4,7,221,241,4,8,144,0,5,1,232,0,5,2,232,0,5,3,229,0,5,4,244,0,5,5,241,0,5,6,239,0,5,7,244,0,5,8,208,0],"secondary":false},{"width":5,"bonus":130,"chr":"e","pixels":[0,3,158,255,0,4,223,255,0,5,225,255,0,6,159,255,1,2,175,255,1,4,238,223,1,5,225,9,1,6,238,121,1,7,223,196,2,2,203,255,2,3,175,0,2,4,219,243,2,5,208,0,2,7,229,233,2,8,171,0,3,2,197,255,3,3,211,47,3,4,208,255,3,5,208,0,3,7,211,255,3,8,209,0,4,3,242,207,4,4,221,249,4,5,208,0,4,7,136,255,4,8,211,0],"secondary":false},{"width":3,"bonus":80,"chr":"f","pixels":[0,2,147,255,1,1,229,255,1,2,251,255,1,3,245,241,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,0,221,255,2,2,251,212,2,3,251,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0],"secondary":false},{"width":6,"bonus":195,"chr":"g","pixels":[0,3,169,255,0,4,225,255,0,5,225,255,0,6,175,255,1,2,195,255,1,4,171,6,1,5,225,3,1,6,235,87,1,7,237,213,1,10,222,249,2,2,203,255,2,3,195,0,2,7,219,236,2,8,198,0,2,10,210,254,2,11,217,0,3,2,141,255,3,3,220,93,3,7,137,255,3,8,202,2,3,10,199,255,3,11,210,0,4,2,208,255,4,3,250,249,4,4,245,251,4,5,238,255,4,6,244,255,4,7,239,249,4,8,244,241,4,9,191,254,4,11,200,0,5,3,208,0,5,4,244,0,5,5,241,0,5,6,238,0,5,7,244,0,5,8,233,0,5,9,231,0,5,10,190,0],"secondary":false},{"width":7,"bonus":150,"chr":"h","pixels":[1,0,231,255,1,1,231,255,1,2,227,255,1,3,243,255,1,4,239,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,232,0,2,2,244,141,2,3,237,91,2,4,244,3,2,5,240,0,2,6,232,0,2,7,232,0,2,8,232,0,3,2,199,255,3,3,135,0,4,2,215,255,4,3,208,46,5,3,249,222,5,4,235,251,5,5,231,255,5,6,231,255,5,7,231,255,6,4,217,0,6,5,232,0,6,6,232,0,6,7,232,0,6,8,232,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[1,0,133,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,133,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0],"secondary":false},{"width":3,"bonus":105,"chr":"j","pixels":[0,10,221,255,1,0,133,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,1,8,231,255,1,9,227,255,1,10,131,245,1,11,221,0,2,1,133,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0,2,9,232,0,2,10,228,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,233,255,1,5,241,255,1,6,231,255,1,7,231,255,2,1,232,0,2,2,232,0,2,3,233,23,2,4,249,190,2,5,244,134,2,6,241,0,2,7,232,0,2,8,232,0,3,3,203,255,3,5,240,211,3,6,202,187,4,2,201,255,4,4,203,0,4,6,225,137,4,7,237,230,5,3,201,0,5,7,144,78,5,8,214,0],"secondary":false},{"width":3,"bonus":80,"chr":"l","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,232,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0],"secondary":false},{"width":9,"bonus":195,"chr":"m","pixels":[1,2,205,255,1,3,243,255,1,4,239,255,1,5,231,255,1,6,231,255,1,7,231,255,2,2,148,255,2,3,215,61,2,4,244,0,2,5,239,0,2,6,232,0,2,7,232,0,2,8,232,0,3,2,213,255,3,3,157,36,4,3,255,255,4,4,239,254,4,5,231,255,4,6,231,255,4,7,231,255,5,2,165,255,5,3,135,92,5,4,255,0,5,5,238,0,5,6,232,0,5,7,232,0,5,8,232,0,6,2,221,255,6,3,172,31,7,3,251,227,7,4,233,254,7,5,231,255,7,6,231,255,7,7,231,255,8,4,223,0,8,5,232,0,8,6,232,0,8,7,232,0,8,8,232,0],"secondary":false},{"width":7,"bonus":135,"chr":"n","pixels":[1,2,205,255,1,3,243,255,1,4,239,255,1,5,231,255,1,6,231,255,1,7,231,255,2,2,131,255,2,3,221,94,2,4,244,3,2,5,240,0,2,6,232,0,2,7,232,0,2,8,232,0,3,2,199,255,3,3,132,0,4,2,215,255,4,3,207,46,5,3,249,222,5,4,235,251,5,5,231,255,5,6,231,255,5,7,231,255,6,4,217,0,6,5,232,0,6,6,232,0,6,7,232,0,6,8,232,0],"secondary":false},{"width":5,"bonus":110,"chr":"o","pixels":[0,3,169,255,0,4,223,255,0,5,229,255,0,6,167,255,1,2,187,255,1,4,171,4,1,5,224,5,1,6,238,93,1,7,233,208,2,2,208,255,2,3,187,0,2,7,225,237,2,8,190,0,3,2,184,255,3,3,224,96,3,7,185,255,3,8,210,0,4,3,229,181,4,4,233,244,4,5,224,255,4,6,166,254,4,8,185,0],"secondary":false},{"width":7,"bonus":180,"chr":"p","pixels":[1,2,209,255,1,3,243,255,1,4,237,255,1,5,241,255,1,6,243,255,1,7,225,255,1,8,231,255,1,9,231,255,1,10,231,255,2,2,148,255,2,3,221,80,2,4,244,1,2,5,238,3,2,6,245,80,2,7,250,150,2,8,225,0,2,9,231,0,2,10,232,0,2,11,232,0,3,2,203,255,3,3,148,0,3,7,220,238,3,8,147,0,4,2,197,255,4,3,221,99,4,7,197,255,4,8,205,0,5,3,237,186,5,4,235,244,5,5,225,255,5,6,172,254,5,8,197,0,6,4,173,0,6,5,225,0,6,6,225,0,6,7,171,0],"secondary":false},{"width":6,"bonus":175,"chr":"q","pixels":[0,3,172,255,0,4,225,255,0,5,227,255,0,6,175,255,1,2,195,255,1,4,173,6,1,5,225,3,1,6,236,90,1,7,238,215,2,2,203,255,2,3,195,0,2,7,220,236,2,8,201,0,3,2,143,255,3,3,220,93,3,7,137,255,3,8,203,0,4,2,203,255,4,3,250,249,4,4,245,251,4,5,238,255,4,6,244,255,4,7,236,248,4,8,244,242,4,9,231,255,4,10,231,255,5,3,204,0,5,4,244,0,5,5,241,0,5,6,238,0,5,7,244,0,5,8,229,0,5,9,232,0,5,10,232,0,5,11,232,0],"secondary":false},{"width":4,"bonus":75,"chr":"r","pixels":[1,2,202,255,1,3,241,255,1,4,239,255,1,5,231,255,1,6,231,255,1,7,231,255,2,2,136,255,2,3,223,118,2,4,241,8,2,5,240,0,2,6,232,0,2,7,232,0,2,8,232,0,3,2,209,255,3,3,136,0],"secondary":false},{"width":4,"bonus":85,"chr":"s","pixels":[0,3,229,255,0,7,185,255,1,2,217,255,1,4,249,204,1,5,142,62,1,7,213,251,1,8,185,0,2,2,211,255,2,3,218,0,2,5,234,176,2,7,209,255,2,8,210,0,3,2,137,255,3,3,214,14,3,5,191,215,3,6,244,236,3,8,210,0],"secondary":false},{"width":4,"bonus":70,"chr":"t","pixels":[1,1,203,255,1,2,251,255,1,3,243,243,1,4,231,255,1,5,231,255,1,6,229,255,2,2,246,216,2,3,251,0,2,4,232,0,2,5,232,0,2,6,233,18,2,7,251,221,3,3,208,0,3,8,217,0],"secondary":false},{"width":7,"bonus":135,"chr":"u","pixels":[1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,219,255,2,3,232,0,2,4,232,0,2,5,232,0,2,6,235,36,2,7,250,221,3,7,207,246,3,8,217,0,4,7,137,255,4,8,200,0,5,2,231,255,5,3,231,255,5,4,231,255,5,5,239,255,5,6,244,255,5,7,224,239,5,8,138,0,6,3,232,0,6,4,232,0,6,5,232,0,6,6,240,0,6,7,244,0,6,8,210,0],"secondary":false},{"width":5,"bonus":85,"chr":"v","pixels":[0,2,211,255,1,3,229,119,1,4,222,219,1,5,213,245,2,5,197,37,2,6,236,177,2,7,254,254,3,4,171,255,3,5,215,255,3,6,153,235,3,7,183,76,3,8,253,0,4,2,221,255,4,3,150,246,4,5,171,2,4,6,215,0,4,7,141,0],"secondary":false},{"width":8,"bonus":195,"chr":"w","pixels":[0,2,197,255,0,3,134,255,1,3,218,109,1,4,205,188,1,5,219,240,1,6,202,251,1,7,139,255,2,4,131,118,2,5,204,164,2,6,242,202,2,7,240,196,2,8,139,0,3,2,173,255,3,3,193,255,3,4,148,253,3,6,136,19,3,7,192,0,3,8,184,0,4,2,142,255,4,3,237,214,4,4,238,197,4,5,196,151,5,3,142,0,5,4,205,32,5,5,211,117,5,6,223,226,5,7,234,250,6,3,130,255,6,4,190,255,6,5,218,250,6,6,197,209,6,7,219,115,6,8,230,0,7,2,159,255,7,3,140,176,7,4,146,58,7,5,190,0,7,6,214,0,7,7,162,0],"secondary":false},{"width":5,"bonus":75,"chr":"x","pixels":[1,2,146,255,1,3,221,227,1,6,205,255,2,3,170,86,2,4,251,243,2,5,234,250,2,7,205,0,3,3,205,255,3,4,143,198,3,5,247,135,3,6,249,202,4,2,178,255,4,4,206,0,4,6,152,74,4,7,242,207],"secondary":false},{"width":5,"bonus":125,"chr":"y","pixels":[0,2,207,255,0,10,181,255,1,3,228,125,1,4,223,223,1,5,204,247,1,10,203,255,1,11,182,0,2,5,201,33,2,6,230,166,2,7,250,252,2,8,224,252,2,9,156,254,2,11,204,0,3,4,157,255,3,5,215,255,3,6,169,240,3,7,181,106,3,8,247,6,3,9,221,0,3,10,155,0,4,2,223,255,4,3,158,249,4,5,158,8,4,6,215,0,4,7,159,0],"secondary":false},{"width":6,"bonus":110,"chr":"z","pixels":[1,2,172,255,1,7,247,255,2,2,208,255,2,3,172,0,2,5,196,255,2,6,130,253,2,7,233,233,2,8,248,0,3,2,211,255,3,3,230,131,3,4,202,255,3,6,196,0,3,7,232,229,3,8,213,0,4,2,251,255,4,3,233,144,4,5,202,0,4,7,208,255,4,8,208,0,5,3,251,0,5,4,132,0,5,8,208,0],"secondary":false},{"width":6,"bonus":150,"chr":"A","pixels":[0,7,209,255,1,4,201,255,1,5,251,255,1,6,151,228,1,7,139,57,1,8,209,0,2,1,190,255,2,2,213,255,2,3,149,235,2,4,145,103,2,5,249,230,2,6,251,0,2,7,135,0,3,0,195,255,3,1,225,233,3,2,220,136,3,3,219,45,3,4,138,0,3,5,231,247,3,6,225,0,4,1,202,38,4,2,228,131,4,3,228,230,4,4,221,249,4,5,241,255,4,6,229,49,5,4,214,48,5,5,236,139,5,6,253,219,5,7,204,241],"secondary":false},{"width":6,"bonus":175,"chr":"B","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,241,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,241,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,251,212,2,4,241,0,2,5,232,0,2,6,232,0,2,7,251,212,2,8,241,0,3,0,205,255,3,1,208,0,3,3,219,255,3,4,208,0,3,7,209,255,3,8,208,0,4,0,207,255,4,1,212,40,4,3,231,255,4,4,231,90,4,7,199,255,4,8,209,0,5,1,249,229,5,2,207,246,5,4,248,193,5,5,239,246,5,6,195,255,5,8,199,0],"secondary":false},{"width":7,"bonus":115,"chr":"C","pixels":[1,2,189,255,1,3,229,255,1,4,225,255,1,5,191,255,2,1,199,255,2,3,190,7,2,4,230,5,2,5,231,57,2,6,239,206,2,7,165,185,3,0,211,255,3,2,200,0,3,7,246,230,4,0,211,255,4,1,211,0,4,7,214,252,4,8,222,0,5,0,211,255,5,1,213,20,5,7,208,255,5,8,211,0,6,1,213,7,6,8,208,0],"secondary":false},{"width":8,"bonus":190,"chr":"D","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,241,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,251,212,2,8,241,0,3,0,215,255,3,1,208,0,3,7,219,255,3,8,208,0,4,0,209,255,4,1,220,33,4,7,202,255,4,8,219,0,5,1,246,211,5,6,209,255,5,8,202,0,6,1,132,128,6,2,240,197,6,3,232,247,6,4,220,255,6,5,181,253,6,7,210,0,7,3,186,0,7,4,225,0,7,5,220,0,7,6,179,0],"secondary":false},{"width":6,"bonus":160,"chr":"E","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,241,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,241,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,251,212,2,4,241,0,2,5,232,0,2,6,232,0,2,7,251,212,2,8,241,0,3,0,208,255,3,1,208,0,3,3,208,255,3,4,208,0,3,7,208,255,3,8,208,0,4,0,208,255,4,1,208,0,4,3,178,255,4,4,208,0,4,7,208,255,4,8,208,0,5,1,208,0,5,4,178,0,5,8,208,0],"secondary":false},{"width":5,"bonus":125,"chr":"F","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,241,255,1,5,231,255,1,6,231,255,1,7,231,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,232,0,2,4,251,212,2,5,241,0,2,6,232,0,2,7,232,0,2,8,232,0,3,0,208,255,3,1,208,0,3,4,208,255,3,5,208,0,4,0,208,255,4,1,208,0,4,4,175,255,4,5,208,0],"secondary":false},{"width":8,"bonus":170,"chr":"G","pixels":[1,2,184,255,1,3,229,255,1,4,225,255,1,5,187,255,2,1,209,255,2,3,185,10,2,4,230,7,2,5,231,61,2,6,240,212,2,7,151,180,3,0,199,255,3,2,209,0,3,7,247,226,4,0,211,255,4,1,200,0,4,7,217,251,4,8,219,0,5,0,219,255,5,1,212,4,5,4,208,255,5,7,215,255,5,8,214,0,6,0,137,255,6,1,224,36,6,4,219,255,6,5,250,236,6,6,231,255,6,7,178,255,6,8,215,0,7,1,137,0,7,5,220,0,7,6,232,0,7,7,232,0,7,8,178,0],"secondary":false},{"width":8,"bonus":190,"chr":"H","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,241,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,232,0,2,2,232,0,2,3,251,212,2,4,241,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0,3,3,208,255,3,4,208,0,4,3,208,255,4,4,208,0,5,3,208,255,5,4,208,0,6,0,231,255,6,1,231,255,6,2,231,255,6,3,241,255,6,4,250,236,6,5,231,255,6,6,231,255,6,7,231,255,7,1,232,0,7,2,232,0,7,3,232,0,7,4,241,0,7,5,232,0,7,6,232,0,7,7,232,0,7,8,232,0],"secondary":false},{"width":3,"bonus":100,"chr":"I","pixels":[0,0,136,255,0,7,135,255,1,0,249,255,1,1,244,242,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,249,255,1,8,135,0,2,0,139,255,2,1,250,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,244,144,2,8,250,0],"secondary":false},{"width":3,"bonus":105,"chr":"J","pixels":[0,9,203,255,0,10,133,0,1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,1,8,209,255,1,10,203,0,2,1,232,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,231,0,2,9,209,0],"secondary":false},{"width":6,"bonus":145,"chr":"K","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,233,255,1,4,241,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,232,0,2,2,233,15,2,3,248,182,2,4,244,131,2,5,242,0,2,6,232,0,2,7,232,0,2,8,232,0,3,2,203,255,3,3,137,243,3,4,245,233,3,5,184,162,4,1,205,255,4,3,203,0,4,4,139,35,4,5,244,170,4,6,225,226,5,0,185,255,5,2,206,0,5,6,190,99,5,7,246,226],"secondary":false},{"width":5,"bonus":100,"chr":"L","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,241,255,2,1,232,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,252,226,2,8,242,0,3,7,223,255,3,8,224,0,4,7,223,255,4,8,224,0],"secondary":false},{"width":9,"bonus":255,"chr":"M","pixels":[1,0,243,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,0,155,255,2,1,252,206,2,2,245,153,2,3,238,73,2,4,232,5,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0,3,1,156,3,3,2,215,70,3,3,206,172,3,4,215,238,3,5,165,253,4,4,139,0,4,5,217,87,4,6,244,233,4,7,242,248,5,4,181,255,5,5,153,255,5,7,223,8,5,8,235,0,6,0,141,255,6,1,179,255,6,2,136,255,6,5,182,0,6,6,153,0,7,0,243,255,7,1,244,242,7,2,248,238,7,3,244,242,7,4,237,249,7,5,232,255,7,6,231,255,7,7,231,255,8,1,244,0,8,2,232,0,8,3,232,0,8,4,232,0,8,5,232,0,8,6,232,0,8,7,232,0,8,8,232,0],"secondary":false},{"width":8,"bonus":205,"chr":"N","pixels":[1,0,243,255,1,1,235,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,2,1,253,223,2,2,243,103,2,3,232,1,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0,3,1,139,55,3,2,244,179,3,3,223,233,4,3,193,88,4,4,246,220,4,5,184,227,5,5,231,125,5,6,246,238,5,7,136,229,6,0,231,255,6,1,231,255,6,2,231,255,6,3,231,255,6,4,231,255,6,5,232,255,6,6,245,247,6,7,253,246,7,1,232,0,7,2,232,0,7,3,232,0,7,4,232,0,7,5,232,0,7,6,232,0,7,7,237,0,7,8,244,0],"secondary":false},{"width":9,"bonus":170,"chr":"O","pixels":[1,2,189,255,1,3,225,255,1,4,225,255,1,5,187,255,2,1,193,255,2,3,190,7,2,4,225,5,2,5,230,57,2,6,238,208,2,7,150,179,3,0,213,255,3,2,194,0,3,7,245,224,4,0,213,255,4,1,214,0,4,7,216,252,4,8,215,0,5,0,213,255,5,1,217,19,5,7,213,255,5,8,214,0,6,1,244,200,6,6,191,255,6,8,213,0,7,1,143,126,7,2,237,200,7,3,229,248,7,4,224,254,7,5,187,253,7,7,192,0,8,3,186,0,8,4,223,0,8,5,223,0,8,6,186,0],"secondary":false},{"width":6,"bonus":145,"chr":"P","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,241,255,1,5,231,255,1,6,231,255,1,7,231,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,232,0,2,4,251,212,2,5,241,0,2,6,232,0,2,7,232,0,2,8,232,0,3,0,209,255,3,1,208,0,3,4,203,255,3,5,208,0,4,0,191,255,4,1,223,86,4,4,144,253,4,5,203,0,5,1,240,210,5,2,235,247,5,3,166,254,5,5,143,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[1,2,189,255,1,3,225,255,1,4,223,255,1,5,187,255,2,1,193,255,2,3,190,7,2,4,225,5,2,5,229,58,2,6,238,208,2,7,147,178,3,0,213,255,3,2,194,0,3,7,245,222,4,0,213,255,4,1,214,0,4,7,218,252,4,8,215,9,5,0,211,255,5,1,217,19,5,7,241,255,5,8,248,214,6,1,244,200,6,6,191,255,6,8,247,100,6,9,251,239,7,1,139,127,7,2,238,198,7,3,229,248,7,4,227,255,7,5,189,253,7,7,192,0,7,9,131,107,7,10,235,0,8,3,185,0,8,4,223,0,8,5,227,0,8,6,188,0],"secondary":false},{"width":7,"bonus":185,"chr":"R","pixels":[1,0,241,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,241,255,1,5,231,255,1,6,231,255,1,7,231,255,2,0,208,255,2,1,241,0,2,2,232,0,2,3,232,0,2,4,251,212,2,5,241,0,2,6,232,0,2,7,232,0,2,8,232,0,3,0,208,255,3,1,208,0,3,4,229,255,3,5,214,36,4,0,193,255,4,1,220,77,4,4,199,255,4,5,251,227,4,6,135,225,5,1,241,209,5,2,237,249,5,3,179,254,5,5,202,21,5,6,242,156,5,7,230,232,6,2,198,0,6,3,231,0,6,4,178,0,6,7,167,72,6,8,209,0],"secondary":false},{"width":6,"bonus":125,"chr":"S","pixels":[1,1,211,255,1,2,219,255,1,7,203,255,2,0,195,255,2,2,218,44,2,3,251,231,2,7,221,251,2,8,203,0,3,0,207,255,3,1,195,0,3,3,159,228,3,4,241,125,3,7,203,255,3,8,217,0,4,0,217,255,4,1,207,2,4,4,242,240,4,5,134,57,4,7,185,255,4,8,204,0,5,1,220,26,5,4,128,209,5,5,252,226,5,6,205,248,5,8,186,0],"secondary":false},{"width":5,"bonus":110,"chr":"T","pixels":[0,0,208,255,1,0,208,255,1,1,208,0,2,0,251,255,2,1,250,236,2,2,231,255,2,3,231,255,2,4,231,255,2,5,231,255,2,6,231,255,2,7,231,255,3,0,208,255,3,1,251,0,3,2,232,0,3,3,232,0,3,4,232,0,3,5,232,0,3,6,232,0,3,7,232,0,3,8,232,0,4,0,208,255,4,1,208,0],"secondary":false},{"width":8,"bonus":175,"chr":"U","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,223,255,1,6,159,255,2,1,232,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,5,2,6,237,119,2,7,221,190,3,7,229,233,3,8,165,0,4,7,205,255,4,8,209,0,5,7,159,255,5,8,206,0,6,0,231,255,6,1,231,255,6,2,231,255,6,3,231,255,6,4,231,255,6,5,223,255,6,6,157,253,6,8,159,0,7,1,232,0,7,2,232,0,7,3,232,0,7,4,232,0,7,5,232,0,7,6,223,0,7,7,156,0],"secondary":false},{"width":6,"bonus":140,"chr":"V","pixels":[0,0,213,255,0,1,134,255,1,1,230,115,1,2,222,212,1,3,227,247,1,4,146,255,2,3,188,20,2,4,232,98,2,5,215,194,2,6,220,243,2,7,158,253,3,5,199,216,3,6,240,226,3,7,236,168,3,8,157,0,4,2,189,255,4,3,219,255,4,4,151,242,4,5,133,121,4,6,170,4,4,7,213,0,4,8,156,0,5,0,213,255,5,1,147,230,5,2,138,94,5,3,189,0,5,4,220,0,5,5,144,0],"secondary":false},{"width":9,"bonus":240,"chr":"W","pixels":[0,0,193,255,0,1,134,255,1,1,218,120,1,2,210,196,1,3,227,242,1,4,210,251,1,5,148,255,2,3,161,0,2,4,221,37,2,5,231,145,2,6,242,237,2,7,253,253,3,3,193,255,3,4,205,255,3,5,159,232,3,6,170,118,3,7,227,18,3,8,252,0,4,0,243,255,4,1,224,254,4,2,145,196,4,3,138,41,4,4,193,0,4,5,205,0,4,6,145,0,5,1,250,125,5,2,247,197,5,3,229,232,5,4,156,240,6,3,193,14,6,4,221,84,6,5,205,171,6,6,233,244,6,7,201,251,7,3,143,255,7,4,203,253,7,5,225,241,7,6,211,192,7,7,235,106,7,8,198,0,8,0,223,255,8,1,207,255,8,2,158,236,8,3,142,152,8,4,154,42,8,5,201,0,8,6,213,0,8,7,158,0],"secondary":false},{"width":6,"bonus":130,"chr":"X","pixels":[0,0,134,255,0,7,171,255,1,1,235,232,1,5,137,255,1,6,199,255,1,8,171,0,2,1,129,39,2,2,238,159,2,3,221,232,2,4,209,255,2,6,138,2,2,7,199,0,3,2,184,247,3,3,216,192,3,4,244,213,3,5,235,157,4,0,148,255,4,1,193,255,4,3,178,0,4,4,164,3,4,5,224,117,4,6,238,233,4,7,133,235,5,1,148,2,5,2,194,0,5,7,237,148],"secondary":false},{"width":5,"bonus":105,"chr":"Y","pixels":[0,0,217,255,0,1,166,238,1,1,230,104,1,2,237,225,1,3,177,238,2,3,238,173,2,4,253,253,2,5,235,251,2,6,231,255,2,7,231,255,3,2,209,255,3,3,161,254,3,4,176,57,3,5,252,0,3,6,232,0,3,7,232,0,3,8,232,0,4,0,215,255,4,1,154,253,4,3,209,0,4,4,160,0],"secondary":false},{"width":7,"bonus":160,"chr":"Z","pixels":[1,0,181,255,1,6,131,255,1,7,247,255,2,0,208,255,2,1,182,0,2,5,219,255,2,6,141,247,2,7,236,233,2,8,248,0,3,0,208,255,3,1,208,0,3,3,185,255,3,4,185,255,3,6,219,0,3,7,233,228,3,8,216,0,4,0,215,255,4,1,233,150,4,2,219,255,4,4,185,0,4,5,185,0,4,7,208,255,4,8,208,0,5,0,247,255,5,1,236,142,5,2,142,18,5,3,219,0,5,7,208,255,5,8,208,0,6,1,248,0,6,2,131,0,6,8,208,0],"secondary":false},{"width":6,"bonus":165,"chr":"0","pixels":[0,1,141,255,0,2,211,255,0,3,229,255,0,4,227,255,0,5,208,255,0,6,135,255,1,0,185,255,1,2,149,31,1,3,211,0,1,4,229,0,1,5,230,20,1,6,228,122,1,7,222,212,2,0,217,255,2,1,186,0,2,7,234,239,2,8,184,0,3,0,175,255,3,1,234,122,3,7,185,255,3,8,219,0,4,1,214,149,4,2,226,230,4,3,229,253,4,4,227,255,4,5,208,255,4,6,145,236,4,8,185,0,5,3,204,0,5,4,227,0,5,5,228,0,5,6,208,0,5,7,134,0],"secondary":false},{"width":6,"bonus":85,"chr":"1","pixels":[2,1,154,255,3,0,241,255,3,1,241,245,3,2,245,241,3,3,232,255,3,4,231,255,3,5,231,255,3,6,231,255,3,7,231,255,4,1,241,0,4,2,232,0,4,3,232,0,4,4,232,0,4,5,232,0,4,6,232,0,4,7,232,0,4,8,232,0],"secondary":false},{"width":6,"bonus":120,"chr":"2","pixels":[1,0,171,255,1,6,193,255,1,7,246,254,2,0,217,255,2,1,171,0,2,5,209,255,2,7,244,218,2,8,246,0,3,0,207,255,3,1,224,43,3,4,213,255,3,6,209,0,3,7,224,237,3,8,208,0,4,1,246,217,4,2,229,251,4,3,156,252,4,5,214,0,4,7,208,255,4,8,208,0,5,2,210,0,5,3,225,0,5,4,154,0,5,8,208,0],"secondary":false},{"width":6,"bonus":120,"chr":"3","pixels":[1,0,187,255,1,7,220,249,2,0,213,255,2,1,187,0,2,3,221,255,2,7,210,253,2,8,215,0,3,0,209,255,3,1,217,28,3,3,219,255,3,4,232,93,3,7,191,255,3,8,208,0,4,1,250,230,4,2,192,246,4,4,245,192,4,5,239,246,4,6,189,255,4,8,192,0,5,2,225,0,5,3,186,0,5,5,184,0,5,6,231,0,5,7,189,0],"secondary":false},{"width":6,"bonus":125,"chr":"4","pixels":[1,4,193,255,1,5,234,252,2,2,173,255,2,5,247,231,2,6,231,0,3,1,178,255,3,3,173,0,3,5,224,255,3,6,224,0,4,0,243,255,4,1,240,246,4,2,248,238,4,3,236,250,4,4,231,255,4,5,253,255,4,6,252,235,4,7,231,255,5,1,243,0,5,2,232,0,5,3,232,0,5,4,232,0,5,5,252,226,5,6,253,0,5,7,232,0,5,8,232,0],"secondary":false},{"width":6,"bonus":130,"chr":"5","pixels":[1,0,237,255,1,1,201,255,1,2,183,253,1,3,235,253,1,7,215,251,2,0,208,255,2,1,238,0,2,2,201,0,2,3,242,221,2,4,233,0,2,7,206,255,2,8,212,0,3,0,208,255,3,1,208,0,3,3,187,255,3,4,224,94,3,7,191,255,3,8,206,0,4,1,208,0,4,4,238,204,4,5,236,246,4,6,185,254,4,8,191,0,5,5,190,0,5,6,228,0,5,7,184,0],"secondary":false},{"width":6,"bonus":150,"chr":"6","pixels":[0,2,179,255,0,3,223,255,0,4,237,255,0,5,211,255,0,6,142,255,1,1,189,255,1,3,215,143,1,4,235,98,1,5,238,4,1,6,228,108,1,7,218,200,2,0,203,255,2,2,189,0,2,3,219,243,2,7,226,236,2,8,171,0,3,0,208,255,3,1,204,0,3,3,187,255,3,4,220,80,3,7,196,255,3,8,209,0,4,1,208,0,4,4,239,206,4,5,236,248,4,6,186,254,4,8,196,0,5,5,193,0,5,6,229,0,5,7,186,0],"secondary":false},{"width":6,"bonus":100,"chr":"7","pixels":[1,0,208,255,2,0,208,255,2,1,208,0,2,5,179,255,2,6,209,255,2,7,132,230,3,0,208,255,3,1,216,51,3,2,142,255,3,3,215,255,3,4,151,252,3,6,180,0,3,7,210,0,4,0,249,255,4,1,241,190,4,3,145,13,4,4,216,0,4,5,149,0,5,1,249,0,5,2,179,0],"secondary":false},{"width":6,"bonus":150,"chr":"8","pixels":[0,1,221,255,0,2,209,255,0,5,225,255,0,6,211,255,1,0,211,255,1,2,225,33,1,3,247,223,1,4,177,220,1,5,132,29,1,6,230,42,1,7,246,210,2,0,211,255,2,1,214,24,2,3,215,249,2,4,233,122,2,5,152,0,2,7,215,247,2,8,202,0,3,1,249,226,3,2,212,251,3,4,243,193,3,7,199,255,3,8,208,0,4,2,221,0,4,3,208,0,4,5,242,221,4,6,211,248,4,8,199,0,5,6,210,0,5,7,205,0],"secondary":false},{"width":6,"bonus":150,"chr":"9","pixels":[0,1,187,255,0,2,229,255,0,3,195,255,1,0,196,255,1,2,187,2,1,3,235,76,1,4,239,202,1,7,207,255,2,0,208,255,2,1,196,0,2,4,222,241,2,5,189,0,2,7,203,255,2,8,207,0,3,0,167,255,3,1,225,108,3,5,217,61,3,6,191,255,3,8,203,0,4,1,215,165,4,2,226,235,4,3,237,255,4,4,234,243,4,5,216,212,4,7,192,0,5,2,139,0,5,3,208,0,5,4,237,0,5,5,223,0,5,6,180,0],"secondary":false},{"width":9,"bonus":135,"chr":"%","pixels":[1,2,227,255,1,3,225,255,2,1,211,255,2,3,230,22,2,4,249,217,3,2,249,229,3,3,226,252,3,5,224,86,3,6,145,255,4,3,230,62,4,4,241,153,4,5,147,125,4,7,145,0,5,2,141,255,5,4,131,189,5,5,240,235,5,6,234,246,6,3,141,0,6,4,210,225,6,6,223,15,6,7,251,225,7,5,245,228,7,6,229,253,7,7,132,243,7,8,221,0,8,6,219,0,8,7,228,0],"secondary":false},{"width":4,"bonus":90,"chr":"/","pixels":[1,5,129,255,1,6,189,255,1,7,205,255,1,8,157,252,1,9,129,185,2,1,141,255,2,2,199,255,2,3,199,255,2,4,148,246,2,6,140,41,2,7,189,0,2,8,206,0,2,9,155,0,3,0,140,239,3,2,146,23,3,3,199,0,3,4,200,0,3,5,143,0],"secondary":false},{"width":5,"bonus":75,"chr":"+","pixels":[0,4,175,255,1,4,208,255,1,5,175,0,2,2,231,255,2,3,231,255,2,4,251,255,2,5,250,236,2,6,231,255,3,3,232,0,3,4,251,212,3,5,251,0,3,6,232,0,3,7,232,0,4,4,175,255,4,5,208,0],"secondary":false},{"width":5,"bonus":65,"chr":"?","pixels":[1,0,208,255,2,0,211,255,2,1,210,12,2,3,187,255,2,6,181,231,2,7,209,244,3,1,249,227,3,2,213,253,3,4,187,0,3,7,164,0,3,8,200,0,4,2,222,0,4,3,211,0],"secondary":false},{"width":4,"bonus":70,"chr":"!","pixels":[2,0,231,255,2,1,231,255,2,2,231,255,2,3,231,255,2,4,231,255,2,5,231,255,2,7,186,204,3,1,232,0,3,2,232,0,3,3,232,0,3,4,232,0,3,5,232,0,3,6,232,0,3,8,149,0],"secondary":false},{"width":10,"bonus":290,"chr":"@","pixels":[1,3,202,255,1,4,229,255,1,5,229,255,1,6,173,255,2,1,201,255,2,2,129,247,2,3,133,55,2,4,202,0,2,5,231,15,2,6,238,90,2,7,244,232,3,0,146,255,3,2,210,49,3,3,220,218,3,4,234,253,3,5,211,255,3,7,130,136,3,8,244,181,4,0,208,255,4,1,147,3,4,2,219,233,4,4,188,2,4,5,235,39,4,6,247,216,4,8,226,243,4,9,174,0,5,0,208,255,5,1,208,0,5,2,213,255,5,3,200,0,5,6,178,236,5,7,209,0,5,8,204,254,5,9,216,0,6,0,195,255,6,1,214,39,6,2,199,255,6,3,251,235,6,4,235,255,6,5,245,255,6,7,176,44,6,8,163,255,6,9,204,0,7,1,244,219,7,3,199,4,7,4,232,0,7,5,239,55,7,6,253,213,7,9,164,0,8,2,240,186,8,3,233,246,8,4,222,254,8,5,183,255,8,7,211,0,9,3,175,0,9,4,225,0,9,5,222,0,9,6,183,0],"secondary":false},{"width":7,"bonus":165,"chr":"#","pixels":[0,5,136,255,1,3,184,255,1,5,223,255,1,6,196,167,1,7,166,255,2,1,155,255,2,2,179,255,2,3,233,255,2,4,223,164,2,5,229,251,2,6,230,57,2,7,133,20,2,8,166,0,3,2,156,0,3,3,234,201,3,4,235,15,3,5,239,234,3,6,237,113,3,7,168,223,4,1,128,255,4,2,174,244,4,3,233,255,4,4,228,181,4,5,230,254,4,6,229,80,4,8,147,0,5,2,133,20,5,3,231,203,5,4,233,0,5,5,226,197,5,6,229,0,6,4,184,0,6,6,175,0],"secondary":false},{"width":6,"bonus":145,"chr":"$","pixels":[1,2,225,255,1,3,187,255,1,7,179,254,2,1,213,255,2,3,240,134,2,4,224,156,2,7,219,247,2,8,178,0,3,0,231,255,3,1,249,255,3,2,251,235,3,3,235,253,3,4,253,253,3,5,245,243,3,6,231,255,3,7,251,255,3,8,251,235,4,1,245,151,4,2,250,3,4,3,232,0,4,4,243,109,4,5,254,222,4,6,252,224,4,7,242,115,4,8,251,0,4,9,232,0,5,2,145,0,5,6,222,0,5,7,221,0],"secondary":false},{"width":6,"bonus":65,"chr":"^","pixels":[1,2,149,255,1,3,173,255,2,0,178,255,2,1,160,255,2,3,149,0,2,4,173,0,3,1,227,184,3,2,217,180,4,2,176,50,4,3,210,173,4,4,199,238,5,4,147,23,5,5,186,0],"secondary":false},{"width":7,"bonus":40,"chr":"~","pixels":[1,3,147,255,2,3,211,255,2,4,149,12,3,3,145,255,3,4,233,139,4,4,240,235,5,4,147,220,5,5,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"&","pixels":[0,5,225,255,0,6,215,255,1,1,229,255,1,2,197,255,1,4,187,255,1,6,232,65,1,7,248,222,2,0,229,255,2,1,133,32,2,2,238,87,2,3,249,237,2,4,180,203,2,5,187,4,2,7,217,242,2,8,216,0,3,0,131,255,3,1,253,233,3,2,197,250,3,4,241,106,3,5,228,216,3,7,167,255,3,8,206,0,4,1,132,0,4,2,231,0,4,3,193,0,4,5,196,207,4,6,255,255,4,7,148,122,4,8,168,0,5,4,217,255,5,5,139,248,5,6,182,88,5,7,255,219,6,5,217,0,6,6,135,0,6,8,219,0],"secondary":false},{"width":6,"bonus":65,"chr":"*","pixels":[1,2,164,244,2,2,224,241,2,3,232,214,3,0,134,255,3,1,165,170,3,2,233,245,3,3,243,193,3,4,212,91,4,1,163,95,4,2,201,203,4,3,229,45,4,4,217,139,5,3,160,0],"secondary":false},{"width":4,"bonus":105,"chr":"(","pixels":[1,1,145,255,1,2,201,255,1,3,229,255,1,4,231,255,1,5,229,255,1,6,197,255,1,7,141,255,2,0,173,255,2,1,128,180,2,2,161,57,2,3,202,5,2,4,230,0,2,5,232,5,2,6,232,41,2,7,218,106,2,8,218,203,2,9,199,235,3,0,183,0,3,1,174,0,3,9,185,50,3,10,183,0],"secondary":false},{"width":4,"bonus":105,"chr":")","pixels":[1,0,184,241,1,8,173,255,1,9,184,255,2,0,196,69,2,1,219,163,2,2,216,229,2,3,230,250,2,4,232,255,2,5,227,255,2,6,198,254,2,7,162,231,2,8,128,117,2,9,173,0,2,10,184,0,3,2,140,0,3,3,194,0,3,4,226,0,3,5,232,0,3,6,227,0,3,7,198,0,3,8,146,0],"secondary":false},{"width":4,"bonus":35,"chr":"_","pixels":[0,9,208,255,1,9,208,255,1,10,208,0,2,9,208,255,2,10,208,0,3,9,208,255,3,10,208,0],"secondary":false},{"width":3,"bonus":15,"chr":"-","pixels":[1,4,208,255,2,4,187,255,2,5,208,0],"secondary":true},{"width":6,"bonus":80,"chr":"=","pixels":[1,3,208,255,1,5,208,255,2,3,208,255,2,4,208,0,2,5,208,255,2,6,208,0,3,3,208,255,3,4,208,0,3,5,208,255,3,6,208,0,4,3,208,255,4,4,208,0,4,5,208,255,4,6,208,0,5,4,208,0,5,6,208,0],"secondary":false},{"width":4,"bonus":115,"chr":"[","pixels":[1,0,231,255,1,1,231,255,1,2,231,255,1,3,231,255,1,4,231,255,1,5,231,255,1,6,231,255,1,7,231,255,1,8,231,255,1,9,219,255,2,0,220,0,2,1,232,0,2,2,232,0,2,3,232,0,2,4,232,0,2,5,232,0,2,6,232,0,2,7,232,0,2,8,232,0,2,9,251,212,2,10,220,0,3,0,208,0,3,10,208,0],"secondary":false},{"width":4,"bonus":115,"chr":"]","pixels":[1,9,208,255,2,0,250,236,2,1,231,255,2,2,231,255,2,3,231,255,2,4,231,255,2,5,231,255,2,6,231,255,2,7,231,255,2,8,231,255,2,9,219,255,2,10,208,0,3,0,220,0,3,1,232,0,3,2,232,0,3,3,232,0,3,4,232,0,3,5,232,0,3,6,232,0,3,7,232,0,3,8,232,0,3,9,232,0,3,10,220,0],"secondary":false},{"width":4,"bonus":85,"chr":"{","pixels":[1,4,239,255,2,0,229,255,2,1,231,255,2,2,231,255,2,3,221,255,2,5,253,225,2,6,234,253,2,7,231,255,2,8,229,255,3,1,230,0,3,2,232,0,3,3,232,0,3,4,221,0,3,6,223,0,3,7,232,0,3,8,233,12,3,9,247,185],"secondary":false},{"width":3,"bonus":90,"chr":"}","pixels":[0,9,179,255,1,0,247,237,1,1,232,255,1,2,231,255,1,3,221,255,1,5,223,255,1,6,231,255,1,7,231,255,1,8,229,255,1,10,179,0,2,1,229,0,2,2,232,0,2,3,234,26,2,4,252,241,2,6,224,0,2,7,232,0,2,8,232,0,2,9,229,0],"secondary":false},{"width":3,"bonus":30,"chr":":","pixels":[1,2,239,255,1,6,190,255,1,7,231,254,2,3,239,0,2,7,192,12,2,8,230,0],"secondary":true},{"width":3,"bonus":30,"chr":";","pixels":[1,2,239,255,1,6,193,255,1,7,172,241,2,3,239,0,2,7,194,0,2,8,163,0],"secondary":true},{"width":5,"bonus":60,"chr":"\\"","pixels":[1,0,209,255,1,1,185,255,1,2,139,255,2,1,214,34,2,2,187,10,2,3,139,0,3,0,247,255,3,1,225,244,3,2,159,236,4,1,248,0,4,2,215,0,4,3,147,0],"secondary":true},{"width":3,"bonus":30,"chr":"\'","pixels":[1,0,209,255,1,1,185,255,1,2,139,255,2,1,214,34,2,2,187,10,2,3,139,0],"secondary":true},{"width":6,"bonus":65,"chr":"<","pixels":[1,4,227,255,2,3,135,255,2,5,244,168,3,3,172,255,3,4,135,0,3,5,203,211,3,6,175,57,4,2,169,255,4,4,172,0,4,6,225,188,5,3,169,0,5,6,131,200,5,7,168,9],"secondary":false},{"width":6,"bonus":50,"chr":">","pixels":[1,2,196,255,1,6,201,255,2,3,222,127,2,7,201,0,3,3,212,223,3,5,193,255,4,4,243,222,4,6,194,0,5,4,138,185,5,5,212,5],"secondary":false},{"width":4,"bonus":80,"chr":"\\\\","pixels":[1,0,199,193,1,1,214,241,1,2,190,254,1,3,129,255,2,1,151,0,2,2,205,24,2,3,210,97,2,4,198,182,2,5,213,237,2,6,200,252,2,7,141,255,3,5,141,0,3,6,201,15,3,7,213,83,3,8,199,168,3,9,211,231],"secondary":false},{"width":3,"bonus":20,"chr":".","pixels":[1,6,172,255,1,7,217,248,2,7,172,0,2,8,211,0],"secondary":true},{"width":3,"bonus":35,"chr":",","pixels":[0,8,153,255,1,6,163,255,1,7,157,210,1,8,133,84,1,9,153,0,2,7,164,0,2,8,129,0],"secondary":true},{"width":5,"bonus":105,"chr":"|","pixels":[2,0,231,255,2,1,231,255,2,2,231,255,2,3,231,255,2,4,231,255,2,5,231,255,2,6,231,255,2,7,231,255,2,8,231,255,2,9,231,255,3,0,232,0,3,1,232,0,3,2,232,0,3,3,232,0,3,4,232,0,3,5,232,0,3,6,232,0,3,7,232,0,3,8,232,0,3,9,232,0,3,10,232,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":7}');

/***/ }),

/***/ "./src/fonts/chatbox/12pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/12pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":145,"chr":"a","pixels":[1,7,249,255,1,8,252,254,2,3,196,255,2,6,203,255,2,8,249,36,2,9,255,241,3,3,239,255,3,4,196,2,3,6,237,255,3,7,203,4,3,9,223,249,3,10,241,0,4,3,221,255,4,4,246,115,4,6,241,255,4,7,240,45,4,10,218,0,5,4,249,217,5,5,247,250,5,6,245,254,5,7,254,245,5,8,245,254,5,9,244,241,6,5,212,0,6,6,242,0,6,7,244,0,6,8,244,0,6,9,244,0,6,10,231,0],"secondary":false},{"width":8,"bonus":195,"chr":"b","pixels":[1,0,243,255,1,1,245,254,1,2,243,254,1,3,236,252,1,4,255,255,1,5,255,255,1,6,250,254,1,7,255,255,1,8,255,255,1,9,202,244,2,1,244,0,2,2,244,0,2,3,249,127,2,4,245,143,2,5,255,15,2,6,255,0,2,7,249,17,2,8,255,141,2,9,255,116,2,10,193,0,3,3,231,255,3,9,241,236,4,3,233,255,4,4,232,16,4,9,233,255,4,10,223,0,5,4,249,192,5,8,189,255,5,9,157,245,5,10,233,0,6,4,203,159,6,5,243,222,6,6,240,250,6,7,217,246,6,8,161,199,6,9,191,11,7,6,211,0,7,7,235,0,7,8,210,0],"secondary":false},{"width":6,"bonus":105,"chr":"c","pixels":[1,4,173,255,1,5,251,255,1,6,250,255,1,7,254,255,1,8,181,253,2,3,171,255,2,5,179,26,2,6,252,0,2,7,250,20,2,8,255,142,2,9,232,197,3,3,233,255,3,4,172,7,3,9,247,245,3,10,179,0,4,3,231,255,4,4,235,18,4,9,230,255,4,10,237,0,5,4,232,13,5,10,230,0],"secondary":false},{"width":8,"bonus":220,"chr":"d","pixels":[1,4,173,255,1,5,253,255,1,6,250,255,1,7,253,255,1,8,180,253,2,3,175,255,2,4,167,243,2,5,181,35,2,6,253,0,2,7,250,21,2,8,254,153,2,9,232,197,3,3,237,255,3,4,178,11,3,5,159,0,3,9,248,244,3,10,179,0,4,3,223,255,4,4,238,19,4,9,222,254,4,10,238,0,5,4,246,194,5,8,173,255,5,10,222,0,6,0,243,255,6,1,245,254,6,2,245,254,6,3,245,254,6,4,248,251,6,5,252,247,6,6,246,253,6,7,245,254,6,8,246,253,6,9,250,244,7,1,244,0,7,2,244,0,7,3,244,0,7,4,244,0,7,5,244,0,7,6,244,0,7,7,244,0,7,8,244,0,7,9,244,0,7,10,239,0],"secondary":false},{"width":7,"bonus":150,"chr":"e","pixels":[1,4,173,255,1,5,251,255,1,6,255,255,1,7,251,255,1,8,175,253,2,3,184,255,2,5,177,22,2,6,254,240,2,7,255,8,2,8,253,132,2,9,229,195,3,3,237,255,3,4,184,4,3,6,240,254,3,7,240,0,3,9,245,245,3,10,175,0,4,3,179,255,4,4,246,149,4,6,241,255,4,7,240,0,4,9,232,255,4,10,236,0,5,4,224,170,5,5,239,234,5,6,239,251,5,7,241,0,5,10,232,0,6,6,219,0,6,7,235,0],"secondary":false},{"width":4,"bonus":115,"chr":"f","pixels":[0,3,213,255,1,1,245,255,1,2,246,254,1,3,255,255,1,4,253,246,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,0,231,255,2,2,245,0,2,3,254,240,2,4,255,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,0,227,255,3,1,233,11,3,4,240,0],"secondary":false},{"width":8,"bonus":260,"chr":"g","pixels":[1,4,173,255,1,5,253,255,1,6,250,255,1,7,253,255,1,8,180,253,2,3,175,255,2,4,163,243,2,5,181,34,2,6,253,0,2,7,250,21,2,8,253,151,2,9,232,197,2,12,229,247,3,3,237,255,3,4,177,10,3,5,156,0,3,9,247,245,3,10,179,0,3,12,243,254,3,13,222,0,4,3,221,255,4,4,238,19,4,9,222,254,4,10,238,0,4,12,232,255,4,13,242,0,5,4,245,193,5,8,175,255,5,10,228,59,5,11,173,255,5,12,171,248,5,13,232,0,6,3,239,255,6,4,247,252,6,5,252,247,6,6,246,253,6,7,245,254,6,8,246,253,6,9,251,248,6,10,238,241,6,11,180,228,6,12,180,28,6,13,166,0,7,4,240,0,7,5,244,0,7,6,244,0,7,7,244,0,7,8,244,0,7,9,244,0,7,10,244,0,7,11,225,0,7,12,161,0],"secondary":false},{"width":7,"bonus":175,"chr":"h","pixels":[1,0,243,255,1,1,245,254,1,2,245,254,1,3,238,253,1,4,254,255,1,5,255,255,1,6,247,253,1,7,245,254,1,8,245,254,1,9,245,254,2,1,244,0,2,2,244,0,2,3,249,126,2,4,244,125,2,5,254,12,2,6,255,0,2,7,246,0,2,8,244,0,2,9,244,0,2,10,244,0,3,3,237,255,4,3,221,255,4,4,245,118,5,4,248,211,5,5,246,248,5,6,245,254,5,7,245,254,5,8,245,254,5,9,245,254,6,5,205,0,6,6,240,0,6,7,244,0,6,8,244,0,6,9,244,0,6,10,244,0],"secondary":false},{"width":3,"bonus":80,"chr":"i","pixels":[1,0,181,255,1,3,243,255,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,182,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0],"secondary":false},{"width":3,"bonus":115,"chr":"j","pixels":[0,12,236,255,0,13,186,0,1,0,181,255,1,3,243,255,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,1,10,245,253,1,11,227,251,1,13,236,0,2,1,182,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,2,11,243,0,2,12,223,0],"secondary":false},{"width":6,"bonus":155,"chr":"k","pixels":[1,0,243,255,1,1,245,254,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,252,254,1,7,248,255,1,8,245,254,1,9,245,254,2,1,244,0,2,2,244,0,2,3,244,0,2,4,244,0,2,5,247,90,2,6,253,228,2,7,251,23,2,8,248,0,2,9,244,0,2,10,244,0,3,5,201,255,3,6,213,229,3,7,248,203,4,3,165,255,4,4,177,255,4,6,201,2,4,7,221,134,4,8,251,242,5,4,166,3,5,5,177,0,5,9,252,211],"secondary":false},{"width":3,"bonus":100,"chr":"l","pixels":[1,0,243,255,1,1,245,254,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,244,0,2,2,244,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0],"secondary":false},{"width":11,"bonus":225,"chr":"m","pixels":[1,3,208,255,1,4,254,255,1,5,255,255,1,6,246,254,1,7,245,254,1,8,245,254,1,9,245,254,2,4,229,134,2,5,254,12,2,6,255,0,2,7,245,0,2,8,244,0,2,9,244,0,2,10,244,0,3,3,237,255,4,3,227,255,4,4,245,116,5,4,254,251,5,5,255,255,5,6,245,254,5,7,245,254,5,8,245,254,5,9,245,254,6,4,158,191,6,5,250,8,6,6,255,0,6,7,244,0,6,8,244,0,6,9,244,0,6,10,244,0,7,3,237,255,8,3,223,255,8,4,246,116,9,4,249,210,9,5,246,248,9,6,245,254,9,7,245,254,9,8,245,254,9,9,245,254,10,5,205,0,10,6,239,0,10,7,244,0,10,8,244,0,10,9,244,0,10,10,244,0],"secondary":false},{"width":7,"bonus":145,"chr":"n","pixels":[1,3,208,255,1,4,254,255,1,5,255,255,1,6,246,254,1,7,245,254,1,8,245,254,1,9,245,254,2,4,229,134,2,5,254,12,2,6,255,0,2,7,245,0,2,8,244,0,2,9,244,0,2,10,244,0,3,3,237,255,4,3,223,255,4,4,245,118,5,4,249,210,5,5,246,248,5,6,245,254,5,7,245,254,5,8,245,254,5,9,245,254,6,5,205,0,6,6,239,0,6,7,244,0,6,8,244,0,6,9,244,0,6,10,244,0],"secondary":false},{"width":8,"bonus":160,"chr":"o","pixels":[1,4,167,255,1,5,251,255,1,6,250,255,1,7,250,255,1,8,168,250,2,3,163,255,2,4,159,245,2,5,175,31,2,6,252,0,2,7,250,23,2,8,253,156,2,9,223,189,3,3,231,255,3,4,165,11,3,9,249,245,3,10,165,0,4,3,225,255,4,4,232,21,4,9,226,255,4,10,239,0,5,4,248,198,5,8,195,255,5,10,226,0,6,4,188,155,6,5,244,218,6,6,239,249,6,7,215,246,6,8,155,191,6,9,196,6,7,6,208,0,7,7,234,0,7,8,207,0],"secondary":false},{"width":8,"bonus":195,"chr":"p","pixels":[1,3,211,255,1,4,255,255,1,5,255,255,1,6,248,255,1,7,255,255,1,8,255,255,1,9,236,252,1,10,245,253,1,11,245,254,1,12,245,254,2,4,235,149,2,5,255,12,2,6,255,0,2,7,249,18,2,8,255,146,2,9,255,114,2,10,234,0,2,11,243,0,2,12,244,0,2,13,244,0,3,3,219,255,3,9,240,235,4,3,233,255,4,4,221,22,4,9,234,254,4,10,222,0,5,4,250,199,5,8,199,255,5,9,159,242,5,10,233,0,6,4,203,159,6,5,245,220,6,6,241,249,6,7,217,246,6,8,163,197,6,9,201,10,7,6,211,0,7,7,235,0,7,8,210,0],"secondary":false},{"width":8,"bonus":220,"chr":"q","pixels":[1,4,173,255,1,5,253,255,1,6,250,255,1,7,253,255,1,8,181,253,2,3,175,255,2,4,163,243,2,5,182,34,2,6,253,0,2,7,250,21,2,8,254,153,2,9,232,197,3,3,237,255,3,4,177,10,3,5,155,0,3,9,249,245,3,10,179,0,4,3,223,255,4,4,238,19,4,9,222,254,4,10,239,0,5,4,246,192,5,8,173,255,5,10,227,41,6,3,237,255,6,4,247,252,6,5,252,247,6,6,246,253,6,7,245,254,6,8,246,253,6,9,251,248,6,10,248,251,6,11,245,254,6,12,245,254,7,4,238,0,7,5,244,0,7,6,244,0,7,7,244,0,7,8,244,0,7,9,244,0,7,10,244,0,7,11,244,0,7,12,244,0,7,13,244,0],"secondary":false},{"width":5,"bonus":85,"chr":"r","pixels":[1,3,205,255,1,4,247,253,1,5,255,255,1,6,246,254,1,7,245,254,1,8,245,254,1,9,245,254,2,4,238,180,2,5,247,29,2,6,255,0,2,7,245,0,2,8,244,0,2,9,244,0,2,10,244,0,3,3,231,255,3,5,168,0,4,4,231,0],"secondary":false},{"width":7,"bonus":125,"chr":"s","pixels":[1,4,251,255,1,5,225,253,1,9,198,251,2,3,219,255,2,5,253,139,2,6,240,146,2,9,243,251,2,10,195,0,3,3,239,255,3,4,219,0,3,6,243,241,3,9,237,255,3,10,240,0,4,3,229,255,4,4,241,25,4,6,184,245,4,7,243,139,4,9,197,255,4,10,237,0,5,4,233,43,5,7,239,217,5,8,236,233,5,10,198,0,6,8,203,0,6,9,215,0],"secondary":false},{"width":4,"bonus":95,"chr":"t","pixels":[0,3,211,255,1,2,233,255,1,3,255,255,1,4,253,246,1,5,245,254,1,6,245,254,1,7,245,254,1,8,253,255,2,3,253,241,2,4,255,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,245,36,2,9,255,239,3,3,195,255,3,4,240,0,3,9,201,245,3,10,239,0],"secondary":false},{"width":7,"bonus":150,"chr":"u","pixels":[1,3,243,255,1,4,245,254,1,5,245,254,1,6,245,254,1,7,248,255,1,8,248,254,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,249,60,2,9,254,236,3,9,237,249,3,10,235,0,4,8,165,255,4,10,231,0,5,3,243,255,5,4,245,254,5,5,245,254,5,6,245,254,5,7,245,254,5,8,246,253,5,9,249,245,6,4,244,0,6,5,244,0,6,6,244,0,6,7,244,0,6,8,244,0,6,9,244,0,6,10,240,0],"secondary":false},{"width":6,"bonus":120,"chr":"v","pixels":[0,3,211,255,1,4,238,170,1,5,246,246,1,6,207,246,2,5,160,8,2,6,243,78,2,7,234,171,2,8,239,242,2,9,195,247,3,7,168,202,3,8,237,225,3,9,250,216,3,10,189,0,4,5,219,255,4,6,223,255,4,7,158,217,4,8,154,74,4,9,209,0,4,10,212,0,5,3,231,255,5,4,167,221,5,5,162,88,5,6,220,0,5,7,223,0],"secondary":false},{"width":9,"bonus":200,"chr":"w","pixels":[0,3,187,255,1,4,227,164,1,5,229,229,1,6,244,252,1,7,187,253,2,6,208,16,2,7,246,105,2,8,244,223,2,9,255,255,3,6,217,255,3,7,213,253,3,8,183,190,3,9,223,70,3,10,255,0,4,3,245,255,4,4,212,254,4,6,158,50,4,7,218,0,4,8,211,0,5,4,252,185,5,5,251,237,5,6,210,218,6,5,185,11,6,6,239,76,6,7,220,161,6,8,232,237,6,9,224,250,7,6,163,251,7,7,229,245,7,8,242,240,7,9,240,174,7,10,220,0,8,3,231,255,8,4,233,255,8,5,180,237,8,6,162,162,8,7,174,56,8,8,220,0,8,9,228,0,8,10,164,0],"secondary":false},{"width":6,"bonus":105,"chr":"x","pixels":[1,3,209,255,1,4,206,222,1,8,202,255,1,9,186,254,2,4,230,133,2,5,248,238,2,6,169,240,2,7,229,255,2,9,202,0,2,10,185,0,3,5,225,227,3,6,254,240,3,7,224,198,3,8,231,22,4,4,231,255,4,6,201,8,4,7,247,132,4,8,247,237,5,3,177,255,5,5,231,0,5,9,250,207],"secondary":false},{"width":6,"bonus":150,"chr":"y","pixels":[0,3,205,255,0,12,201,255,1,4,238,183,1,5,247,249,1,6,179,247,1,12,231,255,1,13,201,0,2,5,176,20,2,6,246,100,2,7,231,201,2,8,233,245,2,10,155,255,2,11,237,255,2,13,231,0,3,7,178,187,3,8,242,222,3,9,249,215,3,10,194,156,3,11,165,34,3,12,237,0,4,5,217,255,4,6,225,255,4,7,159,219,4,9,211,0,4,10,210,0,5,3,235,255,5,4,170,226,5,5,162,96,5,6,218,1,5,7,225,0],"secondary":false},{"width":6,"bonus":115,"chr":"z","pixels":[1,3,191,255,1,9,251,255,2,3,239,255,2,4,191,0,2,7,217,255,2,9,250,248,2,10,252,0,3,3,239,255,3,4,241,19,3,5,161,255,3,6,208,255,3,8,218,0,3,9,248,246,3,10,243,0,4,3,249,255,4,4,253,227,4,6,162,7,4,7,208,0,4,9,239,255,4,10,240,0,5,4,251,39,5,5,225,0,5,10,240,0],"secondary":false},{"width":8,"bonus":175,"chr":"A","pixels":[0,9,208,255,1,6,179,255,1,7,235,255,1,8,165,242,1,10,208,0,2,4,231,255,2,5,177,252,2,6,247,251,2,7,187,39,2,8,235,0,2,9,157,0,3,1,215,255,3,2,202,255,3,4,158,32,3,5,232,0,3,6,247,239,3,7,244,25,4,2,249,223,4,3,242,203,4,4,165,156,4,6,231,255,4,7,234,26,5,3,226,69,5,4,230,173,5,5,242,246,5,6,251,255,5,7,241,105,6,5,159,14,6,6,241,96,6,7,254,186,6,8,245,249,6,9,164,251,7,8,192,36,7,9,246,124,7,10,161,0],"secondary":false},{"width":8,"bonus":260,"chr":"B","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,255,255,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,254,240,2,10,255,0,3,1,241,255,3,2,240,0,3,5,241,255,3,6,240,0,3,9,239,255,3,10,240,0,4,1,237,255,4,2,242,13,4,5,255,255,4,6,243,19,4,9,235,255,4,10,240,0,5,1,181,255,5,2,247,150,5,5,201,251,5,6,255,152,5,9,176,251,5,10,236,0,6,2,237,209,6,3,245,241,6,4,173,227,6,5,155,27,6,6,237,190,6,7,246,242,6,8,195,238,6,9,160,43,6,10,173,0,7,3,194,0,7,4,232,0,7,5,154,0,7,7,177,0,7,8,233,0,7,9,182,0],"secondary":false},{"width":8,"bonus":140,"chr":"C","pixels":[1,3,199,255,1,4,253,255,1,5,251,255,1,6,252,254,1,7,206,255,2,2,235,255,2,4,203,25,2,5,254,0,2,6,251,19,2,7,253,99,2,8,251,239,3,1,191,255,3,3,235,0,3,9,251,215,4,1,237,255,4,2,193,9,4,9,248,252,4,10,212,0,5,1,237,255,5,2,238,10,5,9,240,254,5,10,245,0,6,1,189,255,6,2,241,69,6,9,170,255,6,10,240,0,7,2,189,0,7,10,170,0],"secondary":false},{"width":9,"bonus":240,"chr":"D","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,255,255,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,254,240,2,10,255,0,3,1,243,255,3,2,240,0,3,9,245,255,3,10,240,0,4,1,233,255,4,2,244,25,4,9,227,255,4,10,245,0,5,1,165,255,5,2,244,138,5,9,167,236,5,10,227,0,6,2,248,242,6,3,207,192,6,7,167,255,6,8,229,255,6,9,160,43,6,10,154,0,7,3,248,163,7,4,242,233,7,5,242,251,7,6,222,248,7,7,179,209,7,8,176,36,7,9,229,0,8,4,158,0,8,5,222,0,8,6,238,0,8,7,216,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,255,255,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,254,240,2,10,255,0,3,1,239,255,3,2,240,0,3,5,239,255,3,6,240,0,3,9,239,255,3,10,240,0,4,1,239,255,4,2,240,0,4,5,239,255,4,6,240,0,4,9,239,255,4,10,240,0,5,1,157,255,5,2,240,0,5,6,240,0,5,9,157,255,5,10,240,0],"secondary":false},{"width":6,"bonus":150,"chr":"F","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,1,239,255,3,2,240,0,3,5,239,255,3,6,240,0,4,1,239,255,4,2,240,0,4,5,239,255,4,6,240,0,5,1,157,255,5,2,240,0,5,6,240,0],"secondary":false},{"width":9,"bonus":210,"chr":"G","pixels":[1,3,190,255,1,4,253,255,1,5,251,255,1,6,255,255,1,7,211,252,2,2,235,255,2,4,196,31,2,5,254,0,2,6,251,23,2,7,255,106,2,8,252,242,3,1,171,255,3,3,236,0,3,8,161,150,3,9,251,201,4,1,233,255,4,2,176,23,4,9,249,251,4,10,198,0,5,1,241,255,5,2,233,0,5,5,239,255,5,9,240,254,5,10,245,0,6,1,221,255,6,2,243,34,6,5,241,255,6,6,242,38,6,9,225,255,6,10,240,0,7,2,226,52,7,5,235,255,7,6,254,245,7,7,245,254,7,8,245,254,7,9,186,226,7,10,225,0,8,6,236,0,8,7,244,0,8,8,244,0,8,9,244,0,8,10,165,0],"secondary":false},{"width":8,"bonus":210,"chr":"H","pixels":[1,1,243,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,2,244,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,5,239,255,3,6,240,0,4,5,239,255,4,6,240,0,5,5,241,255,5,6,242,38,6,1,243,255,6,2,245,254,6,3,245,254,6,4,245,254,6,5,245,254,6,6,254,245,6,7,245,254,6,8,245,254,6,9,245,254,7,2,244,0,7,3,244,0,7,4,244,0,7,5,244,0,7,6,244,0,7,7,244,0,7,8,244,0,7,9,244,0,7,10,244,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[1,1,211,255,1,9,209,255,2,1,253,255,2,2,253,246,2,3,245,254,2,4,245,254,2,5,245,254,2,6,245,254,2,7,245,254,2,8,245,254,2,9,254,255,2,10,209,0,3,1,191,255,3,2,254,0,3,3,244,0,3,4,244,0,3,5,244,0,3,6,244,0,3,7,244,0,3,8,244,0,3,9,253,192,3,10,254,0],"secondary":false},{"width":3,"bonus":125,"chr":"J","pixels":[0,12,206,254,0,13,232,0,1,1,243,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,1,10,238,253,1,11,198,242,1,13,205,0,2,2,244,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,2,11,236,0,2,12,188,0],"secondary":false},{"width":7,"bonus":170,"chr":"K","pixels":[1,1,243,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,252,254,1,6,250,254,1,7,245,254,1,8,245,254,1,9,245,254,2,2,244,0,2,3,244,0,2,4,247,69,2,5,253,221,2,6,252,30,2,7,249,0,2,8,244,0,2,9,244,0,2,10,244,0,3,4,221,255,3,5,239,249,3,6,241,165,4,3,203,255,4,5,224,26,4,6,249,184,4,7,241,232,5,1,175,255,5,2,177,255,5,4,203,0,5,7,210,124,5,8,252,242,5,9,153,210,6,2,176,3,6,3,177,0,6,9,251,201],"secondary":false},{"width":6,"bonus":120,"chr":"L","pixels":[1,1,243,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,255,255,2,2,244,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,8,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,178,252,5,10,255,0],"secondary":false},{"width":10,"bonus":295,"chr":"M","pixels":[1,1,255,255,1,2,247,253,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,175,255,2,2,254,225,2,3,251,155,2,4,247,73,2,5,244,5,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,2,179,15,3,3,234,92,3,4,220,194,3,5,233,246,3,6,163,252,4,5,170,11,4,6,234,84,4,7,219,185,4,8,237,247,4,9,172,250,5,7,212,232,5,8,231,211,5,9,240,120,5,10,169,0,6,4,196,255,6,5,184,255,6,8,193,0,6,9,192,0,7,1,205,255,7,2,213,255,7,5,204,45,7,6,194,47,8,1,243,255,8,2,252,247,8,3,253,246,8,4,249,250,8,5,246,253,8,6,245,254,8,7,245,254,8,8,245,254,8,9,245,254,9,2,244,0,9,3,244,0,9,4,244,0,9,5,244,0,9,6,244,0,9,7,244,0,9,8,244,0,9,9,244,0,9,10,244,0],"secondary":false},{"width":9,"bonus":240,"chr":"N","pixels":[1,1,255,255,1,2,250,255,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,2,255,239,2,3,252,116,2,4,244,4,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,2,161,70,3,3,251,196,3,4,230,231,4,4,215,110,4,5,250,234,4,6,173,222,5,6,245,152,5,7,244,240,6,7,182,118,6,8,251,227,6,9,211,226,7,1,243,255,7,2,245,254,7,3,245,254,7,4,245,254,7,5,245,254,7,6,245,254,7,7,245,254,7,8,247,252,7,9,253,246,7,10,187,0,8,2,244,0,8,3,244,0,8,4,244,0,8,5,244,0,8,6,244,0,8,7,244,0,8,8,244,0,8,9,244,0,8,10,244,0],"secondary":false},{"width":10,"bonus":210,"chr":"O","pixels":[1,3,211,255,1,4,255,255,1,5,251,255,1,6,255,255,1,7,212,252,2,2,233,255,2,4,214,21,2,5,255,0,2,6,251,19,2,7,255,96,2,8,251,237,3,1,199,255,3,3,233,0,3,9,251,206,4,1,243,255,4,2,201,9,4,9,247,252,4,10,202,0,5,1,239,255,5,2,243,11,5,9,241,255,5,10,244,0,6,1,181,255,6,2,246,105,6,9,185,251,6,10,241,0,7,2,248,240,7,3,186,193,7,8,233,255,7,10,182,0,8,3,247,164,8,4,240,235,8,5,243,251,8,6,227,248,8,7,183,219,8,8,158,58,8,9,234,0,9,4,158,0,9,5,221,0,9,6,239,0,9,7,221,0,9,8,157,0],"secondary":false},{"width":7,"bonus":175,"chr":"P","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,1,235,255,3,2,240,5,3,5,227,255,3,6,240,0,4,1,185,255,4,2,246,141,4,5,166,248,4,6,227,0,5,2,238,208,5,3,244,241,5,4,188,235,5,5,158,34,5,6,161,0,6,3,194,0,6,4,231,0,6,5,173,0],"secondary":false},{"width":10,"bonus":220,"chr":"Q","pixels":[1,3,211,255,1,4,255,255,1,5,251,255,1,6,255,255,1,7,212,252,2,2,233,255,2,4,214,21,2,5,255,0,2,6,251,19,2,7,255,96,2,8,251,237,3,1,199,255,3,3,233,0,3,9,251,206,4,1,243,255,4,2,201,9,4,9,247,252,4,10,202,0,5,1,239,255,5,2,243,11,5,9,254,255,5,10,247,90,6,1,181,255,6,2,246,105,6,9,211,253,6,10,254,237,6,11,165,184,7,2,248,240,7,3,186,193,7,8,231,255,7,10,217,53,7,11,253,234,8,3,247,164,8,4,240,235,8,5,242,251,8,6,222,248,8,7,179,217,8,8,158,60,8,9,232,0,8,12,232,0,9,4,158,0,9,5,221,0,9,6,238,0,9,7,216,0],"secondary":false},{"width":7,"bonus":200,"chr":"R","pixels":[1,1,255,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,255,255,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,2,1,239,255,2,2,255,0,2,3,244,0,2,4,244,0,2,5,254,240,2,6,255,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,3,1,235,255,3,2,240,3,3,5,249,255,3,6,244,80,4,1,189,255,4,2,246,133,4,5,178,252,4,6,254,196,4,7,224,240,5,2,239,208,5,3,244,244,5,4,188,235,5,6,176,0,5,7,212,87,5,8,246,211,5,9,235,242,6,3,195,0,6,4,234,0,6,5,173,0,6,9,219,94,6,10,223,0],"secondary":false},{"width":7,"bonus":150,"chr":"S","pixels":[1,2,241,255,1,3,253,255,1,4,210,250,1,9,214,250,2,1,209,255,2,3,241,8,2,4,254,172,2,5,237,170,2,9,244,252,2,10,210,0,3,1,239,255,3,2,210,0,3,5,252,248,3,6,169,43,3,9,235,255,3,10,241,0,4,1,225,255,4,2,241,29,4,5,172,240,4,6,252,190,4,9,177,253,4,10,235,0,5,2,231,46,5,6,224,195,5,7,248,236,5,8,198,236,5,10,176,0,6,7,171,0,6,8,230,0,6,9,183,0],"secondary":false},{"width":8,"bonus":135,"chr":"T","pixels":[1,1,239,255,2,1,239,255,2,2,240,0,3,1,241,255,3,2,242,38,4,1,255,255,4,2,254,245,4,3,245,254,4,4,245,254,4,5,245,254,4,6,245,254,4,7,245,254,4,8,245,254,4,9,245,254,5,1,239,255,5,2,255,0,5,3,244,0,5,4,244,0,5,5,244,0,5,6,244,0,5,7,244,0,5,8,244,0,5,9,244,0,5,10,244,0,6,1,239,255,6,2,240,0,7,2,240,0],"secondary":false},{"width":9,"bonus":190,"chr":"U","pixels":[1,1,243,255,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,252,254,1,8,164,251,2,2,244,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,245,21,2,8,254,172,2,9,213,168,3,9,244,233,4,9,240,254,4,10,223,0,5,9,211,255,5,10,239,0,6,8,205,255,6,10,212,0,7,1,243,255,7,2,245,254,7,3,245,254,7,4,245,254,7,5,245,254,7,6,243,254,7,7,216,247,7,9,205,1,8,2,244,0,8,3,244,0,8,4,244,0,8,5,244,0,8,6,244,0,8,7,242,0,8,8,209,0],"secondary":false},{"width":7,"bonus":155,"chr":"V","pixels":[0,1,211,255,1,2,239,172,1,3,247,247,1,4,214,247,2,3,163,9,2,4,244,80,2,5,238,175,2,6,247,247,2,7,209,247,3,6,165,11,3,7,245,94,3,8,247,227,3,9,254,255,4,6,199,255,4,7,242,255,4,8,198,214,4,9,230,87,4,10,254,0,5,3,199,255,5,4,245,255,5,5,180,242,5,6,161,134,5,7,200,11,5,8,242,0,5,9,166,0,6,1,247,255,6,2,184,244,6,3,162,140,6,4,202,15,6,5,245,0,6,6,171,0],"secondary":false},{"width":11,"bonus":295,"chr":"W","pixels":[0,1,187,255,1,2,230,179,1,3,238,240,1,4,246,253,1,5,186,253,2,3,161,0,2,4,228,34,2,5,248,96,2,6,227,173,2,7,227,229,2,8,238,250,2,9,180,254,3,6,180,195,3,7,230,214,3,8,248,225,3,9,247,168,3,10,180,0,4,3,183,255,4,4,239,255,4,5,192,253,4,6,156,194,4,7,160,77,4,8,193,2,4,9,219,0,4,10,163,0,5,1,255,255,5,2,236,252,5,3,182,174,5,4,187,19,5,5,240,0,5,6,190,0,6,2,255,134,6,3,251,212,6,4,244,244,6,5,168,247,7,4,213,32,7,5,242,105,7,6,225,194,7,7,236,244,7,8,205,250,8,6,168,170,8,7,227,190,8,8,252,239,8,9,246,223,9,3,185,255,9,4,241,255,9,5,219,255,9,6,175,225,9,7,162,140,9,8,177,36,9,9,236,0,9,10,216,0,10,1,223,255,10,2,182,222,10,3,171,139,10,4,193,37,10,5,242,0,10,6,219,0,10,7,154,0],"secondary":false},{"width":7,"bonus":150,"chr":"X","pixels":[0,9,166,255,1,1,187,255,1,2,231,233,1,8,231,255,1,10,166,0,2,2,209,101,2,3,249,229,2,4,178,223,2,6,208,255,2,7,170,255,2,9,231,0,3,4,249,217,3,5,255,255,3,6,167,203,3,7,208,0,3,8,170,0,4,3,211,255,4,4,160,247,4,5,225,89,4,6,254,215,4,7,217,206,5,1,169,255,5,2,211,255,5,4,211,0,5,5,155,0,5,7,233,130,5,8,249,243,6,2,170,7,6,3,212,0,6,9,249,178],"secondary":false},{"width":7,"bonus":115,"chr":"Y","pixels":[0,1,190,255,1,2,248,234,1,3,200,233,2,3,238,115,2,4,247,235,2,5,191,235,3,5,251,227,3,6,253,251,3,7,246,253,3,8,245,254,3,9,245,254,4,4,231,255,4,6,225,12,4,7,249,0,4,8,244,0,4,9,244,0,4,10,244,0,5,1,155,255,5,2,237,255,5,4,158,26,5,5,232,0,6,2,164,33,6,3,237,0],"secondary":false},{"width":8,"bonus":190,"chr":"Z","pixels":[1,1,239,255,1,9,251,255,2,1,239,255,2,2,240,0,2,7,221,255,2,8,182,252,2,9,251,249,2,10,252,0,3,1,239,255,3,2,240,0,3,5,161,255,3,6,233,255,3,8,222,0,3,9,250,244,3,10,245,0,4,1,239,255,4,2,240,0,4,4,233,255,4,5,167,245,4,6,168,27,4,7,233,0,4,9,239,255,4,10,240,0,5,1,245,255,5,2,250,183,5,3,221,255,5,5,233,0,5,6,160,0,5,9,239,255,5,10,240,0,6,1,251,255,6,2,251,143,6,3,183,14,6,4,222,0,6,9,239,255,6,10,240,0,7,2,252,0,7,10,240,0],"secondary":false},{"width":7,"bonus":190,"chr":"0","pixels":[1,2,173,255,1,3,245,255,1,4,254,255,1,5,248,254,1,6,254,255,1,7,238,254,1,8,157,255,2,1,203,255,2,3,184,46,2,4,245,1,2,5,254,0,2,6,247,1,2,7,254,33,2,8,247,139,2,9,233,218,3,1,243,255,3,2,206,13,3,9,250,250,3,10,199,0,4,1,169,255,4,2,251,185,4,8,181,255,4,9,181,251,4,10,245,0,5,2,208,141,5,3,237,209,5,4,232,243,5,5,241,252,5,6,228,250,5,7,206,240,5,8,161,182,5,9,184,14,5,10,178,0,6,4,194,0,6,5,222,0,6,6,238,0,6,7,224,0,6,8,194,0],"secondary":false},{"width":7,"bonus":105,"chr":"1","pixels":[1,2,191,255,2,2,165,253,2,3,201,46,3,1,243,255,3,2,250,249,3,3,251,248,3,4,245,254,3,5,245,254,3,6,245,254,3,7,245,254,3,8,245,254,3,9,245,254,4,2,244,0,4,3,244,0,4,4,244,0,4,5,244,0,4,6,244,0,4,7,244,0,4,8,244,0,4,9,244,0,4,10,244,0],"secondary":false},{"width":7,"bonus":140,"chr":"2","pixels":[1,9,253,255,2,1,203,255,2,8,191,255,2,9,248,251,2,10,253,0,3,1,241,255,3,2,203,2,3,6,181,255,3,7,170,253,3,9,251,243,3,10,244,0,4,1,201,255,4,2,247,124,4,5,219,255,4,7,181,2,4,8,169,0,4,9,240,254,4,10,240,0,5,2,241,203,5,3,243,245,5,4,199,241,5,6,220,0,5,9,239,255,5,10,240,0,6,3,192,0,6,4,233,0,6,5,188,0,6,10,240,0],"secondary":false},{"width":7,"bonus":160,"chr":"3","pixels":[1,9,197,250,2,1,221,255,2,5,205,255,2,9,243,251,2,10,193,0,3,1,239,255,3,2,221,1,3,5,255,255,3,6,209,17,3,9,235,255,3,10,239,0,4,1,199,255,4,2,247,126,4,4,169,255,4,5,187,248,4,6,255,148,4,9,177,252,4,10,235,0,5,2,242,211,5,3,241,243,5,4,159,219,5,5,173,18,5,6,233,195,5,7,245,241,5,8,193,237,5,9,157,44,5,10,175,0,6,3,200,0,6,4,230,0,6,7,178,0,6,8,232,0,6,9,179,0],"secondary":false},{"width":7,"bonus":160,"chr":"4","pixels":[1,6,157,255,1,7,253,255,2,5,211,255,2,7,247,243,2,8,254,28,3,3,189,255,3,6,212,0,3,7,242,248,3,8,238,30,4,2,203,255,4,4,198,46,4,5,163,56,4,7,237,255,4,8,241,64,5,1,243,255,5,2,249,250,5,3,252,247,5,4,247,252,5,5,245,254,5,6,245,254,5,7,255,255,5,8,254,246,5,9,246,253,6,2,244,0,6,3,244,0,6,4,244,0,6,5,244,0,6,6,244,0,6,7,254,237,6,8,255,28,6,9,245,0,6,10,244,0],"secondary":false},{"width":7,"bonus":170,"chr":"5","pixels":[1,1,175,255,1,2,197,255,1,3,219,255,1,4,231,255,1,9,203,251,2,1,243,255,2,2,191,69,2,3,203,32,2,4,252,234,2,5,232,2,2,9,243,251,2,10,200,0,3,1,239,255,3,2,244,0,3,4,236,252,3,5,233,22,3,9,229,255,3,10,240,0,4,1,239,255,4,2,240,0,4,4,163,255,4,5,248,185,4,8,173,255,4,9,154,247,4,10,229,0,5,2,240,0,5,5,221,183,5,6,247,235,5,7,225,246,5,8,165,215,5,9,177,16,6,6,159,0,6,7,227,0,6,8,217,0],"secondary":false},{"width":7,"bonus":175,"chr":"6","pixels":[1,3,205,255,1,4,251,255,1,5,255,255,1,6,251,255,1,7,250,254,1,8,166,251,2,2,202,255,2,4,228,134,2,5,253,120,2,6,255,4,2,7,251,18,2,8,252,139,2,9,228,202,3,1,217,255,3,3,202,0,3,4,238,250,3,9,247,245,3,10,181,0,4,1,241,255,4,2,218,0,4,4,196,255,4,5,246,152,4,9,184,254,4,10,238,0,5,2,242,2,5,5,236,190,5,6,245,240,5,7,228,248,5,8,178,225,5,9,161,35,5,10,183,0,6,6,176,0,6,7,231,0,6,8,222,0,6,9,157,0],"secondary":false},{"width":7,"bonus":135,"chr":"7","pixels":[1,1,239,255,2,1,239,255,2,2,240,0,3,1,239,255,3,2,240,0,3,7,171,255,3,8,247,255,3,9,181,241,4,1,239,255,4,2,240,0,4,5,199,255,4,6,237,255,4,7,162,215,4,8,180,41,4,9,248,0,4,10,171,0,5,1,243,255,5,2,246,117,5,3,223,255,5,4,212,255,5,5,153,171,5,6,201,13,5,7,237,0,6,1,253,255,6,2,251,182,6,4,223,0,6,5,212,0],"secondary":false},{"width":7,"bonus":190,"chr":"8","pixels":[1,2,245,255,1,3,251,255,1,4,160,243,1,6,217,255,1,7,251,255,1,8,242,254,2,1,215,255,2,3,246,12,2,4,254,185,2,5,247,243,2,7,217,1,2,8,252,66,2,9,253,219,3,1,239,255,3,2,216,0,3,5,247,235,3,6,235,8,3,9,243,251,3,10,217,0,4,1,201,255,4,2,246,113,4,4,209,255,4,5,210,230,4,6,246,177,4,9,195,255,4,10,239,0,5,2,244,215,5,3,237,241,5,5,210,11,5,6,230,176,5,7,247,238,5,8,201,240,5,10,195,0,6,3,206,0,6,4,224,0,6,7,159,0,6,8,231,0,6,9,189,0],"secondary":false},{"width":7,"bonus":155,"chr":"9","pixels":[1,2,229,255,1,3,251,255,1,4,243,254,2,1,211,255,2,3,229,0,2,4,252,72,2,5,253,221,2,9,241,255,3,1,233,255,3,2,211,6,3,5,235,247,3,6,220,0,3,9,209,255,3,10,241,0,4,2,246,161,4,6,236,80,4,8,241,255,4,10,209,0,5,2,195,147,5,3,237,224,5,4,241,252,5,5,245,245,5,6,233,231,5,7,184,215,5,8,163,78,5,9,242,0,6,4,208,0,6,5,238,0,6,6,235,0,6,7,211,0,6,8,155,0],"secondary":false},{"width":11,"bonus":220,"chr":"%","pixels":[1,3,251,255,1,4,253,255,2,2,229,255,2,4,253,41,2,5,254,233,3,2,219,255,3,3,237,83,3,5,228,250,3,6,232,0,3,9,217,255,4,3,250,226,4,4,231,245,4,6,235,99,4,7,217,255,4,10,218,0,5,4,229,62,5,5,248,205,5,6,200,220,5,8,217,6,6,3,166,255,6,4,197,255,6,5,170,220,6,6,252,247,6,7,252,251,6,8,247,253,7,2,209,255,7,4,166,2,7,5,244,214,7,6,161,57,7,7,244,0,7,8,249,40,7,9,254,234,8,3,210,0,8,5,197,254,8,6,222,102,8,9,230,250,8,10,234,0,9,6,242,210,9,7,242,248,9,8,213,245,9,10,226,0,10,7,199,0,10,8,235,0,10,9,205,0],"secondary":false},{"width":5,"bonus":125,"chr":"/","pixels":[1,8,167,255,1,9,227,255,1,10,219,255,1,11,172,235,2,4,173,255,2,5,233,255,2,6,212,255,2,7,167,228,2,8,156,143,2,9,176,38,2,10,228,0,2,11,220,0,2,12,158,0,3,0,181,255,3,1,237,255,3,2,203,255,3,3,163,221,3,4,156,129,3,5,180,27,3,6,233,0,3,7,212,0,4,0,157,115,4,1,185,18,4,2,237,0,4,3,203,0],"secondary":false},{"width":7,"bonus":90,"chr":"+","pixels":[1,6,239,255,2,6,241,255,2,7,242,38,3,3,243,255,3,4,245,254,3,5,245,254,3,6,255,255,3,7,254,245,3,8,245,254,4,4,244,0,4,5,244,0,4,6,254,240,4,7,255,0,4,8,244,0,4,9,244,0,5,6,239,255,5,7,240,0,6,7,240,0],"secondary":false},{"width":6,"bonus":100,"chr":"?","pixels":[1,1,209,255,2,1,239,255,2,2,209,0,2,5,177,255,2,6,191,255,2,8,182,252,2,9,219,255,3,1,207,255,3,2,246,110,3,4,175,255,3,6,177,0,3,7,192,0,3,9,207,113,3,10,219,0,4,2,245,214,4,3,241,245,4,4,158,217,4,5,177,3,5,3,206,0,5,4,232,0],"secondary":false},{"width":5,"bonus":80,"chr":"!","pixels":[2,1,243,255,2,2,245,254,2,3,245,254,2,4,245,254,2,5,245,254,2,6,245,254,2,8,199,255,2,9,241,253,3,2,244,0,3,3,244,0,3,4,244,0,3,5,244,0,3,6,244,0,3,7,244,0,3,9,206,41,3,10,239,0],"secondary":false},{"width":11,"bonus":365,"chr":"@","pixels":[1,4,219,255,1,5,255,255,1,6,251,255,1,7,252,254,1,8,191,252,2,2,187,255,2,3,186,254,2,5,222,26,2,6,255,28,2,7,251,34,2,8,254,137,2,9,250,243,3,2,175,253,3,3,194,29,3,4,234,195,3,5,253,255,3,6,251,255,3,7,232,252,3,9,199,172,3,10,249,165,4,1,209,255,4,3,229,192,4,4,161,242,4,5,184,23,4,6,253,1,4,7,252,88,4,8,251,219,4,10,241,238,4,11,161,0,5,1,237,255,5,2,209,1,5,3,242,252,5,4,174,10,5,8,239,246,5,9,215,2,5,10,241,253,5,11,225,0,6,1,229,255,6,2,239,17,6,3,238,255,6,4,241,43,6,7,155,255,6,9,232,9,6,10,220,255,6,11,239,0,7,1,154,255,7,2,243,142,7,3,189,249,7,4,254,245,7,5,245,254,7,6,245,254,7,7,238,250,7,8,197,141,7,10,160,250,7,11,220,0,8,2,240,231,8,3,214,201,8,4,204,91,8,5,245,43,8,6,246,49,8,7,249,105,8,8,252,226,8,11,157,0,9,3,236,137,9,4,239,221,9,5,241,249,9,6,222,248,9,7,185,233,9,9,224,0,10,5,207,0,10,6,235,0,10,7,216,0,10,8,169,0],"secondary":false},{"width":8,"bonus":185,"chr":"#","pixels":[1,4,208,255,1,7,239,255,1,8,164,78,2,4,231,255,2,5,239,185,2,6,211,255,2,7,251,255,2,8,249,168,3,2,179,255,3,4,234,244,3,5,235,44,3,6,175,6,3,7,252,242,3,8,252,0,3,9,164,0,4,3,179,0,4,4,233,229,4,5,229,50,4,7,248,255,4,8,250,178,4,9,213,255,5,2,153,255,5,3,199,255,5,4,245,255,5,5,240,182,5,7,248,252,5,8,249,38,5,9,175,2,5,10,213,0,6,3,157,18,6,4,245,217,6,5,246,0,6,6,171,0,6,7,247,247,6,8,245,0,7,5,208,0,7,8,240,0],"secondary":false},{"width":7,"bonus":180,"chr":"$","pixels":[1,2,245,255,1,3,253,255,1,4,155,242,1,8,205,249,2,1,205,255,2,3,247,62,2,4,255,235,2,5,181,114,2,8,243,251,2,9,208,44,3,0,243,255,3,1,254,255,3,2,252,247,3,3,248,251,3,4,249,254,3,5,254,252,3,6,247,252,3,7,245,254,3,8,254,255,3,9,254,245,4,1,252,212,4,2,254,26,4,3,244,0,4,4,246,46,4,5,254,234,4,6,252,70,4,7,249,120,4,8,252,196,4,9,254,0,4,10,244,0,5,2,217,54,5,6,252,228,5,7,218,240,5,9,194,0,6,7,225,0,6,8,205,0],"secondary":false},{"width":7,"bonus":80,"chr":"^","pixels":[1,5,213,255,2,2,160,255,2,3,197,255,2,6,214,0,3,1,217,255,3,2,203,241,3,3,173,53,3,4,197,0,4,2,228,84,4,3,238,198,4,4,194,242,5,4,197,57,5,5,227,174,5,6,228,241,6,6,163,31,6,7,216,0],"secondary":false},{"width":7,"bonus":30,"chr":"~","pixels":[2,5,235,255,2,6,155,22,3,6,246,142,4,6,246,244,5,6,154,238,5,7,235,0],"secondary":false},{"width":9,"bonus":225,"chr":"&","pixels":[1,6,237,255,1,7,252,254,1,8,231,253,2,2,253,255,2,3,227,253,2,5,217,255,2,7,238,2,2,8,253,106,2,9,250,209,3,1,235,255,3,3,253,55,3,4,254,246,3,5,162,185,3,6,218,0,3,9,247,250,3,10,205,0,4,1,233,255,4,2,241,77,4,4,189,231,4,5,254,222,4,6,178,161,4,9,228,254,4,10,242,0,5,2,252,232,5,3,196,225,5,5,179,38,5,6,249,216,5,7,201,201,5,8,175,255,5,9,153,231,5,10,228,0,6,3,230,0,6,4,173,0,6,7,253,247,6,8,253,251,6,9,183,36,7,5,187,255,7,6,239,255,7,7,155,224,7,8,252,173,7,9,254,212,8,6,191,18,8,7,239,0,8,9,218,167,8,10,211,0],"secondary":false},{"width":7,"bonus":90,"chr":"*","pixels":[1,2,253,255,2,2,208,250,2,3,254,74,2,4,214,254,3,0,219,255,3,1,193,255,3,2,223,255,3,3,250,236,3,5,213,0,4,1,224,39,4,2,237,195,4,3,243,170,4,4,252,226,5,2,245,253,5,3,184,18,5,4,185,89,5,5,232,78,6,3,243,0],"secondary":false},{"width":4,"bonus":115,"chr":"(","pixels":[1,2,205,255,1,3,249,255,1,4,255,255,1,5,248,254,1,6,255,255,1,7,248,254,1,8,203,254,2,0,225,255,2,1,160,228,2,2,170,111,2,3,211,33,2,4,249,3,2,5,255,0,2,6,247,4,2,7,255,29,2,8,249,77,2,9,232,159,2,10,241,240,2,11,170,233,3,0,160,7,3,1,226,0,3,11,238,110,3,12,156,0],"secondary":false},{"width":5,"bonus":110,"chr":")","pixels":[2,0,246,242,2,1,200,247,2,9,191,255,2,10,237,255,3,1,241,91,3,2,231,172,3,3,227,226,3,4,235,247,3,5,242,252,3,6,233,251,3,7,215,244,3,8,189,216,3,9,171,137,3,10,193,14,3,11,237,0,4,3,156,0,4,4,201,0,4,5,227,0,4,6,239,0,4,7,229,0,4,8,206,0,4,9,160,0],"secondary":false},{"width":5,"bonus":45,"chr":"_","pixels":[0,11,239,255,1,11,239,255,1,12,240,0,2,11,239,255,2,12,240,0,3,11,239,255,3,12,240,0,4,11,227,255,4,12,240,0],"secondary":false},{"width":4,"bonus":25,"chr":"-","pixels":[1,6,239,255,2,6,239,255,2,7,240,0,3,6,217,255,3,7,240,0],"secondary":true},{"width":7,"bonus":100,"chr":"=","pixels":[1,4,239,255,1,7,239,255,2,4,239,255,2,5,240,0,2,7,239,255,2,8,240,0,3,4,239,255,3,5,240,0,3,7,239,255,3,8,240,0,4,4,239,255,4,5,240,0,4,7,239,255,4,8,240,0,5,4,239,255,5,5,240,0,5,7,239,255,5,8,240,0,6,5,240,0,6,8,240,0],"secondary":false},{"width":4,"bonus":135,"chr":"[","pixels":[1,0,245,254,1,1,245,254,1,2,245,254,1,3,245,254,1,4,245,254,1,5,245,254,1,6,245,254,1,7,245,254,1,8,245,254,1,9,245,254,1,10,245,254,1,11,248,254,2,0,247,0,2,1,244,0,2,2,244,0,2,3,244,0,2,4,244,0,2,5,244,0,2,6,244,0,2,7,244,0,2,8,244,0,2,9,244,0,2,10,244,0,2,11,254,240,2,12,247,0,3,0,240,0,3,12,240,0],"secondary":false},{"width":4,"bonus":135,"chr":"]","pixels":[1,11,241,255,2,0,254,245,2,1,245,254,2,2,245,254,2,3,245,254,2,4,245,254,2,5,245,254,2,6,245,254,2,7,245,254,2,8,245,254,2,9,245,254,2,10,245,254,2,11,238,253,2,12,241,0,3,0,236,0,3,1,244,0,3,2,244,0,3,3,244,0,3,4,244,0,3,5,244,0,3,6,244,0,3,7,244,0,3,8,244,0,3,9,244,0,3,10,244,0,3,11,244,0,3,12,236,0],"secondary":false},{"width":5,"bonus":125,"chr":"{","pixels":[0,5,153,255,1,5,233,255,1,6,194,135,2,0,253,255,2,1,244,255,2,2,245,254,2,3,245,253,2,4,214,247,2,6,251,210,2,7,248,250,2,8,245,254,2,9,245,254,2,10,253,255,3,1,253,0,3,2,244,0,3,3,244,0,3,4,243,0,3,5,207,0,3,7,207,0,3,8,243,0,3,9,244,0,3,10,245,30,3,11,255,229,4,0,228,0,4,12,229,0],"secondary":false},{"width":5,"bonus":115,"chr":"}","pixels":[1,11,217,255,2,0,251,229,2,1,247,252,2,2,245,254,2,3,245,254,2,4,245,253,2,6,243,255,2,7,244,255,2,8,245,254,2,9,245,254,2,10,227,251,2,12,218,0,3,1,225,0,3,2,244,0,3,3,244,0,3,4,246,57,3,5,255,247,3,7,243,0,3,8,244,0,3,9,244,0,3,10,244,0,3,11,223,0,4,6,247,0],"secondary":false},{"width":4,"bonus":40,"chr":":","pixels":[1,3,215,255,1,4,175,255,1,8,175,255,1,9,213,255,2,4,227,86,2,5,176,0,2,9,206,120,2,10,214,0],"secondary":true},{"width":4,"bonus":45,"chr":";","pixels":[1,3,215,255,1,4,175,255,1,9,243,255,1,10,234,254,1,11,155,228,2,4,227,86,2,5,176,0,2,10,243,4,2,11,234,0],"secondary":true},{"width":6,"bonus":50,"chr":"\\"","pixels":[2,1,166,255,2,2,207,174,2,3,183,162,3,2,198,116,3,3,170,97,4,1,193,255,4,2,208,207,4,3,182,201,5,2,194,0,5,3,169,0],"secondary":true},{"width":4,"bonus":20,"chr":"\'","pixels":[2,1,166,255,2,2,207,174,2,3,183,162,3,2,166,0],"secondary":true},{"width":7,"bonus":80,"chr":"<","pixels":[1,6,154,255,2,5,195,255,2,6,234,226,2,7,165,44,3,4,166,255,3,6,218,113,3,7,234,158,4,4,190,255,4,5,166,0,4,7,233,240,4,8,155,37,5,3,191,255,5,5,190,0,5,8,238,147,6,4,191,0,6,8,179,163],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[1,3,219,255,1,8,197,255,2,4,237,134,2,7,175,255,2,9,198,0,3,4,232,232,3,7,203,255,3,8,176,0,4,5,234,147,4,6,162,245,4,8,204,0,5,5,219,230,5,6,231,227,5,7,156,2,6,6,211,74,6,7,206,0],"secondary":false},{"width":5,"bonus":95,"chr":"\\\\","pixels":[1,0,231,240,1,1,231,251,1,2,167,255,2,0,154,0,2,1,220,27,2,2,237,91,2,3,218,172,2,4,228,234,2,5,237,251,2,6,174,254,3,5,212,20,3,6,240,83,3,7,219,163,3,8,226,228,3,9,239,251,3,10,182,255,4,9,205,15,4,10,240,74,4,11,219,153],"secondary":false},{"width":3,"bonus":20,"chr":".","pixels":[1,8,197,255,1,9,236,255,2,9,210,68,2,10,236,0],"secondary":true},{"width":3,"bonus":20,"chr":",","pixels":[1,9,255,255,1,10,204,247,2,10,255,0,2,11,198,0],"secondary":true},{"width":7,"bonus":125,"chr":"|","pixels":[3,0,245,254,3,1,245,254,3,2,245,254,3,3,245,254,3,4,245,254,3,5,245,254,3,6,245,254,3,7,245,254,3,8,245,254,3,9,245,254,3,10,245,254,3,11,245,254,4,0,244,0,4,1,244,0,4,2,244,0,4,3,244,0,4,4,244,0,4,5,244,0,4,6,244,0,4,7,244,0,4,8,244,0,4,9,244,0,4,10,244,0,4,11,244,0,4,12,244,0],"secondary":false}],"width":11,"spacewidth":3,"shadow":true,"height":14,"basey":9}');

/***/ }),

/***/ "./src/fonts/chatbox/14pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/14pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":8,"bonus":210,"chr":"a","pixels":[1,7,229,255,1,8,255,255,1,9,249,254,2,3,169,255,2,6,161,255,2,7,187,240,2,8,232,28,2,9,255,113,2,10,254,226,3,3,229,255,3,4,183,60,3,6,215,255,3,7,184,86,3,8,176,0,3,10,251,252,3,11,225,0,4,3,245,255,4,4,232,35,4,6,237,255,4,7,221,42,4,10,201,247,4,11,248,0,5,3,199,255,5,4,251,172,5,6,243,255,5,7,242,85,5,9,209,255,5,11,195,0,6,4,245,218,6,5,253,253,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,254,250,7,5,209,4,7,6,252,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,249,0],"secondary":false},{"width":8,"bonus":230,"chr":"b","pixels":[1,0,255,255,1,1,255,255,1,2,255,255,1,3,254,255,1,4,254,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,253,255,1,10,216,242,2,1,255,12,2,2,255,11,2,3,255,93,2,4,255,184,2,5,254,56,2,6,255,21,2,7,255,22,2,8,255,59,2,9,255,190,2,10,253,94,2,11,205,0,3,3,229,253,3,5,184,0,3,10,248,234,4,3,245,255,4,4,234,61,4,10,247,253,4,11,228,0,5,3,160,255,5,4,254,226,5,9,225,255,5,10,180,225,5,11,245,0,6,4,205,150,6,5,250,220,6,6,250,253,6,7,249,254,6,8,226,243,6,9,178,172,6,10,226,8,6,11,159,0,7,6,216,1,7,7,248,0,7,8,248,0,7,9,216,0],"secondary":false},{"width":7,"bonus":125,"chr":"c","pixels":[1,5,245,255,1,6,255,255,1,7,255,255,1,8,250,254,2,4,222,254,2,5,171,118,2,6,247,27,2,7,255,25,2,8,255,77,2,9,254,220,2,10,207,178,3,3,229,255,3,4,167,104,3,5,221,0,3,10,252,236,4,3,249,255,4,4,232,32,4,10,250,254,4,11,233,0,5,3,219,255,5,4,250,77,5,10,220,250,5,11,249,0,6,4,221,13,6,11,216,0],"secondary":false},{"width":8,"bonus":240,"chr":"d","pixels":[1,4,169,255,1,5,251,255,1,6,255,255,1,7,255,255,1,8,253,255,1,9,177,250,2,3,185,255,2,4,207,249,2,5,192,90,2,6,252,23,2,7,255,22,2,8,255,63,2,9,254,198,2,10,234,206,3,3,247,255,3,4,197,55,3,5,202,0,3,10,254,250,3,11,189,0,4,3,213,255,4,4,250,61,4,10,220,248,4,11,249,0,5,4,248,222,5,9,209,255,5,11,214,0,6,0,255,255,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,1,255,8,7,2,255,8,7,3,255,8,7,4,255,8,7,5,255,8,7,6,255,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,0],"secondary":false},{"width":8,"bonus":175,"chr":"e","pixels":[1,5,245,255,1,6,255,255,1,7,255,255,1,8,249,254,2,4,199,253,2,5,161,82,2,6,254,242,2,7,255,54,2,8,255,77,2,9,254,222,2,10,201,176,3,3,239,255,3,4,168,69,3,5,198,0,3,6,243,251,3,7,243,34,3,10,251,235,4,3,231,255,4,4,242,46,4,6,239,255,4,7,242,34,4,10,251,253,4,11,232,0,5,4,249,205,5,6,243,255,5,7,242,34,5,10,226,252,5,11,249,0,6,4,206,172,6,5,249,235,6,6,255,255,6,7,245,33,6,11,223,0,7,6,230,5,7,7,255,1],"secondary":false},{"width":5,"bonus":135,"chr":"f","pixels":[1,3,233,255,2,1,249,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,0,229,255,3,1,165,161,3,2,249,17,3,3,255,255,3,4,255,31,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,0,245,255,4,1,233,38,4,3,203,251,4,4,255,15],"secondary":false},{"width":8,"bonus":265,"chr":"g","pixels":[1,4,167,255,1,5,251,255,1,6,255,255,1,7,255,255,1,8,252,254,1,9,175,249,2,3,184,255,2,4,207,249,2,5,190,90,2,6,251,23,2,7,255,22,2,8,255,63,2,9,255,196,2,10,232,206,2,14,232,237,3,3,247,255,3,4,196,55,3,5,202,0,3,10,254,250,3,11,188,0,3,14,248,252,4,3,209,255,4,4,250,63,4,10,217,246,4,11,249,0,4,14,234,252,5,4,248,223,5,9,211,255,5,11,221,73,5,13,227,255,5,14,180,220,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,254,255,6,12,235,249,6,13,193,194,6,14,230,15,7,4,255,8,7,5,255,8,7,6,255,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,4,7,12,254,0,7,13,229,0],"secondary":false},{"width":8,"bonus":210,"chr":"h","pixels":[1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,254,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,1,255,12,2,2,255,12,2,3,255,83,2,4,255,197,2,5,254,65,2,6,255,22,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0,3,3,219,254,3,5,197,0,4,3,245,255,4,4,223,40,5,3,197,255,5,4,253,186,6,4,242,211,6,5,253,251,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,5,200,2,7,6,249,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,0],"secondary":false},{"width":3,"bonus":90,"chr":"i","pixels":[1,1,223,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,2,223,0,2,4,255,12,2,5,255,12,2,6,255,12,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0],"secondary":false},{"width":4,"bonus":135,"chr":"j","pixels":[0,14,238,255,1,14,231,251,2,1,223,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,233,249,2,14,170,118,3,2,223,0,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,12,3,12,255,8,3,13,255,0,3,14,227,0],"secondary":false},{"width":7,"bonus":200,"chr":"k","pixels":[1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,1,255,12,2,2,255,12,2,3,255,12,2,4,255,12,2,5,255,22,2,6,255,171,2,7,255,165,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0,3,5,207,253,3,6,237,253,3,7,244,234,3,8,187,86,4,4,223,255,4,5,154,238,4,6,206,7,4,7,245,135,4,8,254,251,4,9,167,212,5,3,237,255,5,5,224,0,5,8,159,94,5,9,254,222,5,10,234,228,6,4,237,0,6,10,243,169,6,11,210,0],"secondary":false},{"width":3,"bonus":110,"chr":"l","pixels":[1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,1,255,12,2,2,255,12,2,3,255,12,2,4,255,12,2,5,255,12,2,6,255,12,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0],"secondary":false},{"width":13,"bonus":285,"chr":"m","pixels":[1,3,223,255,1,4,254,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,4,247,201,2,5,254,63,2,6,255,22,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0,3,3,215,255,3,5,195,0,4,3,247,255,4,4,222,41,5,3,205,255,5,4,252,188,6,4,250,238,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,4,209,241,7,5,239,58,7,6,255,14,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,0,8,3,219,255,8,5,198,0,9,3,245,255,9,4,225,41,10,3,199,255,10,4,252,187,11,4,243,209,11,5,253,250,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,12,5,199,1,12,6,248,8,12,7,255,8,12,8,255,8,12,9,255,8,12,10,255,8,12,11,255,0],"secondary":false},{"width":8,"bonus":180,"chr":"n","pixels":[1,3,223,255,1,4,254,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,4,247,201,2,5,254,63,2,6,255,22,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0,3,3,213,255,3,5,195,0,4,3,245,255,4,4,219,41,5,3,199,255,5,4,253,186,6,4,243,209,6,5,253,251,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,5,199,1,7,6,249,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,0],"secondary":false},{"width":9,"bonus":190,"chr":"o","pixels":[1,5,245,255,1,6,255,255,1,7,255,255,1,8,245,253,2,4,222,254,2,5,169,119,2,6,246,26,2,7,255,27,2,8,255,83,2,9,254,226,2,10,190,162,3,3,225,255,3,4,164,108,3,5,222,0,3,10,251,227,4,3,249,255,4,4,230,35,4,10,251,253,4,11,224,0,5,3,215,255,5,4,250,96,5,10,220,249,5,11,249,0,6,4,252,245,6,5,174,186,6,9,243,255,6,10,155,159,6,11,215,0,7,5,252,201,7,6,249,249,7,7,247,252,7,8,217,238,7,9,168,120,7,10,243,0,8,6,199,0,8,7,243,0,8,8,244,0,8,9,202,0],"secondary":false},{"width":8,"bonus":235,"chr":"p","pixels":[1,3,227,255,1,4,254,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,254,255,1,10,254,255,1,11,255,255,1,12,255,255,1,13,255,255,1,14,255,255,2,4,246,186,2,5,253,52,2,6,255,18,2,7,255,23,2,8,255,61,2,9,254,192,2,10,254,91,2,11,254,11,2,12,255,12,2,13,255,12,2,14,255,12,3,3,225,255,3,5,180,0,3,10,248,234,4,3,245,255,4,4,232,67,4,10,247,253,4,11,227,0,5,3,161,255,5,4,253,232,5,9,229,255,5,10,183,223,5,11,245,0,6,4,206,153,6,5,251,221,6,6,251,252,6,7,249,254,6,8,226,243,6,9,182,169,6,10,230,8,6,11,160,0,7,6,217,1,7,7,248,0,7,8,248,0,7,9,216,0],"secondary":false},{"width":8,"bonus":245,"chr":"q","pixels":[1,4,167,255,1,5,251,255,1,6,255,255,1,7,255,255,1,8,252,254,1,9,177,250,2,3,183,255,2,4,207,251,2,5,191,92,2,6,251,23,2,7,255,22,2,8,255,65,2,9,254,200,2,10,235,207,3,3,247,255,3,4,195,56,3,5,203,0,3,10,254,250,3,11,190,0,4,3,211,255,4,4,249,62,4,10,218,247,4,11,249,0,5,4,248,221,5,9,208,255,5,11,221,65,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,7,4,255,8,7,5,255,8,7,6,255,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,8,7,12,255,8,7,13,255,8,7,14,255,8],"secondary":false},{"width":5,"bonus":100,"chr":"r","pixels":[1,3,223,255,1,4,250,254,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,2,4,249,210,2,5,251,81,2,6,255,19,2,7,255,12,2,8,255,12,2,9,255,12,2,10,255,12,2,11,255,0,3,3,209,255,3,5,205,0,4,3,247,255,4,4,214,37],"secondary":false},{"width":7,"bonus":150,"chr":"s","pixels":[1,4,253,255,1,5,255,255,1,10,200,244,2,3,217,255,2,4,154,160,2,5,253,73,2,6,254,249,2,10,247,249,2,11,192,0,3,3,247,255,3,4,221,31,3,6,201,227,3,7,251,140,3,10,245,253,3,11,241,0,4,3,225,255,4,4,249,65,4,7,252,248,4,8,178,125,4,9,154,255,4,10,201,245,4,11,243,0,5,4,232,77,5,7,161,207,5,8,255,245,5,9,230,241,5,10,173,72,5,11,193,0,6,9,245,0,6,10,217,0],"secondary":false},{"width":5,"bonus":125,"chr":"t","pixels":[0,3,237,255,1,1,215,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,252,254,2,2,217,14,2,3,255,255,2,4,255,31,2,5,255,12,2,6,255,12,2,7,255,12,2,8,255,15,2,9,255,103,2,10,255,235,3,3,255,255,3,4,255,20,3,10,247,250,3,11,235,0,4,4,255,5,4,11,242,0],"secondary":false},{"width":8,"bonus":180,"chr":"u","pixels":[1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,242,252,2,4,255,12,2,5,255,12,2,6,255,12,2,7,255,12,2,8,255,26,2,9,255,146,2,10,252,218,3,10,251,252,3,11,216,0,4,10,211,248,4,11,248,0,5,9,221,255,5,11,205,0,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,4,255,8,7,5,255,8,7,6,255,8,7,7,255,8,7,8,255,8,7,9,255,8,7,10,255,8,7,11,255,0],"secondary":false},{"width":7,"bonus":145,"chr":"v","pixels":[0,3,211,255,1,4,247,216,1,5,254,255,1,6,201,246,2,5,216,48,2,6,254,127,2,7,245,222,2,8,251,253,2,9,182,248,3,8,222,66,3,9,253,202,3,10,255,255,4,7,185,255,4,8,251,255,4,9,215,241,4,10,224,129,4,11,255,0,5,4,181,255,5,5,249,255,5,6,222,252,5,7,178,185,5,8,196,51,5,9,251,0,5,10,203,0,6,3,233,255,6,4,187,200,6,5,197,71,6,6,250,0,6,7,220,0],"secondary":false},{"width":11,"bonus":295,"chr":"w","pixels":[0,3,184,255,1,4,239,213,1,5,253,253,1,6,241,252,1,7,176,255,2,5,202,14,2,6,252,70,2,7,246,136,2,8,235,207,2,9,245,247,2,10,235,251,3,7,158,197,3,8,222,216,3,9,250,243,3,10,250,198,3,11,232,0,4,4,153,255,4,5,227,255,4,6,239,255,4,7,184,232,4,8,169,137,4,9,193,24,4,10,238,0,4,11,194,0,5,3,255,255,5,4,234,246,5,5,198,144,5,6,228,9,5,7,239,0,5,8,168,0,6,4,255,158,6,5,252,232,6,6,247,250,6,7,177,252,7,5,158,2,7,6,234,53,7,7,248,124,7,8,234,204,7,9,247,250,7,10,214,250,8,7,158,218,8,8,221,221,8,9,250,244,8,10,254,230,8,11,209,0,9,4,201,255,9,5,251,255,9,6,236,255,9,7,196,224,9,8,184,146,9,9,201,49,9,10,240,0,9,11,229,0,10,3,181,255,10,4,190,154,10,5,211,59,10,6,251,2,10,7,236,0,10,8,172,0],"secondary":false},{"width":7,"bonus":150,"chr":"x","pixels":[1,3,245,255,1,4,189,218,1,9,191,255,1,10,230,255,2,4,252,191,2,5,245,239,2,8,243,255,2,9,170,235,2,10,195,21,2,11,230,0,3,5,218,132,3,6,255,255,3,7,251,254,3,9,244,0,3,10,157,0,4,5,229,255,4,6,212,214,4,7,254,204,4,8,254,210,5,3,177,255,5,4,237,255,5,6,229,0,5,7,179,6,5,8,229,138,5,9,254,248,5,10,170,220,6,3,175,255,6,4,184,32,6,5,237,0,6,10,253,207],"secondary":false},{"width":7,"bonus":200,"chr":"y","pixels":[0,3,237,255,0,4,156,250,0,14,239,255,1,4,250,178,1,5,252,251,1,6,231,246,1,14,236,252,2,5,179,20,2,6,250,97,2,7,245,189,2,8,252,252,2,9,211,246,2,13,243,255,2,14,153,187,3,8,194,55,3,9,253,178,3,10,255,255,3,11,253,253,3,12,198,234,3,13,170,100,3,14,244,0,4,7,205,255,4,8,253,255,4,9,203,242,4,10,209,128,4,11,255,22,4,12,252,0,4,13,182,0,5,4,213,255,5,5,255,255,5,6,208,245,5,7,181,159,5,8,210,33,5,9,253,0,5,10,193,0,6,3,207,255,6,4,188,163,6,5,218,39,6,6,255,0,6,7,200,0],"secondary":false},{"width":7,"bonus":160,"chr":"z","pixels":[1,3,255,255,1,9,163,255,1,10,255,255,2,3,255,255,2,4,255,20,2,8,235,255,2,9,169,243,2,10,255,255,2,11,255,0,3,3,255,255,3,4,255,20,3,6,193,255,3,7,209,254,3,9,237,21,3,10,255,255,3,11,255,0,4,3,255,255,4,4,255,147,4,5,240,254,4,7,195,5,4,8,208,0,4,10,255,255,4,11,255,0,5,3,255,255,5,4,254,183,5,5,161,51,5,6,239,0,5,10,255,255,5,11,255,0,6,4,255,0,6,5,182,0,6,11,255,0],"secondary":false},{"width":9,"bonus":220,"chr":"A","pixels":[0,10,205,255,1,7,163,255,1,8,245,255,1,9,229,253,1,10,178,175,1,11,206,0,2,5,217,255,2,6,251,255,2,7,255,255,2,8,201,133,2,9,246,4,2,10,227,0,3,2,175,255,3,3,249,255,3,4,208,249,3,5,178,159,3,6,220,27,3,7,254,252,3,8,255,44,4,1,255,255,4,2,232,245,4,3,200,104,4,4,250,0,4,5,203,0,4,7,252,254,4,8,253,44,5,2,255,157,5,3,253,246,5,4,231,242,5,7,251,255,5,8,253,44,6,3,162,21,6,4,248,104,6,5,247,208,6,6,255,255,6,7,255,255,6,8,253,130,7,6,210,55,7,7,255,145,7,8,255,237,7,9,249,250,7,10,155,246,8,9,243,93,8,10,252,191],"secondary":false},{"width":10,"bonus":285,"chr":"B","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,254,240,3,6,255,42,3,7,255,12,3,8,255,12,3,9,255,31,3,10,255,255,3,11,255,0,4,1,253,255,4,2,255,22,4,5,240,254,4,6,242,34,4,10,255,255,4,11,255,0,5,1,237,255,5,2,254,48,5,5,253,255,5,6,242,43,5,10,250,255,5,11,255,0,6,1,185,255,6,2,250,185,6,5,201,252,6,6,253,88,6,10,225,251,6,11,250,0,7,2,243,222,7,3,254,252,7,4,199,229,7,5,164,54,7,6,246,223,7,9,217,255,7,10,167,203,7,11,221,0,8,3,211,1,8,4,251,0,8,5,178,0,8,7,252,240,8,8,244,250,8,9,188,209,8,10,219,10,9,8,237,0,9,9,240,0,9,10,154,0],"secondary":false},{"width":9,"bonus":190,"chr":"C","pixels":[1,3,178,255,1,4,251,255,1,5,255,255,1,6,255,255,1,7,254,255,1,8,200,251,2,2,233,255,2,3,201,245,2,4,200,92,2,5,251,29,2,6,255,28,2,7,255,67,2,8,254,180,2,9,253,249,3,1,154,255,3,2,182,243,3,3,234,1,3,4,193,0,3,9,227,180,3,10,252,182,4,1,227,255,4,2,175,79,4,3,173,0,4,10,249,245,4,11,180,0,5,1,249,255,5,2,230,30,5,10,252,254,5,11,239,0,6,1,229,255,6,2,250,60,6,10,234,253,6,11,251,0,7,1,166,255,7,2,240,114,7,10,163,223,7,11,232,0,8,2,166,0],"secondary":false},{"width":11,"bonus":270,"chr":"D","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,31,3,10,255,255,3,11,255,0,4,1,255,255,4,2,255,20,4,10,255,255,4,11,255,0,5,1,245,255,5,2,254,46,5,10,243,254,5,11,255,0,6,1,209,255,6,2,248,96,6,10,208,245,6,11,242,0,7,2,249,226,7,9,221,255,7,10,168,169,7,11,200,0,8,2,228,228,8,3,251,233,8,8,225,255,8,9,197,250,8,10,222,6,9,3,231,148,9,4,251,225,9,5,254,254,9,6,252,254,9,7,224,242,9,8,183,172,9,9,226,8,9,10,193,0,10,5,221,2,10,6,253,0,10,7,251,0,10,8,213,0],"secondary":false},{"width":8,"bonus":210,"chr":"E","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,254,240,3,6,255,42,3,7,255,12,3,8,255,12,3,9,255,31,3,10,255,255,3,11,255,0,4,1,255,255,4,2,255,20,4,5,240,254,4,6,242,34,4,10,255,255,4,11,255,0,5,1,255,255,5,2,255,20,5,5,239,255,5,6,242,34,5,10,255,255,5,11,255,0,6,1,255,255,6,2,255,20,6,5,239,255,6,6,242,34,6,10,255,255,6,11,255,0,7,2,255,7,7,6,240,3,7,11,255,0],"secondary":false},{"width":8,"bonus":175,"chr":"F","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,254,240,3,6,255,42,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,1,255,255,4,2,255,20,4,5,240,254,4,6,242,34,5,1,255,255,5,2,255,20,5,5,239,255,5,6,242,34,6,1,255,255,6,2,255,20,6,5,239,255,6,6,242,34,7,2,255,7,7,6,240,3],"secondary":false},{"width":10,"bonus":265,"chr":"G","pixels":[1,3,165,255,1,4,247,255,1,5,255,255,1,6,255,255,1,7,253,255,1,8,191,250,2,2,217,255,2,3,212,251,2,4,193,104,2,5,248,32,2,6,255,29,2,7,255,71,2,8,254,192,2,9,251,243,3,2,199,252,3,3,218,6,3,4,208,0,3,9,240,205,3,10,248,166,4,1,211,255,4,2,164,113,4,3,196,0,4,10,249,237,4,11,162,0,5,1,243,255,5,2,215,32,5,10,252,254,5,11,231,0,6,1,241,255,6,2,245,36,6,5,239,255,6,10,247,253,6,11,252,0,7,1,209,255,7,2,246,77,7,5,239,255,7,6,244,85,7,10,220,250,7,11,246,0,8,2,222,79,8,5,239,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,199,201,8,11,216,0,9,6,240,8,9,7,255,8,9,8,255,8,9,9,255,8,9,10,255,3,9,11,157,0],"secondary":false},{"width":10,"bonus":240,"chr":"H","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,2,255,12,3,3,255,12,3,4,255,12,3,5,254,240,3,6,255,42,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,5,240,254,4,6,242,34,5,5,239,255,5,6,242,34,6,5,239,255,6,6,242,34,7,5,243,255,7,6,244,85,8,1,255,255,8,2,255,255,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,9,2,255,8,9,3,255,8,9,4,255,8,9,5,255,8,9,6,255,8,9,7,255,8,9,8,255,8,9,9,255,8,9,10,255,8,9,11,255,0],"secondary":false},{"width":5,"bonus":130,"chr":"I","pixels":[1,1,237,255,1,10,233,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,234,0,3,1,227,255,3,2,255,12,3,3,255,12,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,225,3,11,255,0,4,2,228,0,4,11,225,0],"secondary":false},{"width":4,"bonus":150,"chr":"J","pixels":[0,13,249,255,0,14,187,27,1,13,223,255,1,14,249,0,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,252,254,2,12,216,240,2,13,167,81,2,14,223,0,3,2,255,12,3,3,255,12,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,4,3,12,252,0,3,13,204,0],"secondary":false},{"width":9,"bonus":230,"chr":"K","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,2,255,12,3,3,255,12,3,4,255,13,3,5,255,154,3,6,254,180,3,7,255,14,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,4,171,249,4,5,255,255,4,6,227,208,4,7,187,30,5,3,189,255,5,4,187,253,5,5,182,63,5,6,255,199,5,7,248,236,6,2,208,255,6,3,172,248,6,4,190,7,6,5,186,0,6,7,229,152,6,8,255,251,6,9,161,204,7,1,223,255,7,2,157,238,7,3,208,1,7,4,167,0,7,8,168,105,7,9,255,231,7,10,223,219,8,2,224,0,8,10,249,189,8,11,192,0],"secondary":false},{"width":8,"bonus":135,"chr":"L","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,2,255,12,3,3,255,12,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,53,3,10,255,255,3,11,255,0,4,10,255,255,4,11,255,0,5,10,255,255,5,11,255,0,6,10,255,255,6,11,255,0,7,11,255,0],"secondary":false},{"width":13,"bonus":375,"chr":"M","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,241,255,3,2,255,227,3,3,255,133,3,4,255,39,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,2,246,97,4,3,248,196,4,4,253,253,4,5,194,241,5,4,198,43,5,5,253,130,5,6,246,232,5,7,243,249,6,7,232,73,6,8,248,168,6,9,252,253,6,10,218,244,7,8,212,236,7,9,249,245,7,10,253,154,7,11,208,0,8,5,155,255,8,6,241,255,8,7,190,252,8,8,154,150,8,9,198,12,8,10,240,0,9,3,213,255,9,4,223,255,9,5,156,207,9,6,168,47,9,7,241,0,9,8,188,0,10,1,249,255,10,2,222,252,10,3,182,169,10,4,223,65,10,5,230,62,10,6,155,92,11,1,255,255,11,2,255,255,11,3,255,255,11,4,255,255,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,12,2,255,8,12,3,255,8,12,4,255,8,12,5,255,8,12,6,255,8,12,7,255,8,12,8,255,8,12,9,255,8,12,10,255,8,12,11,255,0],"secondary":false},{"width":11,"bonus":275,"chr":"N","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,181,255,3,2,254,249,3,3,255,124,3,4,255,14,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,2,205,103,4,3,254,228,4,4,225,224,5,4,243,150,5,5,253,247,6,5,164,76,6,6,253,203,6,7,231,231,7,7,223,120,7,8,251,239,7,9,161,218,8,9,252,216,8,10,237,234,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,218,0,10,2,255,8,10,3,255,8,10,4,255,8,10,5,255,8,10,6,255,8,10,7,255,8,10,8,255,8,10,9,255,8,10,10,255,8,10,11,255,0],"secondary":false},{"width":11,"bonus":270,"chr":"O","pixels":[1,3,191,255,1,4,253,255,1,5,255,255,1,6,255,255,1,7,254,255,1,8,194,250,2,2,241,255,2,3,190,235,2,4,207,80,2,5,254,27,2,6,255,28,2,7,255,65,2,8,254,177,2,9,251,246,3,1,169,255,3,2,181,236,3,3,242,0,3,4,175,0,3,9,228,187,3,10,250,172,4,1,233,255,4,2,189,82,4,3,168,0,4,10,247,241,4,11,169,0,5,1,249,255,5,2,236,34,5,10,251,254,5,11,234,0,6,1,225,255,6,2,251,68,6,10,229,251,6,11,250,0,7,2,248,198,7,9,193,255,7,10,176,213,7,11,226,0,8,2,239,232,8,3,244,223,8,8,213,255,8,9,218,255,8,10,198,25,9,3,237,148,9,4,249,225,9,5,253,253,9,6,252,254,9,7,229,244,9,8,187,187,9,9,217,19,9,10,218,0,10,5,220,1,10,6,252,1,10,7,252,0,10,8,219,0],"secondary":false},{"width":9,"bonus":210,"chr":"P","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,255,12,3,6,254,240,3,7,255,42,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,1,249,255,4,2,255,27,4,6,250,255,4,7,241,22,5,1,221,255,5,2,250,72,5,6,242,255,5,7,250,0,6,2,249,221,6,5,203,255,6,6,164,228,6,7,242,0,7,2,215,196,7,3,253,243,7,4,250,252,7,5,194,219,7,6,205,16,8,3,165,2,8,4,241,0,8,5,247,0,8,6,166,0],"secondary":false},{"width":11,"bonus":295,"chr":"Q","pixels":[1,3,191,255,1,4,253,255,1,5,255,255,1,6,255,255,1,7,254,255,1,8,194,250,2,2,241,255,2,3,190,235,2,4,207,80,2,5,254,27,2,6,255,28,2,7,255,65,2,8,254,177,2,9,251,246,3,1,169,255,3,2,181,236,3,3,242,0,3,4,175,0,3,9,228,187,3,10,250,172,4,1,233,255,4,2,189,82,4,3,168,0,4,10,247,241,4,11,169,0,5,1,249,255,5,2,236,34,5,10,254,255,5,11,234,8,6,1,225,255,6,2,251,68,6,10,255,255,6,11,255,202,7,2,248,198,7,9,193,255,7,10,186,222,7,11,255,195,7,12,250,238,8,2,239,232,8,3,244,223,8,8,213,255,8,9,213,255,8,10,199,27,8,11,164,11,8,12,234,185,8,13,245,133,9,3,237,148,9,4,249,225,9,5,254,254,9,6,249,254,9,7,227,242,9,8,184,180,9,9,217,19,9,10,213,0,9,13,184,58,10,5,220,1,10,6,253,0,10,7,248,0,10,8,216,0],"secondary":false},{"width":9,"bonus":250,"chr":"R","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,3,1,255,255,3,2,255,31,3,3,255,12,3,4,255,12,3,5,255,12,3,6,254,240,3,7,255,42,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,0,4,1,251,255,4,2,255,24,4,6,244,255,4,7,242,34,5,1,223,255,5,2,252,63,5,6,255,255,5,7,252,202,6,2,249,214,6,5,193,255,6,6,166,238,6,7,255,143,6,8,254,250,6,9,169,224,7,2,218,196,7,3,252,245,7,4,248,252,7,5,188,217,7,6,196,12,7,7,155,0,7,8,165,79,7,9,253,208,7,10,246,242,8,3,168,0,8,4,242,0,8,5,245,0,8,6,160,0,8,10,228,128,8,11,233,0],"secondary":false},{"width":8,"bonus":185,"chr":"S","pixels":[1,2,233,255,1,3,255,255,1,4,243,253,1,10,200,244,2,1,184,255,2,2,169,226,2,3,236,28,2,4,255,128,2,5,253,235,2,10,245,247,2,11,192,0,3,1,239,255,3,2,193,46,3,5,234,232,3,6,242,105,3,10,250,254,3,11,237,0,4,1,243,255,4,2,241,37,4,6,247,212,4,10,227,251,4,11,249,0,5,1,211,255,5,2,247,84,5,6,246,248,5,7,233,157,5,9,195,255,5,10,166,220,5,11,224,0,6,2,224,82,6,7,253,231,6,8,251,249,6,9,193,224,6,10,198,18,7,8,229,1,7,9,246,0,7,10,170,0],"secondary":false},{"width":9,"bonus":155,"chr":"T","pixels":[1,1,255,255,2,1,255,255,2,2,255,20,3,1,255,255,3,2,255,71,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,5,1,255,255,5,2,255,27,5,3,255,8,5,4,255,8,5,5,255,8,5,6,255,8,5,7,255,8,5,8,255,8,5,9,255,8,5,10,255,8,5,11,255,0,6,1,255,255,6,2,255,20,7,1,255,255,7,2,255,20,8,2,255,0],"secondary":false},{"width":9,"bonus":215,"chr":"U","pixels":[1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,254,255,1,9,160,247,2,2,255,12,2,3,255,12,2,4,255,12,2,5,255,12,2,6,255,12,2,7,255,18,2,8,255,65,2,9,255,215,2,10,208,165,3,10,250,226,4,10,248,252,4,11,221,0,5,10,215,249,5,11,245,0,6,9,235,255,6,11,210,0,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,252,254,7,8,225,244,7,9,168,153,7,10,236,0,8,2,255,8,8,3,255,8,8,4,255,8,8,5,255,8,8,6,255,8,8,7,255,3,8,8,252,0,8,9,216,0],"secondary":false},{"width":8,"bonus":185,"chr":"V","pixels":[0,1,209,255,1,2,247,221,1,3,254,255,1,4,200,246,2,3,222,55,2,4,254,138,2,5,248,231,2,6,251,253,2,7,180,248,3,6,232,67,3,7,252,151,3,8,247,238,3,9,244,250,3,10,161,251,4,8,203,165,4,9,253,235,4,10,254,246,4,11,158,0,5,6,219,255,5,7,251,255,5,8,199,236,5,9,177,134,5,10,234,13,5,11,245,0,6,3,208,255,6,4,255,255,6,5,211,246,6,6,185,153,6,7,222,26,6,8,252,0,6,9,184,0,7,1,253,255,7,2,225,251,7,3,189,176,7,4,215,46,7,5,255,0,7,6,203,0],"secondary":false},{"width":13,"bonus":365,"chr":"W","pixels":[0,1,179,255,1,1,155,255,1,2,244,230,1,3,255,255,1,4,234,250,1,5,163,255,2,2,155,0,2,3,224,33,2,4,254,94,2,5,245,165,2,6,243,235,2,7,255,255,2,8,221,251,3,6,159,0,3,7,229,49,3,8,254,150,3,9,253,245,3,10,255,255,4,6,203,255,4,7,253,255,4,8,217,245,4,9,205,167,4,10,246,62,4,11,255,0,5,2,160,255,5,3,233,255,5,4,241,255,5,5,190,232,5,6,178,142,5,7,209,32,5,8,253,0,5,9,208,0,6,1,255,255,6,2,246,250,6,3,211,166,6,4,234,18,6,5,241,0,6,6,173,0,7,2,254,144,7,3,253,223,7,4,252,252,7,5,191,250,8,4,226,48,8,5,252,122,8,6,239,211,8,7,254,254,8,8,220,249,9,7,207,53,9,8,254,156,9,9,253,246,9,10,255,255,10,5,157,255,10,6,221,255,10,7,255,255,10,8,220,248,10,9,213,175,10,10,248,80,10,11,255,0,11,1,153,255,11,2,217,255,11,3,255,255,11,4,233,253,11,5,196,212,11,6,193,125,11,7,225,31,11,8,255,0,11,9,214,0,12,1,181,255,12,2,198,145,12,3,224,50,12,4,255,0,12,5,231,0,12,6,163,0],"secondary":false},{"width":8,"bonus":200,"chr":"X","pixels":[0,10,159,255,1,1,233,255,1,2,218,226,1,9,233,255,1,10,184,248,1,11,159,0,2,2,247,159,2,3,253,247,2,7,183,255,2,8,227,255,2,10,234,0,2,11,179,0,3,3,176,84,3,4,253,213,3,5,231,233,3,6,240,254,3,7,156,233,3,8,186,16,3,9,227,0,4,4,184,227,4,5,252,245,4,6,252,242,4,7,246,109,5,3,235,255,5,4,168,245,5,5,170,27,5,6,245,74,5,7,253,225,5,8,224,232,6,1,187,255,6,2,225,255,6,4,235,0,6,5,162,0,6,8,241,150,6,9,253,252,6,10,171,223,7,2,191,16,7,3,225,0,7,9,165,82,7,10,254,210],"secondary":false},{"width":8,"bonus":155,"chr":"Y","pixels":[1,1,247,255,1,2,207,233,2,2,252,150,2,3,253,249,2,4,186,231,3,3,160,45,3,4,251,152,3,5,251,248,3,6,164,232,4,5,188,126,4,6,254,252,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,5,4,191,255,5,5,227,255,5,6,155,161,5,7,252,13,5,8,255,12,5,9,255,12,5,10,255,12,5,11,255,0,6,2,189,255,6,3,239,255,6,5,193,12,6,6,228,0,7,1,249,255,7,2,169,215,7,3,193,25,7,4,240,0],"secondary":false},{"width":9,"bonus":235,"chr":"Z","pixels":[1,1,255,255,1,9,153,255,1,10,255,255,2,1,255,255,2,2,255,20,2,8,223,255,2,9,223,253,2,10,255,255,2,11,255,0,3,1,255,255,3,2,255,20,3,7,251,255,3,8,166,210,3,9,226,30,3,10,255,255,3,11,255,0,4,1,255,255,4,2,255,20,4,5,217,255,4,6,219,254,4,7,170,86,4,8,251,0,4,10,255,255,4,11,255,0,5,1,255,255,5,2,255,27,5,4,251,255,5,5,169,219,5,6,219,12,5,7,218,0,5,10,255,255,5,11,255,0,6,1,255,255,6,2,254,222,6,3,226,252,6,4,166,98,6,5,251,0,6,10,255,255,6,11,255,0,7,1,255,255,7,2,255,152,7,3,224,14,7,4,223,0,7,10,255,255,7,11,255,0,8,2,255,0,8,11,255,0],"secondary":false},{"width":8,"bonus":225,"chr":"0","pixels":[1,3,239,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,237,253,2,1,161,255,2,2,211,253,2,3,185,122,2,4,241,36,2,5,255,18,2,6,255,18,2,7,255,34,2,8,255,89,2,9,251,217,2,10,209,188,3,1,243,255,3,2,180,71,3,3,209,0,3,10,253,245,3,11,154,0,4,1,231,255,4,2,246,72,4,10,239,251,4,11,243,0,5,2,253,240,5,3,172,208,5,9,241,255,5,10,163,202,5,11,235,0,6,2,162,130,6,3,250,189,6,4,242,239,6,5,251,254,6,6,252,254,6,7,237,249,6,8,213,231,6,9,183,135,6,10,242,0,7,4,185,0,7,5,227,1,7,6,250,1,7,7,252,0,7,8,232,0,7,9,193,0],"secondary":false},{"width":8,"bonus":120,"chr":"1","pixels":[2,2,213,255,3,1,167,255,3,2,193,252,3,3,222,64,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,5,2,255,12,5,3,255,12,5,4,255,12,5,5,255,12,5,6,255,12,5,7,255,12,5,8,255,12,5,9,255,12,5,10,255,12,5,11,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"2","pixels":[1,10,255,255,2,1,167,255,2,2,162,231,2,9,233,255,2,10,255,255,2,11,255,0,3,1,237,255,3,2,181,58,3,8,221,255,3,9,159,82,3,10,255,255,3,11,255,0,4,1,237,255,4,2,240,41,4,6,157,255,4,7,215,255,4,8,154,45,4,9,224,23,4,10,255,255,4,11,255,0,5,1,173,255,5,2,250,193,5,5,205,255,5,6,196,254,5,7,164,30,5,8,215,0,5,10,255,255,5,11,255,0,6,2,233,202,6,3,253,250,6,4,230,246,6,5,168,179,6,6,206,5,6,7,195,0,6,10,255,255,6,11,255,0,7,3,184,2,7,4,248,0,7,5,222,0,7,11,255,0],"secondary":false},{"width":8,"bonus":180,"chr":"3","pixels":[1,1,166,255,1,10,237,240,2,1,235,255,2,2,182,66,2,5,241,255,2,10,251,253,2,11,223,0,3,1,243,255,3,2,237,38,3,5,253,255,3,6,245,76,3,10,229,251,3,11,249,0,4,1,191,255,4,2,251,174,4,4,184,255,4,5,164,242,4,6,255,213,4,9,211,255,4,10,173,220,4,11,226,0,5,2,246,225,5,3,253,252,5,4,185,219,5,5,185,3,5,6,211,172,5,7,253,247,5,8,244,250,5,9,190,213,5,10,214,17,6,3,217,2,6,4,250,0,6,5,158,0,6,8,245,0,6,9,240,0,6,10,159,0],"secondary":false},{"width":8,"bonus":195,"chr":"4","pixels":[1,7,255,255,2,5,197,255,2,6,167,252,2,7,255,255,2,8,255,48,3,4,225,255,3,6,198,0,3,7,255,255,3,8,255,48,4,3,215,255,4,5,225,0,4,7,255,255,4,8,255,48,5,1,173,255,5,2,197,255,5,3,155,115,5,4,225,63,5,7,255,255,5,8,255,93,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,7,2,255,8,7,3,255,8,7,4,255,8,7,5,255,8,7,6,255,8,7,7,255,255,7,8,255,54,7,9,255,8,7,10,255,8,7,11,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"5","pixels":[1,1,166,255,1,2,191,255,1,3,219,255,1,4,243,255,1,10,201,243,2,1,255,255,2,2,212,157,2,3,213,104,2,4,250,230,2,5,245,52,2,10,247,250,2,11,191,0,3,1,255,255,3,2,255,20,3,4,240,248,3,5,230,45,3,10,247,253,3,11,242,0,4,1,255,255,4,2,255,20,4,4,208,255,4,5,241,102,4,10,214,249,4,11,246,0,5,1,255,255,5,2,255,20,5,5,252,240,5,6,163,167,5,9,235,255,5,11,208,0,6,2,255,6,6,5,184,176,6,6,253,241,6,7,253,253,6,8,227,244,6,9,167,154,6,10,235,0,7,7,240,4,7,8,252,0,7,9,217,0],"secondary":false},{"width":8,"bonus":205,"chr":"6","pixels":[1,3,175,255,1,4,247,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,245,254,2,2,237,255,2,4,205,118,2,5,254,197,2,6,255,51,2,7,255,24,2,8,254,82,2,9,253,223,2,10,208,182,3,1,179,255,3,3,237,0,3,4,228,230,3,6,196,0,3,10,251,233,4,1,231,255,4,2,191,52,4,4,223,255,4,5,218,73,4,10,236,250,4,11,230,0,5,1,251,255,5,2,234,28,5,5,250,222,5,9,221,255,5,10,166,220,5,11,231,0,6,2,251,10,6,5,210,178,6,6,251,235,6,7,253,253,6,8,229,246,6,9,176,182,6,10,222,7,7,7,231,1,7,8,252,0,7,9,221,0],"secondary":false},{"width":8,"bonus":160,"chr":"7","pixels":[1,1,255,255,2,1,255,255,2,2,255,20,3,1,255,255,3,2,255,20,3,8,197,255,3,9,247,255,3,10,182,233,4,1,255,255,4,2,255,20,4,6,237,255,4,7,211,253,4,8,164,171,4,9,202,23,4,10,247,0,4,11,166,0,5,1,255,255,5,2,255,108,5,3,200,249,5,4,241,255,5,5,171,230,5,6,168,82,5,7,238,0,5,8,210,0,6,1,255,255,6,2,255,199,6,3,165,153,6,4,198,15,6,5,242,0,6,6,154,0,7,2,255,0,7,3,199,0],"secondary":false},{"width":8,"bonus":265,"chr":"8","pixels":[1,2,239,255,1,3,255,255,1,4,222,247,1,7,247,255,1,8,255,255,1,9,237,251,2,1,185,255,2,2,164,219,2,3,241,22,2,4,255,149,2,5,249,222,2,6,237,253,2,8,248,24,2,9,255,151,2,10,249,196,3,1,241,255,3,2,195,42,3,5,245,241,3,6,232,113,3,7,235,0,3,10,249,248,3,11,192,0,4,1,235,255,4,2,243,45,4,5,242,255,4,6,247,177,4,10,238,252,4,11,242,0,5,1,171,255,5,2,249,183,5,4,187,255,5,5,158,243,5,6,254,236,5,7,216,162,5,9,191,255,5,10,181,232,5,11,235,0,6,2,238,217,6,3,253,251,6,4,191,222,6,5,188,7,6,6,171,77,6,7,251,213,6,8,251,251,6,9,200,229,6,10,197,29,6,11,165,0,7,3,202,1,7,4,249,0,7,5,166,0,7,8,210,1,7,9,247,0,7,10,180,0],"secondary":false},{"width":8,"bonus":230,"chr":"9","pixels":[1,2,199,255,1,3,255,255,1,4,255,255,1,5,238,252,2,1,178,255,2,2,190,243,2,3,207,47,2,4,255,24,2,5,255,135,2,6,252,232,2,10,253,255,3,1,241,255,3,2,189,53,3,3,181,0,3,6,252,253,3,7,232,24,3,10,232,252,3,11,253,0,4,1,229,255,4,2,244,72,4,6,235,255,4,7,250,6,4,9,171,255,4,10,181,232,4,11,229,0,5,2,252,235,5,5,189,255,5,7,244,113,5,8,202,254,5,9,225,255,5,10,182,45,5,11,165,0,6,2,164,141,6,3,249,202,6,4,250,253,6,5,255,255,6,6,252,247,6,7,230,226,6,8,182,181,6,9,205,25,6,10,225,0,7,4,198,0,7,5,248,3,7,6,255,0,7,7,244,0,7,8,204,0],"secondary":false},{"width":12,"bonus":290,"chr":"%","pixels":[1,2,239,255,1,3,255,255,1,4,255,255,1,5,247,253,2,1,217,255,2,2,159,178,2,3,240,24,2,4,255,18,2,5,255,71,2,6,254,251,3,1,202,255,3,2,240,162,3,6,248,252,3,7,250,6,3,10,207,255,4,2,241,203,4,3,251,249,4,4,252,254,4,5,222,242,4,6,162,128,4,7,249,94,4,8,210,253,4,11,207,0,5,3,192,0,5,4,246,1,5,5,252,63,5,6,245,205,5,7,178,205,5,9,208,0,6,4,175,255,6,5,173,255,6,7,201,24,6,8,164,75,7,3,197,255,7,5,175,0,7,6,208,133,7,7,250,255,7,8,255,255,7,9,252,254,8,1,196,255,8,4,197,0,8,6,223,255,8,8,250,12,8,9,254,82,8,10,255,237,9,2,196,0,9,6,211,255,9,7,237,117,9,10,236,245,9,11,237,0,10,7,249,222,10,8,254,254,10,9,231,247,10,10,170,120,10,11,227,0,11,8,217,1,11,9,253,0,11,10,224,0],"secondary":false},{"width":6,"bonus":150,"chr":"/","pixels":[1,10,197,255,1,11,251,255,1,12,225,254,2,6,195,255,2,7,249,255,2,8,228,254,2,9,186,222,2,10,179,138,2,11,205,40,2,12,251,0,2,13,224,0,3,2,191,255,3,3,247,255,3,4,230,255,3,5,188,224,3,6,179,143,3,7,204,45,3,8,249,0,3,9,227,0,3,10,162,0,4,0,233,255,4,1,190,227,4,2,179,148,4,3,200,50,4,4,248,0,4,5,230,0,4,6,165,0,5,0,246,0,5,1,233,0,5,2,169,0],"secondary":false},{"width":8,"bonus":110,"chr":"+","pixels":[1,6,239,255,2,6,239,255,2,7,242,34,3,6,243,255,3,7,244,85,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,5,4,255,8,5,5,255,8,5,6,254,240,5,7,255,39,5,8,255,8,5,9,255,8,5,10,255,0,6,6,240,254,6,7,242,34,7,7,240,0],"secondary":false},{"width":7,"bonus":125,"chr":"?","pixels":[1,1,167,255,2,1,227,255,2,2,183,64,2,7,167,255,3,1,243,255,3,2,231,38,3,6,211,255,3,7,158,131,3,8,168,0,3,9,223,255,3,10,240,239,4,1,189,255,4,2,251,174,4,5,227,255,4,7,211,0,4,10,224,5,4,11,225,0,5,2,243,220,5,3,254,254,5,4,214,238,5,5,156,62,5,6,227,0,6,3,209,4,6,4,253,0,6,5,200,0],"secondary":false},{"width":6,"bonus":105,"chr":"!","pixels":[2,9,199,255,2,10,201,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,9,153,255,3,10,233,169,3,11,201,0,4,2,255,12,4,3,255,12,4,4,255,12,4,5,255,12,4,6,255,12,4,7,255,12,4,8,255,0,4,10,153,0,4,11,154,0],"secondary":false},{"width":13,"bonus":430,"chr":"@","pixels":[1,4,179,255,1,5,251,255,1,6,255,255,1,7,255,255,1,8,252,254,1,9,179,249,2,3,247,255,2,4,175,227,2,5,198,80,2,6,252,23,2,7,255,21,2,8,255,71,2,9,253,193,2,10,246,236,3,2,243,255,3,4,247,0,3,5,167,43,3,10,238,201,3,11,244,158,4,2,174,235,4,3,244,22,4,4,209,229,4,5,255,255,4,6,255,255,4,7,248,254,4,11,250,240,5,1,215,255,5,2,172,98,5,3,223,194,5,4,190,247,5,5,199,54,5,6,255,15,5,7,255,91,5,8,254,251,5,11,252,254,5,12,236,21,6,1,243,255,6,2,221,35,6,3,246,253,6,4,183,53,6,5,184,0,6,8,250,253,6,9,250,17,6,11,246,254,6,12,252,24,7,1,237,255,7,2,245,39,7,3,239,254,7,4,247,91,7,7,161,255,7,9,248,0,7,11,251,255,7,12,246,3,8,1,195,255,8,2,245,104,8,3,197,243,8,4,255,255,8,5,255,255,8,6,255,255,8,7,245,252,8,8,203,144,8,11,198,251,8,12,252,0,9,2,247,231,9,4,190,11,9,5,255,8,9,6,255,8,9,7,255,39,9,8,254,252,9,12,195,0,10,2,208,220,10,3,251,227,10,7,160,250,10,8,226,250,10,9,252,3,11,3,214,138,11,4,250,219,11,5,253,253,11,6,246,253,11,7,197,225,11,8,170,52,11,9,222,0,12,5,215,2,12,6,251,0,12,7,244,0,12,8,174,0],"secondary":false},{"width":9,"bonus":245,"chr":"#","pixels":[1,4,239,255,1,7,239,255,2,4,241,255,2,5,244,75,2,7,249,255,2,8,252,224,2,9,244,254,2,10,210,254,3,2,187,255,3,3,235,255,3,4,253,255,3,5,251,180,3,6,163,198,3,7,250,250,3,8,250,65,3,9,222,3,3,10,243,0,3,11,209,0,4,3,193,26,4,4,253,241,4,5,254,0,4,6,177,0,4,7,247,247,4,8,247,33,5,4,242,255,5,5,245,95,5,7,249,255,5,8,254,238,5,9,232,252,5,10,192,249,6,2,199,255,6,3,239,255,6,4,252,254,6,5,250,160,6,6,160,170,6,7,250,250,6,8,251,45,6,9,237,0,6,10,229,0,6,11,188,0,7,3,201,8,7,4,254,240,7,5,252,0,7,6,157,0,7,7,246,248,7,8,246,33,8,4,159,252,8,5,240,0,8,8,240,5],"secondary":false},{"width":8,"bonus":245,"chr":"$","pixels":[1,2,235,255,1,3,255,255,1,4,246,253,1,9,240,253,2,1,179,255,2,2,195,238,2,3,242,85,2,4,255,169,2,5,253,234,2,9,252,254,2,10,243,76,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,4,1,255,179,4,2,255,86,4,3,255,8,4,4,255,8,4,5,255,172,4,6,255,149,4,7,255,8,4,8,255,33,4,9,255,243,4,10,255,10,4,11,255,8,4,12,255,0,5,2,216,149,5,6,250,247,5,7,182,114,5,8,164,251,5,9,182,240,5,10,243,0,6,2,192,140,6,6,175,211,6,7,255,251,6,8,219,236,6,9,172,45,6,10,171,0,7,8,251,0,7,9,202,0],"secondary":false},{"width":8,"bonus":100,"chr":"^","pixels":[1,5,219,255,1,6,191,254,2,3,221,255,2,4,171,252,2,6,219,0,2,7,190,0,3,1,227,255,3,4,222,0,3,5,169,0,4,1,203,230,4,2,249,211,4,3,187,127,5,2,197,62,5,3,238,179,5,4,236,243,6,4,179,49,6,5,243,158,6,6,244,246,7,6,161,38,7,7,235,0],"secondary":false},{"width":8,"bonus":55,"chr":"~","pixels":[1,6,159,255,2,5,225,255,2,7,159,0,3,5,191,255,3,6,239,122,4,6,250,240,5,6,251,254,5,7,236,21,6,6,169,255,6,7,250,0,7,7,169,0],"secondary":false},{"width":11,"bonus":280,"chr":"&","pixels":[1,7,249,255,1,8,255,255,1,9,232,250,2,2,251,255,2,3,255,255,2,4,200,244,2,6,239,255,2,8,249,28,2,9,255,173,2,10,247,188,3,1,217,255,3,2,159,171,3,3,252,35,3,4,255,172,3,5,255,255,3,7,239,0,3,10,249,243,3,11,182,0,4,1,247,255,4,2,221,33,4,5,255,255,4,6,254,201,4,10,249,254,4,11,238,0,5,1,211,255,5,2,251,147,5,4,227,255,5,6,255,205,5,7,239,190,5,10,217,248,5,11,248,0,6,2,251,235,6,3,249,247,6,4,154,180,6,5,227,0,6,7,248,226,6,8,225,176,6,9,207,255,6,10,164,185,6,11,211,0,7,3,231,1,7,4,241,0,7,8,254,251,7,9,245,239,7,10,208,9,8,7,213,255,8,8,213,245,8,9,255,235,8,10,243,151,9,6,202,255,9,7,173,158,9,8,215,5,9,9,213,54,9,10,253,235,10,7,202,0,10,11,234,0],"secondary":false},{"width":9,"bonus":125,"chr":"*","pixels":[1,2,187,255,2,3,223,154,2,5,190,255,3,3,235,225,3,4,245,243,3,5,178,242,3,6,202,61,4,0,241,255,4,1,228,239,4,2,217,241,4,3,255,255,4,4,237,173,4,5,235,25,4,6,169,0,5,1,241,0,5,2,231,117,5,3,236,175,5,4,255,167,5,5,252,250,6,2,179,255,6,3,180,180,6,4,162,0,6,5,199,120,6,6,248,25,7,3,197,82],"secondary":false},{"width":5,"bonus":135,"chr":"(","pixels":[1,1,153,255,1,2,219,255,1,3,253,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,239,254,1,9,185,255,2,0,247,255,2,1,193,232,2,2,196,142,2,3,226,65,2,4,254,31,2,5,255,16,2,6,255,24,2,7,255,43,2,8,255,86,2,9,248,144,2,10,246,229,2,11,244,248,3,0,188,20,3,1,248,0,3,2,176,0,3,11,229,70,3,12,251,196,4,13,193,0],"secondary":false},{"width":5,"bonus":135,"chr":")","pixels":[1,12,227,255,2,0,252,250,2,1,229,247,2,2,155,255,2,9,181,255,2,10,249,255,2,11,212,252,2,13,228,0,3,1,250,100,3,2,244,174,3,3,240,231,3,4,250,252,3,5,255,255,3,6,254,255,3,7,243,251,3,8,217,232,3,9,199,183,3,10,198,74,3,11,249,0,3,12,210,0,4,3,166,0,4,4,218,0,4,5,247,6,4,6,255,2,4,7,254,0,4,8,239,0,4,9,198,0],"secondary":false},{"width":6,"bonus":55,"chr":"_","pixels":[0,12,243,255,1,12,243,255,1,13,245,33,2,12,243,255,2,13,245,33,3,12,243,255,3,13,245,33,4,12,243,255,4,13,245,33,5,12,243,255,5,13,245,33],"secondary":false},{"width":5,"bonus":30,"chr":"-","pixels":[1,6,243,255,2,6,243,255,2,7,245,33,3,6,243,255,3,7,245,33,4,7,244,0],"secondary":true},{"width":8,"bonus":120,"chr":"=","pixels":[1,4,239,255,1,7,243,255,2,4,239,255,2,5,242,34,2,7,243,255,2,8,245,33,3,4,239,255,3,5,242,34,3,7,243,255,3,8,245,33,4,4,239,255,4,5,242,34,4,7,243,255,4,8,245,33,5,4,239,255,5,5,242,34,5,7,243,255,5,8,245,33,6,4,239,255,6,5,242,34,6,7,243,255,6,8,245,33,7,5,240,0,7,8,244,0],"secondary":false},{"width":5,"bonus":145,"chr":"[","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,0,255,12,3,1,255,12,3,2,255,12,3,3,255,12,3,4,255,12,3,5,255,12,3,6,255,12,3,7,255,12,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,12,3,12,254,245,3,13,255,32,4,12,157,248,4,13,245,21],"secondary":false},{"width":6,"bonus":155,"chr":"]","pixels":[1,12,193,255,2,12,245,255,2,13,202,40,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,247,33,4,0,255,12,4,1,255,12,4,2,255,12,4,3,255,12,4,4,255,12,4,5,255,12,4,6,255,12,4,7,255,12,4,8,255,12,4,9,255,12,4,10,255,12,4,11,255,12,4,12,255,12,4,13,255,1],"secondary":false},{"width":5,"bonus":135,"chr":"{","pixels":[0,5,179,255,1,5,223,255,1,6,227,183,2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,230,247,2,6,247,201,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,3,0,252,13,3,1,255,12,3,2,255,12,3,3,255,10,3,4,255,0,3,5,223,0,3,7,197,10,3,8,255,12,3,9,255,12,3,10,255,12,3,11,255,56,3,12,255,249,4,13,249,7],"secondary":false},{"width":5,"bonus":145,"chr":"}","pixels":[1,12,247,255,2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,249,253,2,6,227,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,246,252,2,12,162,171,2,13,247,0,3,0,233,12,3,1,255,12,3,2,255,12,3,3,255,14,3,4,255,93,3,5,254,237,3,6,170,206,3,7,228,19,3,8,255,12,3,9,255,12,3,10,255,11,3,11,255,1,3,12,243,0,4,5,215,229,4,6,238,35],"secondary":false},{"width":4,"bonus":70,"chr":":","pixels":[1,3,161,255,1,4,161,255,1,9,161,255,1,10,161,255,2,3,193,255,2,4,231,211,2,5,161,0,2,9,191,255,2,10,232,212,2,11,162,0,3,4,193,0,3,5,192,0,3,10,192,0,3,11,193,0],"secondary":true},{"width":4,"bonus":85,"chr":";","pixels":[1,3,161,255,1,4,161,255,1,9,193,255,1,10,233,255,1,11,253,255,1,12,196,248,2,3,193,255,2,4,231,211,2,5,161,0,2,9,171,255,2,10,218,122,2,11,235,28,2,12,253,0,2,13,190,0,3,4,193,0,3,5,192,0,3,10,171,0],"secondary":true},{"width":7,"bonus":60,"chr":"\\"","pixels":[2,1,255,255,2,2,251,253,2,3,229,247,3,2,255,1,3,3,249,0,3,4,222,0,4,1,221,255,4,2,197,248,4,3,163,255,5,2,236,122,5,3,212,100,5,4,163,0],"secondary":true},{"width":5,"bonus":30,"chr":"\'","pixels":[2,1,255,255,2,2,251,253,2,3,229,247,3,2,255,1,3,3,249,0,3,4,222,0],"secondary":true},{"width":8,"bonus":100,"chr":"<","pixels":[1,6,245,255,2,5,173,255,2,6,210,244,2,7,251,141,3,5,209,255,3,6,182,34,3,7,250,238,4,4,189,255,4,6,210,0,4,7,165,240,4,8,244,128,5,4,208,255,5,5,189,2,5,8,246,240,6,3,203,255,6,5,208,0,6,8,197,240,6,9,241,111,7,4,203,1,7,9,211,117],"secondary":false},{"width":8,"bonus":100,"chr":">","pixels":[1,3,237,255,1,9,163,255,2,4,248,150,2,8,233,255,2,10,164,0,3,4,244,241,3,5,157,44,3,8,184,252,3,9,233,0,4,5,245,154,4,7,213,255,4,9,182,0,5,5,238,240,5,6,189,134,5,7,199,255,5,8,213,0,6,6,254,252,6,8,199,0,7,6,176,171,7,7,252,1],"secondary":false},{"width":6,"bonus":120,"chr":"\\\\","pixels":[1,0,233,251,1,1,166,255,2,0,248,63,2,1,242,133,2,2,233,209,2,3,250,253,2,4,231,251,2,5,161,255,3,3,193,10,3,4,250,68,3,5,241,139,3,6,234,214,3,7,251,254,3,8,227,251,3,9,159,255,4,7,198,14,4,8,251,71,4,9,240,143,4,10,234,218,4,11,252,254,4,12,223,251,5,11,202,17,5,12,252,76,5,13,220,0],"secondary":false},{"width":4,"bonus":20,"chr":".","pixels":[1,9,211,255,1,10,211,255,2,10,235,156,2,11,212,0],"secondary":true},{"width":4,"bonus":35,"chr":",","pixels":[1,9,243,255,1,10,255,255,1,11,232,252,1,12,174,209,2,10,246,58,2,11,255,2,2,12,229,0],"secondary":true},{"width":7,"bonus":135,"chr":"|","pixels":[3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,4,0,255,12,4,1,255,12,4,2,255,12,4,3,255,12,4,4,255,12,4,5,255,12,4,6,255,12,4,7,255,12,4,8,255,12,4,9,255,12,4,10,255,12,4,11,255,12,4,12,255,12,4,13,255,0],"secondary":false}],"width":13,"spacewidth":4,"shadow":true,"height":15,"basey":10}');

/***/ }),

/***/ "./src/fonts/chatbox/16pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/16pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":9,"bonus":265,"chr":"a","pixels":[1,8,215,255,1,9,255,255,1,10,255,255,1,11,240,250,2,5,153,238,2,8,235,253,2,9,228,88,2,10,254,52,2,11,254,192,2,12,251,207,3,4,211,255,3,5,178,126,3,7,217,255,3,8,196,149,3,9,233,0,3,12,253,249,3,13,203,0,4,4,243,255,4,5,221,69,4,7,247,255,4,8,228,74,4,12,237,249,4,13,247,0,5,4,233,255,5,5,247,79,5,7,255,255,5,8,249,49,5,11,167,255,5,12,178,210,5,13,232,0,6,4,173,255,6,5,250,210,6,7,255,255,6,8,255,113,6,10,178,255,6,11,213,255,6,12,175,29,7,5,239,216,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,253,8,6,204,16,8,7,255,32,8,8,255,32,8,9,255,32,8,10,255,32,8,11,255,32,8,12,255,32,8,13,253,0],"secondary":false},{"width":10,"bonus":275,"chr":"b","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,229,242,3,2,255,36,3,3,255,35,3,4,254,70,3,5,254,225,3,6,255,108,3,7,255,50,3,8,255,39,3,9,254,58,3,10,254,120,3,11,255,225,3,12,255,48,3,13,218,0,4,4,203,245,4,6,224,0,4,11,178,158,4,12,248,203,5,4,247,255,5,5,209,78,5,12,251,252,5,13,197,0,6,4,227,255,6,5,251,137,6,12,234,248,6,13,248,0,7,5,254,255,7,6,215,203,7,10,175,255,7,11,255,255,7,12,191,158,7,13,228,0,8,5,169,143,8,6,254,210,8,7,254,252,8,8,255,255,8,9,253,253,8,10,228,234,8,11,204,117,8,12,255,0,9,7,211,5,9,8,252,24,9,9,255,4,9,10,252,0,9,11,210,0],"secondary":false},{"width":7,"bonus":145,"chr":"c","pixels":[1,6,243,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,245,253,2,5,251,255,2,6,196,178,2,7,247,64,2,8,255,42,2,9,255,62,2,10,255,136,2,11,254,251,2,12,189,168,3,4,217,255,3,5,184,176,3,6,251,0,3,11,193,162,3,12,254,224,4,4,249,255,4,5,227,71,4,12,252,253,4,13,223,0,5,4,231,255,5,5,251,90,5,12,235,249,5,13,250,0,6,5,237,81,6,12,163,183,6,13,229,0],"secondary":false},{"width":9,"bonus":290,"chr":"d","pixels":[1,6,243,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,249,253,1,11,154,246,2,5,250,255,2,6,202,172,2,7,247,64,2,8,255,42,2,9,255,60,2,10,255,130,2,11,255,247,2,12,212,184,3,4,235,255,3,5,196,151,3,6,250,0,3,11,184,154,3,12,254,240,3,13,153,0,4,4,243,255,4,5,241,70,4,12,248,251,4,13,239,0,5,4,172,255,5,5,250,140,5,12,193,228,5,13,244,0,6,5,248,242,6,6,211,195,6,10,158,255,6,11,231,255,6,12,153,85,6,13,172,0,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,8,2,255,32,8,3,255,32,8,4,255,32,8,5,255,32,8,6,255,32,8,7,255,32,8,8,255,32,8,9,255,32,8,10,255,32,8,11,255,32,8,12,255,32,8,13,255,0],"secondary":false},{"width":9,"bonus":235,"chr":"e","pixels":[1,6,239,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,244,252,2,5,251,255,2,6,195,191,2,7,243,68,2,8,255,255,2,9,255,90,2,10,255,118,2,11,255,247,2,12,164,143,3,4,217,255,3,5,182,182,3,6,252,0,3,8,255,255,3,9,255,48,3,11,188,178,3,12,253,207,4,4,249,255,4,5,226,72,4,8,255,255,4,9,255,48,4,12,251,252,4,13,205,0,5,4,219,255,5,5,252,126,5,8,255,255,5,9,255,48,5,12,246,252,5,13,248,0,6,5,254,252,6,6,203,194,6,8,255,255,6,9,255,48,6,12,220,243,6,13,243,0,7,6,254,212,7,7,254,254,7,8,255,255,7,9,255,48,7,12,162,168,7,13,210,0,8,7,212,9,8,8,253,30,8,9,255,6],"secondary":false},{"width":6,"bonus":170,"chr":"f","pixels":[1,4,239,255,1,5,189,155,2,2,251,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,221,255,3,2,194,206,3,3,253,42,3,4,255,255,3,5,255,80,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,1,247,255,4,2,229,68,4,3,157,0,4,4,255,255,4,5,254,52,5,1,207,255,5,2,249,65,5,5,255,9],"secondary":false},{"width":9,"bonus":315,"chr":"g","pixels":[1,6,241,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,247,253,2,5,249,255,2,6,198,173,2,7,245,63,2,8,255,42,2,9,255,60,2,10,255,130,2,11,255,247,2,12,211,184,2,16,229,224,3,4,235,255,3,5,193,149,3,6,249,0,3,11,184,153,3,12,254,240,3,16,246,246,4,4,243,255,4,5,241,70,4,12,248,251,4,13,239,0,4,16,252,254,5,4,167,255,5,5,249,142,5,12,189,226,5,13,244,0,5,16,232,247,6,5,247,241,6,6,218,202,6,10,158,255,6,11,233,255,6,12,177,140,6,13,200,117,6,14,155,255,6,15,253,255,6,16,197,174,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,7,13,255,255,7,14,244,248,7,15,206,160,7,16,253,6,8,5,255,32,8,6,255,32,8,7,255,32,8,8,255,32,8,9,255,32,8,10,255,32,8,11,255,32,8,12,255,32,8,13,255,18,8,14,255,0,8,15,238,0],"secondary":false},{"width":10,"bonus":250,"chr":"h","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,65,3,5,255,225,3,6,255,129,3,7,255,60,3,8,255,38,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,4,190,241,4,5,158,201,4,6,225,0,5,4,243,255,5,5,198,82,6,4,233,255,6,5,248,93,7,4,173,255,7,5,253,234,7,6,165,177,8,5,234,208,8,6,254,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,9,6,192,10,9,7,254,30,9,8,255,32,9,9,255,32,9,10,255,32,9,11,255,32,9,12,255,32,9,13,255,0],"secondary":false},{"width":5,"bonus":110,"chr":"i","pixels":[2,1,225,255,2,2,199,237,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,226,5,3,3,185,0,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0],"secondary":false},{"width":5,"bonus":160,"chr":"j","pixels":[0,16,241,253,1,15,175,255,1,16,234,248,2,1,225,255,2,2,199,237,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,243,249,2,16,201,108,3,2,226,5,3,3,185,0,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,36,3,14,255,28,3,15,255,3,3,16,238,0],"secondary":false},{"width":9,"bonus":220,"chr":"k","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,254,82,3,8,255,235,3,9,255,104,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,7,247,253,4,8,250,252,4,9,242,102,5,6,249,255,5,8,251,143,5,9,254,255,5,10,204,215,6,5,245,255,6,7,249,0,6,9,171,104,6,10,255,231,6,11,246,236,7,4,237,255,7,5,164,90,7,6,246,0,7,11,248,186,7,12,254,255,8,5,238,0,8,12,213,133,8,13,254,0],"secondary":false},{"width":5,"bonus":120,"chr":"l","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0],"secondary":false},{"width":14,"bonus":315,"chr":"m","pixels":[2,4,239,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,5,252,216,3,6,255,108,3,7,255,54,3,8,255,37,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,4,203,255,4,6,214,0,5,4,247,255,5,5,219,84,6,4,205,255,6,5,253,221,7,5,248,228,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,8,5,226,247,8,6,234,106,8,7,254,46,8,8,255,32,8,9,255,32,8,10,255,32,8,11,255,32,8,12,255,32,8,13,255,0,9,4,211,255,9,6,219,0,10,4,245,255,10,5,223,83,11,4,199,255,11,5,253,221,12,5,244,215,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,13,6,208,12,13,7,255,31,13,8,255,32,13,9,255,32,13,10,255,32,13,11,255,32,13,12,255,32,13,13,255,0],"secondary":false},{"width":10,"bonus":215,"chr":"n","pixels":[2,4,239,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,5,253,225,3,6,255,127,3,7,255,59,3,8,255,38,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,4,175,255,4,6,223,0,5,4,243,255,5,5,195,83,6,4,235,255,6,5,247,94,7,4,173,255,7,5,253,234,7,6,165,177,8,5,233,206,8,6,255,253,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,9,6,189,10,9,7,253,30,9,8,255,32,9,9,255,32,9,10,255,32,9,11,255,32,9,12,255,32,9,13,255,0],"secondary":false},{"width":9,"bonus":220,"chr":"o","pixels":[1,6,241,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,244,253,2,5,247,255,2,6,190,173,2,7,244,63,2,8,255,42,2,9,255,61,2,10,255,133,2,11,255,249,2,12,180,159,3,4,225,255,3,5,183,160,3,6,247,0,3,11,189,157,3,12,254,222,4,4,249,255,4,5,233,72,4,12,252,252,4,13,221,0,5,4,211,255,5,5,253,143,5,12,222,243,5,13,249,0,6,5,254,255,6,6,220,205,6,10,179,255,6,11,255,255,6,12,180,124,6,13,212,0,7,6,255,199,7,7,253,252,7,8,255,255,7,9,251,254,7,10,223,230,7,11,201,92,7,12,255,0,8,7,199,4,8,8,250,23,8,9,255,3,8,10,250,0,8,11,201,0],"secondary":false},{"width":10,"bonus":280,"chr":"p","pixels":[2,4,241,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,5,253,221,3,6,255,112,3,7,255,53,3,8,255,39,3,9,255,59,3,10,255,123,3,11,255,229,3,12,255,71,3,13,255,35,3,14,255,36,3,15,255,36,3,16,255,36,4,4,191,255,4,6,219,0,4,11,180,158,4,12,249,200,5,4,247,255,5,5,208,80,5,12,251,252,5,13,195,0,6,4,227,255,6,5,251,146,6,12,234,248,6,13,248,0,7,5,255,255,7,6,223,207,7,10,187,255,7,11,255,255,7,12,196,152,7,13,228,0,8,5,168,142,8,6,255,211,8,7,254,252,8,8,255,255,8,9,253,253,8,10,229,233,8,11,211,110,8,12,255,0,9,7,212,5,9,8,252,24,9,9,255,4,9,10,252,0,9,11,209,0],"secondary":false},{"width":9,"bonus":295,"chr":"q","pixels":[1,6,243,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,249,253,1,11,155,245,2,5,250,255,2,6,202,172,2,7,247,64,2,8,255,42,2,9,255,59,2,10,255,128,2,11,255,247,2,12,213,185,3,4,235,255,3,5,195,150,3,6,250,0,3,11,183,155,3,12,254,240,3,13,154,0,4,4,243,255,4,5,240,69,4,12,248,251,4,13,240,0,5,4,171,255,5,5,250,139,5,12,190,228,5,13,244,0,6,5,246,238,6,6,211,195,6,10,154,255,6,11,229,255,6,12,174,141,6,13,197,104,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,7,13,255,255,7,14,255,255,7,15,255,255,7,16,255,255,8,5,255,32,8,6,255,32,8,7,255,32,8,8,255,32,8,9,255,32,8,10,255,32,8,11,255,32,8,12,255,32,8,13,255,32,8,14,255,32,8,15,255,32,8,16,255,32],"secondary":false},{"width":7,"bonus":130,"chr":"r","pixels":[2,4,235,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,5,251,200,3,6,255,154,3,7,255,59,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,4,169,255,4,5,154,243,4,6,196,0,4,7,154,0,5,4,245,255,5,5,190,83,6,4,165,255,6,5,246,44],"secondary":false},{"width":8,"bonus":205,"chr":"s","pixels":[1,5,249,255,1,6,255,255,1,7,223,244,1,11,154,255,1,12,200,231,2,4,195,255,2,5,188,222,2,6,250,64,2,7,254,237,2,8,232,126,2,12,245,241,2,13,181,0,3,4,239,255,3,5,209,78,3,6,164,0,3,7,155,203,3,8,252,220,3,12,251,253,3,13,232,0,4,4,243,255,4,5,244,71,4,8,253,253,4,9,228,81,4,12,235,249,4,13,249,0,5,4,211,255,5,5,249,119,5,8,175,242,5,9,254,222,5,11,209,255,5,12,192,216,5,13,229,0,6,5,230,119,6,9,241,228,6,10,255,255,6,11,227,237,6,12,215,36,6,13,163,0,7,10,218,19,7,11,255,0,7,12,211,0],"secondary":false},{"width":6,"bonus":150,"chr":"t","pixels":[1,4,241,255,1,5,161,182,2,2,221,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,252,254,3,3,227,41,3,4,255,255,3,5,255,80,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,45,3,11,255,167,3,12,254,226,4,4,255,255,4,5,254,52,4,12,252,251,4,13,225,0,5,4,175,255,5,5,255,35,5,12,182,228,5,13,248,0],"secondary":false},{"width":10,"bonus":220,"chr":"u","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,235,249,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,37,3,10,255,69,3,11,255,209,3,12,249,198,4,12,252,245,4,13,193,0,5,12,244,250,5,13,242,0,6,12,189,223,6,13,239,0,7,10,173,255,7,11,235,255,7,12,170,81,7,13,165,0,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,9,5,255,32,9,6,255,32,9,7,255,32,9,8,255,32,9,9,255,32,9,10,255,32,9,11,255,32,9,12,255,32,9,13,255,0],"secondary":false},{"width":8,"bonus":190,"chr":"v","pixels":[0,4,209,255,1,4,175,255,1,5,253,250,1,6,254,254,1,7,196,246,2,5,179,20,2,6,250,96,2,7,254,182,2,8,253,252,2,9,249,251,2,10,171,249,3,8,186,25,3,9,252,99,3,10,252,182,3,11,251,247,3,12,239,249,4,10,189,200,4,11,246,234,4,12,254,251,4,13,233,0,5,8,233,255,5,9,255,255,5,10,212,238,5,11,193,140,5,12,228,21,5,13,250,0,6,5,227,255,6,6,255,255,6,7,228,245,6,8,202,160,6,9,236,38,6,10,255,0,6,11,198,0,7,4,235,255,7,5,207,184,7,6,233,61,7,7,255,0,7,8,219,0],"secondary":false},{"width":13,"bonus":365,"chr":"w","pixels":[0,4,175,255,1,4,193,255,1,5,252,251,1,6,255,255,1,7,234,250,1,8,163,255,2,5,196,10,2,6,249,65,2,7,254,126,2,8,248,194,2,9,251,249,2,10,255,255,2,11,224,250,2,12,153,255,3,9,197,39,3,10,250,142,3,11,254,237,3,12,255,255,3,13,153,0,4,8,209,255,4,9,255,255,4,10,230,252,4,11,207,184,4,12,241,75,4,13,255,0,5,4,155,255,5,5,229,255,5,6,253,255,5,7,214,241,5,8,193,170,5,9,218,58,5,10,255,0,5,11,227,0,6,4,255,255,6,5,247,243,6,6,243,139,6,7,253,55,6,8,202,2,7,5,255,131,7,6,251,208,7,7,254,255,7,8,240,250,7,9,164,254,8,7,209,31,8,8,255,98,8,9,248,175,8,10,248,242,8,11,253,253,8,12,201,250,9,9,161,163,9,10,223,185,9,11,253,240,9,12,255,255,9,13,197,0,10,6,169,255,10,7,231,255,10,8,255,255,10,9,240,253,10,10,206,214,10,11,200,134,10,12,240,40,10,13,255,0,11,4,255,255,11,5,249,254,11,6,216,223,11,7,210,147,11,8,236,57,11,9,255,2,11,10,238,0,11,11,173,0,12,5,255,9,12,6,248,0,12,7,189,0],"secondary":false},{"width":8,"bonus":195,"chr":"x","pixels":[1,4,253,255,1,5,169,216,1,11,177,255,1,12,253,255,2,5,254,237,2,6,238,233,2,10,235,255,2,11,217,251,2,12,193,72,2,13,253,0,3,6,248,175,3,7,255,253,3,8,212,240,3,9,251,255,3,10,176,195,3,11,236,8,3,12,214,0,4,7,246,238,4,8,255,255,4,9,243,211,4,10,252,26,5,6,251,255,5,7,187,233,5,8,236,65,5,9,255,202,5,10,251,243,6,4,217,255,6,5,236,254,6,6,176,125,6,7,251,0,6,8,171,0,6,10,228,139,6,11,254,251,6,12,216,225,7,4,173,255,7,5,221,26,7,6,235,0,7,12,254,210,7,13,190,0],"secondary":false},{"width":8,"bonus":250,"chr":"y","pixels":[0,4,241,255,0,5,157,249,0,16,235,255,1,5,253,225,1,6,255,255,1,7,221,245,1,16,244,252,2,6,232,68,2,7,255,155,2,8,252,242,2,9,252,253,2,10,182,245,2,15,229,255,2,16,192,215,3,8,157,12,3,9,244,84,3,10,252,164,3,11,248,240,3,12,237,247,3,13,227,255,3,14,254,255,3,15,191,219,3,16,230,13,4,10,207,227,4,11,252,251,4,12,252,230,4,13,243,144,4,14,231,43,4,15,254,0,4,16,164,0,5,7,189,255,5,8,251,255,5,9,243,254,5,10,198,205,5,11,203,83,5,12,248,2,5,13,228,0,6,4,184,255,6,5,251,255,6,6,251,255,6,7,209,219,6,8,211,106,6,9,252,9,6,10,242,0,6,11,159,0,7,4,201,255,7,5,214,130,7,6,251,21,7,7,251,0,7,8,180,0],"secondary":false},{"width":8,"bonus":205,"chr":"z","pixels":[1,4,255,255,1,11,177,255,1,12,255,255,2,4,255,255,2,5,254,52,2,10,239,255,2,11,192,246,2,12,255,255,2,13,255,0,3,4,255,255,3,5,254,52,3,8,185,255,3,9,229,255,3,11,241,55,3,12,255,255,3,13,255,0,4,4,255,255,4,5,255,53,4,7,243,255,4,8,181,241,4,9,191,26,4,10,230,0,4,12,255,255,4,13,255,0,5,4,255,255,5,5,254,221,5,6,244,252,5,7,162,147,5,8,244,0,5,9,171,0,5,12,255,255,5,13,255,0,6,4,255,255,6,5,254,192,6,6,224,36,6,7,241,0,6,12,255,255,6,13,255,0,7,5,255,0,7,6,192,0,7,13,255,0],"secondary":false},{"width":10,"bonus":275,"chr":"A","pixels":[0,12,208,255,1,9,179,255,1,10,251,255,1,11,244,254,1,12,203,203,1,13,208,0,2,7,237,255,2,8,255,255,2,9,213,231,2,10,206,112,2,11,251,11,2,12,243,0,2,13,162,0,3,4,213,255,3,5,255,255,3,6,217,243,3,7,202,160,3,8,255,255,3,9,254,64,3,10,193,0,4,1,184,255,4,2,251,255,4,3,214,250,4,4,190,178,4,5,220,50,4,6,255,0,4,7,210,20,4,8,255,255,4,9,254,64,5,1,235,255,5,2,251,245,5,3,254,158,5,4,223,85,5,8,255,255,5,9,254,64,6,2,242,85,6,3,250,179,6,4,253,252,6,5,241,249,6,8,255,255,6,9,254,64,7,4,182,29,7,5,252,111,7,6,251,208,7,7,255,255,7,8,255,255,7,9,255,163,8,7,214,52,8,8,255,139,8,9,255,231,8,10,255,255,8,11,220,246,9,10,238,78,9,11,254,168,9,12,254,248],"secondary":false},{"width":10,"bonus":345,"chr":"B","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,255,3,7,255,77,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,80,3,12,255,255,3,13,255,0,4,1,255,255,4,2,254,52,4,6,255,255,4,7,255,48,4,12,255,255,4,13,255,0,5,1,247,255,5,2,254,64,5,6,255,255,5,7,255,60,5,12,250,254,5,13,255,0,6,1,221,255,6,2,251,114,6,6,255,255,6,7,255,119,6,12,224,245,6,13,249,0,7,2,252,241,7,3,174,163,7,5,211,255,7,6,165,220,7,7,254,246,7,8,188,175,7,11,247,255,7,12,184,164,7,13,215,0,8,2,227,211,8,3,254,255,8,4,254,254,8,5,192,203,8,6,212,1,8,7,196,160,8,8,255,245,8,9,255,255,8,10,247,252,8,11,200,171,8,12,248,4,9,3,191,18,9,4,254,10,9,5,253,0,9,9,246,23,9,10,255,1,9,11,244,0],"secondary":false},{"width":10,"bonus":215,"chr":"C","pixels":[1,4,229,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,244,253,2,2,178,255,2,3,251,255,2,4,202,195,2,5,236,82,2,6,255,43,2,7,255,42,2,8,255,72,2,9,255,145,2,10,255,247,2,11,235,227,3,2,245,255,3,3,195,77,3,4,251,0,3,5,154,0,3,10,164,71,3,11,254,240,3,12,233,145,4,1,197,255,4,2,179,187,4,3,245,0,4,12,253,219,5,1,239,255,5,2,212,78,5,12,251,252,5,13,217,0,6,1,243,255,6,2,243,71,6,12,248,252,6,13,248,0,7,1,217,255,7,2,249,122,7,12,227,245,7,13,246,0,8,2,240,163,8,12,168,174,8,13,218,0,9,3,153,0],"secondary":false},{"width":12,"bonus":345,"chr":"D","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,80,3,12,255,255,3,13,255,0,4,1,255,255,4,2,254,52,4,12,255,255,4,13,255,0,5,1,251,255,5,2,255,59,5,12,249,253,5,13,255,0,6,1,229,255,6,2,252,92,6,12,228,246,6,13,247,0,7,1,171,255,7,2,246,182,7,11,197,255,7,12,197,203,7,13,220,0,8,2,254,255,8,3,210,132,8,11,251,255,8,12,208,59,8,13,157,0,9,2,156,204,9,3,255,255,9,4,221,228,9,9,209,255,9,10,253,255,9,11,184,147,9,12,252,0,10,3,163,116,10,4,255,191,10,5,254,250,10,6,255,255,10,7,255,255,10,8,247,251,10,9,216,212,10,10,221,69,10,11,253,0,11,5,192,6,11,6,250,25,11,7,255,20,11,8,255,2,11,9,243,0,11,10,179,0],"secondary":false},{"width":9,"bonus":260,"chr":"E","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,255,3,7,255,77,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,80,3,12,255,255,3,13,255,0,4,1,255,255,4,2,254,52,4,6,255,255,4,7,255,48,4,12,255,255,4,13,255,0,5,1,255,255,5,2,254,52,5,6,255,255,5,7,255,48,5,12,255,255,5,13,255,0,6,1,255,255,6,2,254,52,6,6,255,255,6,7,255,48,6,12,255,255,6,13,255,0,7,1,255,255,7,2,254,52,7,6,203,255,7,7,255,38,7,12,255,255,7,13,255,0,8,2,255,4,8,7,204,0,8,13,255,0],"secondary":false},{"width":8,"bonus":205,"chr":"F","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,255,3,8,255,77,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,1,255,255,4,2,254,52,4,7,255,255,4,8,255,48,5,1,255,255,5,2,254,52,5,7,255,255,5,8,255,48,6,1,255,255,6,2,254,52,6,7,255,255,6,8,255,48,7,1,255,255,7,2,254,52,7,7,199,255,7,8,255,37],"secondary":false},{"width":11,"bonus":315,"chr":"G","pixels":[1,4,217,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,240,252,2,3,253,255,2,4,199,211,2,5,229,88,2,6,255,43,2,7,255,43,2,8,255,74,2,9,255,151,2,10,254,251,2,11,223,216,3,2,251,255,3,3,177,118,3,4,254,0,3,5,165,0,3,10,175,89,3,11,254,249,3,12,218,129,4,1,172,255,4,2,186,220,4,3,252,0,4,11,172,217,4,12,254,203,5,1,225,255,5,2,197,102,5,3,160,0,5,12,250,249,5,13,202,0,6,1,249,255,6,2,232,65,6,7,208,255,6,12,254,254,6,13,244,0,7,1,233,255,7,2,251,86,7,7,255,255,7,8,217,57,7,12,243,251,7,13,253,0,8,1,199,255,8,2,246,159,8,7,255,255,8,8,255,113,8,12,219,240,8,13,240,0,9,2,230,156,9,3,153,0,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,212,179,9,13,206,0,10,8,255,32,10,9,255,32,10,10,255,32,10,11,255,32,10,12,255,14],"secondary":false},{"width":12,"bonus":290,"chr":"H","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,255,3,7,255,77,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,6,255,255,4,7,255,48,5,6,255,255,5,7,255,48,6,6,255,255,6,7,255,48,7,6,255,255,7,7,255,48,8,6,255,255,8,7,255,113,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,10,2,255,32,10,3,255,32,10,4,255,32,10,5,255,32,10,6,255,32,10,7,255,32,10,8,255,32,10,9,255,32,10,10,255,32,10,11,255,32,10,12,255,32,10,13,255,0],"secondary":false},{"width":6,"bonus":170,"chr":"I","pixels":[1,1,245,255,1,12,245,255,2,1,255,255,2,2,249,107,2,12,255,255,2,13,245,0,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,0,4,1,249,255,4,2,254,46,4,3,255,32,4,4,255,32,4,5,255,32,4,6,255,32,4,7,255,32,4,8,255,32,4,9,255,32,4,10,255,32,4,11,255,44,4,12,254,251,4,13,255,0,5,2,250,0,5,13,250,0],"secondary":false},{"width":5,"bonus":175,"chr":"J","pixels":[0,15,255,255,0,16,214,43,1,14,187,255,1,15,231,253,1,16,255,2,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,226,235,2,15,202,68,2,16,229,0,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,35,3,13,255,13,3,14,255,0,3,15,208,0],"secondary":false},{"width":10,"bonus":285,"chr":"K","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,254,162,3,7,255,227,3,8,254,52,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,5,174,237,4,6,255,255,4,7,221,186,4,8,228,7,5,4,193,255,5,5,226,254,5,6,216,173,5,7,255,253,5,8,236,223,6,3,219,255,6,4,207,251,6,5,200,32,6,6,225,0,6,7,171,88,6,8,254,222,6,9,253,247,7,2,237,255,7,3,190,241,7,4,221,13,7,5,204,0,7,9,242,165,7,10,255,255,7,11,210,218,8,1,249,255,8,2,175,214,8,3,238,3,8,4,179,0,8,10,187,108,8,11,254,234,8,12,248,238,9,2,250,0,9,12,249,183,9,13,232,0],"secondary":false},{"width":9,"bonus":165,"chr":"L","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,104,3,12,255,255,3,13,255,0,4,12,255,255,4,13,255,0,5,12,255,255,5,13,255,0,6,12,255,255,6,13,255,0,7,12,255,255,7,13,255,0,8,13,255,0],"secondary":false},{"width":15,"bonus":460,"chr":"M","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,254,245,3,3,255,165,3,4,254,76,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,2,255,129,4,3,253,219,4,4,255,255,4,5,221,239,5,4,225,58,5,5,255,140,5,6,250,232,5,7,254,255,5,8,200,247,6,7,234,68,6,8,255,152,6,9,250,240,6,10,253,253,6,11,187,248,7,9,162,40,7,10,249,185,7,11,255,255,7,12,255,255,8,8,179,255,8,9,249,255,8,10,217,251,8,11,217,147,8,12,255,37,8,13,255,0,9,5,161,255,9,6,243,255,9,7,225,254,9,8,178,195,9,9,193,62,9,10,250,0,9,11,214,0,10,3,231,255,10,4,233,255,10,5,178,212,10,6,182,81,10,7,243,1,10,8,224,0,11,1,255,255,11,2,239,251,11,3,209,183,11,4,239,88,11,5,240,85,11,6,182,112,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,13,2,255,32,13,3,255,32,13,4,255,32,13,5,255,32,13,6,255,32,13,7,255,32,13,8,255,32,13,9,255,32,13,10,255,32,13,11,255,32,13,12,255,32,13,13,255,0],"secondary":false},{"width":13,"bonus":345,"chr":"N","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,213,255,3,2,255,255,3,3,255,181,3,4,255,50,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,2,234,137,4,3,254,249,4,4,247,237,5,4,254,191,5,5,255,255,5,6,207,225,6,5,214,113,6,6,255,235,6,7,253,249,7,7,248,165,7,8,255,255,7,9,234,234,8,8,183,89,8,9,254,216,8,10,255,255,8,11,185,223,9,10,247,209,9,11,255,255,9,12,248,244,10,1,255,255,10,2,255,255,10,3,255,255,10,4,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,237,0,11,2,255,32,11,3,255,32,11,4,255,32,11,5,255,32,11,6,255,32,11,7,255,32,11,8,255,32,11,9,255,32,11,10,255,32,11,11,255,32,11,12,255,32,11,13,255,0],"secondary":false},{"width":12,"bonus":330,"chr":"O","pixels":[1,4,241,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,244,252,2,2,207,255,2,3,242,255,2,4,203,173,2,5,245,72,2,6,255,42,2,7,255,42,2,8,254,70,2,9,255,139,2,10,254,244,2,11,232,224,3,2,236,254,3,3,214,44,3,4,242,0,3,10,155,61,3,11,253,235,3,12,228,141,4,1,211,255,4,2,186,162,4,3,235,0,4,12,251,215,5,1,245,255,5,2,223,71,5,12,251,251,5,13,212,0,6,1,241,255,6,2,248,68,6,12,246,252,6,13,247,0,7,1,197,255,7,2,248,135,7,12,212,238,7,13,243,0,8,2,253,247,8,3,161,100,8,11,245,255,8,12,178,138,8,13,198,0,9,2,194,206,9,3,255,253,9,4,198,231,9,9,181,255,9,10,253,255,9,11,182,220,9,12,245,1,10,3,190,116,10,4,254,195,10,5,253,251,10,6,255,255,10,7,255,255,10,8,251,253,10,9,221,223,10,10,205,106,10,11,254,0,10,12,157,0,11,5,195,6,11,6,249,23,11,7,255,23,11,8,255,4,11,9,249,0,11,10,193,0],"secondary":false},{"width":10,"bonus":255,"chr":"P","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,255,3,8,255,77,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,1,255,255,4,2,255,53,4,7,255,255,4,8,255,43,5,1,243,255,5,2,254,76,5,7,255,255,5,8,255,16,6,1,205,255,6,2,251,151,6,7,229,251,6,8,255,0,7,2,254,255,7,3,209,179,7,6,247,255,7,7,171,164,7,8,226,0,8,2,193,191,8,3,254,249,8,4,255,255,8,5,247,252,8,6,198,176,8,7,248,2,9,4,248,26,9,5,255,5,9,6,244,0],"secondary":false},{"width":12,"bonus":350,"chr":"Q","pixels":[1,4,241,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,244,252,2,2,207,255,2,3,242,255,2,4,203,173,2,5,245,72,2,6,255,42,2,7,255,42,2,8,254,70,2,9,255,139,2,10,254,244,2,11,232,224,3,2,236,254,3,3,214,44,3,4,242,0,3,10,155,61,3,11,253,235,3,12,229,138,4,1,211,255,4,2,186,162,4,3,235,0,4,12,251,214,5,1,245,255,5,2,223,71,5,12,251,251,5,13,211,0,6,1,241,255,6,2,248,68,6,12,255,255,6,13,249,66,7,1,197,255,7,2,248,135,7,12,252,254,7,13,255,249,8,2,253,247,8,3,161,100,8,11,245,255,8,12,179,141,8,13,253,157,8,14,254,255,9,2,194,206,9,3,255,253,9,4,198,231,9,9,181,255,9,10,253,255,9,11,184,220,9,12,245,1,9,14,214,178,9,15,255,128,10,3,190,116,10,4,254,195,10,5,253,251,10,6,255,255,10,7,255,255,10,8,250,252,10,9,218,220,10,10,206,107,10,11,254,0,10,12,159,0,10,15,166,62,11,5,195,6,11,6,249,23,11,7,255,18,11,8,255,0,11,9,247,0,11,10,188,0],"secondary":false},{"width":10,"bonus":300,"chr":"R","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,3,1,255,255,3,2,255,80,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,255,3,8,255,77,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,0,4,1,255,255,4,2,254,52,4,7,255,255,4,8,255,48,5,1,245,255,5,2,255,71,5,7,255,255,5,8,255,102,6,1,209,255,6,2,251,136,6,7,250,255,6,8,255,255,6,9,214,223,7,2,254,251,7,3,200,177,7,6,241,255,7,7,162,181,7,8,251,72,7,9,255,217,7,10,254,252,7,11,163,227,8,2,198,192,8,3,254,249,8,4,255,255,8,5,249,251,8,6,194,175,8,7,241,1,8,10,235,131,8,11,254,245,8,12,245,243,9,4,248,26,9,5,255,3,9,6,245,0,9,12,251,174,9,13,234,0],"secondary":false},{"width":9,"bonus":240,"chr":"S","pixels":[1,2,213,255,1,3,255,255,1,4,255,255,1,5,234,248,1,11,167,255,1,12,202,231,2,2,220,252,2,3,224,71,2,4,255,72,2,5,255,219,2,6,251,222,2,12,246,238,2,13,183,0,3,1,221,255,3,2,183,127,3,3,217,0,3,6,255,255,3,7,231,95,3,12,250,253,3,13,230,0,4,1,247,255,4,2,228,66,4,6,221,242,4,7,255,190,4,12,242,251,4,13,248,0,5,1,233,255,5,2,249,84,5,7,255,255,5,8,203,66,5,12,215,238,5,13,238,0,6,1,197,255,6,2,246,148,6,7,239,243,6,8,254,222,6,11,245,255,6,12,172,144,6,13,201,0,7,2,224,130,7,8,251,223,7,9,255,255,7,10,252,252,7,11,195,187,7,12,245,2,8,9,223,26,8,10,255,9,8,11,249,0],"secondary":false},{"width":11,"bonus":195,"chr":"T","pixels":[1,1,255,255,2,1,255,255,2,2,254,52,3,1,255,255,3,2,254,52,4,1,255,255,4,2,255,115,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,6,1,255,255,6,2,255,77,6,3,255,32,6,4,255,32,6,5,255,32,6,6,255,32,6,7,255,32,6,8,255,32,6,9,255,32,6,10,255,32,6,11,255,32,6,12,255,32,6,13,255,0,7,1,255,255,7,2,254,52,8,1,255,255,8,2,254,52,9,1,255,255,9,2,254,52,10,2,255,0],"secondary":false},{"width":12,"bonus":280,"chr":"U","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,246,252,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,37,3,9,255,61,3,10,255,143,3,11,255,253,3,12,169,146,4,11,206,178,4,12,255,208,5,12,251,252,5,13,208,0,6,12,246,252,6,13,248,0,7,11,169,255,7,12,207,230,7,13,243,0,8,10,190,255,8,11,251,255,8,12,190,81,8,13,187,0,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,254,255,9,10,225,231,9,11,207,82,9,12,251,0,10,2,255,32,10,3,255,32,10,4,255,32,10,5,255,32,10,6,255,32,10,7,255,32,10,8,255,30,10,9,255,13,10,10,254,0,10,11,204,0],"secondary":false},{"width":10,"bonus":265,"chr":"V","pixels":[0,1,213,255,1,1,173,255,1,2,254,248,1,3,255,255,1,4,216,246,2,2,178,17,2,3,249,90,2,4,255,173,2,5,253,247,2,6,255,255,2,7,210,247,3,5,177,17,3,6,249,89,3,7,255,173,3,8,253,247,3,9,254,255,3,10,204,247,4,8,176,16,4,9,248,84,4,10,254,164,4,11,253,252,4,12,254,254,5,9,188,251,5,10,250,253,5,11,253,251,5,12,253,181,5,13,253,0,6,6,191,255,6,7,253,255,6,8,251,255,6,9,213,219,6,10,212,116,6,11,248,17,6,12,249,0,6,13,179,0,7,3,191,255,7,4,253,255,7,5,252,254,7,6,215,223,7,7,216,119,7,8,253,19,7,9,251,0,7,10,183,0,8,1,253,255,8,2,254,255,8,3,219,225,8,4,218,124,8,5,253,23,8,6,252,0,8,7,188,0,9,2,253,27,9,3,254,0,9,4,193,0],"secondary":false},{"width":15,"bonus":480,"chr":"W","pixels":[0,1,172,255,1,1,209,255,1,2,254,255,1,3,255,255,1,4,237,251,1,5,171,255,2,2,213,20,2,3,254,79,2,4,255,139,2,5,250,205,2,6,254,252,2,7,255,255,2,8,237,251,2,9,169,255,3,6,203,14,3,7,252,69,3,8,255,127,3,9,248,181,3,10,245,234,3,11,255,255,3,12,235,251,4,9,214,206,4,10,244,232,4,11,255,253,4,12,255,207,4,13,231,0,5,5,157,255,5,6,227,255,5,7,255,255,5,8,235,251,5,9,202,204,5,10,203,116,5,11,225,26,5,12,253,0,5,13,207,0,6,2,199,255,6,3,251,255,6,4,248,255,6,5,211,228,6,6,203,148,6,7,232,53,6,8,255,1,6,9,232,0,6,10,162,0,7,1,255,255,7,2,254,254,7,3,238,192,7,4,252,64,7,5,248,3,7,6,189,0,8,2,255,142,8,3,255,217,8,4,255,255,8,5,241,251,8,6,168,254,9,4,222,40,9,5,255,109,9,6,250,187,9,7,252,250,9,8,254,255,9,9,210,250,10,7,185,12,10,8,248,72,10,9,254,126,10,10,243,201,10,11,254,255,10,12,243,251,11,8,165,250,11,9,228,244,11,10,254,255,11,11,253,252,11,12,255,196,11,13,240,0,12,4,173,255,12,5,233,255,12,6,255,255,12,7,252,254,12,8,220,229,12,9,210,161,12,10,228,77,12,11,254,10,12,12,250,0,12,13,196,0,13,1,239,255,13,2,255,255,13,3,252,254,13,4,224,229,13,5,217,160,13,6,239,76,13,7,255,12,13,8,251,0,13,9,198,0,14,2,244,77,14,3,255,13,14,4,252,0,14,5,201,0],"secondary":false},{"width":9,"bonus":275,"chr":"X","pixels":[0,12,161,255,1,1,253,255,1,2,217,228,1,11,239,255,1,12,223,251,1,13,162,0,2,2,255,202,2,3,253,252,2,4,156,223,2,9,203,255,2,10,244,255,2,11,177,174,2,12,239,8,2,13,220,0,3,3,223,114,3,4,255,235,3,5,240,237,3,7,153,255,3,8,253,255,3,9,184,229,3,10,209,33,3,11,244,0,4,5,249,187,4,6,255,255,4,7,250,253,4,8,181,100,4,9,253,0,4,10,165,0,5,5,252,254,5,6,234,194,5,7,254,234,5,8,254,227,6,3,233,255,6,4,220,252,6,5,176,99,6,6,252,0,6,7,183,23,6,8,246,156,6,9,255,253,6,10,216,230,7,1,196,255,7,2,248,255,7,3,176,186,7,4,233,8,7,5,218,0,7,9,171,77,7,10,255,202,7,11,255,253,7,12,174,226,8,1,187,255,8,2,205,47,8,3,248,0,8,11,223,118,8,12,255,237,8,13,154,0],"secondary":false},{"width":9,"bonus":215,"chr":"Y","pixels":[0,1,217,255,1,1,179,255,1,2,255,255,1,3,227,238,2,2,197,73,2,3,254,186,2,4,255,255,2,5,221,238,3,4,202,77,3,5,254,192,3,6,255,255,3,7,216,235,4,6,235,190,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,5,5,229,255,5,6,249,255,5,7,221,170,5,8,255,43,5,9,255,36,5,10,255,36,5,11,255,36,5,12,255,36,5,13,255,0,6,3,221,255,6,4,252,254,6,5,197,203,6,6,232,34,6,7,249,0,7,1,215,255,7,2,254,255,7,3,200,213,7,4,227,43,7,5,252,0,7,6,157,0,8,1,177,255,8,2,221,53,8,3,254,0,8,4,167,0],"secondary":false},{"width":10,"bonus":305,"chr":"Z","pixels":[1,1,255,255,1,11,177,255,1,12,255,255,2,1,255,255,2,2,254,52,2,10,241,255,2,11,248,254,2,12,255,255,2,13,255,0,3,1,255,255,3,2,254,52,3,8,199,255,3,9,255,255,3,10,200,202,3,11,245,73,3,12,255,255,3,13,255,0,4,1,255,255,4,2,254,52,4,7,249,255,4,8,224,248,4,9,214,77,4,10,255,0,4,11,177,74,4,12,255,255,4,13,255,0,5,1,255,255,5,2,254,52,5,5,217,255,5,6,250,255,5,7,197,172,5,8,250,8,5,9,218,0,5,12,255,255,5,13,255,0,6,1,255,255,6,2,254,70,6,3,178,228,6,4,255,255,6,5,214,238,6,6,224,51,6,7,250,0,6,12,255,255,6,13,255,0,7,1,255,255,7,2,255,247,7,3,245,252,7,4,200,138,7,5,255,2,7,6,200,0,7,12,255,255,7,13,255,0,8,1,255,255,8,2,255,177,8,3,248,29,8,4,242,0,8,12,255,255,8,13,255,0,9,2,255,0,9,3,177,0,9,13,255,0],"secondary":false},{"width":9,"bonus":280,"chr":"0","pixels":[1,3,213,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,254,255,1,10,205,250,2,2,253,255,2,3,195,210,2,4,227,95,2,5,255,50,2,6,255,39,2,7,255,38,2,8,255,50,2,9,255,83,2,10,254,160,2,11,254,252,3,1,223,255,3,2,177,170,3,3,253,0,3,4,160,0,3,11,203,147,3,12,254,221,4,1,247,255,4,2,231,66,4,12,251,252,4,13,220,0,5,1,203,255,5,2,252,157,5,11,155,255,5,12,220,243,5,13,248,0,6,2,253,247,6,3,237,225,6,10,208,255,6,11,250,255,6,12,184,103,6,13,209,0,7,3,251,155,7,4,250,230,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,241,247,7,10,212,202,7,11,217,59,7,12,250,0,8,5,226,11,8,6,255,26,8,7,255,26,8,8,255,12,8,9,255,0,8,10,233,0,8,11,168,0],"secondary":false},{"width":9,"bonus":160,"chr":"1","pixels":[2,3,225,255,3,2,211,255,3,3,184,240,3,4,226,2,4,1,175,255,4,2,231,254,4,3,226,99,4,4,199,103,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,6,2,255,36,6,3,255,36,6,4,255,36,6,5,255,36,6,6,255,36,6,7,255,36,6,8,255,36,6,9,255,36,6,10,255,36,6,11,255,36,6,12,255,36,6,13,255,0],"secondary":false},{"width":9,"bonus":275,"chr":"2","pixels":[1,2,155,255,1,11,160,255,1,12,255,255,2,2,236,255,2,3,164,35,2,10,173,255,2,11,254,255,2,12,255,255,2,13,255,0,3,1,215,255,3,2,184,159,3,3,236,0,3,9,185,255,3,10,238,255,3,11,208,133,3,12,255,255,3,13,255,0,4,1,247,255,4,2,225,68,4,8,196,255,4,9,232,255,4,10,197,59,4,11,241,55,4,12,255,255,4,13,255,0,5,1,219,255,5,2,250,104,5,7,209,255,5,8,223,253,5,9,204,46,5,10,232,0,5,12,255,255,5,13,255,0,6,2,253,241,6,3,173,174,6,6,245,255,6,7,204,246,6,8,214,29,6,9,222,0,6,12,255,255,6,13,255,0,7,2,207,191,7,3,254,249,7,4,255,255,7,5,236,244,7,6,196,147,7,7,246,4,7,8,196,0,7,12,255,255,7,13,255,0,8,3,157,7,8,4,249,18,8,5,255,0,8,6,226,0,8,13,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"3","pixels":[0,11,173,255,1,2,215,251,1,12,241,224,2,1,219,255,2,2,186,137,2,3,212,0,2,6,255,255,2,12,249,250,2,13,212,0,3,1,247,255,3,2,227,66,3,6,255,255,3,7,254,64,3,12,251,253,3,13,244,0,4,1,223,255,4,2,250,97,4,6,244,254,4,7,255,129,4,12,222,242,4,13,249,0,5,1,153,255,5,2,251,233,5,3,159,165,5,5,239,255,5,6,156,174,5,7,254,251,5,8,196,178,5,11,251,255,5,12,187,150,5,13,211,0,6,2,230,214,6,3,255,255,6,4,252,253,6,5,183,170,6,6,239,0,6,7,172,166,6,8,254,245,6,9,255,255,6,10,245,249,6,11,203,167,6,12,251,1,7,3,197,25,7,4,255,7,7,5,250,0,7,9,244,22,7,10,255,0,7,11,239,0],"secondary":false},{"width":9,"bonus":270,"chr":"4","pixels":[1,8,169,255,1,9,255,255,2,7,227,255,2,8,212,252,2,9,255,255,2,10,255,68,3,6,247,255,3,7,155,197,3,8,230,25,3,9,255,255,3,10,255,68,4,4,211,255,4,5,210,253,4,6,162,71,4,7,247,0,4,9,255,255,4,10,255,68,5,3,245,255,5,4,154,218,5,5,212,6,5,6,208,0,5,9,255,255,5,10,255,68,6,1,191,255,6,2,235,255,6,3,183,172,6,4,248,82,6,5,171,119,6,9,255,255,6,10,254,126,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,8,2,255,32,8,3,255,32,8,4,255,32,8,5,255,32,8,6,255,32,8,7,255,32,8,8,255,49,8,9,255,255,8,10,255,91,8,11,255,32,8,12,255,32,8,13,255,0],"secondary":false},{"width":9,"bonus":230,"chr":"5","pixels":[2,1,255,255,2,2,255,255,2,3,254,255,2,4,244,250,2,5,233,240,2,6,252,252,2,7,175,123,2,12,238,231,3,1,255,255,3,2,255,67,3,3,255,3,3,4,254,0,3,5,239,0,3,6,252,240,3,7,250,57,3,12,252,253,3,13,215,0,4,1,255,255,4,2,254,52,4,6,247,255,4,7,241,69,4,12,242,251,4,13,250,0,5,1,255,255,5,2,254,52,5,6,215,255,5,7,251,135,5,12,212,238,5,13,238,0,6,1,255,255,6,2,254,52,6,7,254,252,6,8,199,178,6,11,251,255,6,12,176,126,6,13,198,0,7,2,255,16,7,7,197,190,7,8,254,252,7,9,255,255,7,10,246,250,7,11,199,159,7,12,252,0,8,9,252,29,8,10,255,4,8,11,241,0],"secondary":false},{"width":9,"bonus":290,"chr":"6","pixels":[1,4,225,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,226,250,2,2,196,255,2,3,226,254,2,4,180,159,2,5,235,92,2,6,254,225,2,7,255,116,2,8,254,46,2,9,255,69,2,10,254,164,2,11,255,255,3,2,222,254,3,3,201,25,3,4,225,0,3,5,216,219,3,6,167,188,3,7,224,0,3,11,213,164,3,12,255,213,4,1,215,255,4,2,176,157,4,3,221,0,4,5,245,255,4,6,201,77,4,12,252,253,4,13,213,0,5,1,249,255,5,2,224,72,5,5,219,255,5,6,249,120,5,12,229,246,5,13,250,0,6,1,247,255,6,2,250,65,6,6,254,250,6,7,196,191,6,10,163,255,6,11,253,255,6,12,175,136,6,13,221,0,7,2,248,20,7,6,188,170,7,7,255,237,7,8,255,255,7,9,254,255,7,10,231,238,7,11,197,119,7,12,253,0,8,8,238,21,8,9,255,8,8,10,254,0,8,11,216,0],"secondary":false},{"width":9,"bonus":205,"chr":"7","pixels":[1,1,255,255,2,1,255,255,2,2,254,52,3,1,255,255,3,2,254,52,3,10,155,255,3,11,243,255,3,12,249,255,4,1,255,255,4,2,254,52,4,8,213,255,4,9,255,255,4,10,216,242,4,11,198,140,4,12,244,19,4,13,249,0,5,1,255,255,5,2,254,52,5,5,171,255,5,6,249,255,5,7,235,253,5,8,193,189,5,9,220,53,5,10,255,0,5,11,205,0,6,1,255,255,6,2,255,163,6,3,231,249,6,4,251,255,6,5,199,227,6,6,198,103,6,7,249,5,6,8,234,0,7,1,255,255,7,2,255,211,7,3,204,143,7,4,229,25,7,5,251,0,7,6,177,0,8,2,255,0,8,3,211,0],"secondary":false},{"width":9,"bonus":315,"chr":"8","pixels":[1,2,227,255,1,3,255,255,1,4,255,255,1,5,203,240,1,8,243,255,1,9,255,255,1,10,255,255,1,11,215,244,2,1,179,255,2,2,205,243,2,3,233,53,2,4,255,68,2,5,255,217,2,6,241,213,2,7,249,255,2,8,177,189,2,9,246,50,2,10,255,69,2,11,255,219,2,12,235,169,3,1,239,255,3,2,199,87,3,3,195,0,3,6,255,253,3,7,227,140,3,8,249,0,3,12,250,228,3,13,156,0,4,1,231,255,4,2,243,86,4,6,255,255,4,7,254,164,4,12,249,251,4,13,224,0,5,1,160,255,5,2,251,225,5,5,239,255,5,6,164,204,5,7,254,246,5,8,180,66,5,12,224,245,5,13,246,0,6,2,232,212,6,3,255,255,6,4,251,253,6,5,187,176,6,6,239,0,6,7,199,180,6,8,253,229,6,11,243,255,6,12,179,171,6,13,215,0,7,3,198,27,7,4,255,7,7,5,249,0,7,8,212,194,7,9,255,255,7,10,253,253,7,11,199,190,7,12,243,5,8,9,168,29,8,10,255,12,8,11,252,0],"secondary":false},{"width":9,"bonus":290,"chr":"9","pixels":[1,2,165,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,228,247,2,2,236,255,2,3,200,128,2,4,254,46,2,5,255,67,2,6,255,202,2,7,249,217,2,12,253,255,3,1,231,255,3,2,183,141,3,3,236,0,3,7,255,255,3,8,216,30,3,12,249,253,3,13,253,0,4,1,247,255,4,2,238,73,4,7,255,255,4,8,255,36,4,12,219,241,4,13,247,0,5,1,197,255,5,2,253,161,5,7,214,253,5,8,255,1,5,11,247,255,5,12,178,139,5,13,207,0,6,2,253,249,6,3,228,205,6,6,231,255,6,7,171,194,6,8,233,137,6,9,203,255,6,10,255,255,6,11,183,219,6,12,247,2,7,3,252,175,7,4,251,246,7,5,255,255,7,6,255,255,7,7,255,255,7,8,245,245,7,9,216,211,7,10,218,88,7,11,255,0,7,12,157,0,8,4,174,3,8,5,243,22,8,6,255,27,8,7,255,14,8,8,255,0,8,9,235,0,8,10,178,0],"secondary":false},{"width":13,"bonus":350,"chr":"%","pixels":[1,3,249,255,1,4,255,255,1,5,255,255,1,6,254,255,1,7,158,234,2,2,233,255,2,3,185,185,2,4,250,46,2,5,255,41,2,6,255,95,2,7,255,255,2,8,156,42,3,2,217,255,3,3,247,179,3,4,177,131,3,6,162,228,3,7,254,255,3,8,255,17,3,12,189,255,4,3,249,222,4,4,255,255,4,5,255,255,4,6,242,248,4,7,188,137,4,8,254,0,4,10,185,255,4,13,189,0,5,4,219,17,5,5,255,21,5,6,255,1,5,7,237,19,5,8,191,200,5,9,158,255,5,11,185,0,6,7,188,255,6,10,158,0,7,5,184,255,7,8,193,28,8,4,157,255,8,6,184,0,8,7,162,147,8,8,248,255,8,9,255,255,8,10,255,255,8,11,251,254,9,2,187,255,9,5,157,0,9,7,213,255,9,8,166,176,9,9,249,39,9,10,255,40,9,11,254,132,9,12,254,234,10,3,187,0,10,7,202,255,10,8,240,171,10,9,162,137,10,11,187,238,10,12,239,239,10,13,234,0,11,8,246,223,11,9,255,255,11,10,255,255,11,11,237,244,11,12,198,94,11,13,224,0,12,9,218,19,12,10,255,19,12,11,255,0,12,12,227,0],"secondary":false},{"width":7,"bonus":200,"chr":"/","pixels":[1,13,177,255,1,14,239,255,1,15,255,255,2,9,171,255,2,10,233,255,2,11,255,255,2,12,232,250,2,13,202,204,2,14,206,120,2,15,241,34,2,16,255,0,3,5,165,255,3,6,229,255,3,7,255,255,3,8,235,251,3,9,203,210,3,10,205,127,3,11,237,40,3,12,255,0,3,13,227,0,3,14,162,0,4,1,159,255,4,2,223,255,4,3,255,255,4,4,238,253,4,5,205,214,4,6,202,135,4,7,234,45,4,8,255,0,4,9,232,0,4,10,167,0,5,0,240,254,5,1,206,219,5,2,201,141,5,3,229,51,5,4,255,1,5,5,236,0,5,6,172,0,6,1,239,0,6,2,177,0],"secondary":false},{"width":9,"bonus":120,"chr":"+","pixels":[1,7,255,255,2,7,255,255,2,8,255,48,3,7,255,255,3,8,255,113,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,5,5,255,32,5,6,255,32,5,7,255,255,5,8,255,74,5,9,255,32,5,10,255,32,5,11,255,0,6,7,255,255,6,8,255,48,7,7,255,255,7,8,255,48,8,8,255,0],"secondary":false},{"width":8,"bonus":160,"chr":"?","pixels":[2,1,190,255,2,2,174,198,3,1,235,255,3,2,208,89,3,7,159,255,3,8,225,255,3,11,249,255,3,12,237,249,4,1,235,255,4,2,242,85,4,6,190,255,4,7,190,251,4,8,163,17,4,9,226,0,4,12,250,12,4,13,231,0,5,1,167,255,5,2,253,227,5,5,205,255,5,6,213,254,5,7,193,20,5,8,187,0,6,2,231,206,6,3,254,255,6,4,255,255,6,5,212,223,6,6,210,29,6,7,212,0,7,3,190,16,7,4,254,14,7,5,255,0,7,6,186,0],"secondary":false},{"width":6,"bonus":100,"chr":"!","pixels":[3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,11,249,255,3,12,237,249,4,2,255,32,4,3,255,32,4,4,255,32,4,5,255,32,4,6,255,32,4,7,255,32,4,8,255,32,4,9,255,0,4,12,250,12,4,13,231,0],"secondary":false},{"width":14,"bonus":545,"chr":"@","pixels":[1,5,221,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,239,251,2,3,209,255,2,4,244,255,2,5,202,192,2,6,231,87,2,7,255,49,2,8,255,42,2,9,255,74,2,10,255,152,2,11,254,251,2,12,217,213,3,2,197,255,3,3,213,250,3,4,215,39,3,5,244,0,3,6,160,33,3,11,176,87,3,12,255,247,3,13,212,129,4,2,239,255,4,3,203,35,4,4,208,2,4,5,158,232,4,6,251,255,4,7,255,255,4,8,255,255,4,9,243,251,4,12,160,208,4,13,253,215,5,1,185,255,5,2,181,199,5,3,239,0,5,5,244,255,5,6,193,149,5,7,251,48,5,8,255,49,5,9,255,166,5,10,254,243,5,13,255,255,5,14,216,20,6,1,227,255,6,2,208,98,6,4,219,255,6,5,177,163,6,6,244,0,6,10,255,255,6,11,244,40,6,13,255,255,6,14,255,40,7,1,247,255,7,2,234,66,7,4,249,255,7,5,229,69,7,10,244,254,7,11,255,11,7,13,255,255,7,14,255,33,8,1,223,255,8,2,250,95,8,4,231,255,8,5,252,139,8,9,211,255,8,11,243,0,8,13,253,255,8,14,255,7,9,1,155,255,9,2,246,199,9,4,181,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,244,246,9,10,233,136,9,13,202,245,9,14,253,0,10,2,252,251,10,3,227,160,10,5,190,43,10,6,255,32,10,7,255,32,10,8,255,33,10,9,255,77,10,10,255,255,10,14,194,0,11,3,255,249,11,4,238,233,11,9,201,245,11,10,235,247,11,11,255,8,12,4,253,166,12,5,253,244,12,6,255,255,12,7,255,255,12,8,246,251,12,9,206,207,12,10,201,41,12,11,227,0,13,5,165,0,13,6,243,19,13,7,255,22,13,8,255,2,13,9,242,0,13,10,167,0],"secondary":false},{"width":11,"bonus":310,"chr":"#","pixels":[1,5,239,255,1,9,255,255,2,5,239,255,2,6,242,34,2,9,255,255,2,10,255,159,2,11,196,238,2,12,233,255,3,5,247,255,3,6,252,209,3,7,244,254,3,8,255,255,3,9,255,255,3,10,254,192,3,11,207,159,3,12,204,94,3,13,234,0,4,3,255,255,4,4,228,250,4,5,253,253,4,6,250,134,4,7,219,81,4,8,244,24,4,9,255,255,4,10,255,48,4,11,192,0,5,4,255,0,5,5,253,241,5,6,252,32,5,9,255,255,5,10,255,48,6,5,239,255,6,6,243,59,6,9,255,255,6,10,255,225,6,11,254,255,6,12,244,254,7,4,171,255,7,5,251,255,7,6,255,255,7,7,241,252,7,8,211,234,7,9,255,255,7,10,255,121,7,11,230,47,7,12,254,2,7,13,243,0,8,3,204,246,8,4,188,186,8,5,252,248,8,6,252,54,8,7,255,0,8,8,238,0,8,9,255,255,8,10,255,48,9,4,196,0,9,5,248,246,9,6,247,33,9,9,255,255,9,10,255,48,10,6,240,0,10,10,255,0],"secondary":false},{"width":9,"bonus":315,"chr":"$","pixels":[1,4,255,255,1,5,255,255,1,6,242,250,1,12,244,250,2,3,253,255,2,4,185,152,2,5,254,52,2,6,255,199,2,7,252,224,2,12,255,255,2,13,241,25,3,3,235,251,3,4,254,80,3,5,156,131,3,7,255,255,3,8,238,134,3,12,255,255,3,13,255,108,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,182,180,5,2,254,126,5,3,254,213,5,4,255,32,5,5,255,32,5,6,255,32,5,7,255,152,5,8,254,240,5,9,255,40,5,10,255,32,5,11,255,78,5,12,255,251,5,13,255,39,5,14,255,16,6,3,250,250,6,4,214,12,6,8,253,251,6,9,250,179,6,11,209,247,6,12,202,227,6,13,251,0,7,3,205,230,7,4,247,34,7,9,255,245,7,10,255,255,7,11,220,233,7,12,208,35,7,13,180,0,8,4,185,0,8,10,246,19,8,11,255,0,8,12,201,0],"secondary":false},{"width":9,"bonus":135,"chr":"^","pixels":[1,7,207,255,1,8,235,255,2,5,215,255,2,6,220,255,2,7,156,174,2,8,209,12,2,9,236,0,3,3,223,255,3,4,200,255,3,6,216,2,3,7,220,0,4,2,255,255,4,3,193,196,4,4,224,5,4,5,200,0,5,2,163,128,5,3,255,201,5,4,242,238,6,4,214,76,6,5,247,189,6,6,247,250,6,7,153,244,7,6,196,61,7,7,250,168,7,8,252,252,8,8,176,46,8,9,249,0],"secondary":false},{"width":9,"bonus":70,"chr":"~","pixels":[1,8,189,255,2,7,233,255,2,8,158,103,2,9,189,0,3,7,233,255,3,8,241,94,4,8,250,201,5,8,255,255,5,9,204,39,6,8,255,255,6,9,255,26,7,8,179,247,7,9,255,0,8,9,173,0],"secondary":false},{"width":11,"bonus":365,"chr":"&","pixels":[1,8,245,255,1,9,255,255,1,10,255,255,1,11,220,246,2,2,247,255,2,3,255,255,2,4,252,254,2,5,156,235,2,7,251,255,2,8,181,199,2,9,246,49,2,10,255,75,2,11,254,222,2,12,241,181,3,1,213,255,3,2,191,217,3,3,248,45,3,4,255,95,3,5,254,228,3,6,253,253,3,7,169,217,3,8,251,0,3,12,252,236,3,13,171,0,4,1,245,255,4,2,223,73,4,3,163,0,4,5,185,198,4,6,254,255,4,7,254,214,4,8,155,44,4,12,250,252,4,13,233,0,5,1,205,255,5,2,252,196,5,4,153,255,5,5,245,255,5,6,168,88,5,7,255,197,5,8,249,229,5,12,220,243,5,13,247,0,6,2,250,234,6,3,255,255,6,4,236,244,6,5,179,95,6,6,246,0,6,8,241,205,6,9,252,236,6,11,231,255,6,12,179,167,6,13,209,0,7,3,231,23,7,4,255,1,7,5,226,0,7,9,239,204,7,10,255,255,7,11,220,239,7,12,232,8,8,9,236,255,8,10,252,248,8,11,254,243,8,12,218,74,9,7,255,255,9,8,244,254,9,9,190,184,9,10,237,19,9,11,252,182,9,12,254,246,10,8,255,12,10,9,243,0,10,12,231,190,10,13,246,0],"secondary":false},{"width":10,"bonus":170,"chr":"*","pixels":[1,4,167,255,2,4,244,248,2,5,168,0,3,4,254,254,3,5,241,64,3,6,223,255,3,7,249,255,3,8,160,91,4,1,211,255,4,2,185,255,4,3,158,255,4,4,244,254,4,5,254,234,4,6,156,204,4,7,227,25,4,8,249,0,5,1,169,255,5,2,235,156,5,3,217,138,5,4,250,248,5,5,254,240,5,6,247,175,6,2,170,0,6,3,160,59,6,4,253,253,6,5,244,34,6,6,252,201,6,7,255,255,7,4,238,252,7,5,252,0,7,7,221,116,7,8,255,0,8,4,188,187,8,5,235,0],"secondary":false},{"width":5,"bonus":175,"chr":"(","pixels":[1,3,199,255,1,4,247,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,255,255,1,11,223,253,1,12,153,255,2,1,247,255,2,2,246,254,2,3,211,211,2,4,226,138,2,5,249,78,2,6,255,55,2,7,255,40,2,8,255,49,2,9,255,65,2,10,255,101,2,11,255,151,2,12,250,221,2,13,255,255,2,14,214,240,3,0,217,253,3,1,179,137,3,2,248,12,3,3,245,0,3,4,175,0,3,13,225,57,3,14,254,156,3,15,253,252,4,1,216,0,4,15,170,56,4,16,250,0],"secondary":false},{"width":6,"bonus":185,"chr":")","pixels":[2,0,247,253,2,1,153,238,2,14,197,255,2,15,241,255,3,0,157,133,3,1,254,220,3,2,255,255,3,3,233,249,3,4,173,255,3,11,195,255,3,12,247,255,3,13,252,254,3,14,196,210,3,15,203,30,3,16,241,0,4,2,228,69,4,3,255,148,4,4,249,206,4,5,252,251,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,242,246,4,11,222,209,4,12,223,133,4,13,247,26,4,14,252,0,4,15,162,0,5,5,201,1,5,6,248,14,5,7,255,29,5,8,255,25,5,9,255,9,5,10,255,0,5,11,234,0,5,12,182,0],"secondary":false},{"width":7,"bonus":65,"chr":"_","pixels":[0,14,255,255,1,14,255,255,1,15,255,48,2,14,255,255,2,15,255,48,3,14,255,255,3,15,255,48,4,14,255,255,4,15,255,48,5,14,255,255,5,15,255,48,6,14,255,255,6,15,255,48],"secondary":false},{"width":6,"bonus":40,"chr":"-","pixels":[1,8,255,255,2,8,255,255,2,9,255,48,3,8,255,255,3,9,255,48,4,8,255,255,4,9,255,48,5,9,255,0],"secondary":true},{"width":9,"bonus":140,"chr":"=","pixels":[1,6,255,255,1,9,255,255,2,6,255,255,2,7,255,48,2,9,255,255,2,10,255,48,3,6,255,255,3,7,255,48,3,9,255,255,3,10,255,48,4,6,255,255,4,7,255,48,4,9,255,255,4,10,255,48,5,6,255,255,5,7,255,48,5,9,255,255,5,10,255,48,6,6,255,255,6,7,255,48,6,9,255,255,6,10,255,48,7,6,255,255,7,7,255,48,7,9,255,255,7,10,255,48,8,7,255,0,8,10,255,0],"secondary":false},{"width":6,"bonus":195,"chr":"[","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,3,0,255,255,3,1,255,77,3,2,255,36,3,3,255,36,3,4,255,36,3,5,255,36,3,6,255,36,3,7,255,36,3,8,255,36,3,9,255,36,3,10,255,36,3,11,255,36,3,12,255,36,3,13,255,36,3,14,255,39,3,15,255,255,3,16,255,48,4,0,243,255,4,1,255,45,4,15,245,254,4,16,255,45,5,1,244,0,5,16,244,0],"secondary":false},{"width":6,"bonus":195,"chr":"]","pixels":[1,0,255,255,1,15,255,255,2,0,255,255,2,1,255,113,2,15,255,255,2,16,255,48,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,48,4,1,255,36,4,2,255,36,4,3,255,36,4,4,255,36,4,5,255,36,4,6,255,36,4,7,255,36,4,8,255,36,4,9,255,36,4,10,255,36,4,11,255,36,4,12,255,36,4,13,255,36,4,14,255,36,4,15,255,36,4,16,255,6],"secondary":false},{"width":6,"bonus":185,"chr":"{","pixels":[1,7,255,255,2,6,175,255,2,7,206,249,2,8,255,213,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,239,247,3,7,186,48,3,8,240,200,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,174,228,4,0,231,255,4,1,187,169,4,2,255,37,4,3,255,36,4,4,255,36,4,5,255,34,4,6,255,6,4,7,232,0,4,9,195,34,4,10,255,36,4,11,255,36,4,12,255,36,4,13,255,37,4,14,255,90,4,15,255,255,4,16,165,34,5,1,231,10,5,16,255,8],"secondary":false},{"width":7,"bonus":200,"chr":"}","pixels":[1,0,197,255,1,15,208,255,2,0,203,255,2,1,238,191,2,14,153,255,2,15,240,254,2,16,209,9,3,1,253,247,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,251,253,3,8,219,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,250,252,3,15,190,126,3,16,239,0,4,2,246,36,4,3,255,36,4,4,255,36,4,5,255,39,4,6,254,138,4,7,254,222,4,8,203,236,4,9,227,54,4,10,255,36,4,11,255,36,4,12,255,36,4,13,255,34,4,14,255,5,4,15,247,0,5,7,255,255,5,8,231,76,5,9,188,0,6,8,255,9],"secondary":false},{"width":5,"bonus":40,"chr":":","pixels":[2,4,231,255,2,5,252,254,2,11,249,255,2,12,237,249,3,5,234,20,3,6,251,0,3,12,250,12,3,13,231,0],"secondary":true},{"width":5,"bonus":65,"chr":";","pixels":[1,13,167,255,1,14,219,255,2,4,231,255,2,5,252,254,2,11,241,255,2,12,203,228,2,13,178,162,2,14,180,54,2,15,220,0,3,5,234,20,3,6,251,0,3,12,241,0,3,13,182,0],"secondary":true},{"width":8,"bonus":85,"chr":"\\"","pixels":[2,1,255,255,2,2,254,255,2,3,234,254,2,4,209,255,3,2,255,117,3,3,255,92,3,4,240,72,3,5,209,0,4,2,164,78,5,1,255,255,5,2,255,255,5,3,255,255,5,4,251,255,6,2,255,69,6,3,255,44,6,4,255,20,6,5,251,0],"secondary":true},{"width":5,"bonus":40,"chr":"\'","pixels":[2,1,255,255,2,2,254,255,2,3,234,254,2,4,209,255,3,2,255,117,3,3,255,92,3,4,240,72,3,5,209,0],"secondary":true},{"width":9,"bonus":120,"chr":"<","pixels":[1,7,197,255,2,7,219,255,2,8,252,246,2,9,156,39,3,6,219,255,3,8,242,177,3,9,250,143,4,6,195,253,4,7,220,0,4,9,251,247,5,5,235,255,5,7,194,0,5,9,199,238,5,10,249,136,6,5,186,249,6,6,236,0,6,10,251,245,7,4,247,255,7,5,161,76,7,6,182,0,7,10,216,239,7,11,247,130,8,5,247,0,8,11,202,0],"secondary":false},{"width":9,"bonus":130,"chr":">","pixels":[1,4,247,255,1,10,203,255,2,4,153,231,2,5,252,184,2,10,239,255,2,11,206,20,3,5,246,244,3,6,199,77,3,9,185,255,3,10,164,207,3,11,240,0,4,6,250,197,4,9,243,255,4,10,190,26,5,6,235,238,5,7,211,87,5,8,167,255,5,9,162,221,5,10,243,0,6,7,250,221,6,8,246,252,6,9,175,35,7,7,216,233,7,8,239,157,7,9,243,0,8,8,197,0],"secondary":false},{"width":7,"bonus":145,"chr":"\\\\","pixels":[1,0,254,255,1,1,213,251,2,0,157,99,2,1,254,126,2,2,243,201,2,3,251,252,2,4,254,254,2,5,206,252,3,3,194,10,3,4,250,68,3,5,253,133,3,6,243,207,3,7,252,253,3,8,252,254,3,9,200,252,4,7,200,15,4,8,252,73,4,9,252,139,4,10,243,213,4,11,254,254,4,12,249,254,4,13,193,253,5,11,206,20,5,12,254,79,5,13,251,146,5,14,244,219,5,15,254,255,6,15,213,24,6,16,254,0],"secondary":false},{"width":3,"bonus":20,"chr":".","pixels":[1,11,249,255,1,12,237,249,2,12,250,12,2,13,231,0],"secondary":true},{"width":4,"bonus":50,"chr":",","pixels":[1,11,205,255,1,12,247,255,1,13,255,255,1,14,210,244,2,11,215,255,2,12,233,154,2,13,248,48,2,14,255,0,2,15,201,0,3,12,216,0],"secondary":true},{"width":9,"bonus":160,"chr":"|","pixels":[4,0,255,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,5,1,255,36,5,2,255,36,5,3,255,36,5,4,255,36,5,5,255,36,5,6,255,36,5,7,255,36,5,8,255,36,5,9,255,36,5,10,255,36,5,11,255,36,5,12,255,36,5,13,255,36,5,14,255,36,5,15,255,36,5,16,255,0],"secondary":false}],"width":15,"spacewidth":4,"shadow":true,"height":17,"basey":12}');

/***/ }),

/***/ "./src/fonts/chatbox/18pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/18pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":10,"bonus":330,"chr":"a","pixels":[1,10,239,255,1,11,235,255,1,12,161,255,2,5,165,255,2,9,255,255,2,10,235,225,2,11,251,187,2,12,254,255,2,13,220,184,3,4,173,255,3,5,198,225,3,6,165,0,3,8,211,255,3,9,219,219,3,10,255,1,3,11,207,0,3,12,224,162,3,13,255,233,3,14,158,0,4,4,223,255,4,5,211,144,4,6,175,0,4,8,251,255,4,9,229,112,4,10,188,0,4,13,251,251,4,14,233,0,5,4,247,255,5,5,235,106,5,8,255,255,5,9,252,77,5,13,222,233,5,14,247,0,6,4,221,255,6,5,251,166,6,8,255,255,6,9,255,68,6,12,229,255,6,13,163,108,6,14,202,0,7,5,255,255,7,6,237,222,7,7,173,255,7,8,255,255,7,9,254,189,7,10,202,231,7,11,243,255,7,12,203,245,7,13,237,88,8,5,204,181,8,6,255,225,8,7,254,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,9,7,225,0,9,8,254,0,9,9,255,0,9,10,255,0,9,11,255,0,9,12,255,0,9,13,255,0,9,14,255,0],"secondary":false},{"width":12,"bonus":395,"chr":"b","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,0,163,255,3,1,254,164,3,2,254,164,3,3,254,162,3,4,255,151,3,5,255,223,3,6,254,251,3,7,255,196,3,8,254,168,3,9,255,169,3,10,254,198,3,11,255,251,3,12,255,215,3,13,255,75,3,14,255,0,4,1,164,0,4,2,164,0,4,3,164,0,4,4,197,125,4,5,245,241,4,6,227,36,4,7,250,0,4,8,196,0,4,9,168,0,4,10,169,0,4,11,205,43,4,12,254,234,4,13,231,110,5,4,213,255,5,5,174,185,5,6,232,0,5,13,251,217,6,4,249,255,6,5,230,111,6,13,252,252,6,14,214,0,7,4,229,255,7,5,252,164,7,12,161,255,7,13,239,245,7,14,249,0,8,5,255,255,8,6,216,173,8,12,255,255,8,13,213,169,8,14,230,0,9,5,220,205,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,222,203,9,13,255,9,10,6,194,76,10,7,255,127,10,8,254,156,10,9,255,155,10,10,255,127,10,11,254,58,10,12,255,0,10,13,177,0,11,9,156,0,11,10,155,0],"secondary":false},{"width":9,"bonus":215,"chr":"c","pixels":[1,7,213,255,1,8,247,255,1,9,247,255,1,10,217,255,2,5,219,255,2,6,255,255,2,7,235,232,2,8,243,187,2,9,252,179,2,10,253,215,2,11,255,255,2,12,243,239,3,5,248,254,3,6,229,78,3,7,255,0,3,8,214,0,3,9,178,0,3,10,177,0,3,11,224,79,3,12,254,246,3,13,245,165,4,4,225,255,4,5,207,174,4,6,247,0,4,12,169,208,4,13,254,232,4,14,159,0,5,4,249,255,5,5,237,104,5,13,252,253,5,14,231,0,6,4,231,255,6,5,252,122,6,13,239,245,6,14,250,0,7,4,179,255,7,5,245,156,7,12,187,255,7,13,208,205,7,14,230,0,8,5,179,0,8,13,188,0,8,14,167,0],"secondary":false},{"width":11,"bonus":430,"chr":"d","pixels":[1,7,219,255,1,8,249,255,1,9,249,255,1,10,221,255,1,11,154,255,2,5,237,255,2,6,255,255,2,7,238,231,2,8,244,186,2,9,253,176,2,10,254,209,2,11,255,255,2,12,249,248,3,4,181,255,3,5,244,253,3,6,241,71,3,7,255,0,3,8,215,0,3,9,178,0,3,10,175,0,3,11,218,63,3,12,254,239,3,13,251,189,4,4,243,255,4,5,219,150,4,6,242,0,4,12,153,210,4,13,254,246,4,14,186,0,5,4,241,255,5,5,248,106,5,13,248,249,5,14,245,0,6,4,178,255,6,5,251,169,6,12,155,255,6,13,209,218,6,14,242,0,7,5,248,238,7,6,213,161,7,12,225,255,7,13,169,53,7,14,178,0,8,0,255,255,8,1,255,255,8,2,255,255,8,3,255,255,8,4,247,255,8,5,246,254,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,248,248,8,13,248,202,9,0,163,255,9,1,254,164,9,2,254,164,9,3,254,164,9,4,254,164,9,5,251,166,9,6,251,166,9,7,254,164,9,8,254,164,9,9,254,164,9,10,254,164,9,11,254,164,9,12,254,164,9,13,249,168,9,14,196,0,10,1,164,0,10,2,164,0,10,3,164,0,10,4,164,0,10,5,164,0,10,6,164,0,10,7,164,0,10,8,164,0,10,9,164,0,10,10,164,0,10,11,164,0,10,12,164,0,10,13,164,0,10,14,164,0],"secondary":false},{"width":10,"bonus":290,"chr":"e","pixels":[1,7,213,255,1,8,247,255,1,9,247,255,1,10,215,255,2,5,223,255,2,6,249,255,2,7,229,222,2,8,255,255,2,9,253,199,2,10,254,209,2,11,255,255,2,12,237,234,3,4,167,255,3,5,232,252,3,6,228,42,3,7,250,20,3,8,255,255,3,9,255,68,3,10,197,0,3,11,220,77,3,12,255,247,3,13,239,160,4,4,237,255,4,5,208,145,4,6,229,0,4,8,255,255,4,9,255,68,4,12,172,211,4,13,254,228,5,4,247,255,5,5,245,109,5,8,255,255,5,9,255,68,5,13,253,253,5,14,228,0,6,4,193,255,6,5,253,205,6,8,255,255,6,9,255,68,6,13,241,247,6,14,251,0,7,5,254,250,7,6,250,238,7,7,188,251,7,8,255,255,7,9,255,68,7,12,167,255,7,13,215,220,7,14,234,0,8,6,254,179,8,7,253,240,8,8,255,255,8,9,255,68,8,13,190,93,8,14,186,0,9,7,178,0,9,8,238,0,9,9,255,0],"secondary":false},{"width":8,"bonus":265,"chr":"f","pixels":[1,4,173,255,2,3,161,255,2,4,251,255,2,5,236,211,2,6,195,214,2,7,163,255,2,8,163,255,2,9,163,255,2,10,163,255,2,11,163,255,2,12,163,255,2,13,163,255,3,1,251,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,164,0,4,0,201,255,4,1,221,239,4,2,253,41,4,3,255,2,4,4,255,255,4,5,254,88,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,5,0,241,255,5,1,223,117,5,2,207,0,5,4,255,255,5,5,254,88,6,0,243,255,6,1,248,115,6,4,255,255,6,5,254,88,7,0,178,255,7,1,247,97,7,5,255,0],"secondary":false},{"width":11,"bonus":475,"chr":"g","pixels":[1,7,217,255,1,8,249,255,1,9,249,255,1,10,221,255,1,11,153,255,2,5,235,255,2,6,255,255,2,7,237,229,2,8,244,185,2,9,252,178,2,10,254,210,2,11,255,255,2,12,249,248,2,16,203,255,2,17,179,220,3,4,181,255,3,5,242,252,3,6,240,65,3,7,255,0,3,8,213,0,3,9,177,0,3,10,176,0,3,11,218,62,3,12,255,237,3,13,251,190,3,17,247,224,3,18,154,0,4,4,243,255,4,5,218,148,4,6,240,0,4,13,254,246,4,14,187,0,4,17,248,248,4,18,217,0,5,4,241,255,5,5,248,106,5,13,248,248,5,14,245,0,5,17,253,253,5,18,241,0,6,4,175,255,6,5,250,171,6,12,155,255,6,13,205,215,6,14,241,0,6,16,153,255,6,17,238,243,6,18,251,0,7,5,246,235,7,6,214,162,7,12,215,255,7,13,167,44,7,14,179,28,7,16,251,255,7,17,215,185,7,18,227,0,8,4,197,255,8,5,243,254,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,8,14,255,255,8,15,255,255,8,16,236,239,8,17,252,26,8,18,156,0,9,4,163,255,9,5,234,178,9,6,250,167,9,7,254,164,9,8,254,164,9,9,254,164,9,10,254,164,9,11,254,164,9,12,254,164,9,13,255,163,9,14,254,150,9,15,255,100,9,16,255,11,9,17,221,0,10,5,164,0,10,6,164,0,10,7,164,0,10,8,164,0,10,9,164,0,10,10,164,0,10,11,164,0,10,12,164,0,10,13,164,0,10,14,163,0],"secondary":false},{"width":11,"bonus":385,"chr":"h","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,0,163,255,3,1,254,164,3,2,254,164,3,3,254,164,3,4,255,157,3,5,255,217,3,6,255,251,3,7,255,196,3,8,254,168,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,164,0,4,2,164,0,4,3,164,0,4,4,195,116,4,5,246,240,4,6,222,39,4,7,251,0,4,8,196,0,4,9,168,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,4,211,255,5,5,170,186,5,6,232,0,6,4,247,255,6,5,228,112,7,4,221,255,7,5,253,180,8,5,255,255,8,6,244,230,8,7,172,254,8,8,163,255,8,9,163,255,8,10,163,255,8,11,163,255,8,12,163,255,8,13,163,255,9,5,200,179,9,6,255,227,9,7,255,253,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,164,0,10,7,227,0,10,8,253,0,10,9,255,0,10,10,255,0,10,11,255,0,10,12,255,0,10,13,255,0,10,14,255,0],"secondary":false},{"width":5,"bonus":175,"chr":"i","pixels":[2,0,205,255,2,1,215,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,229,137,3,2,215,0,3,4,163,255,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0],"secondary":false},{"width":5,"bonus":240,"chr":"j","pixels":[0,17,249,254,1,16,165,255,1,17,241,247,1,18,248,0,2,0,205,255,2,1,215,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,215,167,2,18,233,0,3,1,229,137,3,2,215,0,3,4,163,255,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,254,164,3,15,255,149,3,16,255,91,3,17,255,2,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,4,15,164,0],"secondary":false},{"width":10,"bonus":335,"chr":"k","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,0,163,255,3,1,254,164,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,192,3,9,255,255,3,10,255,179,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,164,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,188,94,4,8,249,243,4,9,231,178,4,10,255,0,4,11,179,0,4,12,164,0,4,13,164,0,4,14,164,0,5,7,251,255,5,8,248,252,5,9,254,249,5,10,202,140,6,6,255,255,6,7,179,191,6,8,251,23,6,9,252,185,6,10,255,255,6,11,213,217,7,5,253,255,7,6,180,159,7,7,255,0,7,10,216,137,7,11,254,251,7,12,248,238,8,4,249,255,8,5,185,125,8,6,254,0,8,12,254,220,8,13,254,255,9,5,250,0,9,13,241,171,9,14,254,0],"secondary":false},{"width":5,"bonus":215,"chr":"l","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,0,163,255,3,1,254,164,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,164,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0],"secondary":false},{"width":17,"bonus":490,"chr":"m","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,5,254,215,3,6,255,247,3,7,255,193,3,8,254,168,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,5,235,240,4,6,218,29,4,7,247,0,4,8,193,0,4,9,168,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,4,215,255,5,5,168,178,5,6,222,0,6,4,247,255,6,5,232,116,7,4,215,255,7,5,253,219,8,5,254,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,9,5,202,216,9,6,255,249,9,7,254,192,9,8,255,167,9,9,254,164,9,10,254,164,9,11,254,164,9,12,254,164,9,13,254,164,9,14,255,0,10,5,222,254,10,6,179,38,10,7,249,0,10,8,192,0,10,9,167,0,10,10,164,0,10,11,164,0,10,12,164,0,10,13,164,0,10,14,164,0,11,4,219,255,11,5,177,167,11,6,222,0,12,4,245,255,12,5,234,115,13,4,211,255,13,5,253,219,14,5,255,255,14,6,255,255,14,7,255,255,14,8,255,255,14,9,255,255,14,10,255,255,14,11,255,255,14,12,255,255,14,13,255,255,15,6,255,137,15,7,255,160,15,8,254,164,15,9,254,164,15,10,254,164,15,11,254,164,15,12,254,164,15,13,254,164,15,14,255,0,16,8,160,0,16,9,164,0,16,10,164,0,16,11,164,0,16,12,164,0,16,13,164,0,16,14,164,0],"secondary":false},{"width":11,"bonus":320,"chr":"n","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,5,254,213,3,6,254,251,3,7,255,196,3,8,254,168,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,5,241,245,4,6,218,40,4,7,250,0,4,8,196,0,4,9,168,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,4,209,255,5,5,169,187,5,6,232,0,6,4,247,255,6,5,227,112,7,4,221,255,7,5,253,180,8,5,255,255,8,6,244,230,8,7,172,254,8,8,163,255,8,9,163,255,8,10,163,255,8,11,163,255,8,12,163,255,8,13,163,255,9,5,196,169,9,6,254,219,9,7,254,250,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,164,0,10,7,218,0,10,8,249,0,10,9,255,0,10,10,255,0,10,11,255,0,10,12,255,0,10,13,255,0,10,14,255,0],"secondary":false},{"width":11,"bonus":300,"chr":"o","pixels":[1,7,215,255,1,8,247,255,1,9,243,255,1,10,208,255,2,5,221,255,2,6,255,255,2,7,235,230,2,8,243,186,2,9,253,180,2,10,253,217,2,11,255,255,2,12,231,231,3,5,246,254,3,6,230,74,3,7,255,0,3,8,212,0,3,9,177,0,3,10,178,0,3,11,227,82,3,12,254,249,3,13,234,154,4,4,227,255,4,5,207,170,4,6,246,0,4,12,173,208,4,13,254,225,5,4,249,255,5,5,239,107,5,13,252,252,5,14,224,0,6,4,227,255,6,5,253,142,6,13,238,243,6,14,249,0,7,5,254,248,7,6,172,105,7,12,247,255,7,13,207,184,7,14,227,0,8,5,236,228,8,6,255,255,8,7,225,242,8,8,178,255,8,9,179,255,8,10,217,255,8,11,255,255,8,12,229,242,8,13,249,20,9,6,233,140,9,7,255,211,9,8,253,247,9,9,252,248,9,10,243,224,9,11,237,143,9,12,255,15,9,13,218,0,10,8,211,0,10,9,246,0,10,10,246,0,10,11,213,0],"secondary":false},{"width":12,"bonus":400,"chr":"p","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,3,5,255,213,3,6,254,252,3,7,255,197,3,8,254,171,3,9,255,169,3,10,254,201,3,11,254,252,3,12,254,225,3,13,255,155,3,14,255,163,3,15,254,164,3,16,254,164,3,17,254,164,3,18,255,0,4,5,241,244,4,6,219,43,4,7,252,0,4,8,197,0,4,9,170,0,4,10,169,0,4,11,208,48,4,12,254,237,4,13,235,100,4,14,155,0,4,15,163,0,4,16,164,0,4,17,164,0,4,18,164,0,5,4,209,255,5,5,169,189,5,6,231,0,5,13,251,215,6,4,247,255,6,5,228,113,6,13,252,252,6,14,212,0,7,4,229,255,7,5,253,172,7,12,171,255,7,13,239,245,7,14,249,0,8,5,255,255,8,6,223,181,8,11,163,255,8,12,255,255,8,13,217,165,8,14,229,0,9,5,220,205,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,225,197,9,13,255,8,10,6,194,76,10,7,255,127,10,8,254,156,10,9,255,155,10,10,254,126,10,11,255,56,10,12,255,0,10,13,174,0,11,9,156,0,11,10,155,0],"secondary":false},{"width":11,"bonus":425,"chr":"q","pixels":[1,7,217,255,1,8,249,255,1,9,249,255,1,10,221,255,2,5,235,255,2,6,255,255,2,7,237,230,2,8,244,186,2,9,253,176,2,10,254,210,2,11,255,255,2,12,249,247,3,4,179,255,3,5,243,253,3,6,240,68,3,7,255,0,3,8,214,0,3,9,178,0,3,10,175,0,3,11,219,66,3,12,255,239,3,13,251,190,4,4,241,255,4,5,218,151,4,6,241,0,4,12,157,208,4,13,254,246,4,14,187,0,5,4,241,255,5,5,247,106,5,13,248,248,5,14,245,0,6,4,175,255,6,5,250,168,6,12,154,255,6,13,206,216,6,14,241,0,7,5,245,235,7,6,213,161,7,12,221,255,7,13,167,50,7,14,175,0,8,4,189,255,8,5,239,253,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,251,251,8,13,254,252,8,14,255,255,8,15,255,255,8,16,255,255,8,17,255,255,9,4,163,255,9,5,231,181,9,6,248,168,9,7,254,164,9,8,254,164,9,9,254,164,9,10,254,164,9,11,254,164,9,12,254,164,9,13,251,166,9,14,253,165,9,15,254,164,9,16,254,164,9,17,254,164,9,18,255,0,10,5,164,0,10,6,164,0,10,7,164,0,10,8,164,0,10,9,164,0,10,10,164,0,10,11,164,0,10,12,164,0,10,13,164,0,10,14,164,0,10,15,164,0,10,16,164,0,10,17,164,0,10,18,164,0],"secondary":false},{"width":8,"bonus":180,"chr":"r","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,5,255,169,3,6,255,255,3,7,254,213,3,8,255,169,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,5,245,249,4,6,198,111,4,7,255,0,4,8,212,0,4,9,169,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,4,199,255,5,5,170,220,5,6,240,0,6,4,247,255,6,5,220,112,7,5,250,61],"secondary":false},{"width":9,"bonus":235,"chr":"s","pixels":[1,5,173,255,1,6,241,255,1,7,193,255,1,12,231,255,2,5,250,255,2,6,231,198,2,7,255,247,2,8,238,199,2,13,251,217,3,4,221,255,3,5,201,174,3,6,250,0,3,7,208,119,3,8,255,255,3,9,199,62,3,13,249,248,3,14,214,0,4,4,247,255,4,5,233,104,4,8,238,243,4,9,254,156,4,13,248,251,4,14,242,0,5,4,233,255,5,5,251,119,5,9,254,248,5,10,170,54,5,12,155,255,5,13,229,237,5,14,244,0,6,4,191,255,6,5,249,189,6,9,249,249,6,10,254,231,6,11,195,242,6,12,255,255,6,13,203,154,6,14,213,0,7,5,216,118,7,6,184,0,7,10,253,225,7,11,254,246,7,12,229,180,7,13,255,7,8,11,223,0,8,12,245,0,8,13,162,0],"secondary":false},{"width":8,"bonus":205,"chr":"t","pixels":[1,4,187,255,2,4,255,255,2,5,239,208,2,6,195,214,2,7,163,255,2,8,163,255,2,9,163,255,2,10,163,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,164,190,4,3,255,0,4,4,255,255,4,5,254,88,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,24,4,12,255,187,4,13,254,225,5,4,255,255,5,5,254,88,5,13,253,250,5,14,224,0,6,4,255,255,6,5,254,88,6,13,231,242,6,14,248,0,7,5,255,0,7,14,219,0],"secondary":false},{"width":11,"bonus":320,"chr":"u","pixels":[1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,255,255,1,10,253,255,1,11,231,255,2,4,163,255,2,5,254,164,2,6,254,164,2,7,254,164,2,8,254,164,2,9,254,164,2,10,254,171,2,11,254,219,2,12,255,255,2,13,206,172,3,5,164,0,3,6,164,0,3,7,164,0,3,8,164,0,3,9,164,0,3,10,164,0,3,11,170,2,3,12,243,184,3,13,254,225,4,13,252,251,4,14,224,0,5,13,229,237,5,14,248,0,6,12,231,255,6,13,172,141,6,14,213,0,7,4,163,255,7,5,163,255,7,6,163,255,7,7,163,255,7,8,163,255,7,9,167,255,7,10,197,255,7,11,251,255,7,12,223,249,7,13,242,114,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,9,5,255,0,9,6,255,0,9,7,255,0,9,8,255,0,9,9,255,0,9,10,255,0,9,11,255,0,9,12,255,0,9,13,255,0,9,14,255,0],"secondary":false},{"width":9,"bonus":230,"chr":"v","pixels":[0,4,209,255,1,4,221,255,1,5,255,255,1,6,253,253,1,7,192,246,2,5,229,62,2,6,255,145,2,7,255,231,2,8,255,255,2,9,247,251,2,10,164,249,3,8,237,71,3,9,255,155,3,10,254,237,3,11,255,255,3,12,233,247,4,10,156,5,4,11,243,98,4,12,255,227,4,13,255,255,5,10,203,255,5,11,255,255,5,12,249,251,5,13,246,172,5,14,255,0,6,7,197,255,6,8,253,255,6,9,254,255,6,10,221,221,6,11,224,112,6,12,255,14,6,13,246,0,6,14,166,0,7,4,185,255,7,5,251,255,7,6,255,255,7,7,233,238,7,8,225,141,7,9,254,32,7,10,254,0,7,11,192,0,8,4,237,255,8,5,225,170,8,6,253,56,8,7,255,0,8,8,218,0],"secondary":false},{"width":14,"bonus":430,"chr":"w","pixels":[0,4,171,255,1,4,241,255,1,5,255,255,1,6,255,255,1,7,227,251,1,8,155,255,2,5,244,55,2,6,255,116,2,7,255,179,2,8,253,241,2,9,255,255,2,10,254,255,2,11,213,251,3,8,180,3,3,9,243,51,3,10,255,110,3,11,254,170,3,12,252,247,3,13,255,255,4,10,198,237,4,11,247,250,4,12,254,255,4,13,253,205,4,14,255,0,5,7,213,255,5,8,255,255,5,9,250,254,5,10,214,218,5,11,213,125,5,12,243,28,5,13,254,0,5,14,203,0,6,4,233,255,6,5,254,255,6,6,224,245,6,7,208,191,6,8,227,95,6,9,255,13,6,10,249,0,6,11,183,0,7,4,253,255,7,5,254,248,7,6,254,186,7,7,234,133,7,8,176,72,8,5,255,100,8,6,252,177,8,7,252,246,8,8,255,255,8,9,234,250,8,10,157,255,9,7,177,9,9,8,246,72,9,9,254,144,9,10,251,219,9,11,255,255,9,12,251,254,9,13,192,251,10,10,176,110,10,11,239,165,10,12,254,245,10,13,255,255,10,14,189,0,11,8,207,255,11,9,253,255,11,10,255,255,11,11,242,250,11,12,221,196,11,13,249,105,11,14,255,0,12,4,205,255,12,5,253,255,12,6,255,255,12,7,250,253,12,8,226,213,12,9,230,134,12,10,253,52,12,11,255,2,12,12,237,0,12,13,170,0,13,4,209,255,13,5,233,154,13,6,253,71,13,7,255,10,13,8,248,0,13,9,189,0],"secondary":false},{"width":10,"bonus":260,"chr":"x","pixels":[1,4,249,255,1,12,166,255,1,13,255,255,2,4,155,255,2,5,255,255,2,6,229,227,2,11,229,255,2,12,246,254,2,13,205,140,2,14,255,0,3,5,182,97,3,6,254,225,3,7,253,250,3,9,155,255,3,10,255,255,3,11,213,235,3,12,232,41,3,13,246,0,4,7,244,177,4,8,255,255,4,9,255,255,4,10,204,155,4,11,255,2,4,12,196,0,5,7,242,255,5,8,246,238,5,9,255,245,5,10,254,222,5,11,157,105,6,5,190,255,6,6,255,255,6,7,199,207,6,8,243,17,6,9,233,41,6,10,253,201,6,11,254,255,6,12,177,217,7,4,245,255,7,5,236,252,7,6,211,97,7,7,255,0,7,8,162,0,7,11,226,139,7,12,254,251,7,13,242,236,8,4,172,255,8,5,245,22,8,6,233,0,8,13,254,212,8,14,224,0,9,5,172,0,9,14,211,0],"secondary":false},{"width":9,"bonus":310,"chr":"y","pixels":[0,4,241,255,0,5,154,248,0,17,231,255,1,4,179,255,1,5,254,252,1,6,255,255,1,7,210,243,1,17,249,251,1,18,231,0,2,5,186,35,2,6,254,119,2,7,255,215,2,8,255,255,2,9,245,249,2,16,219,255,2,17,218,224,2,18,245,0,3,8,224,64,3,9,255,152,3,10,253,238,3,11,255,255,3,12,207,243,3,14,158,255,3,15,247,255,3,16,236,252,3,17,227,54,3,18,192,0,4,10,160,33,4,11,248,159,4,12,255,253,4,13,255,255,4,14,248,251,4,15,213,173,4,16,249,27,4,17,234,0,5,9,179,255,5,10,249,255,5,11,255,255,5,12,230,214,5,13,254,97,5,14,255,12,5,15,244,0,6,6,161,255,6,7,241,255,6,8,255,255,6,9,235,244,6,10,218,152,6,11,250,36,6,12,255,0,6,13,193,0,7,4,231,255,7,5,255,255,7,6,248,252,7,7,222,190,7,8,246,71,7,9,255,2,7,10,225,0,8,4,199,255,8,5,241,108,8,6,255,15,8,7,246,0,8,8,165,0],"secondary":false},{"width":9,"bonus":260,"chr":"z","pixels":[1,4,255,255,1,12,193,255,1,13,255,255,2,4,255,255,2,5,254,88,2,11,241,255,2,12,230,252,2,13,255,255,2,14,255,0,3,4,255,255,3,5,254,88,3,9,179,255,3,10,249,255,3,11,168,171,3,12,246,92,3,13,255,255,3,14,255,0,4,4,255,255,4,5,254,88,4,8,235,255,4,9,222,252,4,10,194,67,4,11,249,0,4,12,161,139,4,13,255,255,4,14,255,0,5,4,255,255,5,5,255,104,5,6,195,214,5,7,255,255,5,8,194,217,5,9,236,14,5,10,219,0,5,13,255,255,5,14,255,0,6,4,255,255,6,5,255,251,6,6,248,251,6,7,198,125,6,8,255,0,6,9,165,0,6,13,255,255,6,14,255,0,7,4,255,255,7,5,255,209,7,6,252,41,7,7,244,0,7,13,255,255,7,14,255,0,8,5,255,0,8,6,209,0,8,14,255,0],"secondary":false},{"width":12,"bonus":345,"chr":"A","pixels":[0,13,207,255,1,10,166,255,1,11,247,255,1,12,255,255,1,13,232,237,1,14,207,0,2,8,223,255,2,9,255,255,2,10,252,254,2,11,226,196,2,12,249,68,2,13,255,0,2,14,216,0,3,5,185,255,3,6,253,255,3,7,255,255,3,8,239,239,3,9,255,255,3,10,255,93,3,11,252,0,3,12,174,0,4,3,235,255,4,4,255,255,4,5,238,246,4,6,224,160,4,7,253,49,4,8,255,36,4,9,255,255,4,10,255,84,5,1,255,255,5,2,252,254,5,3,209,181,5,4,240,65,5,5,255,2,5,6,229,0,5,9,255,255,5,10,255,84,6,1,172,255,6,2,254,251,6,3,255,251,6,4,226,212,6,9,255,255,6,10,255,84,7,2,178,30,7,3,252,114,7,4,254,213,7,5,255,255,7,6,251,254,7,7,184,248,7,9,255,255,7,10,255,84,8,5,221,62,8,6,255,153,8,7,255,241,8,8,255,255,8,9,255,255,8,10,254,186,9,7,157,17,9,8,245,97,9,9,254,192,9,10,254,255,9,11,255,255,9,12,220,243,10,10,200,44,10,11,254,133,10,12,254,228,10,13,255,255,11,13,236,80,11,14,255,0],"secondary":false},{"width":12,"bonus":475,"chr":"B","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,255,171,3,7,255,255,3,8,254,189,3,9,254,164,3,10,254,164,3,11,254,164,3,12,255,195,3,13,255,255,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,171,30,4,7,255,255,4,8,255,68,4,9,188,0,4,10,164,0,4,11,164,0,4,12,195,115,4,13,255,255,4,14,255,0,5,1,255,255,5,2,254,88,5,7,255,255,5,8,255,68,5,13,255,255,5,14,255,0,6,1,245,255,6,2,255,105,6,7,255,255,6,8,254,76,6,13,253,253,6,14,255,0,7,1,219,255,7,2,251,152,7,7,255,255,7,8,255,108,7,13,236,244,7,14,252,0,8,1,158,255,8,2,253,246,8,3,181,108,8,6,207,255,8,7,205,231,8,8,255,205,8,12,219,255,8,13,215,210,8,14,226,0,9,2,250,246,9,3,255,255,9,4,255,255,9,5,255,255,9,6,221,246,9,7,212,32,9,8,250,240,9,9,248,228,9,10,180,251,9,11,231,255,9,12,254,255,9,13,227,65,9,14,177,0,10,3,248,135,10,4,255,155,10,5,255,115,10,6,255,15,10,7,214,0,10,9,251,208,10,10,254,248,10,11,242,227,10,12,238,94,10,13,254,0,11,5,155,0,11,10,205,0,11,11,247,0,11,12,216,0],"secondary":false},{"width":11,"bonus":290,"chr":"C","pixels":[1,5,191,255,1,6,231,255,1,7,251,255,1,8,239,255,1,9,202,255,2,3,217,255,2,4,255,255,2,5,241,244,2,6,236,196,2,7,247,173,2,8,254,182,2,9,253,229,2,10,255,255,2,11,248,248,3,2,221,255,3,3,235,251,3,4,229,89,3,5,255,1,3,6,231,0,3,7,182,0,3,8,167,0,3,9,181,0,3,10,234,72,3,11,254,221,3,12,255,247,4,2,247,255,4,3,227,45,4,4,231,0,4,12,253,243,4,13,252,159,5,1,205,255,5,2,200,195,5,3,247,0,5,12,159,235,5,13,253,225,5,14,157,0,6,1,239,255,6,2,225,113,6,3,153,0,6,13,252,252,6,14,224,0,7,1,243,255,7,2,246,108,7,13,248,251,7,14,249,0,8,1,219,255,8,2,251,151,8,13,233,240,8,14,244,0,9,1,158,255,9,2,251,231,9,12,185,255,9,13,208,198,9,14,220,0,10,2,171,52,10,3,228,0,10,13,185,0,10,14,161,0],"secondary":false},{"width":13,"bonus":445,"chr":"D","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,255,195,3,13,255,255,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,195,115,4,13,255,255,4,14,255,0,5,1,255,255,5,2,255,89,5,13,254,254,5,14,255,0,6,1,241,255,6,2,255,105,6,13,243,249,6,14,253,0,7,1,209,255,7,2,250,162,7,12,175,255,7,13,220,225,7,14,237,0,8,2,253,247,8,3,171,51,8,12,251,255,8,13,211,138,8,14,194,0,9,2,244,244,9,3,254,224,9,11,233,255,9,12,226,248,9,13,252,12,10,3,253,234,10,4,255,255,10,5,233,246,10,6,179,255,10,7,167,255,10,8,184,255,10,9,233,255,10,10,255,255,10,11,231,242,10,12,237,43,10,13,220,0,11,4,243,132,11,5,255,201,11,6,253,241,11,7,253,252,11,8,247,241,11,9,237,205,11,10,242,117,11,11,255,11,11,12,219,0,12,6,201,0,12,7,239,0,12,8,250,0,12,9,234,0,12,10,190,0],"secondary":false},{"width":10,"bonus":340,"chr":"E","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,255,171,3,7,255,255,3,8,254,189,3,9,254,164,3,10,254,164,3,11,254,164,3,12,255,195,3,13,255,255,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,171,30,4,7,255,255,4,8,255,68,4,9,188,0,4,10,164,0,4,11,164,0,4,12,195,115,4,13,255,255,4,14,255,0,5,1,255,255,5,2,254,88,5,7,255,255,5,8,255,68,5,13,255,255,5,14,255,0,6,1,255,255,6,2,254,88,6,7,255,255,6,8,255,68,6,13,255,255,6,14,255,0,7,1,255,255,7,2,254,88,7,7,255,255,7,8,255,68,7,13,255,255,7,14,255,0,8,1,255,255,8,2,254,88,8,7,230,252,8,8,255,60,8,13,255,255,8,14,255,0,9,2,255,19,9,8,228,0,9,14,255,0],"secondary":false},{"width":10,"bonus":295,"chr":"F","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,255,171,3,7,255,255,3,8,254,189,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,171,30,4,7,255,255,4,8,255,68,4,9,188,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,1,255,255,5,2,254,88,5,7,255,255,5,8,255,68,6,1,255,255,6,2,254,88,6,7,255,255,6,8,255,68,7,1,255,255,7,2,254,88,7,7,255,255,7,8,255,68,8,1,255,255,8,2,254,88,8,7,226,252,8,8,255,59,9,2,255,19,9,8,224,0],"secondary":false},{"width":13,"bonus":415,"chr":"G","pixels":[1,5,185,255,1,6,227,255,1,7,249,255,1,8,239,255,1,9,199,255,2,3,195,255,2,4,255,255,2,5,244,248,2,6,236,199,2,7,246,173,2,8,253,182,2,9,253,232,2,10,255,255,2,11,243,243,3,2,191,255,3,3,245,254,3,4,218,118,3,5,255,4,3,6,237,0,3,7,184,0,3,8,167,0,3,9,181,2,3,10,238,84,3,11,255,231,3,12,253,238,4,2,255,255,4,3,209,86,4,4,244,0,4,12,255,251,4,13,246,140,5,1,179,255,5,2,207,225,5,3,255,0,5,12,185,233,5,13,254,210,6,1,223,255,6,2,213,137,6,3,183,0,6,13,251,248,6,14,210,0,7,1,247,255,7,2,235,102,7,7,208,255,7,13,254,254,7,14,244,0,8,1,235,255,8,2,251,117,8,7,255,255,8,8,221,78,8,13,247,251,8,14,253,0,9,1,208,255,9,2,247,166,9,7,255,255,9,8,255,68,9,13,231,238,9,14,243,0,10,2,250,236,10,3,161,2,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,215,191,10,14,215,0,11,2,157,49,11,3,232,0,11,7,170,246,11,8,254,164,11,9,254,164,11,10,254,164,11,11,254,164,11,12,254,164,11,13,255,71,11,14,161,0,12,8,164,0,12,9,164,0,12,10,164,0,12,11,164,0,12,12,164,0,12,13,164,0],"secondary":false},{"width":14,"bonus":450,"chr":"H","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,163,255,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,255,171,3,7,255,255,3,8,254,189,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,171,30,4,7,255,255,4,8,255,68,4,9,188,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,7,255,255,5,8,255,68,6,7,255,255,6,8,255,68,7,7,255,255,7,8,255,68,8,7,255,255,8,8,255,68,9,7,255,255,9,8,255,68,10,1,163,255,10,2,163,255,10,3,163,255,10,4,163,255,10,5,163,255,10,6,171,255,10,7,255,255,10,8,254,189,10,9,188,222,10,10,163,255,10,11,163,255,10,12,163,255,10,13,163,255,11,1,255,255,11,2,255,255,11,3,255,255,11,4,255,255,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,164,0,12,2,255,0,12,3,255,0,12,4,255,0,12,5,255,0,12,6,255,0,12,7,255,0,12,8,255,0,12,9,255,0,12,10,255,0,12,11,255,0,12,12,255,0,12,13,255,0,12,14,255,0],"secondary":false},{"width":7,"bonus":250,"chr":"I","pixels":[1,1,253,255,1,13,253,255,2,1,255,255,2,2,254,189,2,3,171,244,2,4,163,255,2,5,163,255,2,6,163,255,2,7,163,255,2,8,163,255,2,9,163,255,2,10,163,255,2,11,163,255,2,12,185,255,2,13,255,255,2,14,254,0,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,0,4,1,255,255,4,2,255,56,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,254,52,4,13,255,255,4,14,255,0,5,1,253,255,5,2,255,10,5,13,253,255,5,14,255,0,6,2,253,0,6,14,253,0],"secondary":false},{"width":5,"bonus":255,"chr":"J","pixels":[0,16,255,255,0,17,255,57,1,15,159,255,1,16,251,255,1,17,255,17,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,206,156,2,17,251,0,3,1,163,255,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,255,161,3,14,255,133,3,15,255,61,3,16,255,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,161,0],"secondary":false},{"width":11,"bonus":385,"chr":"K","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,163,255,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,237,3,8,255,237,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,2,4,6,213,166,4,7,252,250,4,8,239,62,4,9,237,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,5,166,255,5,6,255,255,5,7,254,255,5,8,252,138,6,4,190,255,6,5,246,254,6,6,200,124,6,7,254,186,6,8,255,255,6,9,229,222,7,3,211,255,7,4,238,254,7,5,204,72,7,6,246,0,7,8,217,138,7,9,254,251,7,10,251,243,8,2,227,255,8,3,227,251,8,4,218,47,8,5,237,0,8,10,254,219,8,11,255,255,8,12,185,208,9,1,239,255,9,2,217,246,9,3,230,29,9,4,224,0,9,11,241,168,9,12,255,255,9,13,236,226,10,1,190,255,10,2,241,15,10,3,209,0,10,12,191,116,10,13,255,239,10,14,209,0],"secondary":false},{"width":10,"bonus":250,"chr":"L","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,163,255,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,255,207,3,13,255,255,3,14,255,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,206,148,4,13,255,255,4,14,255,0,5,13,255,255,5,14,255,0,6,13,255,255,6,14,255,0,7,13,255,255,7,14,255,0,8,13,255,255,8,14,255,0,9,13,156,111,9,14,255,0],"secondary":false},{"width":17,"bonus":640,"chr":"M","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,254,249,3,3,255,179,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,197,255,4,2,255,255,4,3,255,247,4,4,229,188,4,5,190,101,4,6,165,6,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,2,206,45,5,3,255,130,5,4,253,223,5,5,255,255,5,6,238,248,6,5,230,69,6,6,254,156,6,7,253,241,6,8,255,255,6,9,219,246,7,7,159,13,7,8,245,91,7,9,255,181,7,10,254,252,7,11,253,253,7,12,192,246,8,10,192,48,8,11,254,204,8,12,255,255,8,13,255,255,9,9,163,255,9,10,245,255,9,11,248,255,9,12,239,184,9,13,255,78,9,14,255,0,10,7,225,255,10,8,255,255,10,9,212,236,10,10,200,131,10,11,246,17,10,12,248,0,10,13,172,0,11,4,197,255,11,5,255,255,11,6,225,249,11,7,194,167,11,8,230,39,11,9,255,0,11,10,196,0,12,1,167,255,12,2,247,255,12,3,238,255,12,4,194,200,12,5,210,70,12,6,255,0,12,7,220,0,13,1,255,255,13,2,250,246,13,3,252,173,13,4,248,168,13,5,218,192,13,6,184,227,13,7,163,255,13,8,163,255,13,9,163,255,13,10,163,255,13,11,163,255,13,12,163,255,13,13,163,255,14,1,255,255,14,2,255,255,14,3,255,255,14,4,255,255,14,5,255,255,14,6,255,255,14,7,255,255,14,8,255,255,14,9,255,255,14,10,255,255,14,11,255,255,14,12,255,255,14,13,255,255,14,14,164,0,15,2,255,0,15,3,255,0,15,4,255,0,15,5,255,0,15,6,255,0,15,7,255,0,15,8,255,0,15,9,255,0,15,10,255,0,15,11,255,0,15,12,255,0,15,13,255,0,15,14,255,0],"secondary":false},{"width":14,"bonus":480,"chr":"N","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,255,3,3,254,210,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,2,255,225,4,3,255,253,4,4,237,166,4,5,171,30,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,3,240,135,5,4,255,245,5,5,249,245,6,5,251,170,6,6,255,255,6,7,230,234,7,6,188,82,7,7,255,205,7,8,255,255,7,9,194,226,8,8,225,113,8,9,255,233,8,10,252,248,9,10,245,145,9,11,255,249,9,12,239,239,10,1,163,255,10,2,163,255,10,3,163,255,10,4,163,255,10,5,163,255,10,6,163,255,10,7,163,255,10,8,163,255,10,9,163,255,10,10,168,248,10,11,229,223,10,12,255,255,10,13,255,255,11,1,255,255,11,2,255,255,11,3,255,255,11,4,255,255,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,0,12,2,255,0,12,3,255,0,12,4,255,0,12,5,255,0,12,6,255,0,12,7,255,0,12,8,255,0,12,9,255,0,12,10,255,0,12,11,255,0,12,12,255,0,12,13,255,0,12,14,255,0],"secondary":false},{"width":14,"bonus":405,"chr":"O","pixels":[1,5,201,255,1,6,239,255,1,7,251,255,1,8,239,255,1,9,199,255,2,3,235,255,2,4,255,255,2,5,239,239,2,6,239,191,2,7,249,171,2,8,253,181,2,9,253,227,2,10,255,255,2,11,245,245,3,2,239,255,3,3,225,244,3,4,239,65,3,5,255,0,3,6,224,0,3,7,179,0,3,8,167,0,3,9,180,0,3,10,232,69,3,11,254,219,3,12,253,241,4,2,241,253,4,3,242,27,4,4,216,0,4,12,253,243,4,13,249,146,5,1,213,255,5,2,207,180,5,3,240,0,5,12,158,236,5,13,253,217,6,1,243,255,6,2,230,110,6,13,251,249,6,14,215,0,7,1,245,255,7,2,248,101,7,13,249,251,7,14,246,0,8,1,213,255,8,2,250,144,8,13,230,239,8,14,246,0,9,2,252,240,9,12,237,255,9,13,204,175,9,14,215,0,10,2,247,245,10,3,251,215,10,11,213,255,10,12,237,254,10,13,240,26,11,3,253,233,11,4,255,255,11,5,230,247,11,6,179,255,11,7,167,255,11,8,181,255,11,9,223,255,11,10,255,255,11,11,235,249,11,12,222,63,11,13,236,0,12,4,243,128,12,5,255,197,12,6,253,239,12,7,254,252,12,8,249,243,12,9,238,210,12,10,238,129,12,11,255,16,12,12,229,0,13,6,197,0,13,7,237,0,13,8,251,0,13,9,237,0,13,10,196,0],"secondary":false},{"width":11,"bonus":360,"chr":"P","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,255,171,3,8,255,255,3,9,254,189,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,171,30,4,8,255,255,4,9,255,68,4,10,188,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,1,251,255,5,2,255,97,5,8,255,255,5,9,255,61,6,1,231,255,6,2,253,136,6,8,255,255,6,9,255,33,7,1,173,255,7,2,253,237,7,7,193,255,7,8,227,244,7,9,255,0,8,2,254,252,8,3,254,245,8,4,195,244,8,5,181,255,8,6,235,255,8,7,253,255,8,8,211,93,8,9,217,0,9,3,254,197,9,4,254,246,9,5,252,247,9,6,237,209,9,7,240,74,9,8,253,0,10,4,196,0,10,5,246,0,10,6,244,0,10,7,194,0],"secondary":false},{"width":14,"bonus":440,"chr":"Q","pixels":[1,5,201,255,1,6,239,255,1,7,251,255,1,8,239,255,1,9,199,255,2,3,235,255,2,4,255,255,2,5,239,239,2,6,239,191,2,7,249,171,2,8,253,181,2,9,253,227,2,10,255,255,2,11,245,245,3,2,239,255,3,3,225,244,3,4,239,65,3,5,255,0,3,6,224,0,3,7,179,0,3,8,167,0,3,9,180,0,3,10,232,69,3,11,254,219,3,12,254,240,4,2,241,253,4,3,242,27,4,4,216,0,4,12,253,243,4,13,248,146,5,1,213,255,5,2,207,180,5,3,240,0,5,12,158,236,5,13,253,217,6,1,243,255,6,2,230,110,6,13,251,249,6,14,215,0,7,1,245,255,7,2,248,101,7,13,255,255,7,14,248,43,8,1,213,255,8,2,250,144,8,13,255,255,8,14,254,240,9,2,252,240,9,12,237,255,9,13,219,202,9,14,255,227,9,15,254,251,10,2,247,245,10,3,251,215,10,11,213,255,10,12,242,254,10,13,240,24,10,14,183,43,10,15,251,222,10,16,255,255,11,3,253,233,11,4,255,255,11,5,230,247,11,6,179,255,11,7,167,255,11,8,181,255,11,9,223,255,11,10,255,255,11,11,237,249,11,12,222,59,11,13,241,0,11,16,248,215,11,17,255,0,12,4,243,128,12,5,255,197,12,6,253,239,12,7,253,252,12,8,245,236,12,9,237,210,12,10,238,118,12,11,255,16,12,12,232,0,12,17,210,0,13,6,197,0,13,7,237,0,13,8,250,0,13,9,227,0,13,10,195,0],"secondary":false},{"width":11,"bonus":410,"chr":"R","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,3,1,255,255,3,2,255,195,3,3,254,164,3,4,254,164,3,5,254,164,3,6,255,171,3,7,255,255,3,8,254,189,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,255,0,4,1,255,255,4,2,254,88,4,3,195,0,4,4,164,0,4,5,164,0,4,6,171,30,4,7,255,255,4,8,255,68,4,9,188,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,5,1,253,255,5,2,255,92,5,7,255,255,5,8,255,68,6,1,237,255,6,2,254,119,6,7,255,255,6,8,255,202,7,1,191,255,7,2,252,214,7,6,157,255,7,7,226,248,7,8,254,219,7,9,255,255,7,10,208,233,8,2,255,255,8,3,249,231,8,4,178,251,8,5,211,255,8,6,255,255,8,7,188,109,8,8,220,6,8,9,234,121,8,10,255,237,8,11,255,255,8,12,196,234,9,2,155,173,9,3,254,221,9,4,254,249,9,5,242,225,9,6,228,103,9,7,255,0,9,11,247,146,9,12,255,249,9,13,254,255,10,4,220,0,10,5,248,0,10,6,214,0,10,12,156,57,10,13,253,174,10,14,254,0],"secondary":false},{"width":10,"bonus":310,"chr":"S","pixels":[1,3,227,255,1,4,243,255,1,5,193,255,1,12,233,255,1,13,154,255,2,2,255,255,2,3,228,234,2,4,248,190,2,5,255,245,2,6,253,247,2,12,156,254,2,13,251,219,2,14,154,0,3,1,190,255,3,2,209,232,3,3,255,3,3,4,210,0,3,5,198,67,3,6,255,251,3,7,251,170,3,13,251,249,3,14,216,0,4,1,233,255,4,2,217,125,4,3,190,0,4,6,180,227,4,7,254,251,4,8,176,32,4,13,252,253,4,14,245,0,5,1,245,255,5,2,242,106,5,7,255,255,5,8,252,122,5,13,235,243,5,14,250,0,6,1,223,255,6,2,251,137,6,7,217,243,6,8,255,237,6,12,211,255,6,13,211,208,6,14,224,0,7,1,171,255,7,2,249,214,7,8,254,255,7,9,253,235,7,10,182,243,7,11,223,255,7,12,252,254,7,13,221,58,7,14,172,0,8,2,202,120,8,3,209,0,8,9,254,221,8,10,254,250,8,11,241,223,8,12,234,85,8,13,252,0,9,10,220,0,9,11,249,0,9,12,211,0],"secondary":false},{"width":12,"bonus":275,"chr":"T","pixels":[1,1,255,255,2,1,255,255,2,2,254,88,3,1,255,255,3,2,254,88,4,1,255,255,4,2,254,88,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,6,1,255,255,6,2,255,195,6,3,254,164,6,4,254,164,6,5,254,164,6,6,254,164,6,7,254,164,6,8,254,164,6,9,254,164,6,10,254,164,6,11,254,164,6,12,254,164,6,13,254,164,6,14,255,0,7,1,255,255,7,2,254,88,7,3,195,0,7,4,164,0,7,5,164,0,7,6,164,0,7,7,164,0,7,8,164,0,7,9,164,0,7,10,164,0,7,11,164,0,7,12,164,0,7,13,164,0,7,14,164,0,8,1,255,255,8,2,254,88,9,1,255,255,9,2,254,88,10,1,255,255,10,2,254,88,11,2,255,0],"secondary":false},{"width":14,"bonus":410,"chr":"U","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,249,255,2,10,219,255,3,1,163,255,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,255,171,3,10,254,212,3,11,255,255,3,12,234,228,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,171,0,4,11,224,93,4,12,255,253,4,13,233,144,5,12,191,215,5,13,255,215,6,13,252,251,6,14,215,0,7,13,249,251,7,14,248,0,8,12,161,255,8,13,228,234,8,14,246,0,9,12,253,255,9,13,207,154,9,14,209,0,10,1,163,255,10,2,163,255,10,3,163,255,10,4,163,255,10,5,163,255,10,6,163,255,10,7,163,255,10,8,163,255,10,9,172,255,10,10,211,255,10,11,255,255,10,12,222,236,10,13,253,9,11,1,255,255,11,2,255,255,11,3,255,255,11,4,255,255,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,253,252,11,10,243,231,11,11,235,146,11,12,255,13,11,13,205,0,12,2,255,0,12,3,255,0,12,4,255,0,12,5,255,0,12,6,255,0,12,7,255,0,12,8,255,0,12,9,255,0,12,10,250,0,12,11,220,0],"secondary":false},{"width":11,"bonus":300,"chr":"V","pixels":[0,1,211,255,1,1,223,255,1,2,255,255,1,3,254,255,1,4,204,246,2,2,230,62,2,3,255,145,2,4,255,231,2,5,255,255,2,6,252,253,2,7,185,247,3,5,237,72,3,6,254,156,3,7,254,239,3,8,255,255,3,9,247,252,3,10,169,249,4,7,158,10,4,8,243,81,4,9,254,164,4,10,254,240,4,11,255,255,4,12,241,249,5,10,181,68,5,11,250,176,5,12,254,255,5,13,255,255,6,9,215,255,6,10,255,255,6,11,253,255,6,12,234,208,6,13,254,101,6,14,255,0,7,6,208,255,7,7,255,255,7,8,255,255,7,9,230,227,7,10,233,126,7,11,255,27,7,12,253,0,7,13,191,0,8,3,197,255,8,4,253,255,8,5,255,255,8,6,236,237,8,7,232,142,8,8,255,39,8,9,255,0,8,10,205,0,9,1,251,255,9,2,255,255,9,3,241,244,9,4,229,160,9,5,254,54,9,6,255,0,9,7,219,0,10,1,158,255,10,2,253,69,10,3,255,3,10,4,231,0],"secondary":false},{"width":17,"bonus":545,"chr":"W","pixels":[0,1,167,255,1,1,251,255,1,2,255,255,1,3,255,255,1,4,225,251,1,5,154,255,2,2,252,73,2,3,255,137,2,4,255,201,2,5,254,252,2,6,255,255,2,7,254,255,2,8,213,251,3,5,204,17,3,6,253,76,3,7,255,139,3,8,254,204,3,9,254,252,3,10,255,255,3,11,252,254,3,12,200,252,4,9,206,15,4,10,253,107,4,11,255,205,4,12,255,255,4,13,255,255,5,8,179,255,5,9,241,255,5,10,255,255,5,11,247,250,5,12,238,186,5,13,255,100,5,14,255,0,6,5,213,255,6,6,255,255,6,7,255,255,6,8,230,236,6,9,220,161,6,10,245,68,6,11,255,5,6,12,242,0,6,13,174,0,7,1,173,255,7,2,241,255,7,3,255,255,7,4,245,251,7,5,220,205,7,6,231,115,7,7,255,30,7,8,255,0,7,9,213,0,8,1,255,255,8,2,255,255,8,3,252,197,8,4,254,88,8,5,241,16,8,6,177,0,9,2,254,150,9,3,254,227,9,4,255,255,9,5,252,254,9,6,195,250,10,4,231,52,10,5,255,124,10,6,254,201,10,7,254,255,10,8,255,255,10,9,227,249,11,7,205,28,11,8,254,97,11,9,254,162,11,10,250,223,11,11,255,255,11,12,248,252,11,13,180,253,12,10,212,164,12,11,248,209,12,12,255,255,12,13,255,255,12,14,178,0,13,7,209,255,13,8,253,255,13,9,255,255,13,10,250,253,13,11,225,217,13,12,229,138,13,13,255,57,13,14,255,0,14,3,209,255,14,4,253,255,14,5,255,255,14,6,254,254,14,7,233,223,14,8,234,148,14,9,254,69,14,10,255,9,14,11,248,0,14,12,191,0,15,1,255,255,15,2,255,255,15,3,238,231,15,4,236,160,15,5,254,81,15,6,255,17,15,7,253,0,15,8,203,0,16,2,255,27,16,3,255,0,16,4,215,0],"secondary":false},{"width":11,"bonus":325,"chr":"X","pixels":[0,13,155,255,1,1,255,255,1,2,203,222,1,12,231,255,1,13,246,254,1,14,155,0,2,2,255,243,2,3,251,245,2,10,184,255,2,11,255,255,2,12,205,222,2,13,235,35,2,14,246,0,3,3,251,179,3,4,255,255,3,5,218,226,3,9,245,255,3,10,229,251,3,11,206,98,3,12,255,0,3,13,178,0,4,4,200,100,4,5,255,225,4,6,253,250,4,7,221,249,4,8,250,255,4,9,191,182,4,10,245,11,4,11,225,0,5,6,254,255,5,7,255,255,5,8,246,205,5,9,251,31,6,4,181,255,6,5,255,255,6,6,198,211,6,7,254,107,6,8,255,239,6,9,253,247,7,3,245,255,7,4,229,251,7,5,203,92,7,6,255,0,7,7,164,0,7,9,249,171,7,10,255,255,7,11,234,235,8,1,211,255,8,2,253,255,8,3,196,188,8,4,245,13,8,5,225,0,8,10,192,96,8,11,255,223,8,12,255,255,8,13,192,224,9,1,211,255,9,2,220,64,9,3,253,0,9,12,240,146,9,13,255,251,9,14,169,0,10,2,211,0,10,13,159,75,10,14,251,0],"secondary":false},{"width":10,"bonus":270,"chr":"Y","pixels":[0,1,241,255,1,1,189,255,1,2,255,255,1,3,243,242,2,2,206,82,2,3,254,198,2,4,255,255,2,5,234,239,3,4,214,89,3,5,254,207,3,6,255,255,3,7,224,236,4,6,222,95,4,7,254,231,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,5,6,179,255,5,7,255,255,5,8,252,224,5,9,254,164,5,10,254,164,5,11,254,164,5,12,254,164,5,13,254,164,5,14,255,0,6,4,166,255,6,5,253,255,6,6,237,251,6,7,211,131,6,8,255,5,6,9,221,0,6,10,164,0,6,11,164,0,6,12,164,0,6,13,164,0,6,14,164,0,7,2,154,255,7,3,251,255,7,4,245,253,7,5,210,154,7,6,253,12,7,7,233,0,8,1,247,255,8,2,250,255,8,3,212,177,8,4,251,23,8,5,243,0,9,1,166,255,9,2,248,36,9,3,250,0],"secondary":false},{"width":11,"bonus":350,"chr":"Z","pixels":[1,1,255,255,1,12,193,255,1,13,255,255,2,1,255,255,2,2,254,88,2,11,245,255,2,12,255,255,2,13,255,255,2,14,255,0,3,1,255,255,3,2,254,88,3,9,193,255,3,10,255,255,3,11,222,227,3,12,250,129,3,13,255,255,3,14,255,0,4,1,255,255,4,2,254,88,4,8,245,255,4,9,247,253,4,10,221,132,4,11,255,2,4,12,216,103,4,13,255,255,4,14,255,0,5,1,255,255,5,2,254,88,5,6,196,255,5,7,255,255,5,8,223,225,5,9,247,38,5,10,246,0,5,13,255,255,5,14,255,0,6,1,255,255,6,2,254,88,6,5,245,255,6,6,246,254,6,7,222,129,6,8,255,2,6,9,196,0,6,13,255,255,6,14,255,0,7,1,255,255,7,2,255,127,7,3,217,232,7,4,255,255,7,5,221,224,7,6,247,37,7,7,245,0,7,13,255,255,7,14,255,0,8,1,255,255,8,2,255,255,8,3,250,250,8,4,223,126,8,5,255,1,8,6,194,0,8,13,255,255,8,14,255,0,9,1,255,255,9,2,255,193,9,3,255,35,9,4,245,0,9,13,255,255,9,14,255,0,10,2,255,0,10,3,193,0,10,14,255,0],"secondary":false},{"width":10,"bonus":385,"chr":"0","pixels":[1,4,181,255,1,5,223,255,1,6,245,255,1,7,253,255,1,8,245,255,1,9,221,255,1,10,177,255,2,2,221,255,2,3,255,255,2,4,241,244,2,5,237,205,2,6,245,178,2,7,252,167,2,8,254,172,2,9,253,192,2,10,252,234,2,11,255,255,2,12,229,237,3,1,178,255,3,2,233,251,3,3,230,70,3,4,255,0,3,5,231,0,3,6,190,0,3,7,171,0,3,8,165,0,3,9,171,0,3,10,190,0,3,11,237,67,3,12,255,229,3,13,240,180,4,1,241,255,4,2,211,134,4,3,230,0,4,13,254,242,4,14,170,0,5,1,239,255,5,2,248,118,5,13,247,249,5,14,241,0,6,1,166,255,6,2,253,235,6,3,153,118,6,12,233,255,6,13,209,212,6,14,241,0,7,2,238,222,7,3,255,255,7,4,239,249,7,5,191,254,7,6,171,255,7,7,166,255,7,8,171,255,7,9,190,255,7,10,233,255,7,11,255,255,7,12,228,244,7,13,235,31,7,14,174,0,8,3,224,105,8,4,255,172,8,5,252,222,8,6,252,247,8,7,254,254,8,8,251,249,8,9,244,234,8,10,236,196,8,11,242,112,8,12,255,10,8,13,218,0,9,5,172,0,9,6,219,0,9,7,244,0,9,8,253,0,9,9,246,0,9,10,224,0,9,11,182,0],"secondary":false},{"width":10,"bonus":235,"chr":"1","pixels":[2,3,209,255,3,2,167,255,3,3,236,255,3,4,216,41,4,2,243,255,4,3,187,79,4,4,236,0,5,1,251,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,6,1,163,255,6,2,253,165,6,3,254,164,6,4,254,164,6,5,254,164,6,6,254,164,6,7,254,164,6,8,254,164,6,9,254,164,6,10,254,164,6,11,254,164,6,12,254,164,6,13,254,164,6,14,255,0,7,2,164,0,7,3,164,0,7,4,164,0,7,5,164,0,7,6,164,0,7,7,164,0,7,8,164,0,7,9,164,0,7,10,164,0,7,11,164,0,7,12,164,0,7,13,164,0,7,14,164,0],"secondary":false},{"width":10,"bonus":305,"chr":"2","pixels":[1,12,185,255,1,13,255,255,2,2,254,255,2,3,177,95,2,11,199,255,2,12,255,255,2,13,255,255,2,14,255,0,3,1,197,255,3,2,201,211,3,3,254,0,3,10,209,255,3,11,238,254,3,12,230,156,3,13,255,255,3,14,255,0,4,1,243,255,4,2,219,115,4,3,166,0,4,9,221,255,4,10,234,253,4,11,218,53,4,12,242,92,4,13,255,255,4,14,255,0,5,1,231,255,5,2,248,124,5,8,233,255,5,9,228,250,5,10,226,42,5,11,232,0,5,13,255,255,5,14,255,0,6,1,173,255,6,2,252,236,6,3,155,107,6,7,251,255,6,8,217,241,6,9,235,27,6,10,224,0,6,13,255,255,6,14,255,0,7,2,249,241,7,3,255,255,7,4,255,255,7,5,255,255,7,6,253,255,7,7,209,183,7,8,251,8,7,9,205,0,7,13,255,255,7,14,255,0,8,3,245,133,8,4,255,155,8,5,255,121,8,6,255,38,8,7,253,0,8,13,255,255,8,14,255,0,9,5,155,0,9,14,255,0],"secondary":false},{"width":10,"bonus":295,"chr":"3","pixels":[1,2,173,255,1,12,249,255,2,2,230,252,2,3,174,7,2,12,178,243,2,13,254,208,3,1,213,255,3,2,201,179,3,3,228,0,3,6,255,255,3,13,250,244,3,14,207,0,4,1,245,255,4,2,230,114,4,6,255,255,4,7,255,81,4,13,253,253,4,14,239,0,5,1,233,255,5,2,250,114,5,6,252,254,5,7,255,123,5,13,239,245,5,14,251,0,6,1,185,255,6,2,251,219,6,5,211,255,6,6,185,213,6,7,254,227,6,12,239,255,6,13,211,198,6,14,230,0,7,2,254,252,7,3,255,255,7,4,255,255,7,5,215,247,7,6,214,17,7,7,240,231,7,8,253,241,7,9,188,245,7,10,191,255,7,11,249,255,7,12,245,253,7,13,242,42,7,14,164,0,8,3,253,145,8,4,255,124,8,5,255,16,8,6,208,0,8,8,243,188,8,9,254,240,8,10,250,244,8,11,236,194,8,12,250,46,8,13,243,0,9,9,180,0,9,10,240,0,9,11,240,0,9,12,179,0],"secondary":false},{"width":10,"bonus":355,"chr":"4","pixels":[1,9,184,255,1,10,255,255,2,8,241,255,2,9,223,251,2,10,255,255,2,11,255,84,3,6,187,255,3,7,246,254,3,8,172,172,3,9,244,41,3,10,255,255,3,11,255,84,4,5,243,255,4,6,199,244,4,7,197,45,4,8,246,0,4,10,255,255,4,11,255,84,5,3,193,255,5,4,240,254,5,5,166,154,5,6,244,1,5,7,190,0,5,10,255,255,5,11,255,84,6,2,235,255,6,3,163,233,6,4,199,31,6,5,240,0,6,10,255,255,6,11,255,84,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,7,13,255,255,8,1,163,255,8,2,254,164,8,3,254,164,8,4,254,164,8,5,254,164,8,6,254,164,8,7,254,164,8,8,254,164,8,9,254,177,8,10,255,255,8,11,254,195,8,12,254,164,8,13,254,164,8,14,255,0,9,2,164,0,9,3,164,0,9,4,164,0,9,5,164,0,9,6,164,0,9,7,164,0,9,8,164,0,9,9,177,52,9,10,255,255,9,11,255,84,9,12,194,0,9,13,164,0,9,14,164,0],"secondary":false},{"width":10,"bonus":290,"chr":"5","pixels":[1,5,159,255,1,6,178,255,1,12,227,255,2,1,255,255,2,2,255,255,2,3,254,254,2,4,243,245,2,5,234,228,2,6,253,253,2,7,210,130,2,13,251,221,3,1,255,255,3,2,255,101,3,3,255,3,3,4,253,0,3,5,233,3,3,6,254,252,3,7,252,78,3,13,252,253,3,14,218,0,4,1,255,255,4,2,254,88,4,6,255,255,4,7,253,84,4,13,251,253,4,14,250,0,5,1,255,255,5,2,254,88,5,6,238,255,5,7,255,142,5,12,159,255,5,13,231,238,5,14,249,0,6,1,255,255,6,2,254,88,6,6,163,255,6,7,254,249,6,8,186,135,6,12,253,255,6,13,207,159,6,14,215,0,7,1,179,255,7,2,255,61,7,7,245,239,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,221,221,7,13,253,8,8,2,180,0,8,8,241,124,8,9,255,157,8,10,255,145,8,11,255,80,8,12,255,2,8,13,192,0,9,10,157,0],"secondary":false},{"width":10,"bonus":365,"chr":"6","pixels":[1,5,185,255,1,6,227,255,1,7,245,255,1,8,251,255,1,9,239,255,1,10,197,255,2,3,241,255,2,4,255,255,2,5,235,238,2,6,234,195,2,7,251,227,2,8,254,234,2,9,254,176,2,10,251,207,2,11,255,255,2,12,232,235,3,2,251,255,3,3,211,234,3,4,244,46,3,5,255,0,3,6,233,113,3,7,242,225,3,8,226,20,3,9,233,0,3,10,175,0,3,11,215,65,3,12,254,239,3,13,240,171,4,1,167,255,4,2,226,250,4,3,251,7,4,4,194,0,4,6,235,255,4,7,163,158,4,8,214,0,4,13,254,238,4,14,161,0,5,1,233,255,5,2,210,153,5,3,222,0,5,6,255,255,5,7,241,92,5,13,251,251,5,14,237,0,6,1,253,255,6,2,240,100,6,6,234,254,6,7,254,189,6,12,213,255,6,13,221,228,6,14,247,0,7,1,229,255,7,2,254,109,7,7,255,255,7,8,248,236,7,9,177,252,7,10,187,255,7,11,243,255,7,12,251,255,7,13,221,60,7,14,197,0,8,2,230,0,8,7,156,145,8,8,255,211,8,9,254,250,8,10,250,244,8,11,235,193,8,12,244,48,8,13,251,0,9,9,211,0,9,10,249,0,9,11,239,0,9,12,178,0],"secondary":false},{"width":10,"bonus":240,"chr":"7","pixels":[1,1,255,255,2,1,255,255,2,2,254,88,3,1,255,255,3,2,254,88,3,12,193,255,3,13,255,255,4,1,255,255,4,2,254,88,4,10,233,255,4,11,255,255,4,12,234,243,4,13,223,141,4,14,255,0,5,1,255,255,5,2,254,88,5,7,179,255,5,8,253,255,5,9,251,255,5,10,216,204,5,11,239,76,5,12,255,1,5,13,223,0,6,1,255,255,6,2,254,88,6,5,221,255,6,6,255,255,6,7,231,244,6,8,215,143,6,9,253,24,6,10,251,0,6,11,173,0,7,1,255,255,7,2,255,208,7,3,250,253,7,4,250,255,7,5,211,208,7,6,231,76,7,7,255,1,7,8,221,0,8,1,255,255,8,2,254,221,8,3,229,134,8,4,248,24,8,5,250,0,8,6,172,0,9,2,255,0,9,3,220,0],"secondary":false},{"width":10,"bonus":375,"chr":"8","pixels":[1,9,199,255,1,10,247,255,1,11,225,255,2,2,247,255,2,3,255,255,2,4,255,255,2,5,255,255,2,8,247,255,2,9,233,247,2,10,237,186,2,11,254,216,2,12,255,255,2,13,157,150,3,1,187,255,3,2,221,245,3,3,248,37,3,4,255,17,3,5,255,143,3,6,255,253,3,7,235,238,3,8,190,232,3,9,248,6,3,10,226,0,3,11,173,4,3,12,244,195,3,13,255,203,4,1,237,255,4,2,215,126,4,3,212,0,4,6,229,219,4,7,254,240,4,8,222,17,4,9,173,0,4,13,250,244,4,14,203,0,5,1,237,255,5,2,245,111,5,6,194,255,5,7,254,255,5,8,243,55,5,13,244,248,5,14,240,0,6,1,185,255,6,2,252,215,6,6,239,255,6,7,241,206,6,8,255,213,6,12,197,255,6,13,219,225,6,14,238,0,7,2,252,248,7,3,255,255,7,4,255,255,7,5,254,255,7,6,185,125,7,7,241,37,7,8,250,240,7,9,251,237,7,10,181,248,7,11,223,255,7,12,255,255,7,13,214,86,7,14,193,0,8,3,250,148,8,4,255,142,8,5,255,57,8,6,254,0,8,9,251,193,8,10,254,246,8,11,243,228,8,12,233,88,8,13,255,0,9,10,190,0,9,11,245,0,9,12,217,0],"secondary":false},{"width":10,"bonus":375,"chr":"9","pixels":[1,3,172,255,1,4,237,255,1,5,245,255,1,6,211,255,2,2,249,255,2,3,245,254,2,4,233,206,2,5,249,177,2,6,254,220,2,7,255,255,2,8,200,195,2,13,231,255,3,1,195,255,3,2,223,244,3,3,250,23,3,4,244,0,3,5,188,0,3,6,173,2,3,7,239,153,3,8,255,255,3,9,164,44,3,13,254,254,3,14,232,0,4,1,247,255,4,2,221,125,4,3,214,0,4,8,255,255,4,9,255,61,4,13,241,247,4,14,253,0,5,1,235,255,5,2,250,121,5,8,254,255,5,9,255,28,5,12,213,255,5,13,209,207,5,14,234,0,6,1,157,255,6,2,254,243,6,3,154,110,6,7,181,255,6,8,171,221,6,9,254,0,6,11,181,255,6,12,252,254,6,13,220,49,6,14,170,0,7,2,237,225,7,3,255,255,7,4,221,242,7,5,173,255,7,6,225,255,7,7,238,255,7,8,235,201,7,9,237,229,7,10,253,255,7,11,243,253,7,12,203,95,7,13,252,0,8,3,229,121,8,4,254,192,8,5,252,240,8,6,254,252,8,7,254,244,8,8,252,226,8,9,234,196,8,10,232,123,8,11,254,18,8,12,241,0,9,5,192,0,9,6,237,0,9,7,251,0,9,8,243,0,9,9,224,0,9,10,180,0],"secondary":false},{"width":15,"bonus":500,"chr":"%","pixels":[1,3,155,255,1,4,227,255,1,5,249,255,1,6,229,255,1,7,167,255,2,2,187,255,2,3,250,255,2,4,230,212,2,5,245,174,2,6,253,183,2,7,253,244,2,8,244,233,3,2,251,255,3,3,214,120,3,4,250,0,3,5,191,0,3,6,168,0,3,7,196,67,3,8,255,255,3,9,229,56,4,2,237,255,4,3,253,168,4,8,255,255,4,9,255,33,4,12,169,255,4,13,239,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,211,203,5,9,255,15,5,11,243,255,5,12,162,235,5,13,176,30,5,14,240,0,6,4,255,129,6,5,255,155,6,6,255,137,6,7,255,80,6,8,255,108,6,9,247,241,6,10,185,249,6,11,157,68,6,12,244,0,7,6,184,103,7,7,235,231,7,8,223,239,7,10,234,0,7,11,181,0,8,5,185,255,8,6,231,255,8,8,223,72,8,9,233,150,8,10,182,218,9,3,155,255,9,4,241,255,9,6,189,16,9,7,241,113,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,10,2,241,255,10,3,169,243,10,4,165,42,10,5,242,0,10,7,219,253,10,8,187,189,10,9,255,20,10,10,255,4,10,11,255,28,10,12,255,172,10,13,254,225,11,3,241,0,11,4,161,0,11,7,231,255,11,8,229,89,11,13,250,244,11,14,224,0,12,7,155,255,12,8,254,249,12,9,208,230,12,10,169,255,12,11,197,255,12,12,253,255,12,13,209,204,12,14,239,0,13,8,209,169,13,9,254,222,13,10,253,250,13,11,245,237,13,12,231,167,13,13,253,16,13,14,168,0,14,10,222,0,14,11,248,0,14,12,228,0],"secondary":false},{"width":8,"bonus":225,"chr":"/","pixels":[1,14,155,255,1,15,221,255,1,16,255,255,2,11,215,255,2,12,255,255,2,13,255,255,2,14,236,244,2,15,218,188,2,16,235,105,2,17,255,0,3,7,208,255,3,8,253,255,3,9,255,255,3,10,239,246,3,11,218,194,3,12,231,111,3,13,255,36,3,14,255,0,3,15,226,0,3,16,161,0,4,3,201,255,4,4,251,255,4,5,255,255,4,6,241,249,4,7,218,200,4,8,228,119,4,9,254,41,4,10,255,0,4,11,231,0,4,12,166,0,5,0,249,255,5,1,255,255,5,2,243,251,5,3,218,207,5,4,224,127,5,5,252,46,5,6,255,1,5,7,235,0,5,8,171,0,6,0,222,135,6,1,250,52,6,2,255,2,6,3,239,0,6,4,177,0,7,0,182,0],"secondary":false},{"width":10,"bonus":175,"chr":"+","pixels":[1,7,255,255,2,7,255,255,2,8,255,68,3,7,255,255,3,8,255,68,4,4,163,255,4,5,163,255,4,6,171,255,4,7,255,255,4,8,254,189,4,9,188,222,4,10,163,255,4,11,163,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,164,0,6,5,255,0,6,6,255,20,6,7,255,255,6,8,255,68,6,9,255,0,6,10,255,0,6,11,255,0,6,12,255,0,7,7,255,255,7,8,255,68,8,7,255,255,8,8,255,68,9,8,255,0],"secondary":false},{"width":9,"bonus":185,"chr":"?","pixels":[2,1,159,255,2,2,213,242,3,1,217,255,3,2,206,156,3,3,202,0,3,11,159,255,3,12,249,255,3,13,196,255,4,1,245,255,4,2,232,109,4,7,235,255,4,8,159,235,4,9,161,74,4,12,218,184,4,13,251,109,4,14,196,0,5,1,215,255,5,2,252,169,5,6,221,255,5,7,168,232,5,8,235,0,5,13,157,0,6,2,255,255,6,3,236,217,6,4,177,255,6,5,243,255,6,6,207,248,6,7,222,8,7,2,193,180,7,3,255,227,7,4,251,243,7,5,227,183,7,6,244,17,7,7,201,0,8,4,227,0,8,5,240,0,8,6,163,0],"secondary":false},{"width":7,"bonus":175,"chr":"!","pixels":[3,1,163,255,3,2,163,255,3,3,163,255,3,4,163,255,3,5,163,255,3,6,163,255,3,7,163,255,3,8,163,255,3,9,163,255,3,12,247,255,3,13,184,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,164,0,4,12,252,250,4,13,253,186,4,14,184,0,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,13,247,0,5,14,184,0],"secondary":false},{"width":16,"bonus":695,"chr":"@","pixels":[1,6,181,255,1,7,221,255,1,8,247,255,1,9,241,255,1,10,205,255,2,4,219,255,2,5,255,255,2,6,242,248,2,7,236,207,2,8,243,178,2,9,253,181,2,10,253,225,2,11,255,255,2,12,247,247,3,3,249,255,3,4,226,247,3,5,230,83,3,6,255,4,3,7,236,0,3,8,192,0,3,9,170,0,3,10,179,0,3,11,231,70,3,12,254,221,3,13,254,246,4,2,223,255,4,3,212,242,4,4,249,11,4,5,219,0,4,8,157,255,4,13,252,236,4,14,252,173,5,2,250,255,5,3,228,34,5,4,203,10,5,5,185,251,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,174,215,5,14,254,248,5,15,173,11,6,1,185,255,6,2,204,215,6,3,250,0,6,4,154,233,6,5,250,255,6,6,215,138,6,7,255,30,6,8,255,6,6,9,255,30,6,10,254,162,6,11,255,255,6,12,159,46,6,14,255,255,6,15,248,47,7,1,223,255,7,2,218,138,7,3,172,0,7,4,229,255,7,5,201,170,7,6,250,0,7,11,255,255,7,12,255,55,7,14,255,255,7,15,255,62,8,1,247,255,8,2,235,103,8,4,245,255,8,5,240,111,8,11,229,251,8,12,255,7,8,14,255,255,8,15,255,45,9,1,227,255,9,2,251,120,9,4,219,255,9,5,253,213,9,6,200,209,9,7,163,255,9,8,175,255,9,9,215,255,9,10,209,255,9,12,225,0,9,14,254,255,9,15,255,16,10,1,183,255,10,2,248,199,10,4,158,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,239,177,10,14,207,239,10,15,254,0,11,2,255,255,11,3,214,100,11,5,158,0,11,6,255,0,11,7,255,0,11,8,255,0,11,9,255,5,11,10,254,88,11,11,255,255,11,12,183,71,11,15,194,0,12,2,208,226,12,3,255,247,12,4,161,181,12,11,255,255,12,12,255,34,13,3,233,197,13,4,255,255,13,5,248,250,13,6,193,253,13,7,169,255,13,8,181,255,13,9,229,255,13,10,255,255,13,11,196,193,13,12,255,0,14,4,203,99,14,5,254,174,14,6,253,225,14,7,253,250,14,8,249,243,14,9,235,201,14,10,238,93,14,11,255,0,15,6,174,0,15,7,223,0,15,8,248,0,15,9,237,0,15,10,186,0],"secondary":false},{"width":13,"bonus":350,"chr":"#","pixels":[1,10,255,255,2,6,255,255,2,10,255,255,2,11,255,68,3,6,255,255,3,7,255,48,3,10,255,255,3,11,255,167,3,12,201,230,3,13,233,255,4,6,255,255,4,7,254,210,4,8,245,253,4,9,255,255,4,10,255,255,4,11,255,199,4,12,212,158,4,13,202,95,4,14,233,0,5,3,255,255,5,4,250,255,5,5,223,244,5,6,255,255,5,7,255,141,5,8,221,80,5,9,245,42,5,10,255,255,5,11,255,68,5,12,199,0,6,4,255,4,6,5,250,0,6,6,255,255,6,7,255,48,6,10,255,255,6,11,255,68,7,6,255,255,7,7,254,70,7,10,255,255,7,11,255,227,7,12,254,254,7,13,244,255,8,5,181,255,8,6,255,255,8,7,255,255,8,8,242,251,8,9,213,237,8,10,255,255,8,11,255,135,8,12,232,49,8,13,253,3,8,14,244,0,9,3,217,249,9,4,200,214,9,5,196,163,9,6,255,255,9,7,255,67,9,8,255,0,9,9,239,21,9,10,255,255,9,11,255,68,10,4,212,0,10,5,168,0,10,6,255,255,10,7,255,48,10,10,255,255,10,11,255,68,11,6,255,255,11,7,255,48,11,11,255,0,12,7,255,0],"secondary":false},{"width":10,"bonus":420,"chr":"$","pixels":[1,3,184,255,1,4,243,255,1,5,211,255,1,11,171,255,1,12,213,255,2,2,197,255,2,3,245,254,2,4,233,191,2,5,253,232,2,6,254,252,2,12,255,255,2,13,217,27,3,2,255,255,3,3,213,87,3,4,244,0,3,5,183,38,3,6,253,244,3,7,253,177,3,12,255,255,3,13,255,50,4,0,163,255,4,1,193,255,4,2,255,255,4,3,255,166,4,4,189,221,4,5,163,255,4,6,230,252,4,7,255,251,4,8,226,185,4,9,163,255,4,10,163,255,4,11,173,255,4,12,255,255,4,13,255,187,4,14,181,231,5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,164,0,6,1,254,76,6,2,255,253,6,3,255,12,6,4,255,0,6,5,255,0,6,6,255,11,6,7,254,239,6,8,255,183,6,9,255,2,6,10,255,0,6,11,255,95,6,12,255,251,6,13,255,15,6,14,255,0,6,15,255,0,7,2,255,255,7,3,253,82,7,8,255,255,7,9,241,218,7,10,177,255,7,11,247,255,7,12,199,213,7,13,251,0,8,3,255,49,8,8,190,180,8,9,254,237,8,10,252,240,8,11,226,179,8,12,248,15,8,13,166,0,9,10,236,0,9,11,237,0,9,12,158,0],"secondary":false},{"width":10,"bonus":165,"chr":"^","pixels":[1,7,193,255,1,8,253,255,2,5,205,255,2,6,249,255,2,7,186,217,2,8,204,53,2,9,254,0,3,3,217,255,3,4,239,255,3,5,175,197,3,6,210,31,3,7,249,0,3,8,158,0,4,1,227,255,4,2,224,255,4,3,168,170,4,4,219,14,4,5,239,0,5,1,235,247,5,2,251,223,5,3,237,120,6,2,238,103,6,3,249,219,6,4,247,249,7,4,227,88,7,5,252,199,7,6,254,254,7,7,186,241,8,6,209,72,8,7,254,178,8,8,254,255,9,8,189,55,9,9,254,0],"secondary":false},{"width":10,"bonus":95,"chr":"~","pixels":[1,8,213,255,2,7,241,255,2,8,177,135,2,9,213,0,3,7,255,255,3,8,246,91,4,7,215,253,4,8,254,168,5,8,254,250,5,9,173,25,6,8,255,255,6,9,251,63,7,8,255,255,7,9,255,37,8,7,175,255,8,8,194,238,8,9,255,0,9,8,176,0,9,9,181,0],"secondary":false},{"width":13,"bonus":445,"chr":"&","pixels":[1,9,227,255,1,10,249,255,1,11,213,255,2,2,178,255,2,3,241,255,2,4,195,255,2,7,185,255,2,8,254,255,2,9,228,221,2,10,246,182,2,11,254,234,2,12,255,255,3,2,252,254,3,3,232,197,3,4,253,225,3,5,252,248,3,6,186,231,3,7,248,255,3,8,205,91,3,9,254,0,3,10,197,0,3,11,181,24,3,12,251,219,3,13,255,193,4,1,227,255,4,2,207,169,4,3,252,0,4,4,181,11,4,5,245,184,4,6,255,255,4,7,215,163,4,8,248,0,4,13,252,240,4,14,193,0,5,1,247,255,5,2,237,104,5,6,255,255,5,7,254,245,5,8,168,101,5,13,249,251,5,14,237,0,6,1,217,255,6,2,253,186,6,5,249,255,6,6,176,125,6,7,255,209,6,8,254,246,6,13,230,239,6,14,246,0,7,2,255,255,7,3,255,255,7,4,255,255,7,5,182,205,7,6,250,0,7,8,246,217,7,9,254,249,7,12,237,255,7,13,204,174,7,14,215,0,8,2,165,142,8,3,255,151,8,4,254,94,8,5,255,1,8,9,247,218,8,10,254,251,8,11,223,239,8,12,241,253,8,13,240,28,9,10,255,253,9,11,255,255,9,12,236,158,9,13,240,0,10,8,163,255,10,9,247,255,10,10,243,251,10,11,254,210,10,12,254,255,10,13,192,145,11,7,255,255,11,8,244,250,11,9,217,174,11,10,248,28,11,11,241,13,11,12,244,199,11,13,255,255,12,8,255,7,12,9,240,0,12,13,236,193,12,14,255,0],"secondary":false},{"width":11,"bonus":190,"chr":"*","pixels":[2,3,255,255,2,4,184,121,3,3,237,251,3,4,255,107,3,6,208,255,3,7,234,254,4,3,163,255,4,4,249,202,4,5,249,251,4,6,227,249,4,7,229,127,4,8,233,12,5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,232,171,5,6,245,3,5,7,222,0,6,1,254,70,6,2,255,43,6,3,255,167,6,4,254,207,6,5,254,251,6,6,236,224,7,3,232,250,7,4,204,136,7,5,216,64,7,6,254,222,7,7,252,245,8,3,255,255,8,4,236,96,8,7,231,83,8,8,242,0,9,3,187,236,9,4,255,55,10,4,173,0],"secondary":false},{"width":6,"bonus":225,"chr":"(","pixels":[1,4,181,255,1,5,221,255,1,6,237,255,1,7,251,255,1,8,243,255,1,9,227,255,1,10,199,255,2,1,221,255,2,2,255,255,2,3,255,255,2,4,248,248,2,5,238,214,2,6,245,190,2,7,249,172,2,8,253,177,2,9,252,195,2,10,251,225,2,11,255,255,2,12,255,255,2,13,250,253,2,14,176,248,3,0,254,255,3,1,222,223,3,2,235,113,3,3,255,38,3,4,255,1,3,5,241,0,3,6,200,0,3,7,183,0,3,8,168,0,3,9,176,0,3,10,193,0,3,11,223,19,3,12,255,69,3,13,254,150,3,14,254,236,3,15,254,254,3,16,170,226,4,0,225,42,4,1,254,0,4,2,194,0,4,15,243,105,4,16,255,227,5,0,166,0,5,17,227,0],"secondary":false},{"width":7,"bonus":200,"chr":")","pixels":[2,15,190,255,2,16,255,255,3,0,254,249,3,1,255,255,3,2,207,246,3,12,157,255,3,13,235,255,3,14,255,255,3,15,223,240,3,16,205,76,3,17,255,0,4,1,252,126,4,2,254,219,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,253,253,4,13,226,203,4,14,242,89,4,15,255,4,4,16,210,0,5,3,222,32,5,4,255,79,5,5,255,121,5,6,255,140,5,7,255,157,5,8,255,152,5,9,255,134,5,10,255,110,5,11,255,61,5,12,255,12,5,13,252,0,5,14,180,0,6,8,157,0],"secondary":false},{"width":7,"bonus":65,"chr":"_","pixels":[0,16,255,255,1,16,255,255,1,17,255,68,2,16,255,255,2,17,255,68,3,16,255,255,3,17,255,68,4,16,255,255,4,17,255,68,5,16,255,255,5,17,255,68,6,16,255,255,6,17,255,68],"secondary":false},{"width":6,"bonus":40,"chr":"-","pixels":[1,8,255,255,2,8,255,255,2,9,255,68,3,8,255,255,3,9,255,68,4,8,255,255,4,9,255,68,5,9,255,0],"secondary":true},{"width":10,"bonus":160,"chr":"=","pixels":[1,5,255,255,1,9,255,255,2,5,255,255,2,6,255,68,2,9,255,255,2,10,255,68,3,5,255,255,3,6,255,68,3,9,255,255,3,10,255,68,4,5,255,255,4,6,255,68,4,9,255,255,4,10,255,68,5,5,255,255,5,6,255,68,5,9,255,255,5,10,255,68,6,5,255,255,6,6,255,68,6,9,255,255,6,10,255,68,7,5,255,255,7,6,255,68,7,9,255,255,7,10,255,68,8,5,255,255,8,6,255,68,8,9,255,255,8,10,255,68,9,6,255,0,9,10,255,0],"secondary":false},{"width":7,"bonus":290,"chr":"[","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,0,254,189,3,1,254,164,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,164,3,7,254,164,3,8,254,164,3,9,254,164,3,10,254,164,3,11,254,164,3,12,254,164,3,13,254,164,3,14,254,164,3,15,255,171,3,16,255,255,3,17,255,68,4,0,255,68,4,1,188,0,4,2,164,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,164,0,4,8,164,0,4,9,164,0,4,10,164,0,4,11,164,0,4,12,164,0,4,13,164,0,4,14,164,0,4,15,171,30,4,16,255,255,4,17,255,68,5,0,254,46,5,16,182,246,5,17,254,46,6,0,176,0,6,17,176,0],"secondary":false},{"width":7,"bonus":290,"chr":"]","pixels":[1,16,255,255,2,0,255,68,2,16,255,255,2,17,255,68,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,68,4,0,254,164,4,1,254,164,4,2,254,164,4,3,254,164,4,4,254,164,4,5,254,164,4,6,254,164,4,7,254,164,4,8,254,164,4,9,254,164,4,10,254,164,4,11,254,164,4,12,254,164,4,13,254,164,4,14,254,164,4,15,254,164,4,16,254,164,4,17,255,43,5,0,164,0,5,1,164,0,5,2,164,0,5,3,164,0,5,4,164,0,5,5,164,0,5,6,164,0,5,7,164,0,5,8,164,0,5,9,164,0,5,10,164,0,5,11,164,0,5,12,164,0,5,13,164,0,5,14,164,0,5,15,164,0,5,16,164,0,5,17,164,0],"secondary":false},{"width":7,"bonus":255,"chr":"{","pixels":[1,8,255,255,2,8,236,252,2,9,254,183,3,0,191,255,3,1,245,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,252,254,3,8,181,106,3,9,254,245,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,223,255,4,0,243,253,4,1,235,188,4,2,251,166,4,3,254,164,4,4,254,164,4,5,254,164,4,6,255,151,4,7,255,68,4,8,252,0,4,10,250,156,4,11,254,164,4,12,254,164,4,13,254,164,4,14,255,166,4,15,255,221,4,16,253,244,5,0,216,111,5,1,241,0,5,2,173,0,5,3,164,0,5,4,164,0,5,5,164,0,5,6,164,0,5,11,153,0,5,12,164,0,5,13,164,0,5,14,164,0,5,15,179,56,5,16,255,255,5,17,244,57,6,0,253,0,6,17,255,0],"secondary":false},{"width":6,"bonus":255,"chr":"}","pixels":[1,0,204,191,1,16,255,255,2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,243,255,2,7,157,255,2,10,245,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,220,232,2,17,255,0,3,0,178,132,3,1,255,152,3,2,254,164,3,3,254,164,3,4,254,164,3,5,254,164,3,6,254,177,3,7,254,245,3,8,213,173,3,9,251,255,3,10,221,207,3,11,251,166,3,12,254,164,3,13,254,164,3,14,255,163,3,15,255,125,3,16,255,17,3,17,200,0,4,3,164,0,4,4,164,0,4,5,164,0,4,6,164,0,4,7,199,96,4,8,255,255,4,9,196,155,4,10,251,0,4,11,179,0,4,12,164,0,4,13,164,0,4,14,164,0,4,15,163,0,5,8,166,197,5,9,255,37],"secondary":false},{"width":5,"bonus":55,"chr":":","pixels":[2,4,211,255,2,5,229,255,2,11,159,255,2,12,249,255,2,13,196,255,3,5,234,150,3,6,230,5,3,12,218,184,3,13,251,109,3,14,196,0,4,13,157,0],"secondary":true},{"width":5,"bonus":65,"chr":";","pixels":[1,15,155,255,2,4,211,255,2,5,229,255,2,12,247,255,2,13,255,255,2,14,223,249,2,15,177,190,2,16,156,0,3,5,234,150,3,6,230,5,3,13,248,40,3,14,255,0,3,15,218,0],"secondary":true},{"width":9,"bonus":130,"chr":"\\"","pixels":[2,1,229,255,2,2,205,255,2,3,181,255,2,4,159,255,3,1,253,255,3,2,253,238,3,3,247,220,3,4,237,205,3,5,222,192,4,2,254,0,4,3,236,0,4,4,213,0,4,5,190,0,4,6,167,0,5,1,185,255,5,2,163,252,6,1,255,255,6,2,255,255,6,3,254,254,6,4,245,243,6,5,231,233,7,2,255,22,7,3,255,2,7,4,253,0,7,5,233,0,7,6,211,0],"secondary":true},{"width":6,"bonus":70,"chr":"\'","pixels":[2,1,229,255,2,2,205,255,2,3,181,255,2,4,159,255,3,1,253,255,3,2,253,238,3,3,247,220,3,4,237,205,3,5,222,192,4,2,254,0,4,3,236,0,4,4,213,0,4,5,190,0,4,6,167,0],"secondary":true},{"width":10,"bonus":155,"chr":"<","pixels":[1,8,243,255,2,7,225,255,2,8,245,249,2,9,249,134,3,7,213,254,3,8,236,93,3,9,254,240,4,6,237,255,4,7,161,134,4,8,212,2,4,9,232,243,4,10,247,122,5,6,210,251,5,7,237,1,5,10,252,234,6,5,245,255,6,6,170,115,6,7,207,0,6,10,245,247,6,11,241,111,7,4,153,255,7,5,205,249,7,6,245,0,7,11,252,224,8,4,251,255,8,5,180,99,8,6,200,0,8,11,251,252,8,12,234,100,9,5,251,0,9,12,248,0],"secondary":false},{"width":10,"bonus":145,"chr":">","pixels":[1,4,251,255,1,11,249,255,2,4,168,232,2,5,254,201,2,11,225,251,2,12,249,3,3,5,251,249,3,6,216,89,3,10,237,255,3,11,182,147,3,12,222,0,4,6,252,208,4,10,232,254,4,11,237,8,5,6,246,246,5,7,221,94,5,9,219,255,5,10,176,171,5,11,231,0,6,7,252,214,6,9,238,255,6,10,221,15,7,7,238,241,7,8,252,241,7,9,172,194,7,10,238,0,8,8,254,246,8,9,239,20,9,9,245,0],"secondary":false},{"width":8,"bonus":180,"chr":"\\\\","pixels":[1,0,191,252,2,0,253,192,2,1,253,249,2,2,255,255,2,3,246,252,2,4,183,253,3,1,192,10,3,2,249,66,3,3,255,131,3,4,253,198,3,5,253,252,3,6,255,255,3,7,241,252,3,8,175,255,4,5,198,14,4,6,251,72,4,7,255,137,4,8,252,205,4,9,254,252,4,10,255,255,4,11,235,251,4,12,167,255,5,9,205,19,5,10,253,77,5,11,255,143,5,12,251,212,5,13,254,255,5,14,255,255,5,15,230,250,5,16,161,255,6,13,212,24,6,14,254,83,6,15,255,149,6,16,250,219,6,17,161,0,7,17,215,0],"secondary":false},{"width":4,"bonus":35,"chr":".","pixels":[1,11,161,255,1,12,249,255,1,13,197,255,2,12,218,181,2,13,251,105,2,14,198,0,3,13,155,0],"secondary":true},{"width":5,"bonus":55,"chr":",","pixels":[1,12,167,255,1,13,219,255,1,14,255,255,1,15,242,254,2,12,255,255,2,13,242,231,2,14,236,126,2,15,255,14,2,16,241,0,3,13,255,1,3,14,220,0],"secondary":true},{"width":10,"bonus":265,"chr":"|","pixels":[4,0,255,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,5,0,254,164,5,1,254,164,5,2,254,164,5,3,254,164,5,4,254,164,5,5,254,164,5,6,254,164,5,7,254,164,5,8,254,164,5,9,254,164,5,10,254,164,5,11,254,164,5,12,254,164,5,13,254,164,5,14,254,164,5,15,254,164,5,16,254,164,5,17,255,0,6,0,164,0,6,1,164,0,6,2,164,0,6,3,164,0,6,4,164,0,6,5,164,0,6,6,164,0,6,7,164,0,6,8,164,0,6,9,164,0,6,10,164,0,6,11,164,0,6,12,164,0,6,13,164,0,6,14,164,0,6,15,164,0,6,16,164,0,6,17,164,0],"secondary":false}],"width":17,"spacewidth":5,"shadow":true,"height":19,"basey":13}');

/***/ }),

/***/ "./src/fonts/chatbox/20pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/20pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":11,"bonus":380,"chr":"a","pixels":[1,10,221,255,1,11,247,255,1,12,215,255,2,9,255,255,2,10,254,255,2,11,250,226,2,12,254,245,2,13,255,255,2,14,180,167,3,5,225,249,3,8,199,255,3,9,244,250,3,10,255,47,3,11,254,0,3,12,223,19,3,13,253,215,3,14,255,219,4,4,209,255,4,5,214,192,4,6,220,0,4,8,251,255,4,9,232,164,4,10,240,0,4,14,254,250,4,15,219,0,5,4,241,255,5,5,233,142,5,6,161,0,5,8,255,255,5,9,253,105,5,14,240,239,5,15,249,0,6,4,245,255,6,5,249,147,6,8,255,255,6,9,255,85,6,13,223,255,6,14,205,171,6,15,225,0,7,4,203,255,7,5,254,234,7,6,167,81,7,8,255,255,7,9,255,84,7,12,187,255,7,13,189,252,7,14,224,10,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,245,226,8,14,230,179,9,6,255,175,9,7,254,204,9,8,255,208,9,9,255,208,9,10,255,208,9,11,255,208,9,12,255,208,9,13,255,208,9,14,248,214,9,15,162,0,10,7,175,0,10,8,204,0,10,9,208,0,10,10,208,0,10,11,208,0,10,12,208,0,10,13,208,0,10,14,208,0,10,15,208,0],"secondary":false},{"width":13,"bonus":460,"chr":"b","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,0,208,255,3,1,255,208,3,2,255,208,3,3,254,207,3,4,255,196,3,5,254,219,3,6,255,255,3,7,255,251,3,8,254,221,3,9,254,210,3,10,254,222,3,11,255,253,3,12,255,255,3,13,255,205,3,14,255,108,3,15,255,0,4,1,208,0,4,2,208,0,4,3,208,0,4,4,213,47,4,5,251,241,4,6,238,144,4,7,255,14,4,8,251,0,4,9,220,0,4,10,210,0,4,11,224,19,4,12,254,141,4,13,254,240,4,14,213,49,5,4,172,255,5,5,205,244,5,6,237,0,5,13,230,222,5,14,250,177,6,4,235,255,6,5,216,162,6,6,196,0,6,14,251,241,6,15,174,0,7,4,247,255,7,5,247,151,7,14,252,252,7,15,237,0,8,4,211,255,8,5,254,220,8,13,213,255,8,14,235,231,8,15,249,0,9,5,255,255,9,6,247,205,9,12,203,255,9,13,255,255,9,14,232,123,9,15,213,0,10,5,198,197,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,234,167,10,14,255,2,11,6,175,84,11,7,255,146,11,8,255,190,11,9,255,203,11,10,255,189,11,11,255,146,11,12,254,58,11,13,255,0,11,14,153,0,12,9,190,0,12,10,203,0,12,11,189,0],"secondary":false},{"width":9,"bonus":240,"chr":"c","pixels":[1,7,190,255,1,8,237,255,1,9,251,255,1,10,239,255,1,11,195,255,2,5,179,255,2,6,255,255,2,7,255,255,2,8,250,240,2,9,252,216,2,10,255,235,2,11,255,255,2,12,255,255,2,13,217,225,3,5,255,255,3,6,226,179,3,7,255,33,3,8,255,0,3,9,235,0,3,10,214,0,3,11,238,34,3,12,255,158,3,13,255,255,3,14,222,145,4,4,208,255,4,5,223,226,4,6,255,0,4,7,159,0,4,13,231,214,4,14,255,215,5,4,245,255,5,5,232,142,5,6,197,0,5,14,254,250,5,15,215,0,6,4,239,255,6,5,251,141,6,14,247,247,6,15,249,0,7,4,207,255,7,5,252,201,7,13,191,255,7,14,229,220,7,15,239,0,8,5,222,90,8,6,199,0,8,14,207,82,8,15,197,0],"secondary":false},{"width":13,"bonus":475,"chr":"d","pixels":[1,7,193,255,1,8,237,255,1,9,251,255,1,10,239,255,1,11,196,255,2,5,197,255,2,6,255,255,2,7,255,255,2,8,251,241,2,9,252,216,2,10,254,234,2,11,255,255,2,12,255,255,2,13,225,229,3,5,255,255,3,6,235,182,3,7,255,38,3,8,255,0,3,9,237,0,3,10,214,0,3,11,236,34,3,12,255,163,3,13,255,255,3,14,231,156,4,4,223,255,4,5,229,222,4,6,255,1,4,7,168,0,4,13,236,219,4,14,255,225,5,4,249,255,5,5,239,138,5,6,199,0,5,14,253,252,5,15,225,0,6,4,227,255,6,5,252,151,6,14,242,240,6,15,250,0,7,5,251,225,7,6,154,18,7,13,215,255,7,14,209,179,7,15,228,0,8,5,236,229,8,6,247,197,8,12,173,255,8,13,210,253,8,14,217,20,9,0,255,255,9,1,255,255,9,2,255,255,9,3,255,255,9,4,249,255,9,5,242,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,248,240,9,14,242,196,10,0,208,255,10,1,255,208,10,2,255,208,10,3,255,208,10,4,255,208,10,5,254,209,10,6,253,210,10,7,255,208,10,8,255,208,10,9,255,208,10,10,255,208,10,11,255,208,10,12,255,208,10,13,255,208,10,14,252,211,10,15,186,0,11,1,208,0,11,2,208,0,11,3,208,0,11,4,208,0,11,5,208,0,11,6,208,0,11,7,208,0,11,8,208,0,11,9,208,0,11,10,208,0,11,11,208,0,11,12,208,0,11,13,208,0,11,14,208,0,11,15,208,0],"secondary":false},{"width":11,"bonus":345,"chr":"e","pixels":[1,7,185,255,1,8,235,255,1,9,251,255,1,10,237,255,1,11,189,255,2,5,175,255,2,6,255,255,2,7,246,251,2,8,255,255,2,9,253,232,2,10,255,243,2,11,255,255,2,12,255,255,2,13,197,214,3,5,254,255,3,6,208,126,3,7,255,38,3,8,255,255,3,9,255,84,3,10,230,0,3,11,245,53,3,12,255,189,3,13,255,255,3,14,201,130,4,4,215,255,4,5,215,211,4,6,254,0,4,8,255,255,4,9,255,84,4,13,245,227,4,14,255,201,5,4,249,255,5,5,236,141,5,6,178,0,5,8,255,255,5,9,255,84,5,14,254,246,5,15,201,0,6,4,233,255,6,5,252,157,6,8,255,255,6,9,255,84,6,14,253,253,6,15,245,0,7,4,165,255,7,5,254,246,7,6,176,79,7,8,255,255,7,9,255,84,7,13,155,255,7,14,242,242,7,15,251,0,8,5,248,242,8,6,254,255,8,7,235,249,8,8,255,255,8,9,255,84,8,13,221,255,8,14,220,193,8,15,229,0,9,6,247,169,9,7,254,234,9,8,254,255,9,9,255,84,9,14,229,60,9,15,166,0,10,7,164,0,10,8,234,0,10,9,254,0],"secondary":false},{"width":8,"bonus":270,"chr":"f","pixels":[2,4,225,255,2,5,195,157,3,2,225,255,3,3,253,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,4,1,255,255,4,2,248,246,4,3,249,215,4,4,255,255,4,5,254,231,4,6,255,208,4,7,255,208,4,8,255,208,4,9,255,208,4,10,255,208,4,11,255,208,4,12,255,208,4,13,255,208,4,14,255,208,4,15,255,0,5,0,227,255,5,1,226,209,5,2,255,5,5,3,239,0,5,4,255,255,5,5,254,120,5,6,230,0,5,7,208,0,5,8,208,0,5,9,208,0,5,10,208,0,5,11,208,0,5,12,208,0,5,13,208,0,5,14,208,0,5,15,208,0,6,0,245,255,6,1,242,140,6,2,186,0,6,4,255,255,6,5,254,120,7,0,199,255,7,1,251,130,7,5,255,0],"secondary":false},{"width":13,"bonus":530,"chr":"g","pixels":[1,7,191,255,1,8,237,255,1,9,251,255,1,10,239,255,1,11,196,255,2,5,191,255,2,6,255,255,2,7,255,255,2,8,250,240,2,9,252,216,2,10,255,235,2,11,255,255,2,12,255,255,2,13,225,229,2,18,255,255,3,5,255,255,3,6,233,183,3,7,255,37,3,8,255,0,3,9,236,0,3,10,214,0,3,11,238,34,3,12,255,158,3,13,255,255,3,14,231,156,3,18,208,245,3,19,255,199,4,4,223,255,4,5,227,222,4,6,255,0,4,7,167,0,4,13,231,214,4,14,254,227,4,18,157,255,4,19,249,235,5,4,249,255,5,5,239,137,5,6,197,0,5,14,253,252,5,15,226,0,5,19,253,251,6,4,225,255,6,5,253,154,6,14,241,240,6,15,250,0,6,19,250,250,7,5,251,227,7,6,157,21,7,13,215,255,7,14,206,174,7,15,227,0,7,18,219,255,7,19,235,227,8,5,234,226,8,6,248,200,8,12,173,255,8,13,198,253,8,14,217,15,8,17,189,255,8,18,255,255,8,19,237,139,9,4,187,255,9,5,235,253,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,255,255,9,16,255,255,9,17,255,255,9,18,241,215,9,19,255,11,10,4,208,255,10,5,243,219,10,6,252,211,10,7,255,208,10,8,255,208,10,9,255,208,10,10,255,208,10,11,255,208,10,12,255,208,10,13,255,208,10,14,255,208,10,15,255,202,10,16,255,175,10,17,255,104,10,18,255,8,10,19,203,0,11,5,208,0,11,6,208,0,11,7,208,0,11,8,208,0,11,9,208,0,11,10,208,0,11,11,208,0,11,12,208,0,11,13,208,0,11,14,208,0,11,15,208,0,11,16,202,0,11,17,175,0],"secondary":false},{"width":13,"bonus":435,"chr":"h","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,0,208,255,3,1,255,208,3,2,255,208,3,3,255,208,3,4,255,203,3,5,255,215,3,6,255,255,3,7,255,251,3,8,254,221,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,208,0,4,2,208,0,4,3,208,0,4,4,215,43,4,5,250,238,4,6,236,148,4,7,255,14,4,8,251,0,4,9,220,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,4,172,255,5,5,203,245,5,6,233,0,6,4,237,255,6,5,216,162,6,6,195,0,7,4,241,255,7,5,248,150,8,4,203,255,8,5,254,240,8,6,167,75,9,5,255,255,9,6,254,255,9,7,231,249,9,8,208,255,9,9,208,255,9,10,208,255,9,11,208,255,9,12,208,255,9,13,208,255,9,14,208,255,10,5,160,169,10,6,255,211,10,7,254,249,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,208,0,11,7,211,0,11,8,248,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0],"secondary":false},{"width":6,"bonus":205,"chr":"i","pixels":[2,0,205,255,2,1,229,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,0,155,255,3,1,240,190,3,2,230,9,3,4,208,255,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,156,0,4,2,179,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0],"secondary":false},{"width":6,"bonus":280,"chr":"j","pixels":[0,19,253,251,1,18,208,255,1,19,239,238,2,0,205,255,2,1,229,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,231,137,3,0,155,255,3,1,240,190,3,2,230,9,3,4,208,255,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,208,3,16,254,207,3,17,255,178,3,18,255,99,3,19,255,2,4,1,156,0,4,2,179,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,4,16,208,0,4,17,206,0,4,18,178,0],"secondary":false},{"width":11,"bonus":400,"chr":"k","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,0,208,255,3,1,255,208,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,241,3,10,254,251,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,208,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,230,134,4,9,254,252,4,10,246,94,4,11,250,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,7,163,255,5,8,255,255,5,9,254,254,5,10,252,133,6,6,184,255,6,7,254,255,6,8,208,154,6,9,254,204,6,10,255,255,6,11,227,222,7,5,202,255,7,6,250,255,7,7,209,110,7,8,254,0,7,10,233,156,7,11,255,255,7,12,251,243,8,4,217,255,8,5,246,254,8,6,218,87,8,7,250,0,8,11,175,109,8,12,254,237,8,13,255,255,8,14,190,211,9,4,239,255,9,5,226,66,9,6,246,0,9,13,250,197,9,14,255,255,9,15,157,0,10,5,239,0,10,14,224,147,10,15,255,0],"secondary":false},{"width":6,"bonus":230,"chr":"l","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,0,208,255,3,1,255,208,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,208,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0],"secondary":false},{"width":19,"bonus":580,"chr":"m","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,5,255,205,3,6,255,255,3,7,255,251,3,8,254,221,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,5,245,243,4,6,231,144,4,7,255,12,4,8,251,0,4,9,220,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,4,172,255,5,5,198,243,5,6,233,0,6,4,239,255,6,5,216,159,6,6,189,0,7,4,245,255,7,5,249,159,8,4,203,255,8,5,254,249,8,6,190,121,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,10,5,167,190,10,6,255,255,10,7,254,251,10,8,255,223,10,9,255,208,10,10,255,208,10,11,255,208,10,12,255,208,10,13,255,208,10,14,255,208,10,15,255,0,11,5,249,255,11,6,191,174,11,7,255,11,11,8,250,0,11,9,223,0,11,10,208,0,11,11,208,0,11,12,208,0,11,13,208,0,11,14,208,0,11,15,208,0,12,4,181,255,12,5,201,238,12,6,249,0,13,4,239,255,13,5,219,155,13,6,188,0,14,4,239,255,14,5,249,159,15,4,197,255,15,5,254,249,15,6,191,123,16,5,254,255,16,6,255,255,16,7,255,255,16,8,255,255,16,9,255,255,16,10,255,255,16,11,255,255,16,12,255,255,16,13,255,255,16,14,255,255,17,6,254,164,17,7,254,201,17,8,255,208,17,9,255,208,17,10,255,208,17,11,255,208,17,12,255,208,17,13,255,208,17,14,255,208,17,15,255,0,18,7,164,0,18,8,200,0,18,9,208,0,18,10,208,0,18,11,208,0,18,12,208,0,18,13,208,0,18,14,208,0,18,15,208,0],"secondary":false},{"width":13,"bonus":370,"chr":"n","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,5,255,205,3,6,255,255,3,7,255,251,3,8,254,221,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,5,245,243,4,6,232,148,4,7,255,13,4,8,251,0,4,9,220,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,4,167,255,5,5,202,245,5,6,233,0,6,4,235,255,6,5,215,163,6,6,194,0,7,4,241,255,7,5,247,151,8,4,205,255,8,5,254,240,8,6,167,75,9,5,255,255,9,6,254,255,9,7,231,249,9,8,208,255,9,9,208,255,9,10,208,255,9,11,208,255,9,12,208,255,9,13,208,255,9,14,208,255,10,5,159,167,10,6,255,209,10,7,254,249,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,208,0,11,7,209,0,11,8,248,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0],"secondary":false},{"width":12,"bonus":370,"chr":"o","pixels":[1,7,189,255,1,8,237,255,1,9,249,255,1,10,231,255,1,11,177,255,2,5,172,255,2,6,255,255,2,7,255,255,2,8,250,240,2,9,252,218,2,10,254,239,2,11,255,255,2,12,255,255,2,13,183,213,3,5,255,255,3,6,227,190,3,7,255,32,3,8,255,0,3,9,235,0,3,10,215,0,3,11,241,43,3,12,254,174,3,13,255,255,3,14,189,126,4,4,203,255,4,5,228,233,4,6,255,4,4,7,169,0,4,13,240,220,4,14,255,199,5,4,243,255,5,5,232,155,5,6,208,0,5,14,252,245,5,15,199,0,6,4,245,255,6,5,250,137,6,14,250,250,6,15,242,0,7,4,201,255,7,5,253,211,7,13,209,255,7,14,230,224,7,15,245,0,8,5,255,255,8,6,240,186,8,12,177,255,8,13,255,255,8,14,227,113,8,15,202,0,9,5,194,204,9,6,255,255,9,7,255,255,9,8,240,253,9,9,215,255,9,10,239,255,9,11,255,255,9,12,255,255,9,13,226,182,9,14,255,1,10,6,186,111,10,7,255,184,10,8,254,237,10,9,255,251,10,10,252,238,10,11,251,188,10,12,255,85,10,13,255,0,10,14,161,0,11,8,184,0,11,9,236,0,11,10,251,0,11,11,235,0,11,12,185,0],"secondary":false},{"width":13,"bonus":460,"chr":"p","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,255,255,3,5,255,207,3,6,255,255,3,7,255,249,3,8,254,216,3,9,255,209,3,10,254,225,3,11,255,253,3,12,255,255,3,13,254,221,3,14,255,196,3,15,255,207,3,16,255,208,3,17,255,208,3,18,255,208,3,19,255,208,4,5,244,241,4,6,232,143,4,7,255,10,4,8,249,0,4,9,216,0,4,10,209,0,4,11,226,22,4,12,254,149,4,13,255,239,4,14,225,44,4,15,196,0,4,16,207,0,4,17,208,0,4,18,208,0,4,19,208,0,5,4,165,255,5,5,202,246,5,6,231,0,5,13,233,223,5,14,250,176,6,4,235,255,6,5,213,165,6,6,195,0,6,14,251,241,6,15,172,0,7,4,247,255,7,5,246,142,7,14,252,252,7,15,237,0,8,4,213,255,8,5,254,222,8,13,221,255,8,14,235,231,8,15,249,0,9,5,255,255,9,6,249,214,9,12,213,255,9,13,255,255,9,14,236,119,9,15,213,0,10,5,201,199,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,237,161,10,14,255,2,11,6,179,84,11,7,255,147,11,8,255,190,11,9,255,203,11,10,255,189,11,11,254,144,11,12,255,55,11,13,255,0,12,9,190,0,12,10,203,0,12,11,189,0],"secondary":false},{"width":13,"bonus":480,"chr":"q","pixels":[1,7,193,255,1,8,237,255,1,9,251,255,1,10,239,255,1,11,196,255,2,5,193,255,2,6,255,255,2,7,255,255,2,8,251,241,2,9,252,216,2,10,254,234,2,11,255,255,2,12,255,255,2,13,226,229,3,5,255,255,3,6,234,185,3,7,255,40,3,8,255,0,3,9,237,0,3,10,214,0,3,11,237,34,3,12,255,160,3,13,255,255,3,14,232,157,4,4,221,255,4,5,229,222,4,6,255,1,4,7,170,0,4,13,233,215,4,14,255,227,5,4,249,255,5,5,238,138,5,6,199,0,5,14,253,252,5,15,227,0,6,4,227,255,6,5,252,153,6,14,240,240,6,15,250,0,7,5,251,225,7,6,156,20,7,13,213,255,7,14,206,177,7,15,226,0,8,5,233,224,8,6,246,199,8,12,169,255,8,13,204,254,8,14,215,18,9,4,181,255,9,5,231,254,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,252,248,9,14,254,252,9,15,255,255,9,16,255,255,9,17,255,255,9,18,255,255,9,19,255,255,10,4,208,255,10,5,242,220,10,6,251,212,10,7,255,208,10,8,255,208,10,9,255,208,10,10,255,208,10,11,255,208,10,12,255,208,10,13,255,208,10,14,254,209,10,15,255,208,10,16,255,208,10,17,255,208,10,18,255,208,10,19,255,208,11,5,208,0,11,6,208,0,11,7,208,0,11,8,208,0,11,9,208,0,11,10,208,0,11,11,208,0,11,12,208,0,11,13,208,0,11,14,208,0,11,15,208,0,11,16,208,0,11,17,208,0,11,18,208,0,11,19,208,0],"secondary":false},{"width":9,"bonus":210,"chr":"r","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,5,255,169,3,6,255,255,3,7,255,255,3,8,255,225,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,5,231,224,4,6,234,210,4,7,255,40,4,8,255,0,4,9,225,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,5,225,253,5,6,205,13,5,7,193,0,6,4,235,255,6,5,207,169,6,6,223,0,7,4,245,255,7,5,246,142,8,5,245,24],"secondary":false},{"width":10,"bonus":280,"chr":"s","pixels":[1,5,154,255,1,6,245,255,1,7,227,255,1,13,255,255,2,5,255,255,2,6,245,239,2,7,254,249,2,8,254,249,2,13,205,246,2,14,255,203,3,4,203,255,3,5,225,229,3,6,255,3,3,7,234,58,3,8,255,253,3,9,251,152,3,14,250,238,3,15,203,0,4,4,237,255,4,5,229,147,4,6,202,0,4,8,190,232,4,9,255,243,4,10,155,22,4,14,252,252,4,15,234,0,5,4,245,255,5,5,247,139,5,9,255,255,5,10,248,112,5,14,240,240,5,15,249,0,6,4,217,255,6,5,252,177,6,9,229,245,6,10,255,233,6,13,235,255,6,14,222,202,6,15,226,0,7,4,158,255,7,5,254,246,7,6,178,11,7,10,255,255,7,11,255,255,7,12,255,255,7,13,253,255,7,14,240,65,7,15,176,0,8,5,179,82,8,6,245,0,8,11,254,195,8,12,255,185,8,13,255,78,8,14,253,0,9,12,194,0,9,13,185,0],"secondary":false},{"width":8,"bonus":230,"chr":"t","pixels":[1,4,181,255,2,3,158,255,2,4,255,255,2,5,247,237,2,6,231,230,2,7,208,255,2,8,208,255,2,9,208,255,2,10,208,255,2,11,205,255,2,12,181,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,182,184,4,3,255,0,4,4,255,255,4,5,254,120,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,2,4,12,255,43,4,13,254,216,4,14,255,225,5,4,255,255,5,5,254,120,5,14,253,250,5,15,225,0,6,4,255,255,6,5,254,120,6,14,235,234,6,15,248,0,7,5,255,0,7,15,216,0],"secondary":false},{"width":13,"bonus":370,"chr":"u","pixels":[2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,249,255,2,12,213,255,3,4,208,255,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,254,225,3,12,254,255,3,13,255,255,3,14,164,150,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,229,50,4,13,254,237,4,14,254,207,5,13,163,225,5,14,254,244,5,15,206,0,6,14,247,245,6,15,243,0,7,13,193,255,7,14,217,206,7,15,238,0,8,13,235,255,8,14,204,50,8,15,175,0,9,4,208,255,9,5,208,255,9,6,208,255,9,7,208,255,9,8,208,255,9,9,208,255,9,10,221,255,9,11,251,255,9,12,255,255,9,13,235,229,9,14,247,150,10,4,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,11,5,255,0,11,6,255,0,11,7,255,0,11,8,255,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0],"secondary":false},{"width":10,"bonus":275,"chr":"v","pixels":[0,4,209,255,1,4,251,255,1,5,255,255,1,6,253,253,1,7,188,245,2,5,252,106,2,6,255,195,2,7,254,255,2,8,255,255,2,9,244,250,2,10,157,251,3,7,202,38,3,8,255,118,3,9,255,207,3,10,255,255,3,11,255,255,3,12,228,246,4,10,215,48,4,11,255,123,4,12,255,201,4,13,254,252,4,14,254,255,5,12,209,204,5,13,252,244,5,14,255,255,5,15,254,0,6,9,167,255,6,10,245,255,6,11,255,255,6,12,247,252,6,13,223,184,6,14,244,70,6,15,255,0,7,6,154,255,7,7,237,255,7,8,255,255,7,9,254,255,7,10,233,208,7,11,248,98,7,12,255,12,7,13,244,0,7,14,161,0,8,4,227,255,8,5,255,255,8,6,255,255,8,7,241,232,8,8,246,129,8,9,255,31,8,10,254,0,8,11,190,0,9,4,239,255,9,5,244,160,9,6,254,58,9,7,255,0,9,8,219,0],"secondary":false},{"width":16,"bonus":500,"chr":"w","pixels":[0,4,166,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,220,250,2,5,255,107,2,6,255,171,2,7,254,234,2,8,255,255,2,9,255,255,2,10,252,254,2,11,200,252,3,7,171,2,3,8,238,47,3,9,255,108,3,10,255,172,3,11,254,233,3,12,255,255,3,13,255,255,3,14,244,252,4,11,200,107,4,12,247,177,4,13,255,251,4,14,255,255,4,15,241,0,5,9,197,255,5,10,253,255,5,11,255,255,5,12,242,248,5,13,223,182,5,14,252,80,5,15,255,0,6,6,217,255,6,7,255,255,6,8,255,255,6,9,237,238,6,10,230,158,6,11,254,62,6,12,255,3,6,13,235,0,6,14,159,0,7,4,255,255,7,5,253,255,7,6,217,204,7,7,234,120,7,8,255,42,7,9,255,0,7,10,222,0,8,4,245,255,8,5,255,255,8,6,255,245,8,7,233,206,8,8,177,171,9,5,248,76,9,6,254,150,9,7,254,226,9,8,255,255,9,9,255,255,9,10,229,249,10,8,230,52,10,9,255,123,10,10,255,197,10,11,255,251,10,12,255,255,10,13,248,252,10,14,181,251,11,11,211,73,11,12,254,173,11,13,255,251,11,14,255,255,11,15,178,0,12,9,179,255,12,10,239,255,12,11,255,255,12,12,255,255,12,13,248,240,12,14,254,167,12,15,255,0,13,5,173,255,13,6,237,255,13,7,255,255,13,8,255,255,13,9,251,252,13,10,234,205,13,11,247,122,13,12,255,49,13,13,255,1,13,14,234,0,13,15,166,0,14,4,255,255,14,5,255,255,14,6,240,223,14,7,247,145,14,8,255,71,14,9,255,9,14,10,248,0,14,11,188,0,15,5,255,24,15,6,255,0,15,7,210,0],"secondary":false},{"width":11,"bonus":300,"chr":"x","pixels":[1,4,247,255,1,13,155,255,1,14,255,255,2,4,215,255,2,5,255,255,2,6,218,221,2,12,221,255,2,13,255,255,2,14,223,199,2,15,255,0,3,5,237,149,3,6,254,252,3,7,251,243,3,11,253,255,3,12,241,251,3,13,234,98,3,14,255,0,3,15,174,0,4,6,164,85,4,7,254,215,4,8,255,255,4,9,242,248,4,10,255,255,4,11,220,207,4,12,253,24,4,13,237,0,5,8,254,252,5,9,255,255,5,10,253,231,5,11,255,38,5,12,178,0,6,6,159,255,6,7,255,255,6,8,232,243,6,9,253,128,6,10,254,245,6,11,254,246,7,5,229,255,7,6,255,255,7,7,217,181,7,8,255,12,7,9,221,0,7,11,252,200,7,12,255,255,7,13,223,226,8,4,255,255,8,5,238,248,8,6,236,81,8,7,255,0,8,8,154,0,8,12,225,140,8,13,254,251,8,14,252,248,9,4,171,255,9,5,255,19,9,6,231,0,9,14,254,215,9,15,246,0,10,5,171,0,10,15,214,0],"secondary":false},{"width":10,"bonus":350,"chr":"y","pixels":[0,4,243,255,0,5,164,247,0,19,227,255,1,4,221,255,1,5,255,255,1,6,255,255,1,7,224,245,1,19,251,251,2,5,229,68,2,6,255,155,2,7,254,240,2,8,255,255,2,9,252,253,2,10,179,246,2,18,221,255,2,19,233,229,3,7,158,13,3,8,245,91,3,9,255,181,3,10,255,251,3,11,255,255,3,12,234,246,3,17,225,255,3,18,255,255,3,19,233,94,4,10,187,29,4,11,253,105,4,12,255,181,4,13,254,246,4,14,254,254,4,15,248,254,4,16,255,255,4,17,242,246,4,18,237,99,4,19,255,0,5,12,224,232,5,13,254,254,5,14,254,255,5,15,254,194,5,16,250,99,5,17,255,10,5,18,234,0,6,9,211,255,6,10,255,255,6,11,255,255,6,12,236,235,6,13,228,140,6,14,253,32,6,15,254,0,6,16,193,0,7,6,202,255,7,7,255,255,7,8,255,255,7,9,246,246,7,10,238,163,7,11,255,57,7,12,255,0,7,13,218,0,8,4,253,255,8,5,255,255,8,6,253,253,8,7,239,190,8,8,255,84,8,9,255,7,8,10,238,0,9,4,203,255,9,5,254,111,9,6,255,21,9,7,251,0,9,8,178,0],"secondary":false},{"width":10,"bonus":305,"chr":"z","pixels":[1,13,202,255,1,14,255,255,2,4,255,255,2,12,239,255,2,13,255,255,2,14,255,255,2,15,255,0,3,4,255,255,3,5,254,120,3,11,255,255,3,12,255,255,3,13,253,225,3,14,255,255,3,15,255,0,4,4,255,255,4,5,254,120,4,9,207,255,4,10,255,255,4,11,243,238,4,12,255,72,4,13,254,120,4,14,255,255,4,15,255,0,5,4,255,255,5,5,254,120,5,8,243,255,5,9,255,255,5,10,236,168,5,11,255,15,5,12,227,0,5,13,157,195,5,14,255,255,5,15,255,0,6,4,255,255,6,5,255,129,6,6,203,197,6,7,255,255,6,8,237,244,6,9,247,75,6,10,255,0,6,11,156,0,6,14,255,255,6,15,255,0,7,4,255,255,7,5,255,251,7,6,255,255,7,7,216,184,7,8,255,15,7,9,227,0,7,14,255,255,7,15,255,0,8,4,255,255,8,5,255,227,8,6,252,73,8,7,255,0,8,8,156,0,8,14,255,255,8,15,255,0,9,5,255,0,9,6,227,0,9,15,255,0],"secondary":false},{"width":13,"bonus":415,"chr":"A","pixels":[0,14,205,255,1,11,155,255,1,12,243,255,1,13,255,255,1,14,248,251,1,15,205,0,2,9,207,255,2,10,255,255,2,11,255,255,2,12,233,218,2,13,248,103,2,14,255,13,2,15,244,0,3,6,158,255,3,7,243,255,3,8,255,255,3,9,255,255,3,10,244,208,3,11,255,43,3,12,255,0,3,13,199,0,4,4,209,255,4,5,255,255,4,6,252,254,4,7,227,203,4,8,247,84,4,9,255,255,4,10,254,156,4,11,199,0,5,1,160,255,5,2,245,255,5,3,255,255,5,4,232,237,5,5,232,136,5,6,255,28,5,7,252,0,5,8,181,0,5,9,255,255,5,10,254,156,5,11,156,0,6,1,255,255,6,2,253,253,6,3,251,143,6,4,255,20,6,5,216,0,6,9,255,255,6,10,254,156,6,11,156,0,7,2,254,204,7,3,255,255,7,4,253,253,7,5,185,247,7,9,255,255,7,10,254,156,7,11,156,0,8,3,214,60,8,4,255,151,8,5,255,241,8,6,255,255,8,7,240,248,8,9,255,255,8,10,254,156,8,11,156,0,9,5,155,18,9,6,246,103,9,7,254,201,9,8,255,255,9,9,255,255,9,10,255,229,9,11,202,150,10,8,209,56,10,9,255,148,10,10,254,240,10,11,255,255,10,12,253,253,10,13,182,245,11,11,245,99,11,12,255,197,11,13,255,255,11,14,255,255,12,13,206,53,12,14,255,145,12,15,255,0],"secondary":false},{"width":13,"bonus":540,"chr":"B","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,254,215,3,7,255,255,3,8,255,223,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,254,231,3,14,255,255,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,215,43,4,7,255,255,4,8,255,84,4,9,223,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,229,134,4,14,255,255,4,15,255,0,5,1,255,255,5,2,254,120,5,7,255,255,5,8,255,84,5,14,255,255,5,15,255,0,6,1,251,255,6,2,255,122,6,7,255,255,6,8,255,85,6,14,255,255,6,15,255,0,7,1,239,255,7,2,253,138,7,7,255,255,7,8,255,107,7,14,252,252,7,15,255,0,8,1,209,255,8,2,251,192,8,7,255,255,8,8,255,160,8,13,193,255,8,14,239,234,8,15,249,0,9,2,254,255,9,3,216,123,9,6,223,255,9,7,202,210,9,8,255,247,9,9,185,91,9,13,255,255,9,14,229,167,9,15,220,0,10,2,252,250,10,3,255,255,10,4,255,255,10,5,255,255,10,6,225,247,10,7,226,20,10,8,242,231,10,9,255,255,10,10,234,248,10,11,237,255,10,12,255,255,10,13,244,248,10,14,255,29,11,3,252,175,11,4,254,198,11,5,255,151,11,6,255,27,11,7,218,0,11,9,244,188,11,10,255,239,11,11,253,244,11,12,249,184,11,13,255,42,11,14,237,0,12,4,173,0,12,5,198,0,12,10,180,0,12,11,239,0,12,12,242,0,12,13,180,0],"secondary":false},{"width":13,"bonus":345,"chr":"C","pixels":[1,5,155,255,1,6,215,255,1,7,243,255,1,8,247,255,1,9,225,255,1,10,173,255,2,4,255,255,2,5,255,255,2,6,250,249,2,7,249,222,2,8,253,217,2,9,254,243,2,10,255,255,2,11,255,255,2,12,213,232,3,3,255,255,3,4,231,218,3,5,255,66,3,6,255,3,3,7,244,0,3,8,217,0,3,9,215,2,3,10,245,58,3,11,254,183,3,12,255,255,3,13,241,211,4,2,255,255,4,3,220,201,4,4,255,4,4,5,198,0,4,12,226,174,4,13,255,255,4,14,219,108,5,2,244,252,5,3,255,18,5,4,173,0,5,13,247,243,5,14,254,183,6,1,213,255,6,2,219,195,6,3,241,0,6,13,165,250,6,14,253,234,6,15,182,0,7,1,241,255,7,2,235,141,7,3,168,0,7,14,254,252,7,15,232,0,8,1,243,255,8,2,249,139,8,14,252,253,8,15,251,0,9,1,221,255,9,2,251,172,9,13,155,255,9,14,243,242,9,15,250,0,10,1,179,255,10,2,253,239,10,3,170,6,10,13,203,255,10,14,226,204,10,15,231,0,11,2,231,193,11,3,238,17,11,14,217,79,11,15,181,0,12,3,175,0],"secondary":false},{"width":14,"bonus":520,"chr":"D","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,254,231,3,14,255,255,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,229,134,4,14,255,255,4,15,255,0,5,1,255,255,5,2,254,120,5,14,255,255,5,15,255,0,6,1,249,255,6,2,255,129,6,14,249,250,6,15,255,0,7,1,229,255,7,2,253,161,7,13,173,255,7,14,238,235,7,15,244,0,8,1,178,255,8,2,252,232,8,3,162,9,8,13,241,255,8,14,225,183,8,15,220,0,9,2,255,255,9,3,243,142,9,12,161,255,9,13,255,255,9,14,245,69,9,15,162,0,10,2,214,230,10,3,255,255,10,4,213,199,10,11,184,255,10,12,255,255,10,13,223,194,10,14,255,0,11,3,239,204,11,4,255,255,11,5,255,255,11,6,242,252,11,7,215,255,11,8,217,255,11,9,243,255,11,10,255,255,11,11,255,255,11,12,231,189,11,13,255,11,11,14,170,0,12,4,213,102,12,5,255,175,12,6,255,227,12,7,254,249,12,8,253,246,12,9,249,225,12,10,250,165,12,11,255,66,12,12,255,0,12,13,171,0,13,6,175,0,13,7,227,0,13,8,248,0,13,9,244,0,13,10,220,0,13,11,162,0],"secondary":false},{"width":11,"bonus":375,"chr":"E","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,254,215,3,7,255,255,3,8,255,223,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,254,231,3,14,255,255,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,215,43,4,7,255,255,4,8,255,84,4,9,223,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,229,134,4,14,255,255,4,15,255,0,5,1,255,255,5,2,254,120,5,7,255,255,5,8,255,84,5,14,255,255,5,15,255,0,6,1,255,255,6,2,254,120,6,7,255,255,6,8,255,84,6,14,255,255,6,15,255,0,7,1,255,255,7,2,254,120,7,7,255,255,7,8,255,84,7,14,255,255,7,15,255,0,8,1,255,255,8,2,254,120,8,7,255,255,8,8,255,84,8,14,255,255,8,15,255,0,9,1,255,255,9,2,254,120,9,8,255,42,9,14,255,255,9,15,255,0,10,2,255,0,10,15,255,0],"secondary":false},{"width":11,"bonus":320,"chr":"F","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,254,215,3,8,255,255,3,9,255,223,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,215,43,4,8,255,255,4,9,255,84,4,10,223,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,1,255,255,5,2,254,120,5,8,255,255,5,9,255,84,6,1,255,255,6,2,254,120,6,8,255,255,6,9,255,84,7,1,255,255,7,2,254,120,7,8,255,255,7,9,255,84,8,1,255,255,8,2,254,120,8,8,255,255,8,9,255,84,9,1,255,255,9,2,254,120,9,9,255,42,10,2,255,0],"secondary":false},{"width":14,"bonus":475,"chr":"G","pixels":[1,6,213,255,1,7,241,255,1,8,247,255,1,9,225,255,1,10,169,255,2,4,253,255,2,5,255,255,2,6,251,249,2,7,249,222,2,8,252,218,2,9,254,243,2,10,255,255,2,11,255,255,2,12,204,229,3,3,255,255,3,4,230,227,3,5,253,70,3,6,255,4,3,7,245,0,3,8,217,0,3,9,216,2,3,10,244,60,3,11,254,186,3,12,255,255,3,13,236,202,4,2,251,255,4,3,220,217,4,4,255,7,4,5,205,0,4,12,230,181,4,13,255,255,4,14,209,101,5,2,248,254,5,3,251,26,5,4,187,0,5,13,250,246,5,14,254,177,6,1,205,255,6,2,219,209,6,3,247,0,6,13,176,248,6,14,254,230,6,15,176,0,7,1,233,255,7,2,232,148,7,3,179,0,7,14,253,251,7,15,229,0,8,1,249,255,8,2,244,133,8,7,255,255,8,14,253,253,8,15,249,0,9,1,229,255,9,2,252,151,9,7,255,255,9,8,255,84,9,14,246,246,9,15,251,0,10,1,202,255,10,2,248,199,10,7,255,255,10,8,255,84,10,13,191,255,10,14,235,226,10,15,238,0,11,2,253,252,11,3,196,13,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,230,172,11,15,208,0,12,2,166,95,12,3,250,0,12,7,215,247,12,8,255,208,12,9,255,208,12,10,255,208,12,11,255,208,12,12,255,208,12,13,255,208,12,14,255,84,12,15,155,0,13,8,208,0,13,9,208,0,13,10,208,0,13,11,208,0,13,12,208,0,13,13,208,0,13,14,208,0],"secondary":false},{"width":15,"bonus":490,"chr":"H","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,208,255,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,254,215,3,7,255,255,3,8,255,223,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,215,43,4,7,255,255,4,8,255,84,4,9,223,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,7,255,255,5,8,255,84,6,7,255,255,6,8,255,84,7,7,255,255,7,8,255,84,8,7,255,255,8,8,255,84,9,7,255,255,9,8,255,84,10,7,255,255,10,8,255,84,11,1,208,255,11,2,208,255,11,3,208,255,11,4,208,255,11,5,208,255,11,6,213,255,11,7,255,255,11,8,255,223,11,9,224,237,11,10,208,255,11,11,208,255,11,12,208,255,11,13,208,255,11,14,208,255,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,12,13,255,255,12,14,255,255,12,15,208,0,13,2,255,0,13,3,255,0,13,4,255,0,13,5,255,0,13,6,255,0,13,7,255,0,13,8,255,0,13,9,255,0,13,10,255,0,13,11,255,0,13,12,255,0,13,13,255,0,13,14,255,0,13,15,255,0],"secondary":false},{"width":7,"bonus":265,"chr":"I","pixels":[1,1,255,255,1,14,255,255,2,1,255,255,2,2,255,80,2,14,255,255,2,15,255,0,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,0,4,1,255,255,4,2,254,227,4,3,255,208,4,4,255,208,4,5,255,208,4,6,255,208,4,7,255,208,4,8,255,208,4,9,255,208,4,10,255,208,4,11,255,208,4,12,255,208,4,13,255,225,4,14,255,255,4,15,255,0,5,1,255,255,5,2,255,47,5,3,226,0,5,4,208,0,5,5,208,0,5,6,208,0,5,7,208,0,5,8,208,0,5,9,208,0,5,10,208,0,5,11,208,0,5,12,208,0,5,13,216,51,5,14,255,255,5,15,255,0,6,2,255,0,6,15,255,0],"secondary":false},{"width":6,"bonus":290,"chr":"J","pixels":[0,18,255,255,0,19,255,74,1,17,196,255,1,18,252,254,1,19,255,24,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,226,149,2,19,252,0,3,1,208,255,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,197,3,16,254,162,3,17,255,68,3,18,255,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,4,16,197,0,4,17,162,0],"secondary":false},{"width":12,"bonus":435,"chr":"K","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,208,255,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,217,3,8,255,255,3,9,255,231,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,211,20,4,7,244,206,4,8,250,230,4,9,255,25,4,10,231,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,6,211,255,5,7,255,255,5,8,235,183,5,9,227,7,6,5,223,255,6,6,241,253,6,7,248,222,6,8,255,255,6,9,237,219,7,4,233,255,7,5,236,252,7,6,230,53,7,7,241,11,7,8,240,169,7,9,255,255,7,10,252,242,8,3,241,255,8,4,230,248,8,5,237,40,8,6,233,0,8,9,194,123,8,10,254,245,8,11,255,255,8,12,176,204,9,2,247,255,9,3,224,243,9,4,243,30,9,5,224,0,9,11,252,212,9,12,255,255,9,13,229,220,10,1,253,255,10,2,220,235,10,3,248,20,10,4,214,0,10,12,237,166,10,13,255,255,10,14,250,240,11,1,189,255,11,2,253,12,11,3,202,0,11,13,189,120,11,14,254,243,11,15,236,0],"secondary":false},{"width":11,"bonus":300,"chr":"L","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,208,255,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,237,3,14,255,255,3,15,255,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,236,168,4,14,255,255,4,15,255,0,5,13,155,255,5,14,255,255,5,15,255,0,6,13,155,255,6,14,255,255,6,15,255,0,7,13,155,255,7,14,255,255,7,15,255,0,8,13,155,255,8,14,255,255,8,15,255,0,9,13,155,255,9,14,255,255,9,15,255,0,10,14,156,0,10,15,255,0],"secondary":false},{"width":18,"bonus":715,"chr":"M","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,252,3,3,254,210,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,245,255,4,2,255,255,4,3,254,228,4,4,234,150,4,5,216,53,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,2,248,98,5,3,254,189,5,4,255,253,5,5,255,255,5,6,217,245,6,4,195,35,6,5,254,119,6,6,255,211,6,7,255,255,6,8,253,253,6,9,191,246,7,7,219,56,7,8,255,141,7,9,255,231,7,10,255,255,7,11,247,251,7,12,165,249,8,10,238,77,8,11,255,165,8,12,255,245,8,13,255,255,8,14,235,247,9,11,176,210,9,12,248,242,9,13,255,255,9,14,254,219,9,15,228,0,10,9,211,255,10,10,255,255,10,11,239,251,10,12,208,180,10,13,240,58,10,14,255,0,10,15,218,0,11,6,184,255,11,7,251,255,11,8,248,254,11,9,208,207,11,10,223,87,11,11,255,5,11,12,235,0,12,3,157,255,12,4,241,255,12,5,254,255,12,6,213,229,12,7,211,120,12,8,252,15,12,9,247,0,12,10,169,0,13,1,221,255,13,2,255,255,13,3,223,244,13,4,203,152,13,5,243,32,13,6,254,0,13,7,191,0,14,1,255,255,14,2,254,249,14,3,255,208,14,4,248,214,14,5,231,230,14,6,214,249,14,7,208,255,14,8,208,255,14,9,208,255,14,10,208,255,14,11,208,255,14,12,208,255,14,13,208,255,14,14,208,255,15,1,255,255,15,2,255,255,15,3,255,255,15,4,255,255,15,5,255,255,15,6,255,255,15,7,255,255,15,8,255,255,15,9,255,255,15,10,255,255,15,11,255,255,15,12,255,255,15,13,255,255,15,14,255,255,15,15,208,0,16,2,255,0,16,3,255,0,16,4,255,0,16,5,255,0,16,6,255,0,16,7,255,0,16,8,255,0,16,9,255,0,16,10,255,0,16,11,255,0,16,12,255,0,16,13,255,0,16,14,255,0,16,15,255,0],"secondary":false},{"width":16,"bonus":555,"chr":"N","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,255,255,3,3,254,233,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,165,255,4,2,255,255,4,3,254,246,4,4,242,119,4,5,208,2,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,2,190,98,5,3,255,225,5,4,255,255,5,5,223,226,6,4,242,154,6,5,255,253,6,6,253,249,7,5,170,84,7,6,255,213,7,7,255,255,7,8,225,226,8,7,234,138,8,8,255,249,8,9,253,250,9,9,254,198,9,10,255,255,9,11,227,227,10,10,221,122,10,11,255,241,10,12,254,250,11,12,250,179,11,13,255,255,11,14,228,228,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,254,255,12,13,255,255,12,14,255,255,12,15,204,0,13,1,208,255,13,2,255,208,13,3,255,208,13,4,255,208,13,5,255,208,13,6,255,208,13,7,255,208,13,8,255,208,13,9,255,208,13,10,255,208,13,11,255,208,13,12,255,208,13,13,255,208,13,14,255,208,13,15,255,0,14,2,208,0,14,3,208,0,14,4,208,0,14,5,208,0,14,6,208,0,14,7,208,0,14,8,208,0,14,9,208,0,14,10,208,0,14,11,208,0,14,12,208,0,14,13,208,0,14,14,208,0,14,15,208,0],"secondary":false},{"width":15,"bonus":485,"chr":"O","pixels":[1,5,175,255,1,6,227,255,1,7,247,255,1,8,247,255,1,9,225,255,1,10,173,255,2,3,199,255,2,4,255,255,2,5,255,255,2,6,250,244,2,7,250,218,2,8,254,216,2,9,254,240,2,10,255,255,2,11,255,255,2,12,216,233,3,2,207,255,3,3,255,255,3,4,233,170,3,5,255,43,3,6,255,0,3,7,239,0,3,8,214,0,3,9,215,0,3,10,241,48,3,11,255,159,3,12,255,255,3,13,243,216,4,2,255,255,4,3,229,127,4,4,255,0,4,5,156,0,4,12,203,146,4,13,255,255,4,14,225,117,5,1,187,255,5,2,231,238,5,3,255,1,5,13,233,236,5,14,255,190,6,1,233,255,6,2,227,164,6,3,216,0,6,14,252,238,6,15,190,0,7,1,249,255,7,2,244,131,7,14,253,253,7,15,235,0,8,1,235,255,8,2,252,145,8,14,245,245,8,15,251,0,9,1,189,255,9,2,251,215,9,13,211,255,9,14,226,213,9,15,236,0,10,2,255,255,10,3,230,119,10,13,255,255,10,14,229,111,10,15,189,0,11,2,222,231,11,3,254,255,11,4,193,198,11,12,253,255,11,13,222,230,11,14,255,4,12,3,241,203,12,4,255,255,12,5,255,255,12,6,240,253,12,7,215,255,12,8,215,255,12,9,239,255,12,10,255,255,12,11,255,255,12,12,228,211,12,13,254,20,12,14,200,0,13,4,212,98,13,5,255,171,13,6,254,225,13,7,254,246,13,8,253,247,13,9,250,228,13,10,249,174,13,11,255,78,13,12,255,1,13,13,189,0,14,6,171,0,14,7,224,0,14,8,246,0,14,9,246,0,14,10,224,0,14,11,170,0],"secondary":false},{"width":12,"bonus":395,"chr":"P","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,254,215,3,8,255,255,3,9,255,223,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,215,43,4,8,255,255,4,9,255,84,4,10,223,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,1,255,255,5,2,255,122,5,8,255,255,5,9,255,81,6,1,245,255,6,2,254,144,6,8,255,255,6,9,255,67,7,1,215,255,7,2,253,199,7,8,255,255,7,9,255,25,8,2,255,255,8,3,220,119,8,7,233,255,8,8,224,227,8,9,255,0,9,2,249,248,9,3,255,255,9,4,243,247,9,5,227,255,9,6,255,255,9,7,249,254,9,8,238,62,9,9,199,0,10,3,251,190,10,4,254,245,10,5,254,244,10,6,248,194,10,7,254,58,10,8,248,0,11,4,187,0,11,5,244,0,11,6,243,0,11,7,189,0],"secondary":false},{"width":15,"bonus":530,"chr":"Q","pixels":[1,5,175,255,1,6,227,255,1,7,247,255,1,8,247,255,1,9,225,255,1,10,173,255,2,3,199,255,2,4,255,255,2,5,255,255,2,6,250,244,2,7,250,218,2,8,254,216,2,9,254,240,2,10,255,255,2,11,255,255,2,12,216,233,3,2,207,255,3,3,255,255,3,4,233,170,3,5,255,43,3,6,255,0,3,7,239,0,3,8,214,0,3,9,215,0,3,10,241,48,3,11,255,159,3,12,255,255,3,13,243,216,4,2,255,255,4,3,229,127,4,4,255,0,4,5,156,0,4,12,203,146,4,13,255,255,4,14,225,117,5,1,187,255,5,2,231,238,5,3,255,1,5,13,233,236,5,14,255,190,6,1,233,255,6,2,227,164,6,3,216,0,6,14,252,238,6,15,190,0,7,1,249,255,7,2,244,131,7,14,254,254,7,15,235,0,8,1,235,255,8,2,252,145,8,14,255,255,8,15,254,135,9,1,189,255,9,2,251,215,9,13,211,255,9,14,255,255,9,15,255,255,9,16,208,190,10,2,255,255,10,3,230,119,10,13,255,255,10,14,232,130,10,15,255,187,10,16,255,255,10,17,223,199,11,2,222,231,11,3,254,255,11,4,193,198,11,12,253,255,11,13,227,233,11,14,255,6,11,16,237,203,11,17,255,255,11,18,174,0,12,3,241,203,12,4,255,255,12,5,255,255,12,6,240,253,12,7,215,255,12,8,215,255,12,9,239,255,12,10,255,255,12,11,255,255,12,12,232,216,12,13,254,23,12,14,207,0,12,17,238,205,12,18,255,0,13,4,212,98,13,5,255,171,13,6,254,225,13,7,254,246,13,8,253,250,13,9,250,230,13,10,249,178,13,11,255,84,13,12,255,1,13,13,196,0,13,18,191,0,14,6,171,0,14,7,224,0,14,8,246,0,14,9,248,0,14,10,226,0,14,11,174,0],"secondary":false},{"width":12,"bonus":460,"chr":"R","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,3,1,255,255,3,2,254,231,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,254,215,3,8,255,255,3,9,255,223,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,0,4,1,255,255,4,2,254,120,4,3,230,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,215,43,4,8,255,255,4,9,255,84,4,10,223,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,5,1,255,255,5,2,254,120,5,8,255,255,5,9,255,84,6,1,247,255,6,2,255,139,6,8,255,255,6,9,255,119,7,1,221,255,7,2,253,186,7,8,255,255,7,9,255,255,7,10,215,215,8,1,160,255,8,2,254,255,8,3,208,103,8,7,225,255,8,8,213,222,8,9,255,157,8,10,254,255,8,11,252,251,9,2,252,250,9,3,255,255,9,4,240,248,9,5,225,255,9,6,253,255,9,7,244,253,9,8,231,49,9,9,185,0,9,10,181,87,9,11,255,215,9,12,255,255,9,13,239,239,10,3,253,193,10,4,254,245,10,5,254,240,10,6,247,190,10,7,254,51,10,8,242,0,10,12,234,137,10,13,254,249,10,14,255,255,11,4,191,0,11,5,244,0,11,6,239,0,11,7,184,0,11,14,254,191,11,15,255,0],"secondary":false},{"width":11,"bonus":355,"chr":"S","pixels":[1,3,211,255,1,4,247,255,1,5,211,255,1,13,255,255,2,2,249,255,2,3,252,254,2,4,248,224,2,5,255,249,2,6,255,255,2,7,161,167,2,13,214,249,2,14,254,204,3,1,159,255,3,2,245,254,3,3,250,44,3,4,251,0,3,5,222,36,3,6,254,230,3,7,254,240,3,13,158,255,3,14,251,242,3,15,204,0,4,1,217,255,4,2,219,185,4,3,244,0,4,7,255,255,4,8,246,110,4,14,253,253,4,15,238,0,5,1,247,255,5,2,236,137,5,3,159,0,5,7,245,249,5,8,255,202,5,14,251,252,5,15,252,0,6,1,235,255,6,2,252,148,6,7,153,249,6,8,255,255,6,9,213,66,6,13,178,255,6,14,237,234,6,15,248,0,7,1,211,255,7,2,249,190,7,8,254,255,7,9,254,204,7,13,251,255,7,14,222,169,7,15,217,0,8,2,254,250,8,3,189,18,8,8,173,229,8,9,255,255,8,10,253,245,8,11,223,253,8,12,255,255,8,13,242,251,8,14,252,29,9,2,188,126,9,3,249,6,9,9,211,172,9,10,254,234,9,11,254,246,9,12,246,195,9,13,255,45,9,14,238,0,10,11,234,0,10,12,246,0,10,13,188,0],"secondary":false},{"width":13,"bonus":300,"chr":"T","pixels":[1,1,255,255,2,1,255,255,2,2,254,120,3,1,255,255,3,2,254,120,4,1,255,255,4,2,254,120,5,1,255,255,5,2,254,231,5,3,231,230,5,4,208,255,5,5,208,255,5,6,208,255,5,7,208,255,5,8,208,255,5,9,208,255,5,10,208,255,5,11,208,255,5,12,208,255,5,13,208,255,5,14,208,255,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,208,0,7,1,255,255,7,2,254,120,7,3,255,0,7,4,255,0,7,5,255,0,7,6,255,0,7,7,255,0,7,8,255,0,7,9,255,0,7,10,255,0,7,11,255,0,7,12,255,0,7,13,255,0,7,14,255,0,7,15,255,0,8,1,255,255,8,2,254,120,9,1,255,255,9,2,254,120,10,1,255,255,10,2,254,120,11,1,255,255,11,2,254,120,12,2,255,0],"secondary":false},{"width":15,"bonus":465,"chr":"U","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,243,255,2,11,201,255,3,1,208,255,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,254,228,3,11,255,255,3,12,255,255,3,13,202,212,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,231,31,4,12,255,179,4,13,255,255,4,14,199,119,5,13,246,236,5,14,255,190,6,13,161,248,6,14,253,241,6,15,190,0,7,14,253,253,7,15,239,0,8,13,155,255,8,14,245,245,8,15,251,0,9,13,229,255,9,14,228,206,9,15,235,0,10,12,184,255,10,13,255,255,10,14,237,91,10,15,184,0,11,1,208,255,11,2,208,255,11,3,208,255,11,4,208,255,11,5,208,255,11,6,208,255,11,7,208,255,11,8,208,255,11,9,208,255,11,10,229,255,11,11,255,255,11,12,255,255,11,13,229,179,11,14,255,0,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,253,245,12,11,249,205,12,12,255,99,12,13,255,1,12,14,161,0,13,2,255,0,13,3,255,0,13,4,255,0,13,5,255,0,13,6,255,0,13,7,255,0,13,8,255,0,13,9,255,0,13,10,255,0,13,11,243,0,13,12,200,0],"secondary":false},{"width":12,"bonus":345,"chr":"V","pixels":[0,1,209,255,1,1,251,255,1,2,255,255,1,3,254,254,1,4,192,246,2,2,253,109,2,3,254,201,2,4,255,255,2,5,255,255,2,6,247,252,2,7,167,249,3,4,208,44,3,5,255,127,3,6,254,219,3,7,255,255,3,8,255,255,3,9,236,248,4,7,225,60,4,8,255,145,4,9,255,233,4,10,255,255,4,11,255,255,4,12,217,246,5,10,239,73,5,11,255,152,5,12,254,221,5,13,255,255,5,14,253,253,6,11,181,217,6,12,242,235,6,13,255,255,6,14,254,252,6,15,252,0,7,9,235,255,7,10,255,255,7,11,255,255,7,12,237,224,7,13,237,124,7,14,255,25,7,15,252,0,8,6,221,255,8,7,255,255,8,8,255,255,8,9,244,240,8,10,245,143,8,11,255,45,8,12,255,0,8,13,208,0,9,3,203,255,9,4,255,255,9,5,255,255,9,6,249,250,9,7,242,170,9,8,255,68,9,9,255,2,9,10,229,0,10,1,251,255,10,2,255,255,10,3,254,254,10,4,241,196,10,5,255,92,10,6,255,11,10,7,244,0,10,8,162,0,11,1,208,255,11,2,253,116,11,3,255,25,11,4,253,0,11,5,185,0],"secondary":false},{"width":19,"bonus":655,"chr":"W","pixels":[0,1,158,255,1,1,255,255,1,2,255,255,1,3,254,255,1,4,209,251,2,2,255,131,2,3,255,197,2,4,255,251,2,5,255,255,2,6,255,255,2,7,248,252,2,8,188,252,3,4,200,15,3,5,252,75,3,6,255,140,3,7,254,207,3,8,254,255,3,9,255,255,3,10,255,255,3,11,237,251,3,12,165,255,4,8,209,23,4,9,253,82,4,10,255,136,4,11,255,187,4,12,253,240,4,13,255,255,4,14,255,255,5,10,167,192,5,11,222,213,5,12,249,239,5,13,255,255,5,14,255,245,5,15,255,0,6,7,163,255,6,8,235,255,6,9,255,255,6,10,255,255,6,11,239,238,6,12,226,167,6,13,240,77,6,14,255,8,6,15,245,0,7,4,191,255,7,5,251,255,7,6,255,255,7,7,253,253,7,8,233,212,7,9,245,124,7,10,255,43,7,11,255,0,7,12,223,0,8,1,217,255,8,2,255,255,8,3,255,255,8,4,243,245,8,5,232,179,8,6,252,90,8,7,255,17,8,8,252,0,8,9,194,0,9,1,255,255,9,2,255,255,9,3,254,210,9,4,255,113,9,5,237,43,9,6,163,0,10,2,255,157,10,3,254,234,10,4,255,255,10,5,255,255,10,6,225,249,11,3,158,3,11,4,238,63,11,5,254,138,11,6,255,217,11,7,255,255,11,8,255,255,11,9,242,251,11,10,168,252,12,7,223,46,12,8,255,119,12,9,255,196,12,10,255,249,12,11,255,255,12,12,251,254,12,13,193,250,13,10,199,15,13,11,251,113,13,12,255,215,13,13,255,255,13,14,255,255,14,9,184,255,14,10,243,255,14,11,255,255,14,12,255,255,14,13,252,242,14,14,254,174,14,15,255,0,15,5,177,255,15,6,239,255,15,7,255,255,15,8,255,255,15,9,253,253,15,10,239,210,15,11,248,130,15,12,255,57,15,13,255,3,15,14,240,0,15,15,174,0,16,1,169,255,16,2,233,255,16,3,255,255,16,4,255,255,16,5,255,255,16,6,243,228,16,7,249,152,16,8,255,78,16,9,255,14,16,10,251,0,16,11,196,0,17,1,255,255,17,2,249,243,17,3,247,175,17,4,255,100,17,5,255,31,17,6,255,0,17,7,217,0,18,2,255,2,18,3,237,0,18,4,170,0],"secondary":false},{"width":12,"bonus":385,"chr":"X","pixels":[0,14,153,255,1,1,255,255,1,2,188,219,1,13,227,255,1,14,255,255,1,15,153,0,2,1,179,255,2,2,255,255,2,3,245,239,2,11,165,255,2,12,255,255,2,13,234,246,2,14,234,82,2,15,255,0,3,2,205,108,3,3,254,233,3,4,255,255,3,5,191,217,3,10,233,255,3,11,253,255,3,12,215,170,3,13,255,12,3,14,226,0,4,4,245,162,4,5,255,255,4,6,246,239,4,8,175,255,4,9,255,255,4,10,225,236,4,11,238,57,4,12,253,0,5,5,180,90,5,6,254,225,5,7,255,255,5,8,255,255,5,9,213,145,5,10,255,4,5,11,208,0,6,6,250,254,6,7,255,251,6,8,255,255,6,9,255,205,7,4,211,255,7,5,255,255,7,6,211,204,7,7,249,23,7,8,252,110,7,9,255,243,7,10,255,253,7,11,169,222,8,3,253,255,8,4,236,250,8,5,224,93,8,6,255,0,8,7,169,0,8,10,252,187,8,11,255,255,8,12,244,240,9,1,223,255,9,2,255,255,9,3,214,195,9,4,253,19,9,5,232,0,9,11,210,115,9,12,255,237,9,13,255,255,9,14,207,225,10,1,229,255,10,2,233,86,10,3,255,0,10,4,164,0,10,13,249,175,10,14,255,255,10,15,183,0,11,2,230,0,11,14,197,105,11,15,255,0],"secondary":false},{"width":12,"bonus":305,"chr":"Y","pixels":[1,1,255,255,1,2,240,241,2,2,255,239,2,3,255,255,2,4,226,236,3,3,247,139,3,4,255,245,3,5,255,255,3,6,205,231,4,5,251,149,4,6,255,249,4,7,254,254,4,8,178,231,5,6,161,51,5,7,253,161,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,6,7,206,246,6,8,255,255,6,9,255,227,6,10,255,208,6,11,255,208,6,12,255,208,6,13,255,208,6,14,255,208,6,15,255,0,7,5,187,255,7,6,255,255,7,7,239,249,7,8,222,120,7,9,255,3,7,10,227,0,7,11,208,0,7,12,208,0,7,13,208,0,7,14,208,0,7,15,208,0,8,3,173,255,8,4,255,255,8,5,247,253,8,6,221,152,8,7,255,13,8,8,233,0,9,1,160,255,9,2,251,255,9,3,253,255,9,4,224,181,9,5,255,27,9,6,246,0,10,1,255,255,10,2,230,207,10,3,252,47,10,4,253,0,10,5,159,0,11,2,255,0,11,3,187,0],"secondary":false},{"width":12,"bonus":405,"chr":"Z","pixels":[1,1,255,255,1,13,205,255,1,14,255,255,2,1,255,255,2,2,254,120,2,12,247,255,2,13,255,255,2,14,255,255,2,15,255,0,3,1,255,255,3,2,254,120,3,10,193,255,3,11,255,255,3,12,240,242,3,13,253,180,3,14,255,255,3,15,255,0,4,1,255,255,4,2,254,120,4,9,243,255,4,10,255,255,4,11,233,181,4,12,255,16,4,13,240,127,4,14,255,255,4,15,255,0,5,1,255,255,5,2,254,120,5,7,179,255,5,8,255,255,5,9,243,247,5,10,247,88,5,11,255,0,5,12,165,0,5,14,255,255,5,15,255,0,6,1,255,255,6,2,254,120,6,6,235,255,6,7,255,255,6,8,232,197,6,9,255,24,6,10,236,0,6,14,255,255,6,15,255,0,7,1,255,255,7,2,254,120,7,4,166,255,7,5,255,255,7,6,246,251,7,7,244,105,7,8,255,0,7,9,180,0,7,14,255,255,7,15,255,0,8,1,255,255,8,2,255,178,8,3,240,242,8,4,255,255,8,5,233,212,8,6,255,33,8,7,242,0,8,14,255,255,8,15,255,0,9,1,255,255,9,2,255,255,9,3,252,251,9,4,241,123,9,5,255,2,9,6,194,0,9,14,255,255,9,15,255,0,10,1,255,255,10,2,254,207,10,3,255,43,10,4,248,0,10,14,255,255,10,15,255,0,11,2,255,0,11,3,206,0,11,15,255,0],"secondary":false},{"width":11,"bonus":425,"chr":"0","pixels":[1,4,155,255,1,5,207,255,1,6,237,255,1,7,251,255,1,8,249,255,1,9,235,255,1,10,201,255,2,2,177,255,2,3,255,255,2,4,255,255,2,5,252,250,2,6,248,228,2,7,252,214,2,8,254,210,2,9,254,222,2,10,254,248,2,11,255,255,2,12,255,255,2,13,174,226,3,2,255,255,3,3,226,182,3,4,255,49,3,5,255,2,3,6,247,0,3,7,222,0,3,8,211,0,3,9,210,0,3,10,222,2,3,11,248,50,3,12,255,161,3,13,255,255,3,14,202,156,4,1,225,255,4,2,220,211,4,3,255,0,4,4,161,0,4,13,228,202,4,14,254,222,5,1,247,255,5,2,240,136,5,3,182,0,5,14,253,251,5,15,222,0,6,1,219,255,6,2,253,188,6,13,187,255,6,14,239,239,6,15,249,0,7,2,255,255,7,3,232,186,7,12,169,255,7,13,255,255,7,14,221,152,7,15,224,0,8,2,200,194,8,3,255,255,8,4,255,255,8,5,250,254,8,6,224,255,8,7,211,255,8,8,211,255,8,9,223,255,8,10,249,255,8,11,255,255,8,12,255,255,8,13,227,194,8,14,255,6,9,3,172,74,9,4,255,142,9,5,255,201,9,6,254,237,9,7,254,251,9,8,254,251,9,9,252,240,9,10,248,212,9,11,253,154,9,12,254,64,9,13,255,0,9,14,172,0,10,6,201,0,10,7,236,0,10,8,250,0,10,9,250,0,10,10,237,0,10,11,206,0],"secondary":false},{"width":11,"bonus":260,"chr":"1","pixels":[2,3,221,255,2,4,212,245,3,2,173,255,3,3,247,255,3,4,227,57,3,5,204,0,4,2,251,255,4,3,199,104,4,4,247,0,5,1,249,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,6,1,208,255,6,2,254,209,6,3,255,208,6,4,255,208,6,5,255,208,6,6,255,208,6,7,255,208,6,8,255,208,6,9,255,208,6,10,255,208,6,11,255,208,6,12,255,208,6,13,255,208,6,14,255,208,6,15,255,0,7,2,208,0,7,3,208,0,7,4,208,0,7,5,208,0,7,6,208,0,7,7,208,0,7,8,208,0,7,9,208,0,7,10,208,0,7,11,208,0,7,12,208,0,7,13,208,0,7,14,208,0,7,15,208,0],"secondary":false},{"width":11,"bonus":345,"chr":"2","pixels":[1,13,207,255,1,14,255,255,2,2,255,255,2,3,195,161,2,12,223,255,2,13,255,255,2,14,255,255,2,15,255,0,3,1,187,255,3,2,225,240,3,3,255,3,3,11,237,255,3,12,232,250,3,13,243,169,3,14,255,255,3,15,255,0,4,1,239,255,4,2,223,154,4,3,212,0,4,10,247,255,4,11,226,246,4,12,239,33,4,13,240,127,4,14,255,255,4,15,255,0,5,1,247,255,5,2,248,147,5,9,253,255,5,10,221,237,5,11,248,23,5,12,218,0,5,14,255,255,5,15,255,0,6,1,197,255,6,2,254,240,6,3,162,72,6,7,183,255,6,8,255,255,6,9,217,217,6,10,253,12,6,11,205,0,6,14,255,255,6,15,255,0,7,2,255,255,7,3,255,253,7,4,227,248,7,5,235,255,7,6,255,255,7,7,253,255,7,8,220,152,7,9,255,3,7,10,184,0,7,14,255,255,7,15,255,0,8,3,255,205,8,4,254,249,8,5,250,228,8,6,248,167,8,7,254,46,8,8,253,0,8,14,255,255,8,15,255,0,9,4,205,0,9,5,248,0,9,6,224,0,9,7,163,0,9,14,255,255,9,15,255,0,10,15,255,0],"secondary":false},{"width":11,"bonus":365,"chr":"3","pixels":[1,2,167,255,1,13,255,255,2,2,255,255,2,3,192,97,2,13,220,246,2,14,255,187,3,1,181,255,3,2,226,236,3,3,255,0,3,7,187,255,3,13,159,255,3,14,251,233,3,15,187,0,4,1,231,255,4,2,223,164,4,3,209,0,4,7,255,255,4,8,211,104,4,14,253,251,4,15,229,0,5,1,251,255,5,2,243,133,5,7,255,255,5,8,255,107,5,14,250,250,5,15,249,0,6,1,233,255,6,2,253,168,6,7,247,253,6,8,254,164,6,13,199,255,6,14,235,227,6,15,245,0,7,1,172,255,7,2,254,250,7,3,194,107,7,6,245,255,7,7,195,168,7,8,254,249,7,9,188,94,7,13,255,255,7,14,227,148,7,15,209,0,8,2,252,251,8,3,255,255,8,4,255,255,8,5,255,255,8,6,212,225,8,7,246,7,8,8,233,231,8,9,255,255,8,10,235,247,8,11,239,255,8,12,255,255,8,13,238,242,8,14,255,18,9,3,253,176,9,4,254,195,9,5,254,132,9,6,255,11,9,7,187,0,9,9,241,187,9,10,254,240,9,11,253,239,9,12,249,169,9,13,255,29,9,14,226,0,10,4,175,0,10,5,194,0,10,10,177,0,10,11,240,0,10,12,237,0,10,13,165,0],"secondary":false},{"width":11,"bonus":420,"chr":"4","pixels":[1,9,160,255,1,10,255,255,1,11,163,255,2,8,227,255,2,9,229,253,2,10,255,255,2,11,254,164,2,12,164,0,3,6,157,255,3,7,253,255,3,8,183,217,3,9,228,17,3,10,255,255,3,11,254,164,3,12,164,0,4,5,225,255,4,6,225,254,4,7,183,96,4,8,254,0,4,9,156,0,4,10,255,255,4,11,254,164,4,12,164,0,5,3,154,255,5,4,253,255,5,5,177,215,5,6,227,14,5,7,224,0,5,10,255,255,5,11,254,164,5,12,164,0,6,2,223,255,6,3,202,252,6,4,178,87,6,5,253,0,6,10,255,255,6,11,254,164,6,12,164,0,7,1,253,255,7,2,249,253,7,3,250,213,7,4,245,217,7,5,220,242,7,6,208,255,7,7,208,255,7,8,208,255,7,9,208,255,7,10,255,255,7,11,254,239,7,12,239,222,7,13,208,255,7,14,208,255,8,1,255,255,8,2,255,255,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,8,14,255,255,8,15,208,0,9,2,255,0,9,3,255,0,9,4,255,0,9,5,255,0,9,6,255,0,9,7,255,0,9,8,255,0,9,9,255,0,9,10,255,255,9,11,254,164,9,12,255,0,9,13,255,0,9,14,255,0,9,15,255,0,10,10,255,255,10,11,254,164,10,12,164,0],"secondary":false},{"width":11,"bonus":350,"chr":"5","pixels":[1,6,163,255,1,13,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,212,162,2,13,213,243,2,14,254,198,3,1,255,255,3,2,255,177,3,3,255,87,3,4,255,59,3,5,255,38,3,6,254,255,3,7,255,103,3,14,252,242,3,15,198,0,4,1,255,255,4,2,254,120,4,3,177,0,4,6,255,255,4,7,254,89,4,14,253,253,4,15,239,0,5,1,255,255,5,2,254,120,5,6,255,255,5,7,255,116,5,14,246,246,5,15,252,0,6,1,255,255,6,2,254,120,6,6,245,254,6,7,255,197,6,13,223,255,6,14,226,209,6,15,237,0,7,1,255,255,7,2,254,120,7,6,162,254,7,7,255,255,7,8,232,170,7,12,185,255,7,13,255,255,7,14,234,92,7,15,186,0,8,1,199,255,8,2,255,93,8,7,242,233,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,227,172,8,14,255,0,9,2,200,0,9,8,239,139,9,9,254,192,9,10,255,199,9,11,254,164,9,12,254,76,9,13,255,0,9,14,153,0,10,10,192,0,10,11,199,0,10,12,164,0],"secondary":false},{"width":11,"bonus":430,"chr":"6","pixels":[1,5,154,255,1,6,205,255,1,7,237,255,1,8,249,255,1,9,247,255,1,10,225,255,1,11,169,255,2,3,193,255,2,4,255,255,2,5,255,255,2,6,244,238,2,7,250,236,2,8,255,255,2,9,254,232,2,10,254,228,2,11,254,255,2,12,255,255,2,13,187,220,3,2,215,255,3,3,248,254,3,4,223,140,3,5,255,24,3,6,255,53,3,7,252,235,3,8,239,99,3,9,255,0,3,10,231,0,3,11,231,36,3,12,255,172,3,13,255,255,3,14,204,144,4,2,255,255,4,3,227,83,4,4,247,0,4,6,217,250,4,7,178,227,4,8,232,0,4,13,236,212,4,14,254,215,5,1,205,255,5,2,221,225,5,3,255,0,5,6,255,255,5,7,229,109,5,8,158,0,5,14,254,250,5,15,214,0,6,1,243,255,6,2,233,157,6,3,195,0,6,6,255,255,6,7,255,127,6,13,171,255,6,14,244,244,6,15,249,0,7,1,253,255,7,2,249,128,7,6,222,252,7,7,255,241,7,8,160,106,7,13,253,255,7,14,224,182,7,15,234,0,8,1,203,255,8,2,254,129,8,7,255,253,8,8,255,255,8,9,239,249,8,10,217,255,8,11,247,255,8,12,255,255,8,13,238,242,8,14,254,26,8,15,160,0,9,2,203,0,9,8,254,186,9,9,255,241,9,10,254,250,9,11,249,225,9,12,251,146,9,13,255,22,9,14,226,0,10,9,185,0,10,10,241,0,10,11,249,0,10,12,220,0],"secondary":false},{"width":11,"bonus":280,"chr":"7","pixels":[1,1,255,255,2,1,255,255,2,2,254,120,3,1,255,255,3,2,254,120,3,14,235,255,4,1,255,255,4,2,254,120,4,11,171,255,4,12,251,255,4,13,255,255,4,14,241,239,4,15,236,0,5,1,255,255,5,2,254,120,5,9,205,255,5,10,255,255,5,11,254,255,5,12,232,204,5,13,252,80,5,14,255,3,5,15,226,0,6,1,255,255,6,2,254,120,6,7,233,255,6,8,255,255,6,9,245,249,6,10,233,157,6,11,255,39,6,12,254,0,6,13,186,0,7,1,255,255,7,2,254,120,7,4,167,255,7,5,249,255,7,6,255,255,7,7,233,229,7,8,243,107,7,9,255,11,7,10,240,0,8,1,255,255,8,2,255,241,8,3,255,255,8,4,251,254,8,5,225,189,8,6,251,61,8,7,255,0,8,8,209,0,9,1,255,255,9,2,254,228,9,3,248,129,9,4,255,24,9,5,250,0,9,6,167,0,10,2,255,0,10,3,228,0],"secondary":false},{"width":11,"bonus":470,"chr":"8","pixels":[1,3,177,255,1,4,195,255,1,10,221,255,1,11,247,255,1,12,208,255,2,2,241,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,234,231,2,9,255,255,2,10,248,248,2,11,250,224,2,12,254,252,2,13,255,253,3,1,161,255,3,2,247,253,3,3,246,75,3,4,255,12,3,5,255,92,3,6,255,251,3,7,245,205,3,8,255,255,3,9,208,174,3,10,255,6,3,11,241,0,3,12,227,54,3,13,255,243,3,14,254,174,4,1,223,255,4,2,221,185,4,3,246,0,4,6,179,196,4,7,255,255,4,8,239,200,4,9,255,0,4,13,174,227,4,14,253,225,4,15,173,0,5,1,247,255,5,2,240,136,5,3,160,0,5,7,255,255,5,8,255,124,5,9,188,0,5,14,253,252,5,15,223,0,6,1,223,255,6,2,252,163,6,7,255,255,6,8,255,237,6,13,161,255,6,14,243,243,6,15,250,0,7,1,163,255,7,2,253,247,7,3,188,98,7,6,251,255,7,7,202,178,7,8,254,251,7,9,250,192,7,13,249,255,7,14,223,191,7,15,232,0,8,2,250,246,8,3,255,255,8,4,255,255,8,5,255,255,8,6,213,224,8,7,251,3,8,8,193,154,8,9,255,255,8,10,253,249,8,11,225,254,8,12,255,255,8,13,248,252,8,14,250,45,8,15,167,0,9,3,250,177,9,4,255,193,9,5,254,126,9,6,255,9,9,7,187,0,9,9,171,149,9,10,254,216,9,11,255,247,9,12,248,203,9,13,255,57,9,14,246,0,10,4,174,0,10,5,193,0,10,11,216,0,10,12,247,0,10,13,197,0],"secondary":false},{"width":11,"bonus":415,"chr":"9","pixels":[1,3,158,255,1,4,233,255,1,5,249,255,1,6,221,255,2,2,235,255,2,3,255,255,2,4,247,243,2,5,251,221,2,6,255,249,2,7,255,255,2,8,188,187,2,14,202,255,3,1,163,255,3,2,252,254,3,3,242,89,3,4,255,0,3,5,235,0,3,6,221,29,3,7,253,205,3,8,254,251,3,14,255,255,3,15,202,0,4,1,233,255,4,2,222,187,4,3,251,0,4,8,255,255,4,9,251,64,4,14,249,250,4,15,255,0,5,1,249,255,5,2,244,134,5,3,163,0,5,8,255,255,5,9,254,70,5,13,199,255,5,14,232,225,5,15,244,0,6,1,211,255,6,2,253,190,6,8,247,253,6,9,255,17,6,13,255,255,6,14,227,137,6,15,205,0,7,2,255,255,7,3,228,166,7,7,219,255,7,8,153,146,7,9,245,2,7,11,155,255,7,12,253,255,7,13,233,240,7,14,255,12,8,2,198,200,8,3,255,255,8,4,252,251,8,5,221,253,8,6,251,255,8,7,242,252,8,8,251,233,8,9,252,254,8,10,255,255,8,11,255,255,8,12,230,212,8,13,254,21,8,14,219,0,9,3,181,93,9,4,255,165,9,5,254,222,9,6,253,247,9,7,254,249,9,8,253,235,9,9,249,205,9,10,253,148,9,11,254,58,9,12,255,0,9,13,192,0,10,5,165,0,10,6,222,0,10,7,246,0,10,8,248,0,10,9,234,0,10,10,200,0],"secondary":false},{"width":17,"bonus":600,"chr":"%","pixels":[1,3,153,255,1,4,225,255,1,5,247,255,1,6,227,255,1,7,165,255,2,2,189,255,2,3,255,255,2,4,247,243,2,5,249,217,2,6,254,228,2,7,255,255,2,8,243,232,3,2,253,255,3,3,225,157,3,4,255,1,3,5,235,0,3,6,212,0,3,7,237,99,3,8,255,255,3,9,229,67,4,2,253,255,4,3,255,148,4,8,255,255,4,9,255,59,4,14,239,255,5,2,182,250,5,3,255,255,5,4,247,245,5,5,213,255,5,6,231,255,5,7,255,255,5,8,236,241,5,9,255,10,5,12,213,255,5,13,212,255,5,15,239,0,6,3,221,164,6,4,254,222,6,5,254,248,6,6,250,232,6,7,247,172,6,8,255,37,6,9,227,37,6,10,178,252,6,11,243,255,6,12,154,194,6,13,213,6,6,14,212,0,7,5,222,0,7,6,247,0,7,7,228,12,7,8,212,160,7,9,249,254,7,10,183,241,7,11,185,40,7,12,244,0,8,7,227,255,8,8,221,253,8,9,168,111,8,10,248,0,8,11,173,0,9,5,195,255,9,6,247,255,9,7,173,189,9,8,228,11,9,9,232,102,9,10,199,227,9,11,199,255,9,12,172,255,10,3,153,255,10,4,253,255,10,5,198,237,10,6,204,45,10,7,248,0,10,8,187,161,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,11,2,239,255,11,3,229,253,11,4,187,115,11,5,253,0,11,6,184,0,11,8,223,255,11,9,208,205,11,10,255,27,11,11,255,5,11,12,255,42,11,13,255,211,11,14,254,213,12,3,240,13,12,4,227,0,12,8,251,255,12,9,232,76,12,10,168,0,12,14,253,247,12,15,212,0,13,8,221,255,13,9,253,175,13,13,215,255,13,14,235,231,13,15,245,0,14,9,255,255,14,10,255,255,14,11,255,255,14,12,255,255,14,13,255,255,14,14,232,114,14,15,213,0,15,9,157,137,15,10,255,173,15,11,255,199,15,12,254,174,15,13,255,83,15,14,255,0,16,11,173,0,16,12,199,0,16,13,174,0],"secondary":false},{"width":9,"bonus":255,"chr":"/","pixels":[1,16,195,255,1,17,249,255,2,12,181,255,2,13,243,255,2,14,255,255,2,15,255,255,2,16,241,241,2,17,233,176,2,18,250,0,3,8,167,255,3,9,233,255,3,10,255,255,3,11,255,255,3,12,245,247,3,13,231,191,3,14,248,109,3,15,255,39,3,16,255,0,3,17,228,0,3,18,161,0,4,4,154,255,4,5,221,255,4,6,255,255,4,7,255,255,4,8,249,251,4,9,231,205,4,10,244,124,4,11,254,52,4,12,255,2,4,13,238,0,4,14,173,0,5,1,208,255,5,2,253,255,5,3,255,255,5,4,253,253,5,5,233,218,5,6,238,141,5,7,255,65,5,8,255,7,5,9,246,0,5,10,186,0,6,0,255,255,6,1,235,230,6,2,235,157,6,3,254,77,6,4,255,14,6,5,252,0,6,6,199,0,7,0,255,24,7,1,255,0,7,2,212,0],"secondary":false},{"width":11,"bonus":200,"chr":"+","pixels":[1,8,255,255,2,8,255,255,2,9,255,84,3,8,255,255,3,9,255,84,4,4,208,255,4,5,208,255,4,6,208,255,4,7,213,255,4,8,255,255,4,9,255,223,4,10,224,237,4,11,208,255,4,12,208,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,208,0,6,5,255,0,6,6,255,0,6,7,255,36,6,8,255,255,6,9,255,84,6,10,255,0,6,11,255,0,6,12,255,0,6,13,255,0,7,8,255,255,7,9,255,84,8,8,255,255,8,9,255,84,9,8,255,255,9,9,255,84,10,9,255,0],"secondary":false},{"width":10,"bonus":245,"chr":"?","pixels":[1,2,167,255,2,2,241,251,2,3,169,9,3,1,219,255,3,2,220,197,3,3,237,0,3,13,247,255,3,14,181,255,4,1,249,255,4,2,237,142,4,3,170,0,4,8,245,255,4,9,216,247,4,10,182,146,4,12,173,255,4,13,255,255,4,14,253,214,4,15,181,0,5,1,229,255,5,2,252,155,5,7,239,255,5,8,196,228,5,9,245,4,5,10,209,0,5,13,183,42,5,14,255,5,5,15,212,0,6,1,179,255,6,2,254,246,6,3,182,101,6,6,223,255,6,7,222,249,6,8,239,14,6,9,175,0,7,2,252,251,7,3,255,255,7,4,255,255,7,5,255,255,7,6,240,250,7,7,229,49,7,8,217,0,8,3,252,176,8,4,254,198,8,5,255,153,8,6,255,33,8,7,236,0,9,4,174,0,9,5,198,0,9,6,153,0],"secondary":false},{"width":7,"bonus":200,"chr":"!","pixels":[3,1,208,255,3,2,208,255,3,3,208,255,3,4,208,255,3,5,208,255,3,6,208,255,3,7,208,255,3,8,208,255,3,9,208,255,3,10,208,255,3,13,247,255,3,14,181,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,208,0,4,12,173,255,4,13,255,255,4,14,253,214,4,15,181,0,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,11,255,0,5,13,183,42,5,14,255,5,5,15,212,0],"secondary":false},{"width":18,"bonus":760,"chr":"@","pixels":[1,7,211,255,1,8,243,255,1,9,249,255,1,10,231,255,1,11,181,255,2,5,255,255,2,6,255,255,2,7,253,253,2,8,250,230,2,9,253,215,2,10,254,237,2,11,255,255,2,12,255,255,2,13,226,235,3,3,193,255,3,4,255,255,3,5,228,213,3,6,255,78,3,7,255,5,3,8,251,0,3,9,226,0,3,10,214,0,3,11,239,46,3,12,255,160,3,13,255,255,3,14,248,223,4,3,255,255,4,4,223,141,4,5,255,1,4,6,190,0,4,13,203,146,4,14,255,255,4,15,236,142,5,2,253,255,5,3,211,194,5,4,255,0,5,6,153,255,5,7,225,255,5,8,249,255,5,9,225,255,5,10,155,255,5,14,223,226,5,15,254,233,6,2,252,254,6,3,253,25,6,4,173,51,6,5,235,255,6,6,255,255,6,7,249,245,6,8,250,218,6,9,255,237,6,10,255,255,6,11,239,227,6,15,255,255,6,16,235,42,7,1,202,255,7,2,223,214,7,3,252,0,7,4,177,243,7,5,248,254,7,6,242,89,7,7,255,1,7,8,239,0,7,9,214,4,7,10,246,140,7,11,255,255,7,12,222,66,7,15,255,255,7,16,255,69,8,1,239,255,8,2,233,162,8,3,187,0,8,4,237,255,8,5,219,174,8,6,247,0,8,11,255,255,8,12,254,64,8,15,255,255,8,16,255,77,9,1,251,255,9,2,247,131,9,4,245,255,9,5,247,146,9,10,158,255,9,11,218,245,9,12,255,4,9,15,255,255,9,16,255,55,10,1,231,255,10,2,253,148,10,4,215,255,10,5,254,239,10,6,234,227,10,7,208,255,10,8,219,255,10,9,247,255,10,10,200,252,10,11,166,31,10,12,209,0,10,15,255,255,10,16,255,23,11,1,197,255,11,2,250,206,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,236,187,11,14,163,255,11,15,222,234,11,16,255,0,12,2,255,255,12,3,212,61,12,6,255,0,12,7,255,0,12,8,255,0,12,9,255,8,12,10,255,119,12,11,255,255,12,12,192,78,12,15,191,105,12,16,203,0,13,2,248,248,13,3,255,213,13,11,255,255,13,12,255,67,14,3,255,255,14,4,251,233,14,10,225,255,14,11,242,251,14,12,255,13,15,4,255,245,15,5,255,255,15,6,255,255,15,7,255,255,15,8,255,255,15,9,255,255,15,10,248,252,15,11,234,82,15,12,238,0,16,5,249,116,16,6,254,171,16,7,255,199,16,8,255,187,16,9,255,130,16,10,255,29,16,11,245,0,17,7,170,0,17,8,199,0,17,9,187,0],"secondary":false},{"width":14,"bonus":445,"chr":"#","pixels":[1,10,255,255,2,6,255,255,2,10,255,255,2,11,255,84,3,6,255,255,3,7,254,64,3,10,255,255,3,11,255,142,3,12,166,189,3,13,167,255,3,14,209,255,4,6,255,255,4,7,254,164,4,8,202,234,4,9,239,255,4,10,255,255,4,11,255,255,4,12,242,238,4,13,216,212,4,14,214,160,4,15,210,0,5,3,193,255,5,4,239,255,5,5,255,255,5,6,255,255,5,7,254,225,5,8,222,188,5,9,220,153,5,10,255,255,5,11,255,90,5,12,255,0,5,13,226,0,5,14,180,0,6,3,186,213,6,4,219,126,6,5,244,77,6,6,255,255,6,7,254,64,6,8,224,0,6,9,177,52,6,10,255,255,6,11,255,84,7,4,156,0,7,6,255,255,7,7,254,64,7,10,255,255,7,11,255,127,7,12,153,171,7,14,197,255,8,6,255,255,8,7,255,151,8,8,187,225,8,9,221,255,8,10,255,255,8,11,255,255,8,12,248,248,8,13,220,228,8,14,211,181,8,15,197,0,9,3,165,255,9,4,213,255,9,5,251,255,9,6,255,255,9,7,254,234,9,8,224,204,9,9,218,173,9,10,255,255,9,11,255,100,9,12,255,0,9,13,241,0,9,14,196,0,10,3,198,230,10,4,210,157,10,5,229,104,10,6,255,255,10,7,254,64,10,8,234,0,10,9,191,48,10,10,255,255,10,11,255,84,11,4,178,0,11,6,255,255,11,7,254,64,11,10,255,255,11,11,255,84,12,6,255,255,12,7,254,64,12,11,255,0,13,7,255,0],"secondary":false},{"width":11,"bonus":490,"chr":"$","pixels":[1,3,153,255,1,4,235,255,1,5,235,255,1,6,161,255,1,12,195,255,1,13,221,255,2,2,161,255,2,3,255,255,2,4,243,237,2,5,253,233,2,6,255,255,2,7,234,215,2,13,255,255,2,14,226,43,3,2,251,255,3,3,215,174,3,4,255,0,3,5,226,1,3,6,245,153,3,7,255,255,3,8,217,102,3,13,255,255,3,14,255,67,4,0,208,255,4,1,217,255,4,2,255,255,4,3,254,221,4,4,235,226,4,5,208,255,4,6,215,255,4,7,255,255,4,8,255,237,4,9,224,237,4,10,208,255,4,11,208,255,4,12,215,255,4,13,255,255,4,14,255,223,4,15,221,241,5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,232,141,6,1,255,43,6,2,255,255,6,3,255,67,6,4,255,0,6,5,255,0,6,6,255,0,6,7,255,121,6,8,255,255,6,9,255,69,6,10,255,0,6,11,255,0,6,12,255,90,6,13,255,255,6,14,255,35,6,15,255,0,6,16,255,0,7,2,255,255,7,3,255,109,7,8,253,253,7,9,255,196,7,12,197,255,7,13,237,245,7,14,255,0,8,2,221,253,8,3,254,180,8,8,161,237,8,9,255,255,8,10,250,240,8,11,236,254,8,12,255,255,8,13,220,119,8,14,228,0,9,3,229,80,9,4,180,0,9,9,214,185,9,10,255,243,9,11,253,235,9,12,245,130,9,13,255,1,10,10,156,0,10,11,243,0,10,12,233,0],"secondary":false},{"width":11,"bonus":200,"chr":"^","pixels":[1,8,169,255,1,9,253,255,2,6,171,255,2,7,253,255,2,8,225,248,2,9,203,126,2,10,253,0,3,4,173,255,3,5,253,255,3,6,217,246,3,7,199,112,3,8,254,3,3,9,219,0,4,2,175,255,4,3,253,255,4,4,208,242,4,5,197,98,4,6,254,0,4,7,209,0,5,1,255,255,5,2,253,255,5,3,207,123,5,4,254,0,5,5,198,0,6,2,255,202,6,3,255,253,6,4,205,215,7,3,216,82,7,4,254,196,7,5,255,255,7,6,206,239,8,5,209,77,8,6,254,189,8,7,255,255,8,8,224,240,9,7,203,70,9,8,255,181,9,9,255,255,10,9,196,65,10,10,255,0],"secondary":false},{"width":11,"bonus":105,"chr":"~","pixels":[1,8,231,255,2,7,247,255,2,8,195,160,2,9,231,0,3,7,255,255,3,8,250,94,4,7,250,254,4,8,255,146,5,7,186,253,5,8,254,234,6,8,255,255,6,9,238,58,7,8,255,255,7,9,255,78,8,8,255,255,8,9,255,43,9,7,199,255,9,8,207,230,9,9,255,0,10,8,200,0,10,9,187,0],"secondary":false},{"width":15,"bonus":550,"chr":"&","pixels":[1,10,227,255,1,11,247,255,1,12,203,255,2,3,191,255,2,4,187,255,2,8,179,255,2,9,255,255,2,10,246,246,2,11,252,228,2,12,255,255,2,13,253,252,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,206,218,3,8,255,255,3,9,221,162,3,10,255,5,3,11,237,0,3,12,233,80,3,13,254,252,3,14,252,164,4,1,195,255,4,2,238,248,4,3,255,40,4,4,255,25,4,5,255,158,4,6,255,255,4,7,255,255,4,8,217,221,4,9,255,0,4,13,196,224,4,14,255,219,4,15,162,0,5,1,235,255,5,2,228,157,5,3,231,0,5,6,226,201,5,7,255,255,5,8,255,158,5,9,188,0,5,14,252,251,5,15,219,0,6,1,241,255,6,2,246,141,6,6,235,255,6,7,252,248,6,8,255,255,6,9,203,149,6,14,247,247,6,15,248,0,7,1,205,255,7,2,253,229,7,3,154,65,7,5,187,255,7,6,242,255,7,7,238,44,7,8,254,209,7,9,254,255,7,10,165,133,7,13,185,255,7,14,231,224,7,15,240,0,8,2,255,255,8,3,255,255,8,4,255,255,8,5,254,255,8,6,211,105,8,7,242,0,8,9,249,231,8,10,255,247,8,13,251,255,8,14,221,148,8,15,202,0,9,2,154,157,9,3,255,184,9,4,254,180,9,5,255,69,9,6,254,0,9,10,253,241,9,11,254,236,9,12,210,240,9,13,243,254,9,14,252,23,10,4,184,0,10,5,180,0,10,11,255,255,10,12,255,255,10,13,222,130,10,14,242,0,11,10,213,255,11,11,255,255,11,12,255,255,11,13,255,221,12,8,239,255,12,9,255,255,12,10,247,252,12,11,231,120,12,12,255,91,12,13,255,253,12,14,251,229,13,8,211,255,13,9,247,131,13,10,255,23,13,11,244,0,13,14,255,253,13,15,225,0,14,9,212,0,14,15,253,0],"secondary":false},{"width":12,"bonus":250,"chr":"*","pixels":[2,3,247,255,2,4,215,229,3,3,187,253,3,4,253,214,3,5,193,0,3,7,189,255,4,4,248,238,4,5,224,82,4,6,233,255,4,7,255,255,4,8,240,212,5,0,207,255,5,1,179,255,5,3,154,255,5,4,254,255,5,5,254,252,5,6,200,229,5,7,239,71,5,8,255,0,5,9,200,0,6,0,255,255,6,1,254,252,6,2,246,234,6,3,236,226,6,4,255,255,6,5,254,237,6,6,253,114,6,7,182,14,7,1,255,2,7,2,251,0,7,3,236,98,7,4,252,242,7,5,255,148,7,6,255,255,7,7,243,245,8,3,161,255,8,4,230,241,8,5,239,0,8,6,182,116,8,7,254,240,8,8,249,191,9,3,231,255,9,4,234,217,9,5,218,0,9,8,243,44,9,9,187,0,10,3,180,254,10,4,245,153,10,5,199,0,11,4,180,0],"secondary":false},{"width":7,"bonus":245,"chr":"(","pixels":[1,4,175,255,1,5,215,255,1,6,233,255,1,7,249,255,1,8,247,255,1,9,231,255,1,10,211,255,1,11,167,255,2,1,221,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,252,251,2,6,251,235,2,7,252,218,2,8,254,218,2,9,254,234,2,10,254,251,2,11,255,255,2,12,255,255,2,13,255,255,2,14,222,245,3,0,255,255,3,1,246,246,3,2,242,161,3,3,255,89,3,4,255,37,3,5,255,1,3,6,248,0,3,7,231,0,3,8,215,0,3,9,217,0,3,10,233,2,3,11,250,42,3,12,255,92,3,13,255,154,3,14,254,239,3,15,255,255,3,16,238,240,4,0,235,89,4,1,255,6,4,2,237,0,4,14,156,10,4,15,243,87,4,16,255,207,4,17,255,255,5,0,205,0,5,17,224,107,5,18,255,0],"secondary":false},{"width":7,"bonus":245,"chr":")","pixels":[2,16,239,255,2,17,248,255,3,0,255,255,3,1,255,255,3,2,216,246,3,13,203,255,3,14,255,255,3,15,255,255,3,16,223,215,3,17,242,40,3,18,248,0,4,0,202,82,4,1,254,162,4,2,254,245,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,252,252,4,14,237,183,4,15,255,71,4,16,255,0,4,17,188,0,5,2,166,16,5,3,247,64,5,4,255,115,5,5,255,160,5,6,254,180,5,7,255,197,5,8,254,201,5,9,254,183,5,10,254,164,5,11,255,123,5,12,255,69,5,13,255,15,5,14,249,0,5,15,170,0,6,6,160,0,6,7,180,0,6,8,197,0,6,9,200,0,6,10,182,0,6,11,164,0],"secondary":false},{"width":8,"bonus":75,"chr":"_","pixels":[0,17,255,255,1,17,255,255,1,18,255,84,2,17,255,255,2,18,255,84,3,17,255,255,3,18,255,84,4,17,255,255,4,18,255,84,5,17,255,255,5,18,255,84,6,17,255,255,6,18,255,84,7,17,255,255,7,18,255,84],"secondary":false},{"width":7,"bonus":50,"chr":"-","pixels":[1,8,255,255,2,8,255,255,2,9,255,84,3,8,255,255,3,9,255,84,4,8,255,255,4,9,255,84,5,8,255,255,5,9,255,84,6,9,255,0],"secondary":true},{"width":11,"bonus":180,"chr":"=","pixels":[1,6,255,255,1,10,255,255,2,6,255,255,2,7,255,84,2,10,255,255,2,11,255,84,3,6,255,255,3,7,255,84,3,10,255,255,3,11,255,84,4,6,255,255,4,7,255,84,4,10,255,255,4,11,255,84,5,6,255,255,5,7,255,84,5,10,255,255,5,11,255,84,6,6,255,255,6,7,255,84,6,10,255,255,6,11,255,84,7,6,255,255,7,7,255,84,7,10,255,255,7,11,255,84,8,6,255,255,8,7,255,84,8,10,255,255,8,11,255,84,9,6,255,255,9,7,255,84,9,10,255,255,9,11,255,84,10,7,255,0,10,11,255,0],"secondary":false},{"width":7,"bonus":295,"chr":"[","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,3,0,255,208,3,1,255,208,3,2,255,208,3,3,255,208,3,4,255,208,3,5,255,208,3,6,255,208,3,7,255,208,3,8,255,208,3,9,255,208,3,10,255,208,3,11,255,208,3,12,255,208,3,13,255,208,3,14,255,208,3,15,255,208,3,16,254,215,3,17,255,255,3,18,255,84,4,0,223,0,4,1,208,0,4,2,208,0,4,3,208,0,4,4,208,0,4,5,208,0,4,6,208,0,4,7,208,0,4,8,208,0,4,9,208,0,4,10,208,0,4,11,208,0,4,12,208,0,4,13,208,0,4,14,208,0,4,15,208,0,4,16,215,43,4,17,255,255,4,18,255,84,5,17,255,255,5,18,255,84,6,18,255,6],"secondary":false},{"width":7,"bonus":300,"chr":"]","pixels":[1,17,255,255,2,17,255,255,2,18,255,84,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,255,3,18,255,84,4,0,255,208,4,1,255,208,4,2,255,208,4,3,255,208,4,4,255,208,4,5,255,208,4,6,255,208,4,7,255,208,4,8,255,208,4,9,255,208,4,10,255,208,4,11,255,208,4,12,255,208,4,13,255,208,4,14,255,208,4,15,255,208,4,16,255,208,4,17,255,208,4,18,255,68,5,0,208,0,5,1,208,0,5,2,208,0,5,3,208,0,5,4,208,0,5,5,208,0,5,6,208,0,5,7,208,0,5,8,208,0,5,9,208,0,5,10,208,0,5,11,208,0,5,12,208,0,5,13,208,0,5,14,208,0,5,15,208,0,5,16,208,0,5,17,208,0,5,18,208,0],"secondary":false},{"width":8,"bonus":285,"chr":"{","pixels":[1,8,255,255,1,9,184,156,2,7,191,255,2,8,232,246,2,9,255,215,3,0,245,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,252,254,3,8,208,81,3,9,253,244,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,253,255,3,16,213,255,4,0,244,234,4,1,254,209,4,2,255,208,4,3,255,208,4,4,255,208,4,5,255,207,4,6,254,186,4,7,255,78,4,8,252,0,4,10,251,191,4,11,255,208,4,12,255,208,4,13,255,208,4,14,255,208,4,15,254,215,4,16,255,251,4,17,250,232,5,0,255,0,5,1,224,0,5,2,208,0,5,3,208,0,5,4,208,0,5,5,208,0,5,6,207,0,5,7,186,0,5,11,188,0,5,12,208,0,5,13,208,0,5,14,208,0,5,15,208,0,5,16,229,103,5,17,255,255,5,18,233,60,6,17,174,188,6,18,255,38],"secondary":false},{"width":8,"bonus":295,"chr":"}","pixels":[1,17,255,255,2,17,255,255,2,18,255,34,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,235,255,3,10,235,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,226,215,3,18,255,0,4,0,255,197,4,1,255,208,4,2,255,208,4,3,255,208,4,4,255,208,4,5,255,208,4,6,254,233,4,7,255,255,4,8,180,146,4,9,251,255,4,10,242,246,4,11,252,211,4,12,255,208,4,13,255,208,4,14,255,208,4,15,255,205,4,16,255,161,4,17,255,17,4,18,190,0,5,1,197,0,5,2,208,0,5,3,208,0,5,4,208,0,5,5,208,0,5,6,208,1,5,7,246,154,5,8,254,245,5,9,211,219,5,10,252,3,5,11,234,0,5,12,208,0,5,13,208,0,5,14,208,0,5,15,208,0,5,16,205,0,5,17,161,0,6,8,255,255,6,9,248,100,6,10,181,0,7,9,255,0],"secondary":false},{"width":6,"bonus":85,"chr":":","pixels":[2,4,183,255,2,5,247,255,2,13,247,255,2,14,181,255,3,4,215,255,3,5,255,255,3,6,252,176,3,12,175,255,3,13,255,255,3,14,254,214,3,15,181,0,4,5,219,36,4,6,255,3,4,7,174,0,4,13,184,43,4,14,255,6,4,15,213,0],"secondary":true},{"width":6,"bonus":115,"chr":";","pixels":[1,17,181,255,2,4,183,255,2,5,247,255,2,13,239,255,2,14,255,255,2,15,255,255,2,16,248,252,2,17,209,200,2,18,181,0,3,4,215,255,3,5,255,255,3,6,252,176,3,13,223,255,3,14,250,162,3,15,255,83,3,16,255,11,3,17,245,0,3,18,164,0,4,5,219,36,4,6,255,3,4,7,174,0,4,14,223,0,4,15,158,0],"secondary":true},{"width":10,"bonus":130,"chr":"\\"","pixels":[2,1,167,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,4,2,255,93,4,3,255,67,4,4,255,42,4,5,255,16,4,6,255,0,6,1,255,255,6,2,255,255,6,3,238,255,6,4,213,255,6,5,187,255,7,1,249,255,7,2,255,225,7,3,255,199,7,4,249,178,7,5,238,159,7,6,188,0,8,2,249,0,8,3,225,0,8,4,199,0,8,5,174,0],"secondary":true},{"width":7,"bonus":55,"chr":"\'","pixels":[2,1,167,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,4,2,255,93,4,3,255,67,4,4,255,42,4,5,255,16,4,6,255,0],"secondary":true},{"width":11,"bonus":190,"chr":"<","pixels":[1,8,235,255,2,8,253,255,2,9,253,240,3,7,243,255,3,8,184,154,3,9,254,243,3,10,245,118,4,7,222,252,4,8,243,4,4,9,192,190,4,10,253,228,5,6,247,255,5,7,185,134,5,8,220,0,5,10,253,253,5,11,236,101,6,5,155,255,6,6,223,251,6,7,248,4,6,10,183,240,6,11,254,212,7,5,251,255,7,6,193,128,7,7,220,0,7,11,255,255,7,12,223,87,8,4,169,255,8,5,225,249,8,6,252,4,8,11,213,241,8,12,254,195,9,4,253,255,9,5,201,123,9,6,220,0,9,12,255,255,9,13,207,70,10,5,254,0,10,13,255,0],"secondary":false},{"width":11,"bonus":190,"chr":">","pixels":[1,4,253,255,1,12,255,255,2,4,185,233,2,5,254,221,2,11,201,255,2,12,214,231,2,13,255,0,3,5,253,253,3,6,233,105,3,11,255,255,3,12,216,89,3,13,194,0,4,5,170,233,4,6,255,219,4,10,171,255,4,11,221,244,4,12,255,1,5,6,252,251,5,7,232,104,5,10,251,255,5,11,201,119,5,12,211,0,6,6,155,234,6,7,254,220,6,10,229,251,6,11,252,5,7,7,250,248,7,8,234,119,7,9,241,255,7,10,192,150,7,11,226,0,8,8,254,252,8,9,245,247,8,10,242,13,9,8,245,245,9,9,253,133,9,10,238,0,10,9,236,0],"secondary":false},{"width":9,"bonus":205,"chr":"\\\\","pixels":[2,0,255,255,2,1,255,255,2,2,246,252,2,3,183,253,3,0,228,40,3,1,255,103,3,2,254,171,3,3,254,237,3,4,255,255,3,5,255,255,3,6,237,251,3,7,168,254,4,3,170,2,4,4,239,52,4,5,255,117,4,6,255,184,4,7,254,246,4,8,255,255,4,9,255,255,4,10,226,250,4,11,154,255,5,7,186,8,5,8,247,65,5,9,255,130,5,10,254,198,5,11,254,252,5,12,255,255,5,13,254,255,5,14,212,251,6,11,200,17,6,12,251,77,6,13,254,144,6,14,255,211,6,15,255,255,6,16,255,255,6,17,251,254,7,15,215,29,7,16,255,90,7,17,255,158,7,18,250,0,8,18,158,0],"secondary":false},{"width":5,"bonus":45,"chr":".","pixels":[1,13,247,255,1,14,181,255,2,12,173,255,2,13,255,255,2,14,253,214,2,15,181,0,3,13,183,42,3,14,255,5,3,15,212,0],"secondary":true},{"width":5,"bonus":65,"chr":",","pixels":[1,14,165,255,1,15,215,255,1,16,253,255,1,17,255,255,2,13,255,255,2,14,255,255,2,15,249,245,2,16,238,160,2,17,254,45,2,18,255,0,3,14,255,80,3,15,255,7,3,16,240,0],"secondary":true},{"width":12,"bonus":280,"chr":"|","pixels":[5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,255,255,5,17,255,255,6,0,255,208,6,1,255,208,6,2,255,208,6,3,255,208,6,4,255,208,6,5,255,208,6,6,255,208,6,7,255,208,6,8,255,208,6,9,255,208,6,10,255,208,6,11,255,208,6,12,255,208,6,13,255,208,6,14,255,208,6,15,255,208,6,16,255,208,6,17,255,208,6,18,255,0,7,0,208,0,7,1,208,0,7,2,208,0,7,3,208,0,7,4,208,0,7,5,208,0,7,6,208,0,7,7,208,0,7,8,208,0,7,9,208,0,7,10,208,0,7,11,208,0,7,12,208,0,7,13,208,0,7,14,208,0,7,15,208,0,7,16,208,0,7,17,208,0,7,18,208,0],"secondary":false}],"width":19,"spacewidth":5,"shadow":true,"height":20,"basey":14}');

/***/ }),

/***/ "./src/fonts/chatbox/22pt.fontmeta.json":
/*!**********************************************!*\
  !*** ./src/fonts/chatbox/22pt.fontmeta.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":13,"bonus":455,"chr":"a","pixels":[1,12,233,255,1,13,249,255,1,14,211,255,2,10,157,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,3,6,255,255,3,10,253,255,3,11,247,241,3,12,254,64,3,13,255,12,3,14,255,87,3,15,255,253,3,16,254,198,4,5,187,255,4,6,236,241,4,7,255,0,4,10,255,255,4,11,253,98,4,12,233,0,4,15,210,227,4,16,254,240,4,17,198,0,5,5,233,255,5,6,236,201,5,7,223,0,5,10,255,255,5,11,255,32,5,15,165,255,5,16,252,247,5,17,240,0,6,5,251,255,6,6,247,169,6,7,186,0,6,10,255,255,6,11,255,6,6,15,199,255,6,16,237,219,6,17,244,0,7,5,237,255,7,6,254,198,7,7,164,0,7,9,155,255,7,10,255,255,7,11,255,0,7,15,253,255,7,16,220,112,7,17,203,0,8,5,189,255,8,6,255,255,8,7,221,121,8,9,155,255,8,10,255,255,8,11,255,0,8,14,227,255,8,15,168,223,8,16,254,0,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,250,209,9,16,211,182,10,7,255,205,10,8,255,247,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,11,8,205,0,11,9,247,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0,11,16,255,0,11,17,255,0],"secondary":false},{"width":13,"bonus":515,"chr":"b","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,254,255,3,5,255,243,3,6,254,239,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,213,3,16,255,143,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,254,13,4,6,253,198,4,7,252,207,4,8,255,77,4,9,255,23,4,10,255,4,4,11,255,4,4,12,255,25,4,13,255,81,4,14,255,209,4,15,255,199,4,16,215,16,5,6,238,254,5,7,201,28,5,8,205,0,5,15,251,242,5,16,230,156,6,5,227,255,6,6,222,209,6,7,237,0,6,15,188,247,6,16,253,229,7,5,249,255,7,6,245,176,7,7,182,0,7,15,167,255,7,16,253,251,7,17,227,0,8,5,219,255,8,6,255,237,8,7,176,29,8,15,237,255,8,16,242,231,8,17,249,0,9,6,255,255,9,7,252,222,9,14,221,255,9,15,255,255,9,16,246,130,9,17,220,0,10,6,214,209,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,244,183,10,16,255,6,11,7,201,103,11,8,255,175,11,9,254,227,11,10,254,249,11,11,254,249,11,12,254,227,11,13,254,174,11,14,255,80,11,15,255,0,11,16,175,0,12,9,175,0,12,10,226,0,12,11,248,0,12,12,248,0,12,13,226,0,12,14,174,0],"secondary":false},{"width":10,"bonus":300,"chr":"c","pixels":[1,8,158,255,1,9,219,255,1,10,247,255,1,11,247,255,1,12,225,255,1,13,167,255,2,7,251,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,156,206,3,6,253,255,3,7,244,246,3,8,254,113,3,9,255,36,3,10,255,6,3,11,255,13,3,12,255,43,3,13,255,125,3,14,255,237,3,15,255,255,3,16,163,113,4,5,173,255,4,6,252,254,4,7,254,47,4,8,236,0,4,15,254,251,4,16,254,183,5,5,231,255,5,6,234,206,5,7,251,0,5,15,198,239,5,16,254,237,5,17,182,0,6,5,249,255,6,6,246,168,6,7,189,0,6,15,161,255,6,16,253,252,6,17,236,0,7,5,231,255,7,6,254,188,7,7,162,0,7,15,185,255,7,16,246,239,7,17,250,0,8,5,196,255,8,6,253,246,8,7,188,10,8,15,239,255,8,16,235,199,8,17,231,0,9,6,216,103,9,7,244,4,9,16,243,63,9,17,183,0],"secondary":false},{"width":13,"bonus":520,"chr":"d","pixels":[1,8,175,255,1,9,225,255,1,10,249,255,1,11,249,255,1,12,227,255,1,13,178,255,2,6,177,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,206,225,3,6,255,255,3,7,246,235,3,8,255,104,3,9,255,34,3,10,255,6,3,11,255,4,3,12,255,28,3,13,255,93,3,14,255,219,3,15,255,255,3,16,219,152,4,5,219,255,4,6,247,247,4,7,255,27,4,8,227,0,4,15,252,240,4,16,254,222,5,5,249,255,5,6,243,177,5,7,239,0,5,15,174,245,5,16,255,249,5,17,222,0,6,5,225,255,6,6,252,176,6,7,169,0,6,15,181,255,6,16,244,236,6,17,249,0,7,6,253,241,7,7,181,31,7,15,237,255,7,16,220,160,7,17,226,0,8,6,225,217,8,7,252,220,8,14,203,255,8,15,195,247,8,16,238,11,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,251,255,9,6,238,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,248,229,9,16,235,192,10,1,255,255,10,2,255,255,10,3,255,255,10,4,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,10,17,177,0,11,2,255,0,11,3,255,0,11,4,255,0,11,5,255,0,11,6,255,0,11,7,255,0,11,8,255,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0,11,16,255,0,11,17,255,0],"secondary":false},{"width":12,"bonus":435,"chr":"e","pixels":[1,8,153,255,1,9,217,255,1,10,245,255,1,11,247,255,1,12,221,255,1,13,157,255,2,7,251,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,253,252,3,6,255,255,3,7,228,234,3,8,252,69,3,9,254,162,3,10,255,255,3,11,255,7,3,12,255,41,3,13,255,129,3,14,255,247,3,15,254,252,4,5,185,255,4,6,245,252,4,7,255,23,4,8,210,0,4,9,182,218,4,10,255,255,4,11,255,0,4,14,166,114,4,15,255,255,4,16,254,168,5,5,239,255,5,6,235,197,5,7,242,0,5,9,155,255,5,10,255,255,5,11,255,0,5,15,218,237,5,16,255,229,5,17,167,0,6,5,247,255,6,6,250,172,6,7,182,0,6,9,155,255,6,10,255,255,6,11,255,0,6,15,161,255,6,16,254,252,6,17,229,0,7,5,211,255,7,6,254,225,7,7,171,9,7,9,155,255,7,10,255,255,7,11,255,0,7,15,175,255,7,16,251,249,7,17,251,0,8,6,255,255,8,7,244,177,8,9,159,255,8,10,255,255,8,11,255,0,8,15,209,255,8,16,242,225,8,17,246,0,9,6,223,221,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,0,9,15,253,255,9,16,235,154,9,17,214,0,10,7,221,138,10,8,254,210,10,9,255,247,10,10,255,255,10,11,255,0,10,16,254,38,11,9,210,0,11,10,247,0,11,11,255,0],"secondary":false},{"width":9,"bonus":340,"chr":"f","pixels":[1,6,155,255,2,5,221,255,2,6,208,191,2,7,156,0,3,3,219,255,3,4,251,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,4,17,255,0,5,1,209,255,5,2,248,250,5,3,255,59,5,4,255,3,5,5,255,255,5,6,254,156,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,11,255,0,5,12,255,0,5,13,255,0,5,14,255,0,5,15,255,0,5,16,255,0,5,17,255,0,6,1,241,255,6,2,240,182,6,3,243,0,6,5,255,255,6,6,254,156,6,7,156,0,7,1,241,255,7,2,251,178,7,3,171,0,7,5,255,255,7,6,254,156,7,7,156,0,8,1,197,255,8,2,250,173,8,3,175,0,8,6,255,0,8,7,156,0],"secondary":false},{"width":13,"bonus":585,"chr":"g","pixels":[1,8,172,255,1,9,225,255,1,10,249,255,1,11,249,255,1,12,227,255,1,13,178,255,2,6,171,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,206,225,2,20,255,255,3,6,255,255,3,7,244,234,3,8,255,111,3,9,255,38,3,10,255,12,3,11,255,4,3,12,255,30,3,13,254,94,3,14,254,219,3,15,255,255,3,16,219,153,3,20,240,248,3,21,254,189,4,5,221,255,4,6,246,246,4,7,255,23,4,8,224,0,4,15,252,239,4,16,255,223,4,20,194,255,4,21,252,228,5,5,249,255,5,6,243,175,5,7,237,0,5,15,173,246,5,16,254,251,5,17,223,0,5,20,167,255,5,21,252,248,6,5,221,255,6,6,252,176,6,7,167,0,6,15,181,255,6,16,244,234,6,17,250,0,6,20,179,255,6,21,252,250,7,6,253,241,7,7,181,31,7,15,237,255,7,16,219,153,7,17,224,0,7,20,239,255,7,21,243,226,8,6,221,214,8,7,253,219,8,14,205,255,8,15,180,244,8,16,238,6,8,19,208,255,8,20,255,255,8,21,248,145,9,5,181,255,9,6,226,254,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,255,255,9,16,255,255,9,17,255,255,9,18,255,255,9,19,255,255,9,20,249,226,9,21,255,20,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,10,17,255,245,10,18,255,213,10,19,255,136,10,20,255,18,10,21,221,0,11,6,255,0,11,7,255,0,11,8,255,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0,11,16,255,0,11,17,255,0,11,18,245,0,11,19,213,0],"secondary":false},{"width":14,"bonus":480,"chr":"h","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,254,255,3,6,255,243,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,5,4,6,255,179,4,7,253,223,4,8,255,91,4,9,255,27,4,10,255,4,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,6,247,255,5,7,191,55,5,8,222,0,6,5,213,255,6,6,222,223,6,7,247,0,7,5,247,255,7,6,241,176,7,7,194,0,8,5,239,255,8,6,253,211,8,7,166,2,9,5,187,255,9,6,255,255,9,7,236,161,10,6,254,254,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,11,7,255,190,11,8,254,240,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,255,11,15,255,255,11,16,255,255,11,17,255,0,12,8,190,0,12,9,240,0,12,10,255,0,12,11,255,0,12,12,255,0,12,13,255,0,12,14,255,0,12,15,255,0,12,16,255,0,12,17,255,0],"secondary":false},{"width":6,"bonus":220,"chr":"i","pixels":[2,1,199,255,2,2,225,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,197,255,3,2,248,230,3,3,227,9,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,198,0,4,3,224,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0],"secondary":false},{"width":6,"bonus":300,"chr":"j","pixels":[0,20,166,255,0,21,253,252,1,20,231,255,1,21,244,235,2,1,199,255,2,2,225,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,255,255,2,20,255,255,2,21,244,143,3,1,197,255,3,2,248,230,3,3,227,9,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,255,3,18,255,251,3,19,254,221,3,20,255,131,3,21,255,8,4,2,198,0,4,3,224,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,4,18,255,0,4,19,251,0,4,20,220,0],"secondary":false},{"width":12,"bonus":445,"chr":"k","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,13,4,10,255,173,4,11,255,243,4,12,255,50,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,9,213,255,5,10,255,255,5,11,233,202,5,12,243,8,6,8,229,255,6,9,250,254,6,10,250,232,6,11,255,255,6,12,242,221,7,7,237,255,7,8,247,253,7,9,235,76,7,10,249,17,7,11,246,181,7,12,255,255,7,13,253,247,8,6,245,255,8,7,241,252,8,8,241,60,8,9,245,0,8,12,210,134,8,13,255,249,8,14,255,255,8,15,203,212,9,5,251,255,9,6,238,248,9,7,247,46,9,8,238,0,9,14,254,220,9,15,255,255,9,16,243,232,10,5,221,255,10,6,251,35,10,7,231,0,10,15,243,174,10,16,255,255,10,17,222,0,11,6,222,0,11,16,201,128,11,17,255,0],"secondary":false},{"width":6,"bonus":245,"chr":"l","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0],"secondary":false},{"width":20,"bonus":650,"chr":"m","pixels":[2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,5,175,255,3,6,254,222,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,6,235,208,4,7,248,207,4,8,255,74,4,9,255,22,4,10,255,3,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,6,233,254,5,7,195,21,5,8,201,0,6,5,229,255,6,6,219,202,6,7,232,0,7,5,247,255,7,6,249,195,7,7,174,0,8,5,209,255,8,6,255,255,8,7,222,143,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,255,255,9,16,255,255,10,6,159,164,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,10,17,255,0,11,6,223,255,11,7,220,229,11,8,255,67,11,9,255,16,11,10,255,1,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0,11,16,255,0,11,17,255,0,12,5,157,255,12,6,233,253,12,7,224,17,12,8,197,0,13,5,231,255,13,6,223,199,13,7,231,0,14,5,249,255,14,6,250,194,14,7,174,0,15,5,213,255,15,6,255,255,15,7,222,144,16,6,255,255,16,7,255,255,16,8,255,255,16,9,255,255,16,10,255,255,16,11,255,255,16,12,255,255,16,13,255,255,16,14,255,255,16,15,255,255,16,16,255,255,17,6,157,151,17,7,254,198,17,8,254,243,17,9,255,255,17,10,255,255,17,11,255,255,17,12,255,255,17,13,255,255,17,14,255,255,17,15,255,255,17,16,255,255,17,17,255,0,18,8,198,0,18,9,242,0,18,10,255,0,18,11,255,0,18,12,255,0,18,13,255,0,18,14,255,0,18,15,255,0,18,16,255,0,18,17,255,0],"secondary":false},{"width":14,"bonus":420,"chr":"n","pixels":[2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,5,175,255,3,6,254,222,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,6,231,198,4,7,251,225,4,8,255,90,4,9,255,27,4,10,255,4,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,6,247,255,5,7,192,54,5,8,221,0,6,5,213,255,6,6,222,223,6,7,247,0,7,5,247,255,7,6,241,176,7,7,194,0,8,5,241,255,8,6,253,211,8,7,166,2,9,5,191,255,9,6,255,255,9,7,236,161,10,6,254,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,11,7,255,189,11,8,254,240,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,255,11,15,255,255,11,16,255,255,11,17,255,0,12,8,189,0,12,9,240,0,12,10,255,0,12,11,255,0,12,12,255,0,12,13,255,0,12,14,255,0,12,15,255,0,12,16,255,0,12,17,255,0],"secondary":false},{"width":13,"bonus":410,"chr":"o","pixels":[1,8,159,255,1,9,221,255,1,10,247,255,1,11,243,255,1,12,213,255,2,7,251,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,251,249,3,6,253,255,3,7,244,246,3,8,254,111,3,9,255,34,3,10,255,5,3,11,255,7,3,12,255,38,3,13,255,118,3,14,255,241,3,15,255,249,4,5,173,255,4,6,252,254,4,7,254,47,4,8,236,0,4,15,255,253,4,16,252,166,5,5,231,255,5,6,233,206,5,7,251,0,5,15,205,238,5,16,255,227,5,17,164,0,6,5,249,255,6,6,246,167,6,7,188,0,6,15,161,255,6,16,253,252,6,17,227,0,7,5,231,255,7,6,253,193,7,7,161,0,7,15,191,255,7,16,246,240,7,17,250,0,8,5,169,255,8,6,255,253,8,7,206,71,8,15,253,255,8,16,234,186,8,17,232,0,9,6,253,253,9,7,255,241,9,14,241,255,9,15,252,254,9,16,254,54,9,17,171,0,10,7,255,249,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,252,253,10,15,247,101,10,16,252,0,11,8,253,154,11,9,254,219,11,10,254,246,11,11,254,246,11,12,254,219,11,13,255,154,11,14,255,43,11,15,250,0,12,10,218,0,12,11,246,0,12,12,246,0,12,13,218,0,12,14,154,0],"secondary":false},{"width":13,"bonus":525,"chr":"p","pixels":[2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,255,255,2,20,255,255,2,21,255,255,3,5,181,255,3,6,255,223,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,239,3,16,254,246,3,17,255,255,3,18,255,255,3,19,255,255,3,20,255,255,3,21,255,255,4,6,235,203,4,7,249,207,4,8,255,71,4,9,255,18,4,10,255,1,4,11,255,5,4,12,255,27,4,13,255,87,4,14,254,213,4,15,255,197,4,16,239,14,4,17,246,0,4,18,255,0,4,19,255,0,4,20,255,0,4,21,255,0,5,6,236,255,5,7,192,26,5,8,202,0,5,15,252,241,5,16,229,157,6,5,225,255,6,6,221,209,6,7,236,0,6,15,177,246,6,16,253,229,7,5,249,255,7,6,244,177,7,7,181,0,7,15,169,255,7,16,253,251,7,17,228,0,8,5,221,255,8,6,255,241,8,7,179,41,8,15,241,255,8,16,243,231,8,17,249,0,9,6,255,255,9,7,253,232,9,14,231,255,9,15,255,255,9,16,248,129,9,17,220,0,10,6,217,210,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,247,179,10,16,255,6,11,7,203,104,11,8,254,177,11,9,255,227,11,10,254,249,11,11,255,247,11,12,255,225,11,13,255,173,11,14,255,78,11,15,255,0,11,16,173,0,12,9,176,0,12,10,227,0,12,11,248,0,12,12,247,0,12,13,225,0,12,14,173,0],"secondary":false},{"width":13,"bonus":525,"chr":"q","pixels":[1,8,173,255,1,9,225,255,1,10,249,255,1,11,249,255,1,12,227,255,1,13,175,255,2,6,173,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,204,224,3,6,255,255,3,7,245,235,3,8,255,113,3,9,255,39,3,10,255,13,3,11,255,10,3,12,255,36,3,13,255,106,3,14,255,221,3,15,255,255,3,16,218,153,4,5,219,255,4,6,246,246,4,7,255,25,4,8,226,0,4,15,253,239,4,16,255,223,5,5,247,255,5,6,242,177,5,7,238,0,5,15,174,246,5,16,254,251,5,17,223,0,6,5,223,255,6,6,253,175,6,7,168,0,6,15,179,255,6,16,245,234,6,17,250,0,7,6,253,241,7,7,179,30,7,15,235,255,7,16,219,157,7,17,225,0,8,6,222,213,8,7,252,218,8,14,197,255,8,15,190,249,8,16,235,10,9,5,173,255,9,6,222,254,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,252,245,9,16,254,254,9,17,255,255,9,18,255,255,9,19,255,255,9,20,255,255,9,21,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,255,255,10,16,255,255,10,17,255,255,10,18,255,255,10,19,255,255,10,20,255,255,10,21,255,255,11,6,255,0,11,7,255,0,11,8,255,0,11,9,255,0,11,10,255,0,11,11,255,0,11,12,255,0,11,13,255,0,11,14,255,0,11,15,255,0,11,16,255,0,11,17,255,0,11,18,255,0,11,19,255,0,11,20,255,0,11,21,255,0],"secondary":false},{"width":9,"bonus":245,"chr":"r","pixels":[2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,5,175,255,3,6,255,201,3,7,255,247,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,6,214,146,4,7,253,249,4,8,252,138,4,9,255,39,4,10,255,5,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,6,255,255,5,7,166,130,5,8,247,0,6,5,208,255,6,6,222,234,6,7,255,0,7,5,247,255,7,6,238,176,7,7,204,0,8,5,209,255,8,6,252,145,8,7,164,0],"secondary":false},{"width":10,"bonus":325,"chr":"s","pixels":[1,7,237,255,1,8,243,255,1,9,158,255,1,15,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,215,176,2,15,241,249,2,16,255,196,3,5,196,255,3,6,247,251,3,7,254,46,3,8,255,38,3,9,254,225,3,10,255,251,3,11,160,46,3,15,189,253,3,16,253,233,3,17,196,0,4,5,235,255,4,6,236,189,4,7,243,0,4,10,255,255,4,11,253,141,4,15,163,255,4,16,253,251,4,17,231,0,5,5,245,255,5,6,248,172,5,7,175,0,5,10,239,245,5,11,255,241,5,15,189,255,5,16,245,237,5,17,249,0,6,5,217,255,6,6,253,209,6,7,168,0,6,11,255,255,6,12,250,177,6,15,253,255,6,16,235,197,6,17,228,0,7,5,159,255,7,6,255,255,7,7,214,43,7,11,240,242,7,12,255,255,7,13,255,255,7,14,255,255,7,15,255,255,7,16,253,70,7,17,182,0,8,6,198,135,8,7,255,8,8,12,249,206,8,13,255,249,8,14,254,222,8,15,255,102,8,16,255,0,9,13,201,0,9,14,249,0,9,15,222,0],"secondary":false},{"width":9,"bonus":290,"chr":"t","pixels":[1,6,155,255,2,5,235,255,2,6,211,188,2,7,156,0,3,4,231,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,249,255,3,14,219,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,203,182,5,4,255,0,5,5,255,255,5,6,254,156,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,11,255,0,5,12,255,0,5,13,255,6,5,14,255,61,5,15,255,235,5,16,254,228,6,5,255,255,6,6,254,156,6,7,156,0,6,15,182,222,6,16,254,246,6,17,228,0,7,5,255,255,7,6,254,156,7,7,156,0,7,15,179,255,7,16,237,223,7,17,246,0,8,6,255,0,8,7,156,0,8,16,180,0,8,17,207,0],"secondary":false},{"width":14,"bonus":420,"chr":"u","pixels":[2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,241,255,2,14,191,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,254,255,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,2,4,13,255,30,4,14,255,142,4,15,255,255,4,16,255,191,5,15,235,226,5,16,254,243,5,17,191,0,6,15,165,255,6,16,254,250,6,17,242,0,7,15,193,255,7,16,241,230,7,17,249,0,8,15,247,255,8,16,225,146,8,17,218,0,9,14,223,255,9,15,198,241,9,16,247,8,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,255,10,13,255,255,10,14,255,255,10,15,251,231,10,16,236,199,11,5,255,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,255,11,15,255,255,11,16,255,255,11,17,184,0,12,6,255,0,12,7,255,0,12,8,255,0,12,9,255,0,12,10,255,0,12,11,255,0,12,12,255,0,12,13,255,0,12,14,255,0,12,15,255,0,12,16,255,0,12,17,255,0],"secondary":false},{"width":11,"bonus":320,"chr":"v","pixels":[0,5,208,255,1,5,255,255,1,6,255,255,1,7,253,253,1,8,185,247,2,6,255,155,2,7,255,239,2,8,255,255,2,9,255,255,2,10,243,249,3,7,157,10,3,8,244,84,3,9,255,171,3,10,255,247,3,11,255,255,3,12,255,255,3,13,222,245,4,10,176,20,4,11,250,98,4,12,255,184,4,13,254,251,4,14,255,255,4,15,253,253,4,16,192,245,5,13,188,23,5,14,252,133,5,15,254,246,5,16,255,255,5,17,184,0,6,13,221,255,6,14,255,255,6,15,255,255,6,16,253,223,6,17,255,0,7,10,217,255,7,11,255,255,7,12,255,255,7,13,250,248,7,14,243,166,7,15,255,63,7,16,255,1,7,17,222,0,8,7,199,255,8,8,255,255,8,9,255,255,8,10,254,255,8,11,245,197,8,12,254,94,8,13,255,11,8,14,243,0,8,15,158,0,9,5,251,255,9,6,255,255,9,7,255,255,9,8,247,227,9,9,255,125,9,10,255,31,9,11,254,0,9,12,189,0,10,5,241,255,10,6,253,157,10,7,255,60,10,8,255,0,10,9,220,0],"secondary":false},{"width":17,"bonus":595,"chr":"w","pixels":[0,5,158,255,1,5,255,255,1,6,255,255,1,7,254,255,1,8,211,250,2,6,255,159,2,7,255,223,2,8,255,255,2,9,255,255,2,10,255,255,2,11,249,253,2,12,189,252,3,7,159,0,3,8,227,36,3,9,255,96,3,10,255,160,3,11,254,225,3,12,255,255,3,13,255,255,3,14,255,255,3,15,237,251,3,16,167,255,4,11,160,0,4,12,228,36,4,13,254,94,4,14,254,186,4,15,255,255,4,16,255,255,4,17,167,0,5,12,177,255,5,13,241,253,5,14,255,255,5,15,255,255,5,16,254,213,5,17,255,0,6,9,202,255,6,10,253,255,6,11,255,255,6,12,254,254,6,13,237,211,6,14,247,120,6,15,255,36,6,16,255,0,6,17,212,0,7,6,219,255,7,7,255,255,7,8,255,255,7,9,251,251,7,10,239,192,7,11,255,100,7,12,255,22,7,13,253,0,7,14,196,0,8,5,255,255,8,6,255,255,8,7,244,190,8,8,255,71,8,9,255,8,8,10,247,0,8,11,180,0,9,5,221,255,9,6,255,255,9,7,255,255,9,8,252,248,9,9,206,231,10,6,227,47,10,7,255,119,10,8,255,196,10,9,255,253,10,10,255,255,10,11,255,255,10,12,221,249,11,9,201,25,11,10,253,94,11,11,255,171,11,12,254,240,11,13,255,255,11,14,255,255,11,15,242,251,11,16,168,252,12,12,172,6,12,13,245,81,12,14,255,187,12,15,255,255,12,16,255,255,12,17,166,0,13,11,154,255,13,12,217,255,13,13,255,255,13,14,255,255,13,15,255,255,13,16,254,231,13,17,255,0,14,8,211,255,14,9,255,255,14,10,255,255,14,11,255,255,14,12,251,249,14,13,245,192,14,14,255,114,14,15,255,44,14,16,255,0,14,17,230,0,15,5,253,255,15,6,255,255,15,7,255,255,15,8,254,255,15,9,247,215,15,10,254,138,15,11,255,68,15,12,255,8,15,13,246,0,15,14,184,0,16,5,231,255,16,6,254,162,16,7,255,92,16,8,255,23,16,9,254,0,16,10,208,0],"secondary":false},{"width":12,"bonus":345,"chr":"x","pixels":[1,5,241,255,1,16,253,255,2,5,247,255,2,6,255,255,2,7,203,218,2,14,213,255,2,15,255,255,2,16,240,235,2,17,254,0,3,6,253,203,3,7,255,255,3,8,247,239,3,13,249,255,3,14,255,255,3,15,238,164,3,16,255,12,3,17,222,0,4,7,226,134,4,8,254,249,4,9,255,255,4,10,186,215,4,11,196,255,4,12,255,255,4,13,240,242,4,14,251,72,4,15,255,0,4,16,153,0,5,9,253,215,5,10,255,255,5,11,255,255,5,12,236,188,5,13,255,16,5,14,228,0,6,9,250,254,6,10,255,255,6,11,255,255,6,12,254,233,6,13,199,101,7,7,205,255,7,8,255,255,7,9,237,236,7,10,250,58,7,11,255,100,7,12,255,243,7,13,255,255,7,14,191,217,8,6,249,255,8,7,255,255,8,8,234,164,8,9,255,11,8,10,219,0,8,13,252,201,8,14,255,255,8,15,246,238,9,5,255,255,9,6,242,242,9,7,250,74,9,8,255,0,9,14,226,142,9,15,255,251,9,16,255,255,10,5,171,255,10,6,255,19,10,7,230,0,10,15,153,90,10,16,254,219,10,17,255,0,11,6,171,0,11,17,218,0],"secondary":false},{"width":11,"bonus":420,"chr":"y","pixels":[0,5,247,255,0,6,167,246,0,20,175,255,0,21,223,255,1,5,247,255,1,6,255,255,1,7,255,255,1,8,220,243,1,20,166,255,1,21,252,250,2,6,251,108,2,7,254,204,2,8,255,255,2,9,255,255,2,10,248,251,2,11,161,246,2,20,229,255,2,21,243,232,3,8,212,55,3,9,254,144,3,10,255,235,3,11,255,255,3,12,255,255,3,13,215,243,3,19,197,255,3,20,255,255,3,21,242,136,4,11,242,89,4,12,254,177,4,13,254,249,4,14,255,255,4,15,247,250,4,16,161,248,4,17,197,255,4,18,255,255,4,19,255,255,4,20,238,194,4,21,255,9,5,13,190,63,5,14,253,188,5,15,255,255,5,16,255,255,5,17,255,255,5,18,245,220,5,19,255,92,5,20,255,1,5,21,181,0,6,12,205,255,6,13,255,255,6,14,255,255,6,15,250,244,6,16,255,152,6,17,255,55,6,18,255,0,6,19,211,0,7,9,191,255,7,10,253,255,7,11,255,255,7,12,254,255,7,13,241,199,7,14,255,91,7,15,255,9,7,16,240,0,8,6,171,255,8,7,247,255,8,8,255,255,8,9,255,255,8,10,247,230,8,11,254,127,8,12,255,31,8,13,254,0,8,14,188,0,9,5,255,255,9,6,255,255,9,7,252,248,9,8,252,165,9,9,255,65,9,10,255,1,9,11,223,0,10,5,197,255,10,6,255,101,10,7,255,14,10,8,246,0,10,9,163,0],"secondary":false},{"width":10,"bonus":370,"chr":"z","pixels":[1,5,255,255,1,6,155,255,1,15,223,255,1,16,255,255,2,5,255,255,2,6,254,156,2,7,156,0,2,13,157,255,2,14,255,255,2,15,251,254,2,16,255,255,2,17,255,0,3,5,255,255,3,6,254,156,3,7,156,0,3,12,229,255,3,13,248,255,3,14,201,145,3,15,255,157,3,16,255,255,3,17,255,0,4,5,255,255,4,6,254,156,4,7,156,0,4,10,167,255,4,11,255,255,4,12,223,239,4,13,233,49,4,14,248,0,4,15,200,198,4,16,255,255,4,17,255,0,5,5,255,255,5,6,254,156,5,7,156,0,5,9,233,255,5,10,253,255,5,11,214,164,5,12,255,6,5,13,209,0,5,15,155,255,5,16,255,255,5,17,255,0,6,5,255,255,6,6,255,179,6,7,225,201,6,8,255,255,6,9,235,244,6,10,239,67,6,11,253,0,6,15,155,255,6,16,255,255,6,17,255,0,7,5,255,255,7,6,255,255,7,7,255,255,7,8,226,182,7,9,255,15,7,10,225,0,7,15,155,255,7,16,255,255,7,17,255,0,8,5,255,255,8,6,255,237,8,7,255,85,8,8,255,0,8,9,162,0,8,15,155,255,8,16,255,255,8,17,255,0,9,6,255,0,9,7,237,0,9,16,156,0,9,17,255,0],"secondary":false},{"width":14,"bonus":480,"chr":"A","pixels":[0,16,207,255,1,13,169,255,1,14,247,255,1,15,255,255,1,16,255,255,1,17,207,0,2,11,225,255,2,12,255,255,2,13,255,255,2,14,247,241,2,15,252,145,2,16,255,47,2,17,255,0,3,8,189,255,3,9,253,255,3,10,255,255,3,11,255,255,3,12,245,182,3,13,255,79,3,14,255,5,3,15,234,0,4,6,239,255,4,7,255,255,4,8,255,255,4,9,242,217,4,10,254,228,4,11,255,255,4,12,255,0,4,13,175,0,5,3,209,255,5,4,255,255,5,5,255,255,5,6,245,240,5,7,248,144,5,8,255,45,5,9,255,0,5,10,242,202,5,11,255,255,5,12,255,0,6,1,249,255,6,2,255,255,6,3,237,240,6,4,236,161,6,5,255,71,6,6,255,3,6,7,231,0,6,10,191,255,6,11,255,255,6,12,255,0,7,1,253,255,7,2,255,255,7,3,254,221,7,4,241,148,7,5,172,85,7,10,191,255,7,11,255,255,7,12,255,0,8,2,253,127,8,3,254,222,8,4,255,255,8,5,255,255,8,6,227,247,8,10,191,255,8,11,255,255,8,12,255,0,9,4,231,73,9,5,254,164,9,6,254,246,9,7,255,255,9,8,255,255,9,9,205,246,9,10,227,255,9,11,255,255,9,12,255,0,10,6,169,23,10,7,250,106,10,8,255,202,10,9,255,255,10,10,255,255,10,11,255,255,10,12,255,184,11,9,211,53,11,10,255,142,11,11,254,234,11,12,255,255,11,13,255,255,11,14,243,249,12,12,240,87,12,13,254,180,12,14,254,252,12,15,255,255,12,16,255,255,13,14,188,35,13,15,253,121,13,16,255,217,13,17,255,0],"secondary":false},{"width":14,"bonus":670,"chr":"B","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,255,4,9,254,156,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,254,156,4,16,255,255,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,8,255,255,5,9,254,156,5,10,156,0,5,15,155,255,5,16,255,255,5,17,255,0,6,1,251,255,6,2,255,157,6,3,156,0,6,8,255,255,6,9,254,156,6,10,156,0,6,15,155,255,6,16,255,255,6,17,255,0,7,1,239,255,7,2,254,176,7,3,157,0,7,8,255,255,7,9,255,167,7,10,156,0,7,15,163,255,7,16,254,255,7,17,255,0,8,1,208,255,8,2,254,232,8,3,176,7,8,8,255,255,8,9,254,195,8,10,167,0,8,15,191,255,8,16,249,245,8,17,254,0,9,2,255,255,9,3,247,173,9,7,219,255,9,8,197,224,9,9,254,251,9,10,200,32,9,15,249,255,9,16,241,209,9,17,240,0,10,2,249,248,10,3,255,255,10,4,255,255,10,5,255,255,10,6,255,255,10,7,243,251,10,8,223,38,10,9,243,230,10,10,254,200,10,14,203,255,10,15,255,255,10,16,251,113,10,17,197,0,11,3,251,190,11,4,254,243,11,5,255,239,11,6,255,184,11,7,255,49,11,8,239,0,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,255,11,15,244,213,11,16,255,6,12,4,187,0,12,5,242,0,12,6,239,0,12,7,184,0,12,11,255,209,12,12,254,246,12,13,254,227,12,14,255,143,12,15,255,15,12,16,203,0,13,12,209,0,13,13,246,0,13,14,226,0],"secondary":false},{"width":14,"bonus":410,"chr":"C","pixels":[1,6,175,255,1,7,217,255,1,8,243,255,1,9,247,255,1,10,229,255,1,11,185,255,2,4,219,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,249,250,3,3,249,255,3,4,255,255,3,5,246,198,3,6,255,90,3,7,255,32,3,8,255,8,3,9,255,7,3,10,255,29,3,11,254,82,3,12,255,177,3,13,255,255,3,14,255,255,3,15,164,166,4,2,225,255,4,3,253,255,4,4,252,104,4,5,255,0,4,6,191,0,4,13,201,99,4,14,254,249,4,15,255,249,5,2,255,255,5,3,240,135,5,4,253,0,5,15,255,255,5,16,252,139,6,1,184,255,6,2,247,251,6,3,255,9,6,15,245,247,6,16,255,207,7,1,221,255,7,2,235,201,7,3,243,0,7,15,182,253,7,16,254,240,7,17,207,0,8,1,247,255,8,2,242,170,8,3,185,0,8,15,161,255,8,16,254,254,8,17,239,0,9,1,237,255,9,2,253,184,9,3,162,0,9,15,175,255,9,16,251,249,9,17,253,0,10,1,213,255,10,2,252,224,10,3,183,0,10,15,202,255,10,16,243,231,10,17,246,0,11,1,165,255,11,2,255,255,11,3,228,55,11,15,249,255,11,16,236,178,11,17,220,0,12,2,237,218,12,3,255,47,12,16,250,60,12,17,165,0,13,3,202,0],"secondary":false},{"width":16,"bonus":640,"chr":"D","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,254,156,4,16,255,255,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,15,155,255,5,16,255,255,5,17,255,0,6,1,255,255,6,2,254,156,6,3,156,0,6,15,160,255,6,16,254,255,6,17,255,0,7,1,245,255,7,2,254,171,7,3,156,0,7,15,175,255,7,16,249,245,7,17,254,0,8,1,225,255,8,2,253,203,8,3,170,0,8,15,217,255,8,16,242,227,8,17,239,0,9,1,177,255,9,2,254,251,9,3,205,22,9,15,255,255,9,16,241,170,9,17,215,0,10,2,255,255,10,3,252,134,10,14,161,255,10,15,255,255,10,16,255,79,10,17,160,0,11,2,239,245,11,3,255,253,11,4,177,133,11,14,255,255,11,15,239,225,11,16,255,2,12,3,255,251,12,4,255,255,12,5,208,222,12,12,197,255,12,13,255,255,12,14,249,249,12,15,255,44,12,16,211,0,13,4,255,233,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,246,225,13,14,254,46,13,15,243,0,14,5,242,115,14,6,255,183,14,7,255,229,14,8,254,249,14,9,254,243,14,10,255,221,14,11,255,169,14,12,255,91,14,13,255,3,14,14,217,0,15,7,183,0,15,8,229,0,15,9,248,0,15,10,242,0,15,11,221,0,15,12,169,0],"secondary":false},{"width":12,"bonus":535,"chr":"E","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,255,4,9,254,156,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,254,156,4,16,255,255,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,8,255,255,5,9,254,156,5,10,156,0,5,15,155,255,5,16,255,255,5,17,255,0,6,1,255,255,6,2,254,156,6,3,156,0,6,8,255,255,6,9,254,156,6,10,156,0,6,15,155,255,6,16,255,255,6,17,255,0,7,1,255,255,7,2,254,156,7,3,156,0,7,8,255,255,7,9,254,156,7,10,156,0,7,15,155,255,7,16,255,255,7,17,255,0,8,1,255,255,8,2,254,156,8,3,156,0,8,8,255,255,8,9,254,156,8,10,156,0,8,15,155,255,8,16,255,255,8,17,255,0,9,1,255,255,9,2,254,156,9,3,156,0,9,8,255,255,9,9,254,156,9,10,156,0,9,15,155,255,9,16,255,255,9,17,255,0,10,1,255,255,10,2,254,156,10,3,156,0,10,9,255,78,10,10,156,0,10,15,155,255,10,16,255,255,10,17,255,0,11,2,255,0,11,3,156,0,11,16,156,0,11,17,255,0],"secondary":false},{"width":12,"bonus":435,"chr":"F","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,254,156,4,9,255,255,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,8,155,255,5,9,255,255,5,10,255,0,6,1,255,255,6,2,254,156,6,3,156,0,6,8,155,255,6,9,255,255,6,10,255,0,7,1,255,255,7,2,254,156,7,3,156,0,7,8,155,255,7,9,255,255,7,10,255,0,8,1,255,255,8,2,254,156,8,3,156,0,8,8,155,255,8,9,255,255,8,10,255,0,9,1,255,255,9,2,254,156,9,3,156,0,9,8,155,255,9,9,255,255,9,10,255,0,10,1,255,255,10,2,254,156,10,3,156,0,10,9,206,159,10,10,255,0,11,2,255,0,11,3,156,0],"secondary":false},{"width":16,"bonus":580,"chr":"G","pixels":[1,6,171,255,1,7,215,255,1,8,241,255,1,9,247,255,1,10,229,255,1,11,183,255,2,4,208,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,246,248,3,3,241,255,3,4,255,255,3,5,244,209,3,6,254,94,3,7,255,33,3,8,255,8,3,9,255,8,3,10,255,30,3,11,255,84,3,12,255,181,3,13,255,255,3,14,255,255,4,2,205,255,4,3,255,255,4,4,247,124,4,5,255,1,4,6,200,0,4,13,206,108,4,14,255,251,4,15,255,245,5,2,255,255,5,3,234,162,5,4,255,0,5,14,168,187,5,15,255,255,5,16,250,133,6,1,165,255,6,2,251,254,6,3,255,19,6,15,250,250,6,16,255,201,7,1,211,255,7,2,234,215,7,3,250,0,7,15,193,252,7,16,254,238,7,17,201,0,8,1,239,255,8,2,240,177,8,3,197,0,8,15,163,255,8,16,254,254,8,17,237,0,9,1,245,255,9,2,250,174,9,3,166,0,9,8,155,255,9,9,255,255,9,15,165,255,9,16,253,251,9,17,253,0,10,1,223,255,10,2,252,202,10,3,171,0,10,8,155,255,10,9,255,255,10,10,255,0,10,15,185,255,10,16,247,241,10,17,249,0,11,1,196,255,11,2,253,247,11,3,202,14,11,8,155,255,11,9,255,255,11,10,255,0,11,15,233,255,11,16,241,214,11,17,233,0,12,2,255,255,12,3,249,87,12,8,155,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,12,13,255,255,12,14,255,255,12,15,255,255,12,16,246,154,12,17,202,0,13,2,190,165,13,3,255,16,13,8,155,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,255,255,13,14,255,255,13,15,255,255,13,16,255,90,14,9,156,0,14,10,255,0,14,11,255,0,14,12,255,0,14,13,255,0,14,14,255,0,14,15,255,0,14,16,255,0],"secondary":false},{"width":16,"bonus":595,"chr":"H","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,255,4,9,254,156,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,8,255,255,5,9,254,156,5,10,156,0,6,8,255,255,6,9,254,156,6,10,156,0,7,8,255,255,7,9,254,156,7,10,156,0,8,8,255,255,8,9,254,156,8,10,156,0,9,8,255,255,9,9,254,156,9,10,156,0,10,8,255,255,10,9,254,156,10,10,156,0,11,8,255,255,11,9,254,156,11,10,156,0,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,12,13,255,255,12,14,255,255,12,15,255,255,12,16,255,255,13,1,255,255,13,2,255,255,13,3,255,255,13,4,255,255,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,255,255,13,14,255,255,13,15,255,255,13,16,255,255,13,17,255,0,14,2,255,0,14,3,255,0,14,4,255,0,14,5,255,0,14,6,255,0,14,7,255,0,14,8,255,0,14,9,255,0,14,10,255,0,14,11,255,0,14,12,255,0,14,13,255,0,14,14,255,0,14,15,255,0,14,16,255,0,14,17,255,0],"secondary":false},{"width":8,"bonus":315,"chr":"I","pixels":[1,1,255,255,1,16,255,255,2,1,255,255,2,2,255,128,2,16,255,255,2,17,255,0,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,4,17,255,0,5,1,255,255,5,2,255,127,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,11,255,0,5,12,255,0,5,13,255,0,5,14,255,0,5,15,255,123,5,16,255,255,5,17,255,0,6,1,255,255,6,2,254,70,6,16,255,255,6,17,255,0,7,2,255,0,7,17,255,0],"secondary":false},{"width":6,"bonus":310,"chr":"J","pixels":[0,19,255,255,0,20,255,147,1,18,177,255,1,19,255,255,1,20,255,99,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,242,225,2,20,255,9,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,251,3,17,255,223,3,18,255,146,3,19,255,19,3,20,214,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,251,0,4,18,223,0],"secondary":false},{"width":14,"bonus":515,"chr":"K","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,5,4,8,255,165,4,9,254,255,4,10,255,90,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,7,187,255,5,8,255,255,5,9,222,185,5,10,254,0,6,6,209,255,6,7,255,255,6,8,255,255,6,9,254,255,6,10,213,171,7,5,227,255,7,6,254,255,7,7,230,132,7,8,255,109,7,9,255,247,7,10,255,255,7,11,233,224,8,4,239,255,8,5,250,255,8,6,237,99,8,7,254,0,8,10,254,212,8,11,255,255,8,12,253,245,9,3,249,255,9,4,245,252,9,5,244,72,9,6,250,0,9,11,236,159,9,12,255,255,9,13,255,255,9,14,197,211,10,2,255,255,10,3,240,245,10,4,251,50,10,5,242,0,10,12,178,108,10,13,254,234,10,14,255,255,10,15,242,231,11,1,255,255,11,2,236,235,11,3,255,33,11,4,231,0,11,14,249,187,11,15,255,255,11,16,254,250,12,1,199,255,12,2,255,20,12,3,217,0,12,15,215,133,12,16,254,249,12,17,249,0,13,2,199,0,13,17,248,0],"secondary":false},{"width":12,"bonus":345,"chr":"L","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,196,4,16,255,255,4,17,255,0,5,15,196,255,5,16,255,255,5,17,255,0,6,15,196,255,6,16,255,255,6,17,255,0,7,15,196,255,7,16,255,255,7,17,255,0,8,15,196,255,8,16,255,255,8,17,255,0,9,15,196,255,9,16,255,255,9,17,255,0,10,15,196,255,10,16,255,255,10,17,255,0,11,16,196,0,11,17,255,0],"secondary":false},{"width":20,"bonus":855,"chr":"M","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,255,255,4,3,254,207,4,4,255,112,4,5,255,22,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,2,255,185,5,3,255,253,5,4,255,255,5,5,253,253,5,6,186,246,6,3,192,34,6,4,254,118,6,5,254,213,6,6,255,255,6,7,255,255,6,8,244,250,6,9,157,251,7,6,221,58,7,7,254,144,7,8,255,233,7,9,255,255,7,10,255,255,7,11,228,246,8,9,239,82,8,10,255,171,8,11,254,249,8,12,255,255,8,13,255,255,8,14,204,246,9,11,176,24,9,12,251,106,9,13,254,198,9,14,255,255,9,15,255,255,9,16,250,252,10,13,210,217,10,14,255,253,10,15,255,255,10,16,255,239,10,17,247,0,11,11,235,255,11,12,255,255,11,13,252,254,11,14,232,196,11,15,254,85,11,16,255,7,11,17,239,0,12,8,209,255,12,9,255,255,12,10,255,255,12,11,233,223,12,12,244,115,12,13,255,21,12,14,251,0,12,15,178,0,13,5,179,255,13,6,251,255,13,7,255,255,13,8,240,241,13,9,234,148,13,10,255,42,13,11,255,0,13,12,204,0,14,3,237,255,14,4,255,255,14,5,247,252,14,6,227,181,14,7,252,68,14,8,255,2,14,9,227,0,15,1,255,255,15,2,255,255,15,3,226,211,15,4,243,98,15,5,255,11,15,6,244,0,15,7,161,0,16,1,255,255,16,2,255,255,16,3,255,255,16,4,255,255,16,5,255,255,16,6,255,255,16,7,255,255,16,8,255,255,16,9,255,255,16,10,255,255,16,11,255,255,16,12,255,255,16,13,255,255,16,14,255,255,16,15,255,255,16,16,255,255,17,1,255,255,17,2,255,255,17,3,255,255,17,4,255,255,17,5,255,255,17,6,255,255,17,7,255,255,17,8,255,255,17,9,255,255,17,10,255,255,17,11,255,255,17,12,255,255,17,13,255,255,17,14,255,255,17,15,255,255,17,16,255,255,17,17,255,0,18,2,255,0,18,3,255,0,18,4,255,0,18,5,255,0,18,6,255,0,18,7,255,0,18,8,255,0,18,9,255,0,18,10,255,0,18,11,255,0,18,12,255,0,18,13,255,0,18,14,255,0,18,15,255,0,18,16,255,0,18,17,255,0],"secondary":false},{"width":17,"bonus":665,"chr":"N","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,215,255,4,2,255,255,4,3,255,249,4,4,255,129,4,5,255,6,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,2,236,144,5,3,255,251,5,4,255,255,5,5,234,233,6,3,155,77,6,4,254,204,6,5,255,255,6,6,254,255,6,7,175,220,7,5,227,132,7,6,254,246,7,7,255,255,7,8,244,240,8,7,253,193,8,8,255,255,8,9,255,255,8,10,199,222,9,8,217,120,9,9,254,240,9,10,255,255,9,11,250,244,10,10,250,179,10,11,255,255,10,12,255,255,10,13,218,227,11,11,202,107,11,12,254,233,11,13,255,255,11,14,253,250,12,13,247,165,12,14,255,255,12,15,255,255,12,16,232,232,13,1,255,255,13,2,255,255,13,3,255,255,13,4,255,255,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,254,255,13,14,255,255,13,15,255,255,13,16,255,255,13,17,211,0,14,1,255,255,14,2,255,255,14,3,255,255,14,4,255,255,14,5,255,255,14,6,255,255,14,7,255,255,14,8,255,255,14,9,255,255,14,10,255,255,14,11,255,255,14,12,255,255,14,13,255,255,14,14,255,255,14,15,255,255,14,16,255,255,14,17,255,0,15,2,255,0,15,3,255,0,15,4,255,0,15,5,255,0,15,6,255,0,15,7,255,0,15,8,255,0,15,9,255,0,15,10,255,0,15,11,255,0,15,12,255,0,15,13,255,0,15,14,255,0,15,15,255,0,15,16,255,0,15,17,255,0],"secondary":false},{"width":16,"bonus":575,"chr":"O","pixels":[1,6,190,255,1,7,231,255,1,8,247,255,1,9,247,255,1,10,229,255,1,11,187,255,2,4,249,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,251,252,3,3,255,255,3,4,251,252,3,5,252,151,3,6,255,69,3,7,255,24,3,8,255,6,3,9,255,6,3,10,255,25,3,11,255,71,3,12,255,153,3,13,255,249,3,14,255,255,3,15,187,178,4,2,253,255,4,3,241,239,4,4,255,40,4,5,248,0,4,13,170,63,4,14,254,228,4,15,254,255,4,16,154,80,5,1,155,255,5,2,255,255,5,3,254,59,5,4,226,0,5,15,255,255,5,16,254,156,6,1,217,255,6,2,238,226,6,3,255,0,6,15,220,243,6,16,255,219,6,17,155,0,7,1,243,255,7,2,242,177,7,3,211,0,7,15,167,255,7,16,253,247,7,17,219,0,8,1,245,255,8,2,251,169,8,3,168,0,8,15,166,255,8,16,252,248,8,17,245,0,9,1,219,255,9,2,253,209,9,3,166,0,9,15,207,255,9,16,242,231,9,17,245,0,10,1,153,255,10,2,255,255,10,3,217,62,10,15,255,255,10,16,236,165,10,17,219,0,11,2,254,254,11,3,254,222,11,14,223,255,11,15,252,254,11,16,255,44,11,17,153,0,12,3,255,255,12,4,253,247,12,5,162,231,12,13,247,255,12,14,255,255,12,15,238,130,12,16,252,0,13,3,176,152,13,4,255,245,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,251,249,13,14,250,107,13,15,255,0,14,5,250,120,14,6,255,185,14,7,255,229,14,8,255,247,14,9,255,247,14,10,255,229,14,11,255,184,14,12,255,117,14,13,255,20,14,14,245,0,15,7,185,0,15,8,229,0,15,9,247,0,15,10,247,0,15,11,229,0,15,12,184,0],"secondary":false},{"width":13,"bonus":500,"chr":"P","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,254,156,4,10,255,255,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,9,157,255,5,10,255,255,5,11,255,0,6,1,249,255,6,2,255,163,6,3,156,0,6,9,167,255,6,10,251,249,6,11,255,0,7,1,231,255,7,2,254,198,7,3,163,0,7,9,208,255,7,10,242,229,7,11,245,0,8,1,185,255,8,2,254,252,8,3,205,43,8,9,255,255,8,10,237,170,8,11,218,0,9,2,255,255,9,3,254,222,9,8,223,255,9,9,254,255,9,10,255,55,9,11,158,0,10,2,217,227,10,3,255,255,10,4,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,255,10,9,239,140,10,10,254,0,11,3,224,146,11,4,255,215,11,5,254,249,11,6,254,240,11,7,255,191,11,8,255,84,11,9,255,0,12,5,215,0,12,6,248,0,12,7,240,0,12,8,191,0],"secondary":false},{"width":16,"bonus":610,"chr":"Q","pixels":[1,6,190,255,1,7,231,255,1,8,247,255,1,9,247,255,1,10,229,255,1,11,187,255,2,4,249,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,251,252,3,3,255,255,3,4,251,252,3,5,252,151,3,6,255,69,3,7,255,24,3,8,255,6,3,9,255,6,3,10,255,25,3,11,255,71,3,12,255,153,3,13,255,249,3,14,255,255,3,15,187,178,4,2,253,255,4,3,241,239,4,4,255,40,4,5,248,0,4,13,170,63,4,14,254,228,4,15,254,255,4,16,154,80,5,1,155,255,5,2,255,255,5,3,254,59,5,4,226,0,5,15,255,255,5,16,254,156,6,1,217,255,6,2,238,226,6,3,255,0,6,15,220,243,6,16,255,219,6,17,155,0,7,1,243,255,7,2,242,177,7,3,211,0,7,15,167,255,7,16,253,247,7,17,219,0,8,1,245,255,8,2,251,169,8,3,168,0,8,15,166,255,8,16,255,255,8,17,246,32,9,1,219,255,9,2,253,209,9,3,166,0,9,15,207,255,9,16,255,255,9,17,255,233,10,1,153,255,10,2,255,255,10,3,217,62,10,15,255,255,10,16,249,229,10,17,255,255,10,18,254,249,11,2,254,254,11,3,254,222,11,14,223,255,11,15,254,255,11,16,255,55,11,17,237,110,11,18,255,253,11,19,255,255,12,3,255,255,12,4,253,247,12,5,162,231,12,13,247,255,12,14,255,255,12,15,240,139,12,16,254,0,12,18,154,145,12,19,255,251,12,20,255,128,13,3,176,152,13,4,254,245,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,255,13,12,255,255,13,13,251,249,13,14,250,113,13,15,255,0,13,20,253,120,14,5,249,120,14,6,255,184,14,7,254,228,14,8,254,246,14,9,255,249,14,10,254,231,14,11,255,189,14,12,255,118,14,13,255,22,14,14,245,0,15,7,184,0,15,8,228,0,15,9,246,0,15,10,249,0,15,11,230,0,15,12,189,0],"secondary":false},{"width":14,"bonus":575,"chr":"R","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,255,4,10,254,156,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,9,255,255,5,10,254,156,5,11,156,0,6,1,251,255,6,2,255,159,6,3,156,0,6,9,255,255,6,10,254,156,6,11,156,0,7,1,237,255,7,2,254,184,7,3,159,0,7,9,255,255,7,10,255,233,7,11,192,124,8,1,196,255,8,2,254,244,8,3,188,22,8,9,255,255,8,10,255,253,8,11,255,255,8,12,218,231,9,2,255,255,9,3,252,202,9,8,245,255,9,9,222,227,9,10,254,46,9,11,254,198,9,12,255,255,9,13,255,253,9,14,173,226,10,2,231,233,10,3,255,255,10,4,255,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,246,248,10,9,247,50,10,10,197,0,10,12,220,117,10,13,255,237,10,14,255,255,10,15,248,244,11,3,235,156,11,4,255,223,11,5,255,249,11,6,254,228,11,7,255,165,11,8,255,40,11,9,239,0,11,14,248,166,11,15,255,255,11,16,255,255,12,5,223,0,12,6,249,0,12,7,228,0,12,8,165,0,12,15,184,87,12,16,254,215,12,17,255,0,13,17,214,0],"secondary":false},{"width":12,"bonus":440,"chr":"S","pixels":[1,3,175,255,1,4,243,255,1,5,235,255,1,6,184,255,1,15,255,255,2,2,225,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,254,252,2,15,254,254,2,16,255,191,3,2,255,255,3,3,244,159,3,4,255,21,3,5,255,22,3,6,255,155,3,7,255,255,3,8,254,224,3,15,215,250,3,16,254,231,3,17,191,0,4,1,209,255,4,2,241,241,4,3,255,5,4,7,237,224,4,8,255,255,4,9,235,103,4,15,181,255,4,16,254,250,4,17,230,0,5,1,245,255,5,2,240,184,5,3,228,0,5,8,255,255,5,9,255,195,5,15,161,255,5,16,254,252,5,17,249,0,6,1,247,255,6,2,251,170,6,3,174,0,6,8,243,249,6,9,255,255,6,10,204,50,6,15,185,255,6,16,248,242,6,17,252,0,7,1,225,255,7,2,254,197,7,3,168,0,7,9,255,255,7,10,255,163,7,15,243,255,7,16,238,204,7,17,236,0,8,1,196,255,8,2,253,246,8,3,198,10,8,9,252,252,8,10,255,255,8,11,204,143,8,14,181,255,8,15,255,255,8,16,248,105,8,17,190,0,9,2,255,255,9,3,247,79,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,238,210,9,16,255,4,10,2,175,134,10,3,255,9,10,10,175,150,10,11,255,215,10,12,255,249,10,13,255,227,10,14,255,141,10,15,255,13,10,16,196,0,11,12,215,0,11,13,249,0,11,14,227,0],"secondary":false},{"width":14,"bonus":390,"chr":"T","pixels":[1,1,255,255,1,2,155,255,2,1,255,255,2,2,254,156,2,3,156,0,3,1,255,255,3,2,254,156,3,3,156,0,4,1,255,255,4,2,254,156,4,3,156,0,5,1,255,255,5,2,254,156,5,3,156,0,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,255,6,16,255,255,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,7,13,255,255,7,14,255,255,7,15,255,255,7,16,255,255,7,17,255,0,8,1,255,255,8,2,254,156,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0,8,10,255,0,8,11,255,0,8,12,255,0,8,13,255,0,8,14,255,0,8,15,255,0,8,16,255,0,8,17,255,0,9,1,255,255,9,2,254,156,9,3,156,0,10,1,255,255,10,2,254,156,10,3,156,0,11,1,255,255,11,2,254,156,11,3,156,0,12,1,255,255,12,2,254,156,12,3,156,0,13,2,255,0,13,3,156,0],"secondary":false},{"width":16,"bonus":530,"chr":"U","pixels":[2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,249,255,2,12,223,255,2,13,158,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,253,251,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,8,4,12,255,43,4,13,254,132,4,14,255,247,4,15,255,249,5,14,168,112,5,15,255,255,5,16,252,158,6,15,222,241,6,16,255,221,6,17,156,0,7,15,165,255,7,16,253,250,7,17,221,0,8,15,163,255,8,16,251,249,8,17,248,0,9,15,211,255,9,16,241,228,9,17,246,0,10,15,255,255,10,16,237,158,10,17,216,0,11,14,247,255,11,15,248,252,11,16,255,35,12,1,255,255,12,2,255,255,12,3,255,255,12,4,255,255,12,5,255,255,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,12,13,255,255,12,14,251,251,12,15,249,84,12,16,246,0,13,1,255,255,13,2,255,255,13,3,255,255,13,4,255,255,13,5,255,255,13,6,255,255,13,7,255,255,13,8,255,255,13,9,255,255,13,10,255,255,13,11,255,249,13,12,255,223,13,13,254,156,13,14,255,40,13,15,247,0,14,2,255,0,14,3,255,0,14,4,255,0,14,5,255,0,14,6,255,0,14,7,255,0,14,8,255,0,14,9,255,0,14,10,255,0,14,11,255,0,14,12,249,0,14,13,223,0,14,14,156,0],"secondary":false},{"width":13,"bonus":430,"chr":"V","pixels":[0,1,211,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,205,246,2,2,255,152,2,3,255,235,2,4,255,255,2,5,255,255,2,6,253,253,2,7,191,247,3,3,154,7,3,4,241,76,3,5,255,160,3,6,254,240,3,7,255,255,3,8,255,255,3,9,250,252,3,10,177,248,4,6,162,11,4,7,245,83,4,8,254,168,4,9,255,245,4,10,255,255,4,11,255,255,4,12,244,250,4,13,161,252,5,9,171,16,5,10,248,90,5,11,254,174,5,12,255,245,5,13,255,255,5,14,255,255,5,15,237,249,6,12,176,13,6,13,249,102,6,14,255,221,6,15,255,255,6,16,255,255,7,12,207,255,7,13,255,255,7,14,255,255,7,15,254,255,7,16,255,196,7,17,255,0,8,9,209,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,246,217,8,14,254,120,8,15,255,31,8,16,254,0,8,17,196,0,9,6,201,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,248,228,9,11,255,133,9,12,255,43,9,13,255,0,9,14,209,0,10,3,193,255,10,4,253,255,10,5,255,255,10,6,255,255,10,7,250,236,10,8,255,146,10,9,255,56,10,10,255,0,10,11,222,0,11,1,251,255,11,2,255,255,11,3,255,255,11,4,252,244,11,5,254,160,11,6,254,70,11,7,255,3,11,8,232,0,12,1,247,255,12,2,254,174,12,3,255,83,12,4,255,8,12,5,241,0,12,6,159,0],"secondary":false},{"width":20,"bonus":785,"chr":"W","pixels":[0,1,155,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,215,251,2,2,255,179,2,3,254,240,2,4,255,255,2,5,255,255,2,6,255,255,2,7,252,254,2,8,206,251,3,3,180,3,3,4,243,54,3,5,255,115,3,6,255,179,3,7,254,240,3,8,255,255,3,9,255,255,3,10,255,255,3,11,249,254,3,12,194,252,4,7,180,3,4,8,243,54,4,9,255,115,4,10,255,178,4,11,254,233,4,12,255,255,4,13,255,255,4,14,255,255,4,15,246,252,4,16,182,253,5,11,178,0,5,12,236,55,5,13,255,152,5,14,255,239,5,15,255,255,5,16,255,255,5,17,181,0,6,11,217,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,252,218,6,16,254,144,6,17,255,0,7,7,189,255,7,8,249,255,7,9,255,255,7,10,255,255,7,11,251,249,7,12,244,187,7,13,255,106,7,14,255,34,7,15,255,0,7,16,216,0,8,4,223,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,245,224,8,9,253,143,8,10,255,69,8,11,255,7,8,12,245,0,8,13,179,0,9,1,249,255,9,2,255,255,9,3,255,255,9,4,247,243,9,5,245,180,9,6,255,104,9,7,255,32,9,8,255,0,9,9,215,0,10,1,255,255,10,2,255,255,10,3,255,235,10,4,254,156,10,5,242,94,10,6,179,27,11,2,255,158,11,3,254,233,11,4,255,255,11,5,255,255,11,6,254,254,11,7,203,250,12,3,158,2,12,4,237,58,12,5,255,130,12,6,254,207,12,7,255,255,12,8,255,255,12,9,255,255,12,10,234,250,12,11,155,255,13,7,211,31,13,8,255,102,13,9,255,178,13,10,255,245,13,11,255,255,13,12,255,255,13,13,251,253,13,14,190,251,14,10,180,11,14,11,248,68,14,12,254,132,14,13,255,184,14,14,255,241,14,15,255,255,14,16,255,255,15,12,201,232,15,13,243,242,15,14,255,255,15,15,255,255,15,16,255,255,15,17,255,0,16,8,193,255,16,9,247,255,16,10,255,255,16,11,255,255,16,12,255,255,16,13,248,238,16,14,247,172,16,15,255,99,16,16,255,33,16,17,255,0,17,4,195,255,17,5,249,255,17,6,255,255,17,7,255,255,17,8,255,255,17,9,251,243,17,10,253,178,17,11,255,110,17,12,255,43,17,13,255,0,17,14,232,0,17,15,166,0,18,1,249,255,18,2,255,255,18,3,255,255,18,4,255,255,18,5,253,249,18,6,253,189,18,7,255,121,18,8,255,54,18,9,255,3,18,10,240,0,18,11,177,0,19,1,251,255,19,2,254,200,19,3,254,132,19,4,255,65,19,5,255,7,19,6,247,0,19,7,188,0],"secondary":false},{"width":13,"bonus":450,"chr":"X","pixels":[1,1,255,255,1,2,184,220,1,15,231,255,1,16,255,255,2,1,225,255,2,2,255,255,2,3,247,241,2,13,183,255,2,14,255,255,2,15,250,252,2,16,243,131,2,17,255,0,3,2,242,146,3,3,255,251,3,4,255,255,3,5,205,223,3,12,245,255,3,13,255,255,3,14,233,197,3,15,255,33,3,16,247,0,4,3,159,72,4,4,254,197,4,5,255,255,4,6,251,247,4,10,209,255,4,11,255,255,4,12,238,240,4,13,248,81,4,14,255,0,4,15,180,0,5,5,219,114,5,6,254,237,5,7,255,255,5,8,233,238,5,9,254,255,5,10,250,254,5,11,233,145,5,12,255,10,5,13,224,0,6,7,254,245,6,8,255,255,6,9,255,255,6,10,255,122,6,11,249,0,7,6,241,255,7,7,255,255,7,8,253,192,7,9,255,249,7,10,255,255,7,11,218,217,8,4,205,255,8,5,255,255,8,6,237,241,8,7,245,76,8,8,255,0,8,9,200,51,8,10,253,193,8,11,255,255,8,12,253,251,8,13,154,226,9,3,253,255,9,4,252,254,9,5,234,155,9,6,255,11,9,7,224,0,9,11,216,114,9,12,254,237,9,13,255,255,9,14,242,239,10,1,231,255,10,2,255,255,10,3,236,225,10,4,253,52,10,5,252,0,10,13,248,165,10,14,255,255,10,15,255,255,10,16,210,228,11,1,245,255,11,2,242,125,11,3,255,4,11,4,208,0,11,14,183,89,11,15,254,216,11,16,255,255,11,17,188,0,12,2,246,0,12,16,236,139,12,17,255,0],"secondary":false},{"width":12,"bonus":370,"chr":"Y","pixels":[0,1,235,255,1,1,253,255,1,2,255,255,1,3,238,241,2,2,254,183,2,3,255,255,2,4,255,255,2,5,229,238,3,3,199,78,3,4,255,196,3,5,255,255,3,6,255,255,3,7,218,235,4,5,213,91,4,6,255,209,4,7,255,255,4,8,255,255,4,9,204,234,5,7,225,102,5,8,254,221,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,255,255,6,8,233,242,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,255,6,16,255,255,6,17,255,0,7,6,207,255,7,7,255,255,7,8,255,255,7,9,244,184,7,10,255,43,7,11,255,0,7,12,255,0,7,13,255,0,7,14,255,0,7,15,255,0,7,16,255,0,7,17,255,0,8,4,191,255,8,5,255,255,8,6,255,255,8,7,243,203,8,8,254,58,8,9,255,0,8,10,176,0,9,2,177,255,9,3,255,255,9,4,255,255,9,5,243,220,9,6,255,75,9,7,255,0,9,8,194,0,10,1,253,255,10,2,255,255,10,3,245,232,10,4,255,92,10,5,255,2,10,6,210,0,11,1,233,255,11,2,254,111,11,3,255,6,11,4,223,0],"secondary":false},{"width":12,"bonus":500,"chr":"Z","pixels":[1,1,255,255,1,2,155,255,1,15,225,255,1,16,255,255,2,1,255,255,2,2,254,156,2,3,156,0,2,13,187,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,0,3,1,255,255,3,2,254,156,3,3,156,0,3,12,251,255,3,13,253,255,3,14,227,169,3,15,255,172,3,16,255,255,3,17,255,0,4,1,255,255,4,2,254,156,4,3,156,0,4,10,231,255,4,11,255,255,4,12,232,224,4,13,251,54,4,14,253,0,4,15,214,185,4,16,255,255,4,17,255,0,5,1,255,255,5,2,254,156,5,3,156,0,5,8,197,255,5,9,255,255,5,10,245,249,5,11,241,113,5,12,255,2,5,13,204,0,5,15,155,255,5,16,255,255,5,17,255,0,6,1,255,255,6,2,254,156,6,3,156,0,6,6,153,255,6,7,253,255,6,8,255,255,6,9,234,178,6,10,255,23,6,11,240,0,6,15,155,255,6,16,255,255,6,17,255,0,7,1,255,255,7,2,254,156,7,3,157,5,7,5,237,255,7,6,255,255,7,7,238,229,7,8,253,64,7,9,255,0,7,10,164,0,7,15,155,255,7,16,255,255,7,17,255,0,8,1,255,255,8,2,255,197,8,3,236,224,8,4,255,255,8,5,249,251,8,6,245,125,8,7,255,5,8,8,214,0,8,15,155,255,8,16,255,255,8,17,255,0,9,1,255,255,9,2,255,255,9,3,255,255,9,4,240,188,9,5,255,31,9,6,245,0,9,15,155,255,9,16,255,255,9,17,255,0,10,1,255,255,10,2,255,223,10,3,255,77,10,4,255,0,10,5,177,0,10,15,155,255,10,16,255,255,10,17,255,0,11,2,255,0,11,3,223,0,11,16,156,0,11,17,255,0],"secondary":false},{"width":12,"bonus":500,"chr":"0","pixels":[1,5,177,255,1,6,217,255,1,7,241,255,1,8,251,255,1,9,249,255,1,10,237,255,1,11,209,255,1,12,163,255,2,3,245,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,241,247,3,2,255,255,3,3,248,251,3,4,251,144,3,5,255,72,3,6,255,33,3,7,255,11,3,8,255,3,3,9,255,3,3,10,255,11,3,11,255,33,3,12,255,73,3,13,255,143,3,14,254,245,3,15,254,252,4,1,195,255,4,2,248,252,4,3,255,41,4,4,244,0,4,14,162,66,4,15,255,245,4,16,255,190,5,1,241,255,5,2,236,187,5,3,245,0,5,15,186,237,5,16,254,243,5,17,190,0,6,1,239,255,6,2,251,180,6,3,173,0,6,15,175,255,6,16,250,247,6,17,242,0,7,1,185,255,7,2,254,249,7,3,192,66,7,15,247,255,7,16,235,210,7,17,242,0,8,2,254,252,8,3,254,249,8,4,172,226,8,14,247,255,8,15,254,255,8,16,250,76,8,17,194,0,9,3,255,231,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,250,248,9,15,251,98,9,16,254,0,10,4,240,98,10,5,254,164,10,6,255,209,10,7,254,239,10,8,254,251,10,9,254,251,10,10,255,239,10,11,255,213,10,12,255,172,10,13,255,105,10,14,255,16,10,15,243,0,11,6,164,0,11,7,209,0,11,8,238,0,11,9,250,0,11,10,250,0,11,11,239,0,11,12,213,0,11,13,172,0],"secondary":false},{"width":12,"bonus":300,"chr":"1","pixels":[2,4,163,255,3,3,203,255,3,4,254,255,3,5,192,104,4,2,158,255,4,3,255,255,4,4,229,136,4,5,254,0,5,2,255,255,5,3,215,176,5,4,255,0,6,1,249,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,255,6,16,255,255,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,7,9,255,255,7,10,255,255,7,11,255,255,7,12,255,255,7,13,255,255,7,14,255,255,7,15,255,255,7,16,255,255,7,17,255,0,8,2,255,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0,8,10,255,0,8,11,255,0,8,12,255,0,8,13,255,0,8,14,255,0,8,15,255,0,8,16,255,0,8,17,255,0],"secondary":false},{"width":12,"bonus":450,"chr":"2","pixels":[1,15,225,255,1,16,255,255,2,2,251,255,2,3,234,239,2,14,241,255,2,15,255,255,2,16,255,255,2,17,255,0,3,2,254,255,3,3,252,58,3,4,220,0,3,13,249,255,3,14,245,251,3,15,252,208,3,16,255,255,3,17,255,0,4,1,223,255,4,2,231,218,4,3,254,0,4,12,255,255,4,13,240,245,4,14,251,49,4,15,249,159,4,16,255,255,4,17,255,0,5,1,249,255,5,2,244,172,5,3,197,0,5,10,163,255,5,11,255,255,5,12,237,236,5,13,255,34,5,14,231,0,5,15,174,228,5,16,255,255,5,17,255,0,6,1,233,255,6,2,254,212,6,3,165,2,6,9,201,255,6,10,255,255,6,11,235,218,6,12,255,22,6,13,219,0,6,15,155,255,6,16,255,255,6,17,255,0,7,1,163,255,7,2,255,255,7,3,237,167,7,8,243,255,7,9,255,255,7,10,238,185,7,11,255,9,7,12,201,0,7,15,155,255,7,16,255,255,7,17,255,0,8,2,249,245,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,250,250,8,9,249,109,8,10,255,0,8,11,172,0,8,15,155,255,8,16,255,255,8,17,255,0,9,3,249,172,9,4,255,235,9,5,254,251,9,6,254,219,9,7,255,133,9,8,255,24,9,9,246,0,9,15,155,255,9,16,255,255,9,17,255,0,10,4,168,0,10,5,235,0,10,6,250,0,10,7,218,0,10,15,155,255,10,16,255,255,10,17,255,0,11,16,156,0,11,17,255,0],"secondary":false},{"width":12,"bonus":450,"chr":"3","pixels":[1,2,241,255,1,3,183,233,1,15,255,255,1,16,202,188,2,2,255,255,2,3,247,106,2,4,167,0,2,15,230,247,2,16,255,211,3,1,199,255,3,2,243,242,3,3,255,3,3,8,255,255,3,9,163,243,3,15,173,255,3,16,252,239,3,17,211,0,4,1,237,255,4,2,237,187,4,3,231,0,4,8,255,255,4,9,254,164,4,10,156,0,4,15,160,255,4,16,254,252,4,17,236,0,5,1,249,255,5,2,249,170,5,3,174,0,5,8,255,255,5,9,255,193,5,10,164,0,5,15,184,255,5,16,249,245,5,17,251,0,6,1,225,255,6,2,254,218,6,3,167,3,6,8,240,253,6,9,254,251,6,10,198,29,6,15,247,255,6,16,238,209,6,17,239,0,7,1,157,255,7,2,255,255,7,3,239,159,7,7,249,255,7,8,186,151,7,9,254,249,7,10,254,198,7,14,207,255,7,15,255,255,7,16,251,110,7,17,195,0,8,2,250,248,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,230,232,8,8,250,8,8,9,188,185,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,8,14,255,255,8,15,244,206,8,16,255,5,9,3,251,189,9,4,255,245,9,5,255,229,9,6,255,159,9,7,255,22,9,8,210,0,9,10,191,160,9,11,255,219,9,12,254,249,9,13,254,221,9,14,254,132,9,15,255,10,9,16,197,0,10,4,186,0,10,5,245,0,10,6,229,0,10,7,159,0,10,12,219,0,10,13,248,0,10,14,220,0],"secondary":false},{"width":12,"bonus":495,"chr":"4","pixels":[1,11,163,255,1,12,255,255,1,13,199,255,2,10,237,255,2,11,250,255,2,12,255,255,2,13,254,201,2,14,200,0,3,8,197,255,3,9,255,255,3,10,217,225,3,11,241,45,3,12,255,255,3,13,254,201,3,14,200,0,4,7,251,255,4,8,235,251,4,9,218,106,4,10,255,0,4,11,192,0,4,12,255,255,4,13,254,201,4,14,200,0,5,5,223,255,5,6,252,254,5,7,204,181,5,8,251,15,5,9,231,0,5,12,255,255,5,13,254,201,5,14,200,0,6,3,173,255,6,4,255,255,6,5,214,235,6,6,230,53,6,7,252,0,6,12,255,255,6,13,254,201,6,14,200,0,7,2,241,255,7,3,205,248,7,4,201,109,7,5,255,1,7,6,198,0,7,12,255,255,7,13,254,201,7,14,200,0,8,1,255,255,8,2,255,255,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,255,255,8,8,255,255,8,9,255,255,8,10,255,255,8,11,255,255,8,12,255,255,8,13,255,255,8,14,255,255,8,15,255,255,8,16,255,255,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,255,255,9,16,255,255,9,17,255,0,10,2,255,0,10,3,255,0,10,4,255,0,10,5,255,0,10,6,255,0,10,7,255,0,10,8,255,0,10,9,255,0,10,10,255,0,10,11,255,0,10,12,255,255,10,13,254,201,10,14,255,0,10,15,255,0,10,16,255,0,10,17,255,0,11,12,255,255,11,13,254,201,11,14,200,0],"secondary":false},{"width":12,"bonus":465,"chr":"5","pixels":[2,1,159,255,2,2,179,255,2,3,199,255,2,4,221,255,2,5,241,255,2,6,255,255,2,7,255,255,2,8,187,243,2,15,255,255,2,16,204,191,3,1,255,255,3,2,255,255,3,3,255,255,3,4,252,246,3,5,250,223,3,6,252,199,3,7,254,243,3,8,254,201,3,9,178,0,3,15,223,248,3,16,254,215,4,1,255,255,4,2,255,166,4,3,255,10,4,4,255,0,4,5,243,0,4,6,219,0,4,7,249,235,4,8,250,171,4,9,200,0,4,15,172,255,4,16,253,247,4,17,214,0,5,1,255,255,5,2,254,156,5,3,166,0,5,7,247,255,5,8,246,171,5,9,168,0,5,15,163,255,5,16,254,252,5,17,246,0,6,1,255,255,6,2,254,156,6,3,156,0,6,7,245,255,6,8,253,199,6,9,165,0,6,15,193,255,6,16,246,240,6,17,251,0,7,1,255,255,7,2,254,156,7,3,156,0,7,7,202,255,7,8,254,252,7,9,207,53,7,15,251,255,7,16,237,192,7,17,232,0,8,1,255,255,8,2,254,156,8,3,156,0,8,8,255,255,8,9,254,222,8,14,225,255,8,15,255,255,8,16,252,75,8,17,178,0,9,1,219,255,9,2,255,134,9,3,156,0,9,8,222,226,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,242,153,9,16,255,0,10,2,220,0,10,9,226,145,10,10,254,219,10,11,255,249,10,12,254,239,10,13,255,187,10,14,255,83,10,15,255,0,11,11,218,0,11,12,249,0,11,13,238,0,11,14,187,0],"secondary":false},{"width":12,"bonus":515,"chr":"6","pixels":[1,6,161,255,1,7,209,255,1,8,235,255,1,9,247,255,1,10,249,255,1,11,233,255,1,12,190,255,2,4,235,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,245,247,3,3,255,255,3,4,246,251,3,5,247,145,3,6,255,66,3,7,255,24,3,8,255,158,3,9,255,215,3,10,255,62,3,11,255,10,3,12,255,37,3,13,255,123,3,14,254,240,3,15,254,251,4,2,255,255,4,3,235,234,4,4,255,29,4,5,242,0,4,7,155,199,4,8,248,254,4,9,171,52,4,10,215,0,4,15,255,249,4,16,253,178,5,1,161,255,5,2,255,255,5,3,254,52,5,4,216,0,5,7,219,255,5,8,220,219,5,9,247,0,5,15,196,233,5,16,254,239,5,17,177,0,6,1,223,255,6,2,238,223,6,3,255,0,6,7,249,255,6,8,243,182,6,9,189,0,6,15,173,255,6,16,252,251,6,17,238,0,7,1,247,255,7,2,244,179,7,3,208,0,7,7,227,255,7,8,254,231,7,9,176,16,7,15,235,255,7,16,241,224,7,17,248,0,8,1,251,255,8,2,252,167,8,3,171,0,8,8,255,255,8,9,248,194,8,14,207,255,8,15,255,255,8,16,244,123,8,17,212,0,9,1,171,255,9,2,254,150,9,3,165,0,9,8,240,233,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,242,195,9,16,255,5,10,2,171,0,10,9,239,150,10,10,254,221,10,11,255,249,10,12,255,241,10,13,255,195,10,14,255,102,10,15,255,3,10,16,185,0,11,11,220,0,11,12,249,0,11,13,241,0,11,14,195,0],"secondary":false},{"width":12,"bonus":375,"chr":"7","pixels":[1,1,255,255,1,2,155,255,2,1,255,255,2,2,254,156,2,3,156,0,3,1,255,255,3,2,254,156,3,3,156,0,3,16,195,255,4,1,255,255,4,2,254,156,4,3,156,0,4,14,231,255,4,15,255,255,4,16,255,255,4,17,195,0,5,1,255,255,5,2,254,156,5,3,156,0,5,11,175,255,5,12,251,255,5,13,255,255,5,14,254,254,5,15,248,184,5,16,255,75,5,17,255,0,6,1,255,255,6,2,254,156,6,3,156,0,6,9,215,255,6,10,255,255,6,11,255,255,6,12,247,237,6,13,254,131,6,14,255,29,6,15,253,0,6,16,179,0,7,1,255,255,7,2,254,156,7,3,156,0,7,6,154,255,7,7,245,255,7,8,255,255,7,9,254,255,7,10,244,194,7,11,255,81,7,12,255,4,7,13,229,0,8,1,255,255,8,2,254,162,8,3,191,121,8,4,197,255,8,5,255,255,8,6,255,255,8,7,246,242,8,8,251,138,8,9,255,34,8,10,254,0,8,11,185,0,9,1,255,255,9,2,255,255,9,3,255,255,9,4,255,255,9,5,241,202,9,6,255,87,9,7,255,6,9,8,233,0,10,1,255,255,10,2,255,237,10,3,255,142,10,4,255,39,10,5,255,0,10,6,191,0,11,2,255,0,11,3,237,0],"secondary":false},{"width":12,"bonus":565,"chr":"8","pixels":[1,3,197,255,1,4,247,255,1,5,225,255,1,11,201,255,1,12,243,255,1,13,239,255,1,14,171,255,2,2,241,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,228,221,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,248,240,3,1,154,255,3,2,255,255,3,3,248,119,3,4,255,15,3,5,255,33,3,6,255,166,3,7,255,255,3,8,241,202,3,9,255,255,3,10,233,229,3,11,255,67,3,12,255,11,3,13,255,28,3,14,254,156,3,15,255,255,3,16,245,151,4,1,217,255,4,2,234,219,4,3,255,0,4,7,235,216,4,8,255,255,4,9,245,227,4,10,255,14,4,11,209,0,4,15,242,236,4,16,254,219,5,1,245,255,5,2,242,174,5,3,201,0,5,8,255,255,5,9,255,139,5,10,218,0,5,15,174,253,5,16,254,249,5,17,218,0,6,1,217,255,6,2,254,203,6,3,165,0,6,7,197,255,6,8,255,255,6,9,255,239,6,15,175,255,6,16,252,250,6,17,248,0,7,1,154,255,7,2,255,255,7,3,226,131,7,6,169,255,7,7,255,255,7,8,230,156,7,9,255,255,7,10,247,148,7,15,231,255,7,16,241,223,7,17,247,0,8,2,249,247,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,223,185,8,8,255,0,8,9,221,207,8,10,254,255,8,11,198,160,8,14,173,255,8,15,255,255,8,16,243,133,8,17,211,0,9,3,252,197,9,4,254,246,9,5,255,219,9,6,255,123,9,7,255,5,9,8,162,0,9,10,248,238,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,242,227,9,16,255,12,10,4,195,0,10,5,246,0,10,6,219,0,10,11,249,189,10,12,255,247,10,13,254,233,10,14,255,152,10,15,255,20,10,16,215,0,11,12,184,0,11,13,247,0,11,14,232,0],"secondary":false},{"width":12,"bonus":520,"chr":"9","pixels":[1,4,197,255,1,5,241,255,1,6,249,255,1,7,223,255,2,2,185,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,242,238,2,16,172,255,3,2,255,255,3,3,241,217,3,4,254,70,3,5,255,12,3,6,255,10,3,7,255,53,3,8,255,185,3,9,255,255,3,10,244,159,3,15,165,255,3,16,254,255,3,17,172,0,4,1,211,255,4,2,244,246,4,3,255,19,4,4,205,0,4,9,247,235,4,10,254,228,4,15,166,255,4,16,252,251,4,17,254,0,5,1,247,255,5,2,241,184,5,3,235,0,5,9,174,251,5,10,254,250,5,11,228,0,5,15,201,255,5,16,244,234,5,17,248,0,6,1,237,255,6,2,252,184,6,3,174,0,6,9,189,255,6,10,244,231,6,11,249,0,6,15,253,255,6,16,235,175,6,17,224,0,7,1,175,255,7,2,255,251,7,3,199,82,7,9,247,255,7,10,221,142,7,11,221,0,7,14,209,255,7,15,254,255,7,16,254,55,7,17,162,0,8,2,254,252,8,3,255,243,8,4,162,205,8,8,217,255,8,9,174,235,8,10,248,39,8,11,156,106,8,13,239,255,8,14,255,255,8,15,234,148,8,16,254,0,9,3,254,239,9,4,255,255,9,5,255,255,9,6,255,255,9,7,255,255,9,8,255,255,9,9,255,255,9,10,255,255,9,11,255,255,9,12,255,255,9,13,246,244,9,14,246,114,9,15,255,0,10,4,246,122,10,5,255,189,10,6,255,233,10,7,255,249,10,8,254,246,10,9,254,233,10,10,254,204,10,11,255,157,10,12,255,92,10,13,255,8,10,14,236,0,11,6,189,0,11,7,233,0,11,8,249,0,11,9,246,0,11,10,232,0,11,11,204,0,11,12,157,0],"secondary":false},{"width":18,"bonus":705,"chr":"%","pixels":[1,5,205,255,1,6,241,255,1,7,239,255,1,8,199,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,154,166,3,3,225,255,3,4,245,245,3,5,255,67,3,6,255,10,3,7,255,10,3,8,255,65,3,9,255,235,3,10,254,225,4,3,249,255,4,4,244,177,4,5,235,0,4,9,191,227,4,10,255,251,4,11,224,0,4,16,155,255,5,3,221,255,5,4,254,239,5,5,194,95,5,9,237,255,5,10,244,234,5,11,251,0,5,15,239,255,5,16,235,253,5,17,156,0,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,245,108,6,11,224,0,6,13,211,255,6,14,252,254,6,15,192,192,6,16,240,17,6,17,234,0,7,4,163,142,7,5,255,202,7,6,255,239,7,7,255,239,7,8,255,202,7,9,255,95,7,10,255,29,7,11,204,211,7,12,255,255,7,13,207,236,7,14,219,51,7,15,252,0,8,6,202,0,8,7,239,0,8,8,239,8,8,9,227,138,8,10,248,251,8,11,229,251,8,12,198,111,8,13,255,0,8,14,191,0,9,8,219,255,9,9,248,255,9,10,191,176,9,11,244,11,9,12,226,0,10,6,181,255,10,7,255,255,10,8,200,226,10,9,225,43,10,10,251,113,10,11,233,229,10,12,242,255,10,13,237,255,10,14,197,255,11,5,249,255,11,6,222,249,11,7,202,92,11,8,255,0,11,9,217,153,11,10,255,255,11,11,255,255,11,12,255,255,11,13,255,255,11,14,255,255,11,15,255,255,12,3,227,255,12,4,243,255,12,5,191,158,12,6,249,6,12,7,217,0,12,9,243,255,12,10,223,216,12,11,255,42,12,12,255,6,12,13,255,13,12,14,255,72,12,15,254,237,12,16,254,222,13,3,163,255,13,4,231,29,13,5,243,0,13,9,255,255,13,10,247,90,13,11,189,0,13,15,195,224,13,16,255,251,13,17,222,0,14,4,164,0,14,9,242,254,14,10,255,195,14,15,239,255,14,16,244,233,14,17,251,0,15,10,255,255,15,11,255,255,15,12,255,255,15,13,255,255,15,14,255,255,15,15,255,255,15,16,245,107,15,17,223,0,16,10,172,148,16,11,255,205,16,12,255,241,16,13,254,239,16,14,255,202,16,15,255,95,16,16,255,0,17,12,205,0,17,13,241,0,17,14,238,0,17,15,202,0],"secondary":false},{"width":9,"bonus":310,"chr":"/","pixels":[1,19,175,255,1,20,239,255,2,15,161,255,2,16,227,255,2,17,255,255,2,18,255,255,2,19,255,255,2,20,246,233,2,21,239,0,3,12,215,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,248,242,3,17,245,177,3,18,255,103,3,19,255,36,3,20,255,0,3,21,225,0,4,8,201,255,4,9,251,255,4,10,255,255,4,11,255,255,4,12,250,249,4,13,243,191,4,14,255,115,4,15,255,48,4,16,255,1,4,17,235,0,4,18,170,0,5,4,187,255,5,5,245,255,5,6,255,255,5,7,255,255,5,8,252,253,5,9,242,205,5,10,253,128,5,11,255,60,5,12,255,5,5,13,244,0,5,14,182,0,6,0,173,255,6,1,237,255,6,2,255,255,6,3,255,255,6,4,254,255,6,5,242,218,6,6,251,143,6,7,255,73,6,8,255,12,6,9,250,0,6,10,195,0,7,0,255,255,7,1,243,230,7,2,248,157,7,3,255,85,7,4,255,20,7,5,254,0,7,6,207,0,8,0,255,31,8,1,255,0,8,2,219,0],"secondary":false},{"width":12,"bonus":265,"chr":"+","pixels":[1,9,155,255,1,10,255,255,2,9,155,255,2,10,255,255,2,11,255,0,3,9,155,255,3,10,255,255,3,11,255,0,4,9,155,255,4,10,255,255,4,11,255,0,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,0,7,6,255,0,7,7,255,0,7,8,255,0,7,9,254,156,7,10,255,255,7,11,255,0,7,12,255,0,7,13,255,0,7,14,255,0,7,15,255,0,8,9,155,255,8,10,255,255,8,11,255,0,9,9,155,255,9,10,255,255,9,11,255,0,10,9,155,255,10,10,255,255,10,11,255,0,11,10,156,0,11,11,255,0],"secondary":false},{"width":12,"bonus":285,"chr":"?","pixels":[2,2,223,255,3,1,154,255,3,2,253,255,3,3,227,37,4,1,221,255,4,2,232,216,4,3,253,0,4,14,155,255,4,15,245,255,4,16,157,255,5,1,249,255,5,2,243,171,5,3,196,0,5,9,221,255,5,10,255,255,5,11,255,255,5,14,243,255,5,15,255,255,5,16,254,246,5,17,157,0,6,1,239,255,6,2,253,199,6,3,163,0,6,8,235,255,6,9,253,255,6,10,238,141,6,11,255,37,6,12,255,6,6,15,252,206,6,16,255,117,6,17,246,0,7,1,179,255,7,2,255,255,7,3,224,137,7,7,239,255,7,8,254,255,7,9,244,105,7,10,253,0,7,16,204,0,8,2,253,252,8,3,255,255,8,4,255,255,8,5,255,255,8,6,255,255,8,7,254,254,8,8,246,108,8,9,254,0,9,3,254,194,9,4,254,246,9,5,255,239,9,6,255,187,9,7,255,63,9,8,253,0,10,4,193,0,10,5,246,0,10,6,239,0,10,7,187,0],"secondary":false},{"width":8,"bonus":225,"chr":"!","pixels":[3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,14,155,255,3,15,245,255,3,16,157,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,0,4,14,243,255,4,15,255,255,4,16,254,246,4,17,157,0,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0,5,9,255,0,5,10,255,0,5,11,255,0,5,12,255,0,5,15,252,206,5,16,255,117,5,17,246,0,6,16,204,0],"secondary":false},{"width":19,"bonus":910,"chr":"@","pixels":[1,8,209,255,1,9,241,255,1,10,251,255,1,11,239,255,1,12,209,255,2,5,199,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,181,231,3,4,243,255,3,5,255,255,3,6,244,215,3,7,255,117,3,8,255,49,3,9,255,22,3,10,255,4,3,11,255,17,3,12,254,58,3,13,255,133,3,14,255,237,3,15,255,255,3,16,233,212,4,3,243,255,4,4,247,251,4,5,248,106,4,6,255,0,4,7,206,0,4,15,250,202,4,16,255,255,4,17,225,148,5,2,211,255,5,3,252,254,5,4,246,72,5,5,243,0,5,8,191,255,5,9,237,255,5,10,245,255,5,11,215,255,5,16,249,237,5,17,255,241,6,2,255,255,6,3,234,149,6,4,252,0,6,6,175,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,243,238,6,17,255,255,6,18,245,78,7,1,165,255,7,2,252,254,7,3,255,29,7,6,255,255,7,7,239,216,7,8,255,74,7,9,255,21,7,10,255,7,7,11,255,43,7,12,255,179,7,13,255,255,7,14,240,126,7,17,255,255,7,18,254,126,8,1,217,255,8,2,237,222,8,3,252,0,8,5,211,255,8,6,239,243,8,7,255,14,8,8,202,0,8,13,255,255,8,14,255,148,8,17,255,255,8,18,255,146,9,1,243,255,9,2,243,185,9,3,206,0,9,5,247,255,9,6,240,179,9,7,228,0,9,13,255,255,9,14,255,103,9,17,255,255,9,18,255,143,10,1,245,255,10,2,251,170,10,3,176,0,10,5,235,255,10,6,253,197,10,7,169,0,10,12,205,255,10,13,210,246,10,14,255,9,10,17,255,255,10,18,255,116,11,1,217,255,11,2,253,201,11,3,167,0,11,5,202,255,11,6,255,255,11,7,255,255,11,8,255,255,11,9,255,255,11,10,255,255,11,11,255,255,11,12,217,239,11,13,209,27,11,14,202,0,11,17,255,255,11,18,255,79,12,1,172,255,12,2,254,252,12,3,205,35,12,6,255,255,12,7,255,255,12,8,255,255,12,9,255,255,12,10,255,255,12,11,255,255,12,12,255,255,12,13,249,230,12,17,246,252,12,18,255,9,13,2,255,255,13,3,254,159,13,7,255,0,13,8,255,0,13,9,255,0,13,10,255,0,13,11,255,9,13,12,255,98,13,13,255,255,13,14,241,138,13,17,181,153,13,18,243,0,14,2,218,238,14,3,255,255,14,4,207,159,14,13,255,255,14,14,255,137,15,3,251,241,15,4,255,255,15,5,230,228,15,12,217,255,15,13,255,255,15,14,254,58,16,4,250,202,16,5,255,255,16,6,255,255,16,7,255,255,16,8,255,255,16,9,255,255,16,10,255,255,16,11,255,255,16,12,254,255,16,13,235,128,16,14,255,0,17,5,214,84,17,6,254,164,17,7,255,213,17,8,255,241,17,9,255,245,17,10,255,217,17,11,255,152,17,12,255,45,17,13,254,0,18,7,164,0,18,8,213,0,18,9,241,0,18,10,245,0,18,11,217,0],"secondary":false},{"width":15,"bonus":540,"chr":"#","pixels":[1,11,155,255,1,12,255,255,2,7,255,255,2,11,155,255,2,12,255,255,2,13,255,0,3,7,255,255,3,8,255,80,3,11,155,255,3,12,255,255,3,13,255,51,3,16,181,255,4,7,255,255,4,8,255,125,4,9,156,182,4,10,165,255,4,11,233,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,246,250,4,16,228,218,4,17,182,0,5,5,175,255,5,6,223,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,235,238,5,11,245,236,5,12,255,255,5,13,255,79,5,14,255,32,5,15,255,0,5,16,241,0,5,17,195,0,6,3,255,255,6,4,252,254,6,5,233,231,6,6,231,198,6,7,255,255,6,8,255,122,6,9,255,17,6,10,255,0,6,11,240,165,6,12,255,255,6,13,255,0,7,4,255,6,7,5,251,0,7,6,217,38,7,7,255,255,7,8,255,80,7,11,155,255,7,12,255,255,7,13,255,0,8,7,255,255,8,8,255,80,8,11,185,255,8,12,255,255,8,13,255,181,8,14,229,255,8,15,255,255,8,16,255,255,9,7,255,255,9,8,254,219,9,9,247,251,9,10,255,255,9,11,255,255,9,12,255,255,9,13,254,201,9,14,226,174,9,15,240,115,9,16,255,62,9,17,255,0,10,3,203,255,10,4,247,255,10,5,255,255,10,6,255,255,10,7,255,255,10,8,255,202,10,9,237,145,10,10,247,87,10,11,255,175,10,12,255,255,10,13,255,0,10,14,200,0,10,15,154,0,11,3,175,255,11,4,230,142,11,5,249,83,11,6,255,63,11,7,255,255,11,8,255,80,11,9,202,0,11,11,188,211,11,12,255,255,11,13,255,0,12,4,175,0,12,7,255,255,12,8,255,80,12,11,155,255,12,12,255,255,12,13,255,0,13,7,255,255,13,8,255,80,13,12,156,0,13,13,255,0,14,8,255,0],"secondary":false},{"width":12,"bonus":555,"chr":"$","pixels":[1,5,219,255,1,6,245,255,1,7,202,255,1,14,187,255,1,15,249,255,2,4,253,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,253,2,15,255,255,2,16,252,91,3,3,181,255,3,4,252,254,3,5,254,77,3,6,255,11,3,7,255,109,3,8,255,255,3,9,255,211,3,15,255,255,3,16,255,124,4,3,243,255,4,4,230,184,4,5,251,0,4,8,215,220,4,9,255,255,4,10,221,73,4,15,255,255,4,16,255,146,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,255,255,5,17,255,255,5,18,255,255,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,255,6,16,255,255,6,17,255,255,6,18,255,255,6,19,255,0,7,2,255,4,7,3,255,253,7,4,255,141,7,5,255,0,7,6,255,0,7,7,255,0,7,8,255,0,7,9,255,209,7,10,255,251,7,11,255,33,7,12,255,0,7,13,255,0,7,14,255,60,7,15,255,255,7,16,255,100,7,17,255,0,7,18,255,0,7,19,255,0,8,3,231,255,8,4,254,188,8,10,255,255,8,11,254,191,8,14,196,255,8,15,253,255,8,16,255,32,9,3,169,255,9,4,254,251,9,5,191,23,9,10,228,234,9,11,255,255,9,12,255,255,9,13,255,255,9,14,255,255,9,15,230,165,9,16,253,0,10,4,200,116,10,5,250,6,10,11,240,187,10,12,254,245,10,13,255,235,10,14,255,142,10,15,255,6,11,12,176,0,11,13,244,0,11,14,235,0],"secondary":false},{"width":12,"bonus":235,"chr":"^","pixels":[1,9,159,255,1,10,251,255,2,7,161,255,2,8,251,255,2,9,250,254,2,10,217,183,2,11,251,0,3,5,165,255,3,6,251,255,3,7,245,253,3,8,213,169,3,9,252,27,3,10,249,0,3,11,156,0,4,3,167,255,4,4,253,255,4,5,238,253,4,6,209,154,4,7,252,18,4,8,243,0,5,1,172,255,5,2,253,255,5,3,232,250,5,4,206,139,5,5,253,11,5,6,236,0,6,1,225,255,6,2,255,255,6,3,254,177,6,4,233,59,7,2,237,107,7,3,255,219,7,4,255,255,7,5,206,240,8,4,231,98,8,5,255,211,8,6,255,255,8,7,227,242,9,6,225,89,9,7,255,201,9,8,255,255,9,9,240,245,10,8,216,80,10,9,255,191,10,10,255,255,11,10,205,72,11,11,255,0],"secondary":false},{"width":12,"bonus":140,"chr":"~","pixels":[1,9,245,255,2,8,197,255,2,9,230,248,2,10,246,5,3,8,247,255,3,9,234,178,3,10,224,0,4,8,235,255,4,9,254,206,4,10,164,0,5,8,158,255,5,9,255,255,5,10,215,63,6,9,255,255,6,10,255,163,7,9,215,243,7,10,254,239,7,11,163,0,8,9,163,255,8,10,254,250,8,11,238,0,9,9,221,255,9,10,234,215,9,11,249,0,10,9,246,254,10,10,229,62,10,11,198,0,11,10,246,0],"secondary":false},{"width":16,"bonus":660,"chr":"&","pixels":[1,11,209,255,1,12,247,255,1,13,237,255,1,14,169,255,2,3,223,255,2,4,245,255,2,5,201,255,2,9,169,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,248,242,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,182,206,3,9,255,255,3,10,238,221,3,11,255,59,3,12,255,9,3,13,255,37,3,14,255,175,3,15,255,255,3,16,247,158,4,1,193,255,4,2,252,254,4,3,254,76,4,4,255,9,4,5,255,68,4,6,255,215,4,7,255,255,4,8,255,255,4,9,234,233,4,10,255,13,4,11,206,0,4,15,246,235,4,16,254,225,4,17,153,0,5,1,233,255,5,2,236,194,5,3,251,0,5,7,250,232,5,8,255,255,5,9,254,177,5,10,214,4,5,15,172,252,5,16,254,251,5,17,224,0,6,1,241,255,6,2,248,180,6,3,179,0,6,7,255,255,6,8,254,246,6,9,255,255,6,10,226,182,6,15,169,255,6,16,250,247,6,17,250,0,7,1,202,255,7,2,255,249,7,3,198,94,7,6,241,255,7,7,235,247,7,8,255,33,7,9,253,211,7,10,255,255,7,11,218,181,7,15,219,255,7,16,240,222,7,17,242,0,8,2,255,255,8,3,255,255,8,4,255,255,8,5,255,255,8,6,248,252,8,7,245,65,8,8,228,0,8,10,248,224,8,11,255,255,8,12,212,177,8,15,255,255,8,16,239,148,8,17,209,0,9,2,164,179,9,3,255,225,9,4,255,245,9,5,254,192,9,6,255,55,9,7,246,0,9,11,251,229,9,12,255,255,9,13,210,180,9,14,223,255,9,15,249,254,9,16,255,29,10,4,225,0,10,5,245,0,10,6,192,0,10,12,252,234,10,13,255,255,10,14,255,255,10,15,238,118,10,16,248,0,11,12,224,250,11,13,255,255,11,14,255,255,11,15,254,132,12,10,208,255,12,11,255,255,12,12,254,255,12,13,241,160,12,14,254,234,12,15,255,255,12,16,200,179,13,9,255,255,13,10,255,255,13,11,243,201,13,12,255,60,13,13,254,0,13,14,168,65,13,15,253,235,13,16,255,255,14,10,255,37,14,11,255,0,14,12,191,0,14,16,252,235,14,17,255,0,15,17,232,0],"secondary":false},{"width":13,"bonus":285,"chr":"*","pixels":[2,4,205,255,2,5,255,255,3,5,255,255,3,6,255,60,3,9,166,255,4,5,255,255,4,6,255,79,4,8,221,255,4,9,255,255,4,10,224,190,5,5,243,251,5,6,255,187,5,7,251,253,5,8,251,254,5,9,242,173,5,10,255,51,5,11,167,0,6,1,255,255,6,2,255,255,6,3,255,255,6,4,244,255,6,5,250,255,6,6,255,255,6,7,230,179,6,8,249,28,6,9,250,0,6,10,164,0,7,1,205,255,7,2,255,178,7,3,255,151,7,4,255,123,7,5,254,236,7,6,255,253,7,7,254,249,7,8,216,176,8,2,205,0,8,3,178,0,8,4,160,36,8,5,254,255,8,6,243,114,8,7,254,183,8,8,255,255,8,9,252,252,9,5,255,255,9,6,253,70,9,8,216,142,9,9,255,251,9,10,251,115,10,4,163,255,10,5,255,255,10,6,255,51,10,10,251,6,11,4,166,255,11,5,243,232,11,6,255,31,12,5,166,0,12,6,222,0],"secondary":false},{"width":7,"bonus":310,"chr":"(","pixels":[1,6,185,255,1,7,217,255,1,8,233,255,1,9,249,255,1,10,247,255,1,11,231,255,1,12,213,255,1,13,178,255,2,2,155,255,2,3,243,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,242,250,3,0,161,255,3,1,255,255,3,2,255,255,3,3,250,249,3,4,252,180,3,5,254,126,3,6,255,74,3,7,255,39,3,8,255,23,3,9,255,6,3,10,255,9,3,11,255,26,3,12,255,43,3,13,254,82,3,14,255,134,3,15,255,187,3,16,255,249,3,17,255,255,3,18,254,255,3,19,173,229,4,0,255,255,4,1,232,212,4,2,255,95,4,3,255,12,4,4,244,0,4,5,178,0,4,16,191,23,4,17,251,103,4,18,255,197,4,19,255,255,4,20,248,244,5,0,242,73,5,1,255,0,5,2,193,0,5,19,213,87,5,20,255,208,5,21,237,0,6,0,205,0,6,21,208,0],"secondary":false},{"width":8,"bonus":310,"chr":")","pixels":[1,20,205,255,2,0,255,255,2,1,213,236,2,18,197,255,2,19,255,255,2,20,242,250,2,21,206,0,3,0,247,160,3,1,254,255,3,2,255,255,3,3,250,253,3,4,190,249,3,15,183,255,3,16,245,255,3,17,255,255,3,18,255,255,3,19,233,176,3,20,255,21,3,21,237,0,4,1,172,67,4,2,254,145,4,3,255,235,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,251,245,4,17,252,156,4,18,254,52,4,19,255,0,4,20,161,0,5,4,240,69,5,5,255,119,5,6,255,172,5,7,254,210,5,8,254,228,5,9,255,245,5,10,254,249,5,11,255,231,5,12,254,215,5,13,254,183,5,14,255,127,5,15,255,73,5,16,255,10,5,17,241,0,5,18,154,0,6,7,172,0,6,8,210,0,6,9,228,0,6,10,245,0,6,11,248,0,6,12,231,0,6,13,214,0,6,14,182,0],"secondary":false},{"width":9,"bonus":130,"chr":"_","pixels":[0,18,155,255,0,19,255,255,1,18,155,255,1,19,255,255,1,20,255,0,2,18,155,255,2,19,255,255,2,20,255,0,3,18,155,255,3,19,255,255,3,20,255,0,4,18,155,255,4,19,255,255,4,20,255,0,5,18,155,255,5,19,255,255,5,20,255,0,6,18,155,255,6,19,255,255,6,20,255,0,7,18,155,255,7,19,255,255,7,20,255,0,8,18,155,255,8,19,255,255,8,20,255,0],"secondary":false},{"width":7,"bonus":80,"chr":"-","pixels":[1,9,155,255,1,10,255,255,2,9,155,255,2,10,255,255,2,11,255,0,3,9,155,255,3,10,255,255,3,11,255,0,4,9,155,255,4,10,255,255,4,11,255,0,5,9,155,255,5,10,255,255,5,11,255,0,6,10,156,0,6,11,255,0],"secondary":true},{"width":12,"bonus":310,"chr":"=","pixels":[1,7,255,255,1,8,155,255,1,11,155,255,1,12,255,255,2,7,255,255,2,8,254,156,2,9,156,0,2,11,155,255,2,12,255,255,2,13,255,0,3,7,255,255,3,8,254,156,3,9,156,0,3,11,155,255,3,12,255,255,3,13,255,0,4,7,255,255,4,8,254,156,4,9,156,0,4,11,155,255,4,12,255,255,4,13,255,0,5,7,255,255,5,8,254,156,5,9,156,0,5,11,155,255,5,12,255,255,5,13,255,0,6,7,255,255,6,8,254,156,6,9,156,0,6,11,155,255,6,12,255,255,6,13,255,0,7,7,255,255,7,8,254,156,7,9,156,0,7,11,155,255,7,12,255,255,7,13,255,0,8,7,255,255,8,8,254,156,8,9,156,0,8,11,155,255,8,12,255,255,8,13,255,0,9,7,255,255,9,8,254,156,9,9,156,0,9,11,155,255,9,12,255,255,9,13,255,0,10,7,255,255,10,8,254,156,10,9,156,0,10,11,155,255,10,12,255,255,10,13,255,0,11,8,255,0,11,9,156,0,11,12,156,0,11,13,255,0],"secondary":false},{"width":8,"bonus":370,"chr":"[","pixels":[2,0,255,255,2,1,255,255,2,2,255,255,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,2,8,255,255,2,9,255,255,2,10,255,255,2,11,255,255,2,12,255,255,2,13,255,255,2,14,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,255,255,2,20,255,255,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,255,255,3,10,255,255,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,255,3,18,255,255,3,19,255,255,3,20,255,255,3,21,255,0,4,0,254,156,4,1,255,0,4,2,255,0,4,3,255,0,4,4,255,0,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0,4,9,255,0,4,10,255,0,4,11,255,0,4,12,255,0,4,13,255,0,4,14,255,0,4,15,255,0,4,16,255,0,4,17,255,0,4,18,255,0,4,19,254,156,4,20,255,255,4,21,255,0,5,0,254,156,5,1,156,0,5,19,155,255,5,20,255,255,5,21,255,0,6,0,255,78,6,1,156,0,6,20,206,159,6,21,255,0],"secondary":false},{"width":8,"bonus":370,"chr":"]","pixels":[2,0,205,194,2,19,155,255,2,20,255,255,3,0,254,156,3,1,156,0,3,19,155,255,3,20,255,255,3,21,255,0,4,0,255,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,255,255,4,10,255,255,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,4,17,255,255,4,18,255,255,4,19,255,255,4,20,255,255,4,21,255,0,5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,255,255,5,17,255,255,5,18,255,255,5,19,255,255,5,20,255,255,5,21,255,0,6,0,255,0,6,1,255,0,6,2,255,0,6,3,255,0,6,4,255,0,6,5,255,0,6,6,255,0,6,7,255,0,6,8,255,0,6,9,255,0,6,10,255,0,6,11,255,0,6,12,255,0,6,13,255,0,6,14,255,0,6,15,255,0,6,16,255,0,6,17,255,0,6,18,255,0,6,19,255,0,6,20,255,0,6,21,255,0],"secondary":false},{"width":8,"bonus":360,"chr":"{","pixels":[1,9,190,255,1,10,255,255,2,9,253,255,2,10,246,228,2,11,255,167,3,1,235,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,3,8,255,255,3,9,222,237,3,10,254,103,3,11,255,255,3,12,255,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,255,3,18,239,255,4,0,255,255,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,254,251,4,8,254,198,4,9,255,41,4,10,206,4,4,11,195,202,4,12,255,241,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,4,17,255,255,4,18,255,255,4,19,255,255,4,20,188,149,5,0,244,248,5,1,254,46,5,2,255,1,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,250,0,5,9,198,0,5,12,154,0,5,13,241,0,5,14,255,0,5,15,255,0,5,16,255,0,5,17,255,1,5,18,255,42,5,19,254,234,5,20,255,208,6,0,237,182,6,1,237,0,6,19,181,234,6,20,253,244,6,21,208,0,7,0,240,0,7,1,169,0,7,20,166,0,7,21,242,0],"secondary":false},{"width":8,"bonus":360,"chr":"}","pixels":[1,0,167,255,1,19,166,255,1,20,241,255,2,0,254,238,2,1,184,68,2,19,233,255,2,20,238,222,2,21,242,0,3,0,255,255,3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,7,249,255,3,8,199,255,3,11,157,255,3,12,241,255,3,13,255,255,3,14,255,255,3,15,255,255,3,16,255,255,3,17,255,255,3,18,255,255,3,19,255,255,3,20,243,114,3,21,207,0,4,0,176,179,4,1,255,235,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,4,8,255,255,4,9,245,215,4,11,255,255,4,12,255,255,4,13,255,255,4,14,255,255,4,15,255,255,4,16,255,255,4,17,255,255,4,18,255,239,4,19,255,137,4,20,255,1,5,2,235,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,8,5,8,255,83,5,9,254,252,5,10,249,226,5,11,202,208,5,12,255,20,5,13,255,0,5,14,255,0,5,15,255,0,5,16,255,0,5,17,255,0,5,18,255,0,5,19,239,0,6,9,210,230,6,10,255,255,6,11,226,39,6,12,165,0,7,10,222,147,7,11,255,3],"secondary":false},{"width":7,"bonus":100,"chr":":","pixels":[2,5,160,255,2,6,245,255,2,14,155,255,2,15,245,255,2,16,157,255,3,5,245,255,3,6,255,255,3,7,254,243,3,14,243,255,3,15,255,255,3,16,254,246,3,17,157,0,4,6,253,205,4,7,255,113,4,8,242,0,4,15,252,206,4,16,255,117,4,17,246,0,5,7,203,0,5,16,204,0],"secondary":true},{"width":7,"bonus":125,"chr":";","pixels":[1,19,196,255,2,5,160,255,2,6,245,255,2,15,231,255,2,16,255,255,2,17,255,255,2,18,255,255,2,19,237,234,2,20,196,0,3,5,245,255,3,6,255,255,3,7,254,243,3,15,255,255,3,16,255,255,3,17,255,193,3,18,255,85,3,19,255,3,3,20,217,0,4,6,253,205,4,7,255,113,4,8,242,0,4,16,255,38,4,17,255,0,4,18,193,0,5,7,203,0],"secondary":true},{"width":11,"bonus":165,"chr":"\\"","pixels":[3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,247,255,4,1,235,255,4,2,254,213,4,3,255,189,4,4,255,165,4,5,255,142,4,6,255,119,4,7,247,0,5,2,235,0,5,3,212,0,5,4,189,0,5,5,165,0,7,1,255,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,8,1,199,255,8,2,254,177,8,3,255,153,8,4,255,129,8,5,255,106,8,6,255,83,8,7,255,0,9,2,199,0,9,3,176,0,9,4,153,0],"secondary":true},{"width":7,"bonus":85,"chr":"\'","pixels":[3,1,255,255,3,2,255,255,3,3,255,255,3,4,255,255,3,5,255,255,3,6,247,255,4,1,235,255,4,2,254,213,4,3,255,189,4,4,255,165,4,5,255,142,4,6,255,119,4,7,247,0,5,2,235,0,5,3,212,0,5,4,189,0,5,5,165,0],"secondary":true},{"width":12,"bonus":235,"chr":"<","pixels":[1,10,239,255,2,9,249,255,2,10,255,255,2,11,246,119,3,8,157,255,3,9,231,251,3,10,252,178,3,11,254,227,4,8,251,255,4,9,199,141,4,10,233,63,4,11,255,255,4,12,237,99,5,7,165,255,5,8,234,252,5,9,252,8,5,11,214,241,5,12,255,207,6,7,253,255,6,8,205,142,6,9,231,0,6,12,255,255,6,13,220,80,7,6,173,255,7,7,237,251,7,8,253,10,7,12,238,246,7,13,255,185,8,6,253,255,8,7,211,144,8,8,233,0,8,13,255,255,8,14,197,59,9,5,181,255,9,6,239,251,9,7,254,12,9,13,251,252,9,14,254,162,10,5,255,255,10,6,216,145,10,7,236,0,10,13,167,243,10,14,254,251,10,15,171,40,11,6,255,0,11,14,159,0,11,15,250,0],"secondary":false},{"width":12,"bonus":230,"chr":">","pixels":[1,5,255,255,1,13,159,255,1,14,249,255,2,5,198,233,2,6,254,237,2,13,247,255,2,14,219,188,2,15,250,0,3,6,254,255,3,7,245,123,3,13,255,255,3,14,249,46,3,15,162,0,4,6,189,234,4,7,255,233,4,12,229,255,4,13,219,216,4,14,255,0,5,7,254,254,5,8,242,119,5,12,255,255,5,13,236,75,5,14,185,0,6,7,180,234,6,8,254,231,6,11,201,255,6,12,224,236,6,13,255,0,7,8,254,252,7,9,241,115,7,11,255,255,7,12,221,106,7,13,207,0,8,8,171,234,8,9,255,227,8,10,208,213,8,11,232,248,8,12,255,4,9,9,253,251,9,10,255,255,9,11,210,139,9,12,226,0,10,9,162,235,10,10,254,240,10,11,255,13,11,11,240,0],"secondary":false},{"width":9,"bonus":250,"chr":"\\\\","pixels":[1,0,176,253,2,0,255,255,2,1,255,255,2,2,255,255,2,3,232,250,2,4,161,255,3,0,225,36,3,1,255,99,3,2,255,167,3,3,255,233,3,4,255,255,3,5,255,255,3,6,255,255,3,7,219,251,4,3,167,2,4,4,236,49,4,5,255,112,4,6,254,180,4,7,254,243,4,8,255,255,4,9,255,255,4,10,252,254,4,11,204,251,5,7,181,6,5,8,244,60,5,9,255,125,5,10,255,193,5,11,255,249,5,12,255,255,5,13,255,255,5,14,248,252,5,15,189,252,6,11,195,13,6,12,250,72,6,13,255,139,6,14,254,207,6,15,254,255,6,16,255,255,6,17,255,255,6,18,241,252,6,19,173,255,7,15,209,23,7,16,254,85,7,17,255,152,7,18,255,219,7,19,255,255,7,20,255,255,8,19,223,34,8,20,255,98,8,21,255,0],"secondary":false},{"width":6,"bonus":55,"chr":".","pixels":[2,14,155,255,2,15,245,255,2,16,157,255,3,14,243,255,3,15,255,255,3,16,254,246,3,17,157,0,4,15,252,206,4,16,255,117,4,17,246,0,5,16,204,0],"secondary":true},{"width":6,"bonus":80,"chr":",","pixels":[1,17,185,255,1,18,239,255,1,19,255,255,2,15,255,255,2,16,255,255,2,17,255,255,2,18,243,224,2,19,246,102,2,20,255,0,3,15,237,255,3,16,254,162,3,17,255,65,3,18,255,0,3,19,213,0,4,16,237,0,4,17,162,0],"secondary":true},{"width":12,"bonus":325,"chr":"|","pixels":[5,0,255,255,5,1,255,255,5,2,255,255,5,3,255,255,5,4,255,255,5,5,255,255,5,6,255,255,5,7,255,255,5,8,255,255,5,9,255,255,5,10,255,255,5,11,255,255,5,12,255,255,5,13,255,255,5,14,255,255,5,15,255,255,5,16,255,255,5,17,255,255,5,18,255,255,5,19,255,255,5,20,255,255,6,0,255,255,6,1,255,255,6,2,255,255,6,3,255,255,6,4,255,255,6,5,255,255,6,6,255,255,6,7,255,255,6,8,255,255,6,9,255,255,6,10,255,255,6,11,255,255,6,12,255,255,6,13,255,255,6,14,255,255,6,15,255,255,6,16,255,255,6,17,255,255,6,18,255,255,6,19,255,255,6,20,255,255,6,21,255,0,7,0,255,0,7,1,255,0,7,2,255,0,7,3,255,0,7,4,255,0,7,5,255,0,7,6,255,0,7,7,255,0,7,8,255,0,7,9,255,0,7,10,255,0,7,11,255,0,7,12,255,0,7,13,255,0,7,14,255,0,7,15,255,0,7,16,255,0,7,17,255,0,7,18,255,0,7,19,255,0,7,20,255,0,7,21,255,0],"secondary":false}],"width":20,"spacewidth":6,"shadow":true,"height":22,"basey":16}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_499986__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_499986__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_499986__("./src/chatbox/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/ocr/index.js":
/*!**********************************************!*\
  !*** ../node_modules/alt1/dist/ocr/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ocr/index.ts":
/*!**************************!*\
  !*** ./src/ocr/index.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_728__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateFont = exports.loadFontImage = exports.readChar = exports.readSmallCapsBackwards = exports.readLine = exports.getChatColor = exports.getChatColorMono = exports.findReadLine = exports.findChar = exports.decompose3col = exports.decomposeblack = exports.decompose2col = exports.canblend = exports.unblendTrans = exports.unblendKnownBg = exports.unblendBlackBackground = exports.debugFont = exports.debugout = exports.debug = void 0;
const base_1 = __nested_webpack_require_728__(/*! alt1/base */ "alt1/base");
exports.debug = {
    printcharscores: false,
    trackread: false
};
exports.debugout = {};
/**
 * draws the font definition to a buffer and displays it in the dom for debugging purposes
 * @param font
 */
function debugFont(font) {
    var spacing = font.width + 2;
    var buf = new base_1.ImageData(spacing * font.chars.length, font.height + 1);
    for (var a = 0; a < buf.data.length; a += 4) {
        buf.data[a] = buf.data[a + 1] = buf.data[a + 2] = 0;
        buf.data[a + 3] = 255;
    }
    for (var a = 0; a < font.chars.length; a++) {
        var bx = a * spacing;
        var chr = font.chars[a];
        for (var b = 0; b < chr.pixels.length; b += (font.shadow ? 4 : 3)) {
            buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 2], chr.pixels[b + 2], chr.pixels[b + 2], 255]);
            if (font.shadow) {
                buf.setPixel(bx + chr.pixels[b], chr.pixels[b + 1], [chr.pixels[b + 3], 0, 0, 255]);
            }
        }
    }
    buf.show();
}
exports.debugFont = debugFont;
function unblendBlackBackground(img, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decomposeblack(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b);
        rimg.data[i + 0] = col[0] * 255;
        rimg.data[i + 1] = rimg.data[i + 0];
        rimg.data[i + 2] = rimg.data[i + 0];
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendBlackBackground = unblendBlackBackground;
/**
 * unblends a imagebuffer into match strength with given color
 * the bgimg argument should contain a second image with pixel occluded by the font visible.
 * @param img
 * @param shadow detect black as second color
 * @param bgimg optional second image to
 */
function unblendKnownBg(img, bgimg, shadow, r, g, b) {
    if (bgimg && (img.width != bgimg.width || img.height != bgimg.height)) {
        throw "bgimg size doesn't match";
    }
    var rimg = new base_1.ImageData(img.width, img.height);
    var totalerror = 0;
    for (var i = 0; i < img.data.length; i += 4) {
        var col = decompose2col(img.data[i], img.data[i + 1], img.data[i + 2], r, g, b, bgimg.data[i + 0], bgimg.data[i + 1], bgimg.data[i + 2]);
        if (shadow) {
            if (col[2] > 0.01) {
                console.log("high error component: " + (col[2] * 100).toFixed(1) + "%");
            }
            totalerror += col[2];
            var m = 1 - col[1] - Math.abs(col[2]); //main color+black=100%-bg-error
            rimg.data[i + 0] = m * 255;
            rimg.data[i + 1] = col[0] / m * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = col[0] * 255;
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendKnownBg = unblendKnownBg;
/**
 * Unblends a font image that is already conpletely isolated to the raw image used ingame. This is the easiest mode for pixel fonts where alpha is 0 or 255, or for extracted font files.
 * @param img
 * @param r
 * @param g
 * @param b
 * @param shadow whether the font has a black shadow
 */
function unblendTrans(img, shadow, r, g, b) {
    var rimg = new base_1.ImageData(img.width, img.height);
    var pxlum = r + g + b;
    for (var i = 0; i < img.data.length; i += 4) {
        if (shadow) {
            var lum = img.data[i + 0] + img.data[i + 1] + img.data[i + 2];
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = lum / pxlum * 255;
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        else {
            rimg.data[i + 0] = img.data[i + 3];
            rimg.data[i + 1] = rimg.data[i + 0];
            rimg.data[i + 2] = rimg.data[i + 0];
        }
        rimg.data[i + 3] = 255;
    }
    return rimg;
}
exports.unblendTrans = unblendTrans;
/**
 * Determised wether color [rgb]m can be a result of a blend with color [rgb]1 that is p (0-1) of the mix
 * It returns the number that the second color has to lie outside of the possible color ranges
 * @param rm resulting color
 * @param r1 first color of the mix (the other color is unknown)
 * @param p the portion of the [rgb]1 in the mix (0-1)
 */
function canblend(rm, gm, bm, r1, g1, b1, p) {
    var m = Math.min(50, p / (1 - p));
    var r = rm + (rm - r1) * m;
    var g = gm + (gm - g1) * m;
    var b = bm + (bm - b1) * m;
    return Math.max(0, -r, -g, -b, r - 255, g - 255, b - 255);
}
exports.canblend = canblend;
/**
 * decomposes a color in 2 given component colors and returns the amount of each color present
 * also return a third (noise) component which is the the amount leftover orthagonal from the 2 given colors
 */
function decompose2col(rp, gp, bp, r1, g1, b1, r2, g2, b2) {
    //get the normal of the error (cross-product of both colors)
    var r3 = g1 * b2 - g2 * b1;
    var g3 = b1 * r2 - b2 * r1;
    var b3 = r1 * g2 - r2 * g1;
    //normalize to length 255
    var norm = 255 / Math.sqrt(r3 * r3 + g3 * g3 + b3 * b3);
    r3 *= norm;
    g3 *= norm;
    b3 *= norm;
    return decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3);
}
exports.decompose2col = decompose2col;
/**
 * decomposes a pixel in a given color component and black and returns what proportion of the second color it contains
 * this is not as formal as decompose 2/3 and only give a "good enough" number
 */
function decomposeblack(rp, gp, bp, r1, g1, b1) {
    var dr = Math.abs(rp - r1);
    var dg = Math.abs(gp - g1);
    var db = Math.abs(bp - b1);
    var maxdif = Math.max(dr, dg, db);
    return [1 - maxdif / 255];
}
exports.decomposeblack = decomposeblack;
/**
 * decomposes a color in 3 given component colors and returns the amount of each color present
 */
function decompose3col(rp, gp, bp, r1, g1, b1, r2, g2, b2, r3, g3, b3) {
    //P=x*C1+y*C2+z*C3
    //assemble as matrix 
    //M*w=p
    //get inverse of M
    //dirty written out version of cramer's rule
    var A = g2 * b3 - b2 * g3;
    var B = g3 * b1 - b3 * g1;
    var C = g1 * b2 - b1 * g2;
    var D = b2 * r3 - r2 * b3;
    var E = b3 * r1 - r3 * b1;
    var F = b1 * r2 - r1 * b2;
    var G = r2 * g3 - g2 * r3;
    var H = r3 * g1 - g3 * r1;
    var I = r1 * g2 - g1 * r2;
    var det = r1 * A + g1 * D + b1 * G;
    //M^-1*p=w
    var x = (A * rp + D * gp + G * bp) / det;
    var y = (B * rp + E * gp + H * bp) / det;
    var z = (C * rp + F * gp + I * bp) / det;
    return [x, y, z];
}
exports.decompose3col = decompose3col;
/**
 * brute force to the exact position of the text
 */
function findChar(buffer, font, col, x, y, w, h) {
    if (x < 0) {
        return null;
    }
    if (y - font.basey < 0) {
        return null;
    }
    if (x + w + font.width > buffer.width) {
        return null;
    }
    if (y + h - font.basey + font.height > buffer.height) {
        return null;
    }
    var best = 1000; //TODO finetune score constants
    var bestchar = null;
    for (var cx = x; cx < x + w; cx++) {
        for (var cy = y; cy < y + h; cy++) {
            var chr = readChar(buffer, font, col, cx, cy, false, false);
            if (chr != null && chr.sizescore < best) {
                best = chr.sizescore;
                bestchar = chr;
            }
        }
    }
    return bestchar;
}
exports.findChar = findChar;
/**
 * reads text with unknown exact coord or color. The given coord should be inside the text
 * color selection not implemented yet
 */
function findReadLine(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var chr = null;
    if (cols.length > 1) {
        //TODO use getChatColor() instead for non-mono?
        var sorted = getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols);
        //loop until we have a match (max 2 cols)
        for (var a = 0; a < 2 && a < sorted.length && chr == null; a++) {
            chr = findChar(buffer, font, sorted[a].col, x, y, w, h);
        }
    }
    else {
        chr = findChar(buffer, font, cols[0], x, y, w, h);
    }
    if (chr == null) {
        return { debugArea: { x, y, w, h }, text: "", fragments: [] };
    }
    return readLine(buffer, font, cols, chr.x, chr.y, true, true);
}
exports.findReadLine = findReadLine;
function getChatColorMono(buf, rect, colors) {
    var colormap = colors.map(c => ({ col: c, score: 0 }));
    if (rect.x < 0 || rect.y < 0 || rect.x + rect.width > buf.width || rect.y + rect.height > buf.height) {
        return colormap;
    }
    var data = buf.data;
    var maxd = 50;
    for (var colobj of colormap) {
        var score = 0;
        var col = colobj.col;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                var i = x * 4 + y * 4 * buf.width;
                var d = Math.abs(data[i] - col[0]) + Math.abs(data[i + 1] - col[1]) + Math.abs(data[i + 2] - col[2]);
                if (d < maxd) {
                    score += maxd - d;
                }
            }
        }
        colobj.score = score;
    }
    return colormap.sort((a, b) => b.score - a.score);
}
exports.getChatColorMono = getChatColorMono;
function unblend(r, g, b, R, G, B) {
    var m = Math.sqrt(r * r + g * g + b * b);
    var n = Math.sqrt(R * R + G * G + B * B);
    var x = (r * R + g * G + b * B) / n;
    var y = Math.sqrt(Math.max(0, m * m - x * x));
    var r1 = Math.max(0, (63.75 - y) * 4);
    var r2 = x / n * 255;
    if (r2 > 255) //brighter than refcol
     {
        r1 = Math.max(0, r1 - r2 + 255);
        r2 = 255;
    }
    return [r1, r2];
}
function getChatColor(buf, rect, colors) {
    var bestscore = -1.0;
    var best = null;
    var b2 = 0.0;
    var data = buf.data;
    for (let col of colors) {
        var score = 0.0;
        for (var y = rect.y; y < rect.y + rect.height; y++) {
            for (var x = rect.x; x < rect.x + rect.width; x++) {
                if (x < 0 || x + 1 >= buf.width) {
                    continue;
                }
                if (y < 0 || y + 1 >= buf.width) {
                    continue;
                }
                let i1 = buf.pixelOffset(x, y);
                let i2 = buf.pixelOffset(x + 1, y + 1);
                var pixel1 = unblend(data[i1 + 0], data[i1 + 1], data[i1 + 2], col[0], col[1], col[2]);
                var pixel2 = unblend(data[i2 + 0], data[i2 + 1], data[i2 + 2], col[0], col[1], col[2]);
                //TODO this is from c# can simplify a bit
                var s = (pixel1[0] / 255 * pixel1[1] / 255) * (pixel2[0] / 255 * (255.0 - pixel2[1]) / 255);
                score += s;
            }
        }
        if (score > bestscore) {
            b2 = bestscore;
            bestscore = score;
            best = col;
        }
        else if (score > b2) {
            b2 = score;
        }
    }
    //Console.WriteLine("color: " + bestcol + " - " + (bestscore - b2));
    //bestscore /= rect.width * rect.height;
    return best;
}
exports.getChatColor = getChatColor;
/**
 * reads a line of text with exactly known position and color. y should be the y coord of the text base line, x should be the first pixel of a new character
 */
function readLine(buffer, font, colors, x, y, forward, backward = false) {
    if (typeof colors[0] != "number" && colors.length == 1) {
        colors = colors[0];
    }
    var multicol = typeof colors[0] != "number";
    var allcolors = multicol ? colors : [colors];
    var detectcolor = function (sx, sy, backward) {
        var w = Math.floor(font.width * 1.5);
        if (backward) {
            sx -= w;
        }
        sy -= font.basey;
        return getChatColor(buffer, { x: sx, y: sy, width: w, height: font.height }, allcolors);
    };
    var fragments = [];
    var x1 = x;
    var x2 = x;
    var maxspaces = (typeof font.maxspaces == "number" ? font.maxspaces : 1);
    let fragtext = "";
    let fraghadprimary = false;
    var lastcol = null;
    let addfrag = (forward) => {
        if (!fragtext) {
            return;
        }
        let frag = {
            text: fragtext,
            color: lastcol,
            index: 0,
            xstart: x + (forward ? fragstartdx : fragenddx),
            xend: x + (forward ? fragenddx : fragstartdx)
        };
        if (forward) {
            fragments.push(frag);
        }
        else {
            fragments.unshift(frag);
        }
        fragtext = "";
        fragstartdx = dx;
        fraghadprimary = false;
    };
    for (var dirforward of [true, false]) {
        //init vars
        if (dirforward && !forward) {
            continue;
        }
        if (!dirforward && !backward) {
            continue;
        }
        var dx = 0;
        var fragstartdx = dx;
        var fragenddx = dx;
        var triedspaces = 0;
        var triedrecol = false;
        var col = multicol ? null : colors;
        while (true) {
            col = col || detectcolor(x + dx, y, !dirforward);
            var chr = (col ? readChar(buffer, font, col, x + dx, y, !dirforward, true) : null);
            if (col == null || chr == null) {
                if (triedspaces < maxspaces) {
                    dx += (dirforward ? 1 : -1) * font.spacewidth;
                    triedspaces++;
                    continue;
                }
                if (multicol && !triedrecol && fraghadprimary) {
                    dx -= (dirforward ? 1 : -1) * triedspaces * font.spacewidth;
                    triedspaces = 0;
                    col = null;
                    triedrecol = true;
                    continue;
                }
                if (dirforward) {
                    x2 = x + dx - font.spacewidth;
                }
                else {
                    x1 = x + dx + font.spacewidth;
                }
                break;
            }
            else {
                if (lastcol && (col[0] != lastcol[0] || col[1] != lastcol[1] || col[2] != lastcol[2])) {
                    addfrag(dirforward);
                }
                var spaces = "";
                for (var a = 0; a < triedspaces; a++) {
                    spaces += " ";
                }
                if (dirforward) {
                    fragtext += spaces + chr.chr;
                }
                else {
                    fragtext = chr.chr + spaces + fragtext;
                }
                if (!chr.basechar.secondary) {
                    fraghadprimary = true;
                }
                triedspaces = 0;
                triedrecol = false;
                dx += (dirforward ? 1 : -1) * chr.basechar.width;
                fragenddx = dx;
                lastcol = col;
            }
        }
        if (lastcol && fraghadprimary) {
            addfrag(dirforward);
        }
    }
    fragments.forEach((f, i) => f.index = i);
    return {
        debugArea: { x: x1, y: y - 9, w: x2 - x1, h: 10 },
        text: fragments.map(f => f.text).join(""),
        fragments
    };
}
exports.readLine = readLine;
/**
 * Reads a line of text that uses a smallcaps font, these fonts can have duplicate chars that only have a different amount of
 * empty space after the char before the next char starts.
 * The coordinates should be near the end of the string, or a rectangle with high 1 containing all points where the string can end.
 */
function readSmallCapsBackwards(buffer, font, cols, x, y, w = -1, h = -1) {
    if (w == -1) {
        w = font.width + font.spacewidth;
        x -= Math.ceil(w / 2);
    }
    if (h == -1) {
        h = 7;
        y -= 1;
    }
    var matchedchar = null;
    var sorted = (cols.length == 1 ? [{ col: cols[0], score: 1 }] : getChatColorMono(buffer, new base_1.Rect(x, y - font.basey, w, h), cols));
    //loop until we have a match (max 2 cols)
    for (var a = 0; a < 2 && a < sorted.length && matchedchar == null; a++) {
        for (var cx = x + w - 1; cx >= x; cx--) {
            var best = 1000; //TODO finetune score constants
            var bestchar = null;
            for (var cy = y; cy < y + h; cy++) {
                var chr = readChar(buffer, font, sorted[a].col, cx, cy, true, false);
                if (chr != null && chr.sizescore < best) {
                    best = chr.sizescore;
                    bestchar = chr;
                }
            }
            if (bestchar) {
                matchedchar = bestchar;
                break;
            }
        }
    }
    if (matchedchar == null) {
        return { text: "", debugArea: { x, y, w, h } };
    }
    return readLine(buffer, font, cols, matchedchar.x, matchedchar.y, false, true);
}
exports.readSmallCapsBackwards = readSmallCapsBackwards;
/**
 * Reads a single character at the exact given location
 * @param x exact x location of the start of the character domain (includes part of the spacing between characters)
 * @param y exact y location of the baseline pixel of the character
 * @param backwards read in backwards direction, the x location should be the first pixel after the character domain in that case
 */
function readChar(buffer, font, col, x, y, backwards, allowSecondary) {
    y -= font.basey;
    var shiftx = 0;
    var shifty = font.basey;
    var shadow = font.shadow;
    var debugobj = null;
    var debugimg = null;
    if (exports.debug.trackread) {
        var name = x + ";" + y + " " + JSON.stringify(col);
        if (!exports.debugout[name]) {
            exports.debugout[name] = [];
        }
        debugobj = exports.debugout[name];
    }
    //===== make sure the full domain is inside the bitmap/buffer ======
    if (y < 0 || y + font.height >= buffer.height) {
        return null;
    }
    if (!backwards) {
        if (x < 0 || x + font.width > buffer.width) {
            return null;
        }
    }
    else {
        if (x - font.width < 0 || x > buffer.width) {
            return null;
        }
    }
    //====== start reading the char ======
    var scores = [];
    for (var chr = 0; chr < font.chars.length; chr++) {
        var chrobj = font.chars[chr];
        if (chrobj.secondary && !allowSecondary) {
            continue;
        }
        scores[chr] = { score: 0, sizescore: 0, chr: chrobj };
        var chrx = (backwards ? x - chrobj.width : x);
        if (exports.debug.trackread) {
            debugimg = new base_1.ImageData(font.width, font.height);
        }
        for (var a = 0; a < chrobj.pixels.length;) {
            var i = (chrx + chrobj.pixels[a]) * 4 + (y + chrobj.pixels[a + 1]) * buffer.width * 4;
            var penalty = 0;
            if (!shadow) {
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0], col[1], col[2], chrobj.pixels[a + 2] / 255);
                a += 3;
            }
            else {
                var lum = chrobj.pixels[a + 3] / 255;
                penalty = canblend(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], col[0] * lum, col[1] * lum, col[2] * lum, chrobj.pixels[a + 2] / 255);
                a += 4;
            }
            scores[chr].score += Math.max(0, penalty);
            //TODO add compiler flag to this to remove it for performance
            if (debugimg) {
                debugimg.setPixel(chrobj.pixels[a], chrobj.pixels[a + 1], [penalty, penalty, penalty, 255]);
            }
        }
        scores[chr].sizescore = scores[chr].score - chrobj.bonus;
        if (debugobj) {
            debugobj.push({ chr: chrobj.chr, score: scores[chr].sizescore, rawscore: scores[chr].score, img: debugimg });
        }
    }
    scores.sort((a, b) => a.sizescore - b.sizescore);
    if (exports.debug.printcharscores) {
        scores.slice(0, 5).forEach(q => console.log(q.chr.chr, q.score.toFixed(3), q.sizescore.toFixed(3)));
    }
    var winchr = scores[0];
    if (!winchr || winchr.score > 400) {
        return null;
    }
    return { chr: winchr.chr.chr, basechar: winchr.chr, x: x + shiftx, y: y + shifty, score: winchr.score, sizescore: winchr.sizescore };
}
exports.readChar = readChar;
function loadFontImage(img, meta) {
    var bg = null;
    var pxheight = img.height - 1;
    if (meta.unblendmode == "removebg") {
        pxheight /= 2;
    }
    var inimg = img.clone({ x: 0, y: 0, width: img.width, height: pxheight });
    var outimg;
    if (meta.unblendmode == "removebg") {
        bg = img.clone({ x: 0, y: pxheight + 1, width: img.width, height: pxheight });
        outimg = unblendKnownBg(inimg, bg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "raw") {
        outimg = unblendTrans(inimg, meta.shadow, meta.color[0], meta.color[1], meta.color[2]);
    }
    else if (meta.unblendmode == "blackbg") {
        outimg = unblendBlackBackground(inimg, meta.color[0], meta.color[1], meta.color[2]);
    }
    else {
        throw new Error("no unblend mode");
    }
    var unblended = new base_1.ImageData(img.width, pxheight + 1);
    outimg.copyTo(unblended, 0, 0, outimg.width, outimg.height, 0, 0);
    img.copyTo(unblended, 0, pxheight, img.width, 1, 0, pxheight);
    return generateFont(unblended, meta.chars, meta.seconds, meta.bonus || {}, meta.basey, meta.spacewidth, meta.treshold, meta.shadow);
}
exports.loadFontImage = loadFontImage;
/**
 * Generates a font json description to use in reader functions
 * @param unblended A source image with all characters lined up. The image should be unblended into components using the unblend functions
 * The lowest pixel line of this image is used to mark the location and size of the charecters if the red component is 255 it means there is a character on that pixel column
 * @param chars A string containing all the characters of the image in the same order
 * @param seconds A string with characters that are considered unlikely and should only be detected if no other character is possible.
 * For example the period (.) character matches positive inside many other characters and should be marked as secondary
 * @param bonusses An object that contains bonus scores for certain difficult characters to make the more likely to be red.
 * @param basey The y position of the baseline pixel of the font
 * @param spacewidth the number of pixels a space takes
 * @param treshold minimal color match proportion (0-1) before a pixel is used for the font
 * @param shadow whether this font also uses the black shadow some fonts have. The "unblended" image should be unblended correspondingly
 * @returns a javascript object describing the font which is used as input for the different read functions
 */
function generateFont(unblended, chars, seconds, bonusses, basey, spacewidth, treshold, shadow) {
    //settings vars
    treshold *= 255;
    //initial vars
    var miny = unblended.height - 1;
    var maxy = 0;
    var font = { chars: [], width: 0, spacewidth: spacewidth, shadow: shadow, height: 0, basey: 0 };
    var ds = false;
    var chardata = [];
    //index all chars
    for (var dx = 0; dx < unblended.width; dx++) {
        var i = 4 * dx + 4 * unblended.width * (unblended.height - 1);
        if (unblended.data[i] == 255 && unblended.data[i + 3] == 255) {
            if (ds === false) {
                ds = dx;
            }
        }
        else {
            if (ds !== false) {
                //char found, start detection
                var de = dx;
                var char = chars[chardata.length];
                var chr = {
                    ds: ds,
                    de: de,
                    width: de - ds,
                    chr: char,
                    bonus: (bonusses && bonusses[char]) || 0,
                    secondary: seconds.indexOf(chars[chardata.length]) != -1,
                    pixels: []
                };
                chardata.push(chr);
                font.width = Math.max(font.width, chr.width);
                for (x = 0; x < de - ds; x++) {
                    for (y = 0; y < unblended.height - 1; y++) {
                        var i = (x + ds) * 4 + y * unblended.width * 4;
                        if (unblended.data[i] >= treshold) {
                            miny = Math.min(miny, y);
                            maxy = Math.max(maxy, y);
                        }
                    }
                }
                ds = false;
            }
        }
    }
    font.height = maxy + 1 - miny;
    font.basey = basey - miny;
    //detect all pixels
    for (var a in chardata) {
        var chr = chardata[a];
        for (var x = 0; x < chr.width; x++) {
            for (var y = 0; y < maxy + 1 - miny; y++) {
                var i = (x + chr.ds) * 4 + (y + miny) * unblended.width * 4;
                if (unblended.data[i] >= treshold) {
                    chr.pixels.push(x, y);
                    chr.pixels.push(unblended.data[i]);
                    if (shadow) {
                        chr.pixels.push(unblended.data[i + 1]);
                    }
                    chr.bonus += 5;
                }
            }
        }
        //prevent js from doing the thing with unnecessary output precision
        chr.bonus = +chr.bonus.toFixed(3);
        font.chars.push({ width: chr.width, bonus: chr.bonus, chr: chr.chr, pixels: chr.pixels, secondary: chr.secondary });
    }
    return font;
}
exports.generateFont = generateFont;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_27427__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_27427__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_27427__("./src/ocr/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/alt1/dist/targetmob/index.js":
/*!****************************************************!*\
  !*** ../node_modules/alt1/dist/targetmob/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! alt1/base */ "../node_modules/alt1/dist/base/index.js"), __webpack_require__(/*! alt1/ocr */ "../node_modules/alt1/dist/ocr/index.js"));
	else {}
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/targetmob/imgs/detectimg.data.png":
/*!***********************************************!*\
  !*** ./src/targetmob/imgs/detectimg.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_905__) => {

module.exports=(__nested_webpack_require_905__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAABoAAAARCAYAAADDjbwNAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAAYbm9QRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYtZUsAAACJSURBVDhPtc09CoNAGIThZSEuG3KHLVKJCIJgfpAYxG5vkDL3v8NIAjZmCJ/CFE/zFjMOwG5VP8HHE0J9xzGVf9EBq3Pbf48Oj4xweSJ0A4rr+OPT6YDVcmRBB6xSc4MVHVCgUYFGBRoVaFSgUYFGBRoVaFSgUYFGBZdfb2yxHrByvoiw2n8ENwOqvL/qtsOgigAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/targetmob/index.ts":
/*!********************************!*\
  !*** ./src/targetmob/index.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_1620__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const a1lib = __importStar(__nested_webpack_require_1620__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__nested_webpack_require_1620__(/*! alt1/ocr */ "alt1/ocr"));
const base_1 = __nested_webpack_require_1620__(/*! alt1/base */ "alt1/base");
var chatfont = __nested_webpack_require_1620__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
var imgs = (0, base_1.webpackImages)({
    detectimg: __nested_webpack_require_1620__(/*! ./imgs/detectimg.data.png */ "./src/targetmob/imgs/detectimg.data.png")
});
class TargetMobReader {
    constructor() {
        this.state = null;
        this.lastpos = null;
    }
    read(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        var pos = img.findSubimage(imgs.detectimg);
        if (pos.length != 0) {
            var data = img.toData(pos[0].x - 151, pos[0].y - 16, 220, 44);
            var mobname = OCR.findReadLine(data, chatfont, [[255, 255, 255]], 62, 18, 20, 1);
            var mobhp = OCR.findReadLine(data, chatfont, [[255, 203, 5]], 92, 39, 20, 1);
            this.lastpos = pos[0];
            this.state = {
                name: mobname.text,
                hp: +mobhp.text
            };
        }
        else {
            this.state = null;
        }
        return this.state;
    }
}
exports["default"] = TargetMobReader;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/aa_8px.fontmeta.json":
/*!****************************************!*\
  !*** ./src/fonts/aa_8px.fontmeta.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":140,"chr":"a","pixels":[0,7,187,255,1,3,221,255,1,6,169,255,1,7,164,132,1,8,255,255,2,3,255,255,2,4,221,0,2,5,196,243,2,7,170,0,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,5,255,255,3,6,187,0,3,8,221,255,3,9,255,0,4,4,254,239,4,5,255,255,4,6,254,204,4,7,255,255,4,8,240,253,4,9,221,0,5,5,240,36,5,6,255,34,5,7,211,41,5,8,255,34,5,9,238,0],"secondary":false},{"width":7,"bonus":175,"chr":"b","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,248,209,1,4,243,178,1,5,230,75,1,6,230,75,1,7,243,178,1,8,246,194,1,9,204,0,2,3,255,255,2,4,204,0,2,5,170,0,2,8,255,255,2,9,187,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,169,255,4,4,254,171,4,7,169,255,4,9,255,0,5,4,204,128,5,5,232,205,5,6,205,233,5,8,170,0,6,6,187,0,6,7,187,0],"secondary":false},{"width":7,"bonus":95,"chr":"c","pixels":[0,5,169,255,0,6,187,255,1,4,187,255,1,6,193,90,1,7,237,201,1,8,164,185,2,3,255,255,2,5,187,0,2,8,255,255,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,221,255,4,4,255,34,4,8,221,255,4,9,255,0,5,4,226,39,5,9,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"d","pixels":[0,5,187,255,0,6,187,255,1,4,169,255,1,6,205,85,1,7,232,187,1,8,203,213,2,3,255,255,2,5,170,0,2,8,255,255,2,9,170,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,203,255,4,4,254,171,4,7,169,255,4,8,187,255,4,9,255,0,5,1,203,255,5,2,225,251,5,3,225,251,5,4,248,227,5,5,244,231,5,6,230,245,5,7,230,245,5,8,237,219,5,9,187,0,6,2,204,0,6,3,221,0,6,4,221,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":7,"bonus":135,"chr":"e","pixels":[0,5,187,255,0,6,169,255,1,4,187,255,1,5,255,255,1,6,209,104,1,7,237,219,2,3,255,255,2,5,255,255,2,6,255,0,2,8,255,255,3,3,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,3,187,255,4,4,255,119,4,5,255,255,4,6,255,0,4,8,221,255,4,9,255,0,5,4,224,155,5,5,227,229,5,6,255,0,5,9,221,0,6,6,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"f","pixels":[0,3,203,255,1,2,221,255,1,3,255,255,1,4,248,227,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,2,1,255,255,2,3,255,255,2,4,255,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0,3,2,255,0,3,4,255,0],"secondary":false},{"width":7,"bonus":200,"chr":"g","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,232,187,1,8,184,189,1,11,153,255,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,11,245,247,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,3,11,221,255,4,3,221,255,4,4,255,136,4,7,153,255,4,8,221,255,4,9,255,85,4,10,203,255,5,3,203,255,5,4,250,226,5,5,239,236,5,6,230,245,5,7,230,245,5,8,241,234,5,9,243,178,5,11,204,0,6,4,204,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,221,0,6,10,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"h","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,243,178,1,4,248,209,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,170,0,2,5,204,0,3,3,255,255,3,4,255,0,4,3,169,255,4,4,255,221,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,175,25,5,5,226,39,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[0,1,237,255,0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,238,0,1,4,211,41,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"j","pixels":[0,11,153,255,1,11,169,255,2,1,203,255,2,3,203,255,2,4,225,251,2,5,225,251,2,6,225,251,2,7,225,251,2,8,225,251,2,9,225,251,3,2,204,0,3,4,204,0,3,5,221,0,3,6,221,0,3,7,221,0,3,8,221,0,3,9,221,0,3,10,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,166,235,2,5,255,255,2,6,255,221,3,3,203,255,3,5,153,0,3,6,255,51,3,7,250,226,3,8,160,217,4,4,204,0,4,8,239,145],"secondary":false},{"width":3,"bonus":75,"chr":"l","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,2,9,255,0],"secondary":false},{"width":10,"bonus":210,"chr":"m","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,153,255,4,4,255,255,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,228,209,5,5,255,68,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0,6,3,255,255,6,5,187,0,7,3,237,255,7,4,255,85,8,4,249,174,8,5,232,243,8,6,225,251,8,7,225,251,8,8,210,247,9,5,170,0,9,6,221,0,9,7,221,0,9,8,221,0,9,9,204,0],"secondary":false},{"width":7,"bonus":140,"chr":"n","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,237,255,4,4,255,85,5,4,249,174,5,5,232,243,5,6,225,251,5,7,225,251,5,8,210,247,6,5,170,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":8,"bonus":120,"chr":"o","pixels":[0,5,187,255,0,6,169,255,1,4,203,255,1,6,209,104,1,7,244,231,2,3,237,255,2,5,204,0,2,8,252,241,3,3,255,255,3,4,238,0,3,8,255,255,3,9,238,0,4,3,237,255,4,4,255,0,4,8,255,255,4,9,255,0,5,4,251,207,5,7,221,255,5,9,255,0,6,5,237,183,6,6,192,225,6,8,221,0,7,6,170,0,7,7,170,0],"secondary":false},{"width":6,"bonus":170,"chr":"p","pixels":[0,3,237,255,0,4,255,255,0,5,187,255,0,6,203,255,0,7,255,255,0,8,221,255,0,9,221,255,0,10,221,255,1,3,255,255,1,4,240,36,1,5,255,0,1,6,187,0,1,7,211,41,1,8,254,239,1,9,221,0,1,10,221,0,1,11,221,0,2,3,255,255,2,4,255,0,2,8,255,255,2,9,238,0,3,3,237,255,3,4,255,34,3,8,237,255,3,9,255,0,4,4,253,240,4,5,255,255,4,6,255,255,4,7,237,255,4,9,238,0,5,5,239,18,5,6,255,17,5,7,255,0,5,8,238,0],"secondary":false},{"width":7,"bonus":165,"chr":"q","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,228,171,1,8,209,207,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,9,170,0,3,3,237,255,3,4,255,17,3,8,237,255,3,9,255,0,4,3,255,255,4,4,255,255,4,5,191,250,4,6,187,255,4,7,255,255,4,8,239,254,4,9,253,223,4,10,221,255,5,4,255,34,5,5,255,34,5,6,196,45,5,7,196,45,5,8,255,34,5,9,240,36,5,10,226,39,5,11,221,0],"secondary":false},{"width":4,"bonus":85,"chr":"r","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,3,187,255,1,4,244,213,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,187,0,2,5,204,0,3,4,255,0],"secondary":false},{"width":6,"bonus":100,"chr":"s","pixels":[0,4,187,255,1,3,255,255,1,5,250,243,1,8,255,255,2,3,255,255,2,4,255,0,2,5,155,196,2,6,246,123,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,6,245,247,3,7,164,132,3,8,255,255,3,9,255,0,4,4,255,17,4,7,250,191,4,9,255,0,5,8,187,0],"secondary":false},{"width":5,"bonus":80,"chr":"t","pixels":[1,2,221,255,1,3,255,255,1,4,235,240,1,5,221,255,1,6,221,255,1,7,169,255,2,3,255,255,2,4,255,34,2,5,226,39,2,6,226,39,2,7,232,93,2,8,249,243,3,4,255,0,3,8,187,209,3,9,238,0,4,9,153,0],"secondary":false},{"width":6,"bonus":135,"chr":"u","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,169,255,1,4,211,41,1,5,226,39,1,6,226,39,1,7,232,93,1,8,249,243,2,8,255,255,2,9,238,0,3,8,203,255,3,9,255,0,4,3,203,255,4,4,221,255,4,5,221,255,4,6,203,255,4,7,255,255,4,8,228,247,4,9,204,0,5,4,211,41,5,5,226,39,5,6,226,39,5,7,211,41,5,8,255,34,5,9,221,0],"secondary":false},{"width":6,"bonus":95,"chr":"v","pixels":[0,3,237,255,1,4,247,141,1,5,245,247,1,6,203,255,2,6,241,54,2,7,255,255,2,8,255,255,3,5,153,255,3,6,255,255,3,7,173,226,3,8,255,51,3,9,255,0,4,3,237,255,4,4,203,255,4,6,153,0,4,7,255,0,4,8,153,0,5,4,238,0,5,5,204,0],"secondary":false},{"width":10,"bonus":170,"chr":"w","pixels":[1,3,153,255,1,4,243,249,1,5,187,255,2,4,153,0,2,5,243,71,2,6,228,171,2,7,243,249,2,8,187,255,3,6,217,239,3,7,248,244,3,8,248,157,3,9,187,0,4,3,169,255,4,4,255,255,4,7,204,0,4,8,238,0,4,9,153,0,5,4,244,231,5,5,255,221,5,6,191,159,6,5,223,19,6,6,237,128,6,7,255,255,6,8,223,253,7,6,239,254,7,7,227,229,7,8,255,119,7,9,221,0,8,3,237,255,8,4,203,255,8,7,238,0,8,8,204,0,9,4,238,0,9,5,204,0],"secondary":false},{"width":6,"bonus":95,"chr":"x","pixels":[0,8,169,255,1,3,169,255,1,4,224,232,1,7,221,255,1,9,170,0,2,4,193,90,2,5,255,255,2,6,240,253,2,8,221,0,3,4,255,255,3,5,155,196,3,6,255,187,3,7,250,191,4,3,221,255,4,5,255,0,4,7,209,104,4,8,255,255,5,4,221,0,5,9,255,0],"secondary":false},{"width":6,"bonus":110,"chr":"y","pixels":[0,3,255,255,0,4,153,255,0,11,221,255,1,4,255,85,1,5,234,222,1,6,228,247,1,11,196,243,2,6,207,21,2,7,246,194,2,8,255,255,2,9,237,255,3,6,237,255,3,7,191,250,3,8,205,85,3,9,255,0,3,10,238,0,4,3,203,255,4,4,221,255,4,7,238,0,4,8,187,0,5,4,204,0,5,5,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"z","pixels":[0,3,153,255,0,8,203,255,1,3,255,255,1,4,153,0,1,7,221,255,1,8,255,255,1,9,204,0,2,3,255,255,2,4,255,0,2,6,255,255,2,8,255,255,2,9,255,0,3,3,255,255,3,4,254,171,3,5,169,255,3,7,255,0,3,8,255,255,3,9,255,0,4,3,255,255,4,4,255,119,4,5,170,0,4,6,170,0,4,8,255,255,4,9,255,0,5,4,255,0,5,9,255,0],"secondary":false},{"width":8,"bonus":155,"chr":"A","pixels":[0,8,153,255,1,6,221,255,1,7,237,255,1,9,153,0,2,3,169,255,2,4,255,255,2,5,187,255,2,6,255,255,2,7,221,0,2,8,238,0,3,1,255,255,3,2,255,255,3,4,170,0,3,5,255,0,3,6,255,255,3,7,255,0,4,2,255,255,4,3,254,239,4,4,184,189,4,6,255,255,4,7,255,0,5,3,255,34,5,4,247,141,5,5,255,255,5,6,255,255,5,7,255,102,6,6,255,85,6,7,255,187,6,8,255,255,7,8,187,0,7,9,255,0],"secondary":false},{"width":7,"bonus":225,"chr":"B","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,4,255,255,2,5,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,1,221,255,4,2,255,85,4,4,255,255,4,5,254,171,4,8,203,255,4,9,255,0,5,2,243,178,5,3,198,219,5,5,255,102,5,6,232,205,5,7,180,217,5,9,204,0,6,3,170,0,6,4,170,0,6,7,187,0,6,8,153,0],"secondary":false},{"width":9,"bonus":155,"chr":"C","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,3,153,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,224,232,2,1,169,255,2,3,221,0,2,4,153,0,2,7,194,135,2,8,237,183,3,1,255,255,3,2,170,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,169,255,6,2,255,102,6,8,169,255,6,9,255,0,7,2,181,48,7,9,170,0],"secondary":false},{"width":8,"bonus":200,"chr":"D","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,8,255,255,3,9,255,0,4,1,203,255,4,2,255,68,4,8,203,255,4,9,255,0,5,2,248,227,5,3,168,207,5,7,221,255,5,9,204,0,6,3,237,128,6,4,223,214,6,5,205,233,6,6,155,196,6,8,221,0,7,5,187,0,7,6,187,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,1,153,255,4,2,255,0,4,6,255,0,4,8,221,255,4,9,255,0,5,2,153,0,5,9,221,0],"secondary":false},{"width":6,"bonus":135,"chr":"F","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,2,255,0,4,6,255,0],"secondary":false},{"width":9,"bonus":200,"chr":"G","pixels":[0,4,169,255,0,5,187,255,1,2,203,255,1,3,153,255,1,5,193,90,1,6,224,155,1,7,237,238,2,1,169,255,2,3,204,0,2,4,153,0,2,7,175,124,2,8,246,194,3,1,255,255,3,2,170,0,3,8,255,255,3,9,187,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,237,255,5,9,255,0,6,1,169,255,6,2,255,85,6,5,255,255,6,7,153,255,6,8,169,255,6,9,238,0,7,2,175,25,7,5,153,255,7,6,255,221,7,7,225,251,7,8,234,222,7,9,170,0,8,6,153,0,8,7,221,0,8,8,221,0,8,9,204,0],"secondary":false},{"width":8,"bonus":200,"chr":"H","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,5,255,255,2,6,255,0,3,5,255,255,3,6,255,0,4,5,255,255,4,6,255,0,5,5,255,255,5,6,255,34,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,255,221,6,7,225,251,6,8,210,247,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[0,1,191,255,0,8,191,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,191,0,2,1,191,255,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,0,2,8,255,191,2,9,255,0,3,2,192,0,3,9,191,0],"secondary":false},{"width":6,"bonus":130,"chr":"J","pixels":[0,6,153,255,0,7,153,255,1,7,194,135,1,8,234,222,2,1,221,255,2,8,255,255,2,9,204,0,3,1,255,255,3,2,226,39,3,8,203,255,3,9,255,0,4,1,203,255,4,2,255,221,4,3,225,251,4,4,225,251,4,5,225,251,4,6,225,251,4,7,166,235,4,9,204,0,5,2,204,0,5,3,221,0,5,4,221,0,5,5,221,0,5,6,221,0,5,7,221,0,5,8,153,0],"secondary":false},{"width":7,"bonus":155,"chr":"K","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,255,255,2,5,255,102,3,3,221,255,3,5,254,171,3,6,224,232,4,1,203,255,4,2,153,255,4,4,221,0,4,6,193,90,4,7,251,242,4,8,173,226,5,2,204,0,5,3,153,0,5,8,247,141,5,9,153,0],"secondary":false},{"width":6,"bonus":115,"chr":"L","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,8,255,255,2,9,255,0,3,8,255,255,3,9,255,0,4,8,255,255,4,9,255,0,5,9,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"M","pixels":[0,1,245,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,0,8,255,255,1,2,251,173,1,3,255,225,1,4,255,85,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,1,9,255,0,2,3,191,83,2,4,249,212,2,5,212,229,3,5,226,119,3,6,249,237,3,7,165,227,4,6,241,245,4,7,245,155,4,8,155,32,5,4,207,255,5,5,191,254,5,7,232,0,6,2,169,255,6,3,223,255,6,5,207,0,6,6,190,0,7,1,245,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,8,2,245,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"N","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,255,255,1,3,235,111,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,221,2,4,163,160,3,4,246,194,3,5,214,223,4,5,214,122,4,6,246,229,5,6,163,160,5,7,255,255,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,225,251,6,7,235,240,6,8,254,204,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":10,"bonus":200,"chr":"O","pixels":[0,4,187,255,0,5,169,255,1,2,203,255,1,3,153,255,1,5,205,85,1,6,226,192,1,7,224,232,2,1,153,255,2,3,204,0,2,4,153,0,2,7,209,145,2,8,234,167,3,1,255,255,3,2,153,0,3,8,255,255,3,9,153,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,153,255,6,2,255,102,6,8,153,255,6,9,255,0,7,2,234,222,7,3,194,201,7,6,169,255,7,7,203,255,7,9,153,0,8,3,225,116,8,4,228,209,8,5,192,225,8,7,170,0,8,8,204,0,9,5,187,0,9,6,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"P","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,1,187,255,4,2,255,136,4,5,187,255,4,6,255,0,5,2,224,155,5,3,239,236,5,6,187,0,6,4,221,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,235,240,2,1,187,255,2,3,221,0,2,7,187,116,2,8,243,178,3,1,255,255,3,2,187,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,237,255,5,2,255,0,5,8,237,255,5,9,255,0,6,2,251,207,6,7,255,255,6,9,238,0,7,3,255,255,7,4,203,255,7,5,221,255,7,6,255,255,7,7,155,196,7,8,254,204,8,4,255,17,8,5,207,21,8,6,221,0,8,7,255,0,8,9,204,0],"secondary":false},{"width":7,"bonus":180,"chr":"R","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,187,4,2,254,239,4,3,203,255,4,4,255,255,4,6,255,68,4,7,250,243,4,8,181,239,5,3,239,18,5,4,204,0,5,5,255,0,5,8,245,107,5,9,170,0],"secondary":false},{"width":6,"bonus":130,"chr":"S","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,1,255,255,2,2,204,0,2,4,198,219,2,5,232,93,2,8,255,255,2,9,238,0,3,1,255,255,3,2,255,0,3,5,255,255,3,8,255,255,3,9,255,0,4,1,169,255,4,2,255,68,4,5,160,217,4,6,255,221,4,7,237,255,4,9,255,0,5,2,170,0,5,7,223,19,5,8,238,0],"secondary":false},{"width":8,"bonus":125,"chr":"T","pixels":[0,1,255,255,1,1,255,255,1,2,255,0,2,1,255,255,2,2,255,34,3,1,255,255,3,2,255,221,3,3,225,251,3,4,225,251,3,5,225,251,3,6,225,251,3,7,225,251,3,8,210,247,4,1,255,255,4,2,255,0,4,3,221,0,4,4,221,0,4,5,221,0,4,6,221,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,255,255,5,2,255,0,6,2,255,0],"secondary":false},{"width":8,"bonus":165,"chr":"U","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,187,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,230,75,1,7,232,187,1,8,184,189,2,8,255,255,3,8,255,255,3,9,255,0,4,8,221,255,4,9,255,0,5,1,203,255,5,2,221,255,5,3,221,255,5,4,221,255,5,5,221,255,5,6,255,255,5,7,237,255,5,9,221,0,6,2,211,41,6,3,226,39,6,4,226,39,6,5,226,39,6,6,223,19,6,7,255,0,6,8,238,0],"secondary":false},{"width":7,"bonus":125,"chr":"V","pixels":[0,1,255,255,0,2,187,255,1,2,255,68,1,3,228,171,1,4,255,255,1,5,153,255,2,4,153,0,2,5,255,85,2,6,228,209,2,7,242,251,3,6,164,185,3,7,255,255,3,8,251,207,4,4,203,255,4,5,237,255,4,8,255,0,4,9,204,0,5,1,169,255,5,2,255,255,5,3,153,255,5,5,204,0,5,6,238,0,6,2,170,0,6,3,255,0,6,4,153,0],"secondary":false},{"width":10,"bonus":245,"chr":"W","pixels":[0,1,255,255,0,2,221,255,1,2,255,17,1,3,237,128,1,4,223,214,1,5,255,255,1,6,203,255,2,5,191,23,2,6,255,136,2,7,255,255,2,8,255,255,3,3,153,255,3,4,237,255,3,5,221,255,3,7,168,103,3,8,255,0,3,9,255,0,4,1,255,255,4,2,255,255,4,3,187,209,4,4,153,0,4,5,238,0,4,6,221,0,5,2,255,102,5,3,254,171,5,4,248,244,5,5,203,255,6,4,170,0,6,5,241,54,6,6,231,150,6,7,255,255,6,8,255,255,7,4,153,255,7,5,237,255,7,6,241,252,7,7,207,188,7,8,255,85,7,9,255,0,8,1,237,255,8,2,237,255,8,3,153,255,8,4,153,171,8,5,153,0,8,6,238,0,8,7,238,0,8,8,153,0,9,2,238,0,9,3,238,0,9,4,153,0],"secondary":false},{"width":7,"bonus":130,"chr":"X","pixels":[0,8,169,255,1,1,187,255,1,2,220,236,1,7,237,255,1,9,170,0,2,2,205,85,2,3,248,227,2,4,166,235,2,5,255,255,2,6,153,255,2,8,238,0,3,3,155,196,3,4,255,255,3,5,248,244,3,6,255,51,3,7,153,0,4,2,237,255,4,5,255,51,4,6,251,207,4,7,186,233,5,1,203,255,5,3,238,0,5,7,225,116,5,8,255,255,6,2,204,0,6,9,255,0],"secondary":false},{"width":7,"bonus":90,"chr":"Y","pixels":[0,1,169,255,1,2,249,243,2,3,248,157,2,4,255,255,3,4,241,234,3,5,254,204,3,6,232,243,3,7,225,251,3,8,210,247,4,3,255,255,4,5,221,0,4,6,204,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,237,255,5,4,255,0,6,2,238,0],"secondary":false},{"width":7,"bonus":140,"chr":"Z","pixels":[0,8,187,255,1,1,255,255,1,7,221,255,1,8,255,255,1,9,187,0,2,1,255,255,2,2,255,0,2,5,203,255,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,203,255,3,6,204,0,3,8,255,255,3,9,255,0,4,1,255,255,4,2,255,221,4,5,204,0,4,8,255,255,4,9,255,0,5,1,187,255,5,2,255,34,5,3,221,0,5,8,153,255,5,9,255,0,6,2,187,0,6,9,153,0],"secondary":false},{"width":7,"bonus":170,"chr":"0","pixels":[0,2,153,255,0,3,221,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,169,255,1,1,187,255,1,3,153,0,1,4,221,0,1,5,255,0,1,6,255,0,1,7,243,71,1,8,237,219,2,1,187,255,2,2,187,0,2,8,205,233,2,9,211,41,3,1,221,255,3,2,205,85,3,8,203,255,3,9,187,0,4,2,243,178,4,3,255,255,4,4,187,255,4,5,187,255,4,6,237,255,4,7,169,255,4,9,204,0,5,3,170,0,5,4,255,0,5,5,187,0,5,6,187,0,5,7,238,0,5,8,170,0],"secondary":false},{"width":7,"bonus":100,"chr":"1","pixels":[1,8,187,255,2,1,203,255,2,2,224,232,2,3,219,218,2,4,187,255,2,5,187,255,2,6,187,255,2,7,187,255,2,8,237,255,2,9,187,0,3,2,218,80,3,3,218,80,3,4,205,85,3,5,205,85,3,6,205,85,3,7,205,85,3,8,241,215,3,9,238,0,4,8,168,207,4,9,204,0],"secondary":false},{"width":7,"bonus":105,"chr":"2","pixels":[1,8,255,255,2,1,187,255,2,6,153,255,2,8,223,214,2,9,255,0,3,1,203,255,3,2,187,0,3,5,153,255,3,7,153,0,3,8,219,218,3,9,187,0,4,1,187,255,4,2,234,167,4,4,203,255,4,6,153,0,4,8,187,255,4,9,187,0,5,2,214,122,5,3,200,152,5,5,204,0,5,9,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"3","pixels":[0,8,203,255,1,1,187,255,1,8,191,250,1,9,204,0,2,1,187,255,2,2,196,45,2,4,187,255,2,5,174,150,2,8,203,255,2,9,187,0,3,2,246,229,3,3,210,247,3,5,241,215,3,6,173,175,3,7,169,255,3,9,204,0,4,3,227,57,4,4,204,0,4,6,228,133,4,7,174,150,4,8,170,0],"secondary":false},{"width":7,"bonus":150,"chr":"4","pixels":[0,6,237,255,1,4,187,255,1,6,219,218,1,7,238,0,2,3,169,255,2,5,187,0,2,6,219,218,2,7,187,0,3,1,187,255,3,2,153,255,3,3,155,112,3,4,193,90,3,6,203,255,3,7,205,85,4,1,187,255,4,2,237,201,4,3,228,209,4,4,205,233,4,5,205,233,4,6,242,251,4,7,241,198,4,8,205,233,5,2,187,0,5,3,187,0,5,4,187,0,5,5,187,0,5,6,224,155,5,7,238,0,5,8,187,0,5,9,187,0],"secondary":false},{"width":7,"bonus":130,"chr":"5","pixels":[1,1,237,255,1,2,187,255,1,3,187,255,1,4,187,255,1,8,207,251,2,1,187,255,2,2,238,0,2,3,187,0,2,4,237,201,2,5,187,0,2,8,187,255,2,9,204,0,3,1,187,255,3,2,187,0,3,4,203,255,3,5,191,23,3,8,203,255,3,9,187,0,4,2,187,0,4,5,251,242,4,6,191,250,4,7,221,255,4,9,204,0,5,6,243,71,5,7,191,23,5,8,221,0],"secondary":false},{"width":7,"bonus":150,"chr":"6","pixels":[0,3,169,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,153,255,1,2,187,255,1,4,209,145,1,5,255,68,1,6,255,0,1,7,246,123,1,8,228,209,2,1,203,255,2,3,187,0,2,4,200,238,2,8,219,218,2,9,187,0,3,1,187,255,3,2,204,0,3,4,203,255,3,5,205,85,3,8,187,255,3,9,187,0,4,2,187,0,4,5,248,227,4,6,255,255,4,7,187,255,4,9,187,0,5,6,221,0,5,7,255,0,5,8,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"7","pixels":[0,1,187,255,1,1,187,255,1,2,187,0,1,8,203,255,2,1,187,255,2,2,187,0,2,6,237,255,2,7,153,255,2,9,204,0,3,1,187,255,3,2,205,85,3,3,153,255,3,4,221,255,3,7,238,0,3,8,153,0,4,1,255,255,4,2,237,201,4,4,153,0,4,5,221,0,5,2,255,0,5,3,187,0],"secondary":false},{"width":7,"bonus":165,"chr":"8","pixels":[1,2,237,255,1,3,221,255,1,6,203,255,1,7,228,247,2,1,203,255,2,3,241,54,2,4,248,209,2,5,186,233,2,7,207,21,2,8,250,226,3,1,187,255,3,2,204,0,3,4,186,233,3,5,221,98,3,6,170,0,3,8,191,250,3,9,221,0,4,1,221,255,4,2,209,104,4,4,169,255,4,5,237,219,4,8,187,255,4,9,187,0,5,2,243,178,5,3,187,209,5,5,204,128,5,6,251,242,5,7,240,253,5,9,187,0,6,3,170,0,6,4,153,0,6,7,238,0,6,8,238,0],"secondary":false},{"width":7,"bonus":160,"chr":"9","pixels":[1,2,221,255,1,3,191,250,1,4,242,251,1,8,153,255,2,1,203,255,2,3,221,0,2,4,191,23,2,5,253,223,2,8,191,250,2,9,153,0,3,1,187,255,3,2,204,0,3,5,191,250,3,6,221,0,3,8,203,255,3,9,187,0,4,1,187,255,4,2,218,139,4,6,200,65,4,7,169,255,4,9,204,0,5,2,228,171,5,3,245,247,5,4,255,255,5,5,255,255,5,6,223,214,5,8,170,0,6,3,153,0,6,4,238,0,6,5,255,0,6,6,255,0,6,7,187,0],"secondary":false},{"width":8,"bonus":130,"chr":"%","pixels":[0,3,255,255,0,8,255,255,1,2,255,255,1,4,255,255,1,7,255,255,1,9,255,0,2,3,255,255,2,5,255,41,2,6,255,255,2,8,255,0,3,4,255,41,3,5,255,255,3,7,255,0,4,4,255,255,4,6,255,92,4,7,255,255,5,3,255,255,5,5,255,0,5,6,255,255,5,8,255,255,6,2,255,255,6,4,255,0,6,7,255,255,6,9,255,0,7,3,255,0,7,8,255,0],"secondary":false},{"width":4,"bonus":80,"chr":"/","pixels":[0,7,153,255,0,8,237,255,0,9,221,255,1,4,187,255,1,5,237,255,1,6,169,255,1,8,153,0,1,9,238,0,1,10,221,0,2,1,221,255,2,2,221,255,2,5,187,0,2,6,238,0,2,7,170,0,3,2,221,0,3,3,221,0],"secondary":false},{"width":7,"bonus":110,"chr":"+","pixels":[0,5,221,255,1,5,255,255,1,6,221,0,2,5,255,255,2,6,255,34,3,2,153,255,3,3,223,253,3,4,225,251,3,5,255,255,3,6,255,221,3,7,225,251,3,8,210,247,4,3,153,0,4,4,221,0,4,5,255,255,4,6,255,0,4,7,221,0,4,8,221,0,4,9,204,0,5,5,255,255,5,6,255,0,6,6,255,0],"secondary":false},{"width":5,"bonus":75,"chr":"?","pixels":[0,1,169,255,1,1,255,255,1,2,170,0,1,6,221,255,1,8,255,255,2,1,255,255,2,2,255,0,2,5,169,255,2,7,221,0,2,9,255,0,3,2,255,255,3,3,221,255,3,6,170,0,4,3,255,17,4,4,221,0],"secondary":false},{"width":2,"bonus":70,"chr":"!","pixels":[0,1,169,255,0,2,187,255,0,3,187,255,0,4,187,255,0,5,187,255,0,6,169,255,0,8,255,255,1,2,181,48,1,3,196,45,1,4,196,45,1,5,196,45,1,6,196,45,1,7,170,0,1,9,255,0],"secondary":false},{"width":8,"bonus":230,"chr":"@","pixels":[0,4,255,255,0,5,255,255,0,6,221,255,0,7,255,255,0,8,187,255,1,3,221,255,1,5,255,0,1,6,255,34,1,7,221,0,1,8,255,68,1,9,250,243,2,2,221,255,2,4,232,93,2,5,255,255,2,6,237,255,2,7,255,255,2,10,248,157,3,2,255,255,3,3,221,0,3,4,255,255,3,6,255,0,3,7,241,54,3,8,254,204,3,10,214,223,3,11,153,0,4,2,237,255,4,3,255,0,4,4,255,255,4,5,255,0,4,8,255,255,4,9,204,0,4,11,187,0,5,3,253,240,5,4,255,255,5,5,255,221,5,6,221,255,5,7,221,255,5,8,237,255,5,9,255,0,6,4,240,36,6,5,255,34,6,6,226,39,6,7,226,39,6,8,250,226,6,9,238,0,7,9,221,0],"secondary":false},{"width":8,"bonus":200,"chr":"#","pixels":[0,6,255,255,1,3,255,255,1,6,255,255,1,7,254,171,1,8,237,255,2,1,169,255,2,2,237,255,2,3,255,255,2,4,255,221,2,5,175,247,2,6,255,255,2,7,255,85,2,8,170,0,2,9,238,0,3,2,170,0,3,3,255,255,3,4,255,0,3,5,221,0,3,6,255,255,3,7,255,0,4,3,255,255,4,4,255,153,4,5,203,255,4,6,255,255,4,7,254,239,4,8,187,255,5,1,255,255,5,2,187,255,5,3,255,255,5,4,255,85,5,5,159,27,5,6,255,255,5,7,255,0,5,8,238,0,5,9,187,0,6,2,255,0,6,3,255,255,6,4,255,0,6,7,255,0,7,4,255,0],"secondary":false},{"width":6,"bonus":130,"chr":"$","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,0,203,255,2,1,237,255,2,2,204,0,2,4,176,197,2,5,237,128,2,8,240,253,2,9,251,207,3,1,251,242,3,2,239,18,3,5,247,245,3,6,164,132,3,8,255,255,3,9,240,36,3,10,204,0,4,2,240,36,4,6,249,174,4,7,198,219,4,9,255,0,5,7,170,0,5,8,170,0],"secondary":false},{"width":6,"bonus":75,"chr":"^","pixels":[0,4,153,255,0,5,237,255,1,2,203,255,1,3,221,255,1,5,153,0,1,6,238,0,2,1,221,255,2,2,230,245,2,3,218,80,2,4,221,0,3,2,227,57,3,3,246,194,3,4,230,245,4,4,187,0,4,5,239,145],"secondary":false},{"width":6,"bonus":35,"chr":"~","pixels":[1,5,255,255,2,5,221,255,2,6,255,51,3,6,250,226,4,5,203,255,4,7,221,0,5,6,204,0],"secondary":false},{"width":7,"bonus":175,"chr":"&","pixels":[0,6,187,255,1,2,237,255,1,3,255,255,1,4,191,250,1,5,187,255,1,7,224,155,1,8,223,214,2,1,255,255,2,3,238,0,2,4,255,255,2,5,191,23,2,6,187,0,2,8,255,255,2,9,187,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,2,255,0,4,4,255,255,4,5,255,34,4,8,187,255,4,9,255,0,5,3,203,255,5,4,255,255,5,5,255,221,5,6,196,243,5,7,155,196,5,9,187,0,6,4,234,167,6,5,255,0,6,6,221,0,6,7,187,0],"secondary":false},{"width":6,"bonus":70,"chr":"*","pixels":[0,2,169,255,1,2,169,255,1,3,237,219,1,4,255,255,2,1,203,255,2,2,240,253,2,3,255,255,2,4,228,133,2,5,255,0,3,2,237,183,3,3,245,107,3,4,255,153,4,3,170,0,4,5,153,0],"secondary":false},{"width":4,"bonus":100,"chr":"(","pixels":[0,3,173,255,0,4,239,255,0,5,253,255,0,6,229,255,0,7,171,255,1,1,193,255,1,2,203,255,1,4,188,64,1,5,241,25,1,6,252,46,1,7,240,112,1,8,238,218,1,9,210,232,2,0,209,255,2,2,194,2,2,3,204,0,2,9,223,111,2,10,245,224,3,1,210,0,3,11,216,0],"secondary":false},{"width":4,"bonus":75,"chr":")","pixels":[1,0,211,255,1,10,215,255,2,1,244,203,2,2,222,234,2,8,203,255,2,9,191,255,2,11,216,0,3,2,213,94,3,3,238,186,3,4,246,248,3,5,253,255,3,6,231,253,3,7,186,234,3,9,203,1,3,10,191,0],"secondary":false},{"width":7,"bonus":60,"chr":"_","pixels":[0,9,153,255,1,9,255,255,1,10,153,0,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,255,255,5,10,255,0,6,10,255,0],"secondary":false},{"width":4,"bonus":30,"chr":"-","pixels":[0,5,255,255,1,5,255,255,1,6,255,0,2,5,255,255,2,6,255,0,3,6,255,0],"secondary":true},{"width":8,"bonus":100,"chr":"=","pixels":[0,4,255,255,0,6,255,255,1,4,255,255,1,5,255,0,1,6,255,255,1,7,255,0,2,4,255,255,2,5,255,0,2,6,255,255,2,7,255,0,3,4,255,255,3,5,255,0,3,6,255,255,3,7,255,0,4,4,255,255,4,5,255,0,4,6,255,255,4,7,255,0,5,5,255,0,5,7,255,0],"secondary":false},{"width":3,"bonus":105,"chr":"[","pixels":[0,0,203,255,0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,0,237,255,1,1,211,41,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,252,241,1,9,204,0,2,1,238,0,2,9,238,0],"secondary":false},{"width":3,"bonus":105,"chr":"]","pixels":[0,0,237,255,0,8,237,255,1,0,203,255,1,1,253,223,1,2,225,251,1,3,225,251,1,4,225,251,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,1,9,238,0,2,1,204,0,2,2,221,0,2,3,221,0,2,4,221,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0],"secondary":false},{"width":5,"bonus":90,"chr":"{","pixels":[0,5,153,255,1,2,169,255,1,3,221,255,1,4,221,255,1,5,203,255,1,6,255,255,1,7,221,255,1,8,169,255,2,1,237,255,2,3,181,48,2,4,223,19,2,5,221,0,2,6,207,21,2,7,255,34,2,8,232,93,2,9,249,243,3,2,238,0,3,10,238,0],"secondary":false},{"width":5,"bonus":90,"chr":"}","pixels":[1,1,237,255,1,9,237,255,2,2,249,174,2,3,232,243,2,4,225,251,2,5,207,251,2,6,255,255,2,7,223,253,2,8,181,239,2,10,238,0,3,3,170,0,3,4,221,0,3,5,241,162,3,6,204,0,3,7,255,0,3,8,221,0,3,9,170,0,4,6,153,0],"secondary":false},{"width":3,"bonus":20,"chr":":","pixels":[1,3,255,255,1,7,255,255,2,4,255,0,2,8,255,0],"secondary":true},{"width":3,"bonus":40,"chr":";","pixels":[0,9,201,255,1,3,255,255,1,7,241,255,1,8,255,255,1,10,201,0,2,4,255,0,2,8,241,0,2,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":"\\"","pixels":[0,1,255,255,0,2,255,255,1,2,255,0,1,3,255,0,2,1,255,255,2,2,255,255],"secondary":true},{"width":2,"bonus":20,"chr":"\'","pixels":[0,1,255,255,0,2,177,255,1,2,255,30,1,3,177,0],"secondary":true},{"width":7,"bonus":70,"chr":"<","pixels":[0,5,203,255,1,5,255,255,1,6,228,133,2,4,237,255,2,6,254,239,3,4,169,255,3,5,238,0,3,6,175,247,3,7,243,89,4,3,221,255,4,5,170,0,4,7,244,231,5,4,221,0,5,8,221,0],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[0,3,203,255,0,7,203,255,1,4,228,133,1,7,187,255,1,8,204,0,2,4,247,245,2,6,255,255,2,8,187,0,3,4,175,247,3,5,248,157,3,6,203,255,3,7,255,0,4,5,255,255,4,6,173,75,4,7,204,0,5,6,255,0],"secondary":false},{"width":5,"bonus":70,"chr":"\\\\","pixels":[1,1,153,255,1,2,255,255,1,3,203,255,2,2,153,0,2,3,255,51,2,4,231,150,2,5,255,255,2,6,203,255,3,6,255,34,3,7,231,150,3,8,255,255,3,9,207,251,4,9,255,0,4,10,204,0],"secondary":false},{"width":2,"bonus":10,"chr":".","pixels":[0,8,255,255,1,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":",","pixels":[0,9,205,255,1,7,205,255,1,8,255,255,1,10,205,0,2,8,205,0,2,9,255,0],"secondary":true},{"width":3,"bonus":100,"chr":"|","pixels":[0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,221,255,0,9,221,255,0,10,203,255,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,226,39,1,10,226,39,1,11,204,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":8}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_37481__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_37481__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_37481__("./src/targetmob/index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "../node_modules/nanoid/index.browser.js":
/*!***********************************************!*\
  !*** ../node_modules/nanoid/index.browser.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),
/* harmony export */   customRandom: () => (/* binding */ customRandom),
/* harmony export */   nanoid: () => (/* binding */ nanoid),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   urlAlphabet: () => (/* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_0__.urlAlphabet)
/* harmony export */ });
/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-alphabet/index.js */ "../node_modules/nanoid/url-alphabet/index.js");


let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) => {
  let id = ''
  let bytes = crypto.getRandomValues(new Uint8Array(size))
  while (size--) {
    id += _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_0__.urlAlphabet[bytes[size] & 63]
  }
  return id
}


/***/ }),

/***/ "../node_modules/nanoid/url-alphabet/index.js":
/*!****************************************************!*\
  !*** ../node_modules/nanoid/url-alphabet/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   urlAlphabet: () => (/* binding */ urlAlphabet)
/* harmony export */ });
const urlAlphabet =
  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});